[{"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js":"1","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js":"2","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js":"3","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx":"4","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js":"5","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js":"6","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js":"7","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js":"8","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js":"9","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js":"10","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js":"11","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js":"12","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js":"13","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx":"14","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx":"15","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx":"16","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js":"17","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Content\\content.jsx":"18"},{"size":1126,"mtime":1608319108000,"results":"19","hashOfConfig":"20"},{"size":2219,"mtime":1608836615355,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":6170,"mtime":1608834900008,"results":"23","hashOfConfig":"20"},{"size":6972,"mtime":1608694190665,"results":"24","hashOfConfig":"20"},{"size":684,"mtime":1608669352967,"results":"25","hashOfConfig":"20"},{"size":1163,"mtime":1608218738959,"results":"26","hashOfConfig":"20"},{"size":1200,"mtime":1608739402995,"results":"27","hashOfConfig":"20"},{"size":163,"mtime":1608697386191,"results":"28","hashOfConfig":"20"},{"size":4811,"mtime":1608413936882,"results":"29","hashOfConfig":"20"},{"size":1673,"mtime":1608319107999,"results":"30","hashOfConfig":"20"},{"size":410,"mtime":1608319108000,"results":"31","hashOfConfig":"20"},{"size":106,"mtime":1608319107999,"results":"32","hashOfConfig":"20"},{"size":25342,"mtime":1608769856512,"results":"33","hashOfConfig":"20"},{"size":544,"mtime":1608835000118,"results":"34","hashOfConfig":"20"},{"size":5476,"mtime":1608835764088,"results":"35","hashOfConfig":"20"},{"size":309,"mtime":1608761713160,"results":"36","hashOfConfig":"20"},{"size":553,"mtime":1608769718476,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1vnvna8",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js",[],["79","80"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js",["81"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js",["82"],"import { API_CONSTANTS, HEADER } from \"../constants/apiConstants\";\r\nimport RequesterAxios from \"../requester/requester\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nconst callApiLogin = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.LOGIN,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomers = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllPersons = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PERSON_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllEndorsement = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_ENDORSEMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRegisterUser = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllVerifyCode = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.VERIFY_CODE_REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport {\r\n  callApiLogin,\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetAllRegisterUser,\r\n  callGetAllVerifyCode,\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js",["83"],"import { applyMiddleware, compose, createStore } from 'redux';\r\nimport storageSession from 'redux-persist/lib/storage/session';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer, PURGE } from 'redux-persist';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createBrowserHistory } from 'history';\r\nimport { routerMiddleware } from 'react-router-redux';\r\n// TO DO: import immutableTransform from 'redux-persist-transform-immutable';\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './RootSaga';\r\n\r\nexport const history = createBrowserHistory();\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default function configureStore(preloadedState) {\r\n  /* eslint-disable no-underscore-dangle */\r\n  const composeEnhancers =\r\n    process.env.NODE_ENV !== 'production' &&\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      : compose;\r\n  /* eslint-enable */\r\n\r\n  const persistConfig = {\r\n    // TO DO:\r\n    // transforms: [immutableTransform()],\r\n    key: 'root',\r\n    storage: storageSession,\r\n    blacklist: [],\r\n  };\r\n\r\n  const rootReducerMiddleware = (state, action) =>\r\n    rootReducer(state, action, persistConfig);\r\n\r\n  const persistedReducer = persistReducer(persistConfig, rootReducerMiddleware);\r\n\r\n  const store = createStore(\r\n    persistedReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(sagaMiddleware, routerMiddleware(history), thunk),\r\n    ),\r\n  );\r\n\r\n  store.runSaga = sagaMiddleware.run(rootSaga);\r\n\r\n  const persistor = persistStore(store, {});\r\n\r\n  return { store, persistor };\r\n}\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js",["84"],"import { combineReducers } from \"redux\";\r\nimport { purgeStoredState } from \"redux-persist\";\r\n\r\nconst appReducers = combineReducers({});\r\n\r\nexport default (state, action, persistConfig) => {\r\n  // Reset to initialState\r\n  if (action.type === \"PURGE\") {\r\n    purgeStoredState(persistConfig);\r\n    // Default or Current State\r\n    return appReducers({}, action);\r\n  }\r\n\r\n  return appReducers(state, action);\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx",["85"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Radio, Select, Input } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  LockOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetAllRegisterUser,\r\n  callGetAllVerifyCode,\r\n} from \"../../utils/actions/actions\";\r\nimport logo from \"../../assets/img/logo.png\";\r\nimport admiration from \"../../assets/icons/exclaim.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Register = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomers,\r\n    callGetAllPersons,\r\n    callGetAllEndorsement,\r\n    callGetAllRegisterUser,\r\n    callGetAllVerifyCode,\r\n  } = props;\r\n  const [userType, setUserType] = useState(1);\r\n  const [userCustomer, setUserCustomer] = useState([]);\r\n  const [selectuserCustomer, setSelectUserCustomer] = useState(1);\r\n  const [userPerson, setUserPerson] = useState([]);\r\n  const [userEndorsement, setUserEndorsement] = useState([]);\r\n  const [configComponents, setConfigComponents] = useState({});\r\n  const [verifyPassword, setVerifyPassword] = useState(null);\r\n  const [dataForm, setDataForm] = useState({\r\n    idPersonType: null,\r\n    idEndorsement: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    username: null,\r\n    password: null,\r\n  });\r\n  const copyErrors = {\r\n    errorPass: {\r\n      error: false,\r\n      message: \"Las contraseñas no coinciden\",\r\n      errorEmpty: false,\r\n      messageEmpty: \"La contraseña es requerida\",\r\n    },\r\n    errorGivenName: {\r\n      error: false,\r\n      message: \"El Nombre o Razón social es requerido\",\r\n    },\r\n    errorUserName: {\r\n      error: false,\r\n      message: \"El correo electrónico es requerido\",\r\n      errorFormat: false,\r\n      messageFormatError: \"El correo electronico no es valido\",\r\n    },\r\n    errorPersonType: {\r\n      error: false,\r\n      message: \"El tipo de persona es requerido\",\r\n    },\r\n  };\r\n  const [errorsRegister, setErrorsRegister] = useState(copyErrors);\r\n  const [errorFormulary, setErrorFormulary] = useState(false);\r\n  const [idRequestSignUp, setIdRequestSignUp] = useState(null);\r\n  const [codeVerify, setCodeVerify] = useState({\r\n    value1: \"\",\r\n    value2: \"\",\r\n    value3: \"\",\r\n    value4: \"\",\r\n    value5: \"\",\r\n    value6: \"\",\r\n  });\r\n  const errorCatchBase = {\r\n    error: false,\r\n    message: \"\",\r\n  };\r\n  const [errorBase, setErrorBase] = useState(errorCatchBase);\r\n\r\n  const handlerCallApiCustomer = async (data) => {\r\n    try {\r\n      const response = await callGetAllCustomers(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserCustomer(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiPersonTypes = async (data) => {\r\n    try {\r\n      const response = await callGetAllPersons(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserPerson(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiEndorsement = async (data) => {\r\n    try {\r\n      const response = await callGetAllEndorsement(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserEndorsement(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiRegister = async (data) => {\r\n    try {\r\n      const response = await callGetAllRegisterUser(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : \"\";\r\n      setIdRequestSignUp(\r\n        isEmpty(responseResult) === false ? responseResult.idRequestSignUp : \"\"\r\n      );\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallVerifyCode = async (data) => {\r\n    try {\r\n      await callGetAllVerifyCode(data);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerVerifyInformation = async (data) => {\r\n    const emailRegex = /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i;\r\n    let objectErrors = errorsRegister;\r\n    let validatePass = true;\r\n    let validateIdPerson = true;\r\n    let validateGivenName = true;\r\n    let validateUserName = true;\r\n    const validateTypeEmail =\r\n      isNil(data.username) === false ? emailRegex.test(data.username) : false;\r\n\r\n    if (\r\n      isEmpty(data.password) === false &&\r\n      isEmpty(data.verifyPassword) === false &&\r\n      data.password === data.verifyPassword\r\n    ) {\r\n      validatePass = true;\r\n    } else if (isEmpty(data.password) || isEmpty(data.verifyPassword)) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, errorEmpty: true },\r\n      };\r\n      validatePass = false;\r\n    } else if (data.password !== data.verifyPassword) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, error: true },\r\n      };\r\n      validatePass = false;\r\n    }\r\n\r\n    if (isNil(data.idPersonType) === false) {\r\n      validateIdPerson = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPersonType: { ...objectErrors.errorPersonType, error: true },\r\n      };\r\n      validateIdPerson = false;\r\n    }\r\n\r\n    if (isNil(data.givenName) === false && isEmpty(data.givenName) === false) {\r\n      validateGivenName = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorGivenName: { ...objectErrors.errorGivenName, error: true },\r\n      };\r\n      validateGivenName = false;\r\n    }\r\n\r\n    if (\r\n      isNil(data.username) === false &&\r\n      isEmpty(data.username) === false &&\r\n      validateTypeEmail === true\r\n    ) {\r\n      validateUserName = true;\r\n    } else {\r\n      if (isEmpty(data.username) || isEmpty(data.username)) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, error: true },\r\n        };\r\n      } else if (validateTypeEmail === false) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, errorFormat: true },\r\n        };\r\n      }\r\n      validateUserName = false;\r\n    }\r\n\r\n    setErrorsRegister(objectErrors);\r\n\r\n    return (\r\n      validatePass && validateIdPerson && validateGivenName && validateUserName\r\n    );\r\n  };\r\n\r\n  const selectPerson = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> ¿Qué te trae por aquí? </h1>\r\n          <div className=\"login_inputs_form\">\r\n            <Radio.Group\r\n              name=\"radiogroup\"\r\n              value={selectuserCustomer}\r\n              defaultValue={1}\r\n              onChange={(e) => {\r\n                setSelectUserCustomer(e.target.value);\r\n              }}\r\n            >\r\n              {isEmpty(userCustomer) === false &&\r\n                userCustomer.map((row) => {\r\n                  return (\r\n                    <p className=\"visible\" style={{ marginBottom: \"32px\" }}>\r\n                      <Radio value={row.id}> {row.text} </Radio>\r\n                    </p>\r\n                  );\r\n                })}\r\n            </Radio.Group>\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  await handlerCallApiPersonTypes({\r\n                    idType: 1,\r\n                    idCustomerType: selectuserCustomer,\r\n                  });\r\n                  await handlerCallApiEndorsement({\r\n                    idType: 1,\r\n                  });\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const selectForm = (\r\n    <div className=\"login_main\" style={{ height: \"100%\" }}>\r\n      <div className=\"login_card_form large\">\r\n        <div className=\"register_holder\">\r\n          <div className=\"login_top_form\">\r\n            <h1> Completa tu perfil </h1>\r\n            <div\r\n              className={`error_login_incorrect_data ${\r\n                errorFormulary === false ? \"hide\" : \"visible\"\r\n              }`}\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              {errorBase.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorBase.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorGivenName.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorGivenName.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorPass.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorPass.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorPass.errorEmpty && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorPass.messageEmpty}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorPersonType.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorPersonType.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorUserName.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorUserName.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorUserName.errorFormat && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorUserName.messageFormatError}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <label className=\"fieldset_title\">Información personal</label>\r\n            <div className=\"register_row half\">\r\n              <Select\r\n                placeholder=\"Tipo de Persona\"\r\n                onChange={(value, option) => {\r\n                  const configureOption = option.onClick();\r\n                  setConfigComponents(configureOption);\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                  setDataForm({ ...dataForm, idPersonType: value });\r\n                }}\r\n              >\r\n                {isEmpty(userPerson) === false &&\r\n                  userPerson.map((row) => {\r\n                    return (\r\n                      <Option\r\n                        value={row.id}\r\n                        onClick={() => {\r\n                          return isNil(row) === false &&\r\n                            isNil(row.jsonProperties) === false\r\n                            ? JSON.parse(row.jsonProperties)\r\n                            : {};\r\n                        }}\r\n                      >\r\n                        {row.text}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n              </Select>\r\n              {isEmpty(configComponents) === false &&\r\n                configComponents.idEndorsement && (\r\n                  <Select\r\n                    placeholder=\"Aval\"\r\n                    onChange={(value) => {\r\n                      setDataForm({ ...dataForm, idEndorsement: value });\r\n                    }}\r\n                  >\r\n                    {isEmpty(userEndorsement) === false &&\r\n                      userEndorsement.map((row) => {\r\n                        return <Option value={row.id}>{row.text}</Option>;\r\n                      })}\r\n                  </Select>\r\n                )}\r\n            </div>\r\n            <div className=\"register_row\">\r\n              <Input\r\n                value={dataForm.givenName}\r\n                suffix={<UserOutlined />}\r\n                placeholder={\r\n                  configComponents.lastName ? \"Nombre(s):\" : \"Razón Social\"\r\n                }\r\n                onChange={(e) => {\r\n                  setDataForm({ ...dataForm, givenName: e.target.value });\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"register_row half\">\r\n              {isEmpty(configComponents) === false &&\r\n                configComponents.lastName && (\r\n                  <Input\r\n                    value={dataForm.lastName}\r\n                    suffix={<UserOutlined />}\r\n                    placeholder=\"Primer Apellido\"\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, lastName: e.target.value });\r\n                    }}\r\n                  />\r\n                )}\r\n              {isEmpty(configComponents) === false &&\r\n                configComponents.mothersMaidenName && (\r\n                  <Input\r\n                    value={dataForm.mothersMaidenName}\r\n                    suffix={<UserOutlined />}\r\n                    placeholder=\"Segundo Apellido\"\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        mothersMaidenName: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n            </div>\r\n            <label className=\"fieldset_title\"> Información de contacto </label>\r\n            <div className=\"register_row half\">\r\n              <Input\r\n                value={dataForm.phoneNumber}\r\n                suffix={<PhoneOutlined />}\r\n                placeholder=\"Teléfono celular\"\r\n                onChange={(e) => {\r\n                  const regexp = /^([0-9])*$/;\r\n                  if (regexp.test(e.target.value) === true) {\r\n                    setDataForm({ ...dataForm, phoneNumber: e.target.value });\r\n                  }\r\n                }}\r\n              />\r\n              <Input\r\n                value={dataForm.username}\r\n                suffix={<MailOutlined />}\r\n                placeholder=\"Correo electrónico\"\r\n                onChange={(e) => {\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    username: e.target.value,\r\n                  });\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <label className=\"fieldset_title\"> Contraseña </label>\r\n            <div className=\"register_row half\">\r\n              <Input\r\n                value={dataForm.password}\r\n                suffix={<LockOutlined />}\r\n                placeholder=\"Contraseña\"\r\n                type=\"password\"\r\n                onChange={(e) => {\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    password: e.target.value,\r\n                  });\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                }}\r\n              />\r\n              <Input\r\n                value={verifyPassword}\r\n                suffix={<LockOutlined />}\r\n                placeholder=\"Confirmar Contraseña\"\r\n                type=\"password\"\r\n                onChange={(e) => {\r\n                  setVerifyPassword(e.target.value);\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"button_init_primary\" style={{ margin: \"16px 0 0\" }}>\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  try {\r\n                    const verifyData = await handlerVerifyInformation({\r\n                      ...dataForm,\r\n                      verifyPassword,\r\n                    });\r\n                    setErrorFormulary(!verifyData);\r\n                    if (verifyData === true) {\r\n                      await handlerCallApiRegister({\r\n                        ...dataForm,\r\n                        idCustomerType: selectuserCustomer,\r\n                        offset: \"-06:00\",\r\n                      });\r\n                      setUserType(3);\r\n                    }\r\n                  } catch (error) {\r\n                    setErrorFormulary(true);\r\n                    setErrorBase({ ...errorBase, error: true, message: error });\r\n                    setTimeout(() => {\r\n                      setErrorFormulary(false);\r\n                      setErrorBase(errorCatchBase);\r\n                    }, 3000);\r\n                  }\r\n                }}\r\n              >\r\n                <span> Registrarme </span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const insterCodeCompoent = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> Ingresa tu código </h1>\r\n          <p className=\"recoverInstructions\">\r\n            Enviamos un código de confirmación al correo {dataForm.username}\r\n          </p>\r\n          <div className=\"codeForm\">\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-0\"\r\n                type=\"number\"\r\n                value={codeVerify.value1}\r\n                maxLength={1}\r\n                minLength={1}\r\n                onChange={(event) => {\r\n                  if (event.target.value === \"\") {\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-1\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value1: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-1\"\r\n                type=\"number\"\r\n                value={codeVerify.value2}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-0\").focus();\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-2\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value2: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-2\"\r\n                type=\"number\"\r\n                value={codeVerify.value3}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-1\").focus();\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-3\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value3: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-3\"\r\n                type=\"number\"\r\n                value={codeVerify.value4}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-2\").focus();\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-4\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value4: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-4\"\r\n                type=\"number\"\r\n                value={codeVerify.value5}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-3\").focus();\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-5\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value5: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-5\"\r\n                type=\"number\"\r\n                value={codeVerify.value6}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-4\").focus();\r\n                  } else {\r\n                    document.getElementById(\"button-send-code\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value6: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"button_init_primary\" style={{ margin: \"60px 0 0\" }}>\r\n            <button\r\n              type=\"button\"\r\n              id=\"button-send-code\"\r\n              onClick={async () => {\r\n                try {\r\n                  let numberResult = \"\";\r\n                  for (const property in codeVerify) {\r\n                    numberResult += codeVerify[property];\r\n                  }\r\n                  await handlerCallVerifyCode({\r\n                    code: numberResult,\r\n                    idRequestSignUp,\r\n                    offset: \"-06:00\",\r\n                  });\r\n                  setUserType(4);\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <span> Validar </span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const successRegister = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> Registro completo </h1>\r\n          <p className=\"recoverInstructions\">\r\n            Felicidades tu registro se realizó con éxito!\r\n          </p>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <span>Ir al Login</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderTypeComponent = (type) => {\r\n    let component = <div />;\r\n    switch (type) {\r\n      case 1:\r\n        component = selectPerson;\r\n        break;\r\n      case 2:\r\n        component = selectForm;\r\n        break;\r\n      case 3:\r\n        component = insterCodeCompoent;\r\n        break;\r\n      case 4:\r\n        component = successRegister;\r\n        break;\r\n      default:\r\n        component = <div />;\r\n        break;\r\n    }\r\n    return component;\r\n  };\r\n\r\n  const handlerAsyncCallAppis = async () => {\r\n    await handlerCallApiCustomer({ idType: 1 });\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerAsyncCallAppis();\r\n  }, []);\r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"login_head_logo\">\r\n        <img src={logo} alt=\"Homify Logo\" className=\"login_logo\" />\r\n      </div>\r\n      {renderTypeComponent(userType)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomers: (data) => dispatch(callGetAllCustomers(data)),\r\n  callGetAllPersons: (data) => dispatch(callGetAllPersons(data)),\r\n  callGetAllEndorsement: (data) => dispatch(callGetAllEndorsement(data)),\r\n  callGetAllRegisterUser: (data) => dispatch(callGetAllRegisterUser(data)),\r\n  callGetAllVerifyCode: (data) => dispatch(callGetAllVerifyCode(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx",["86"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx",["87","88","89","90","91","92","93","94","95"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Content\\content.jsx",[],{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","replacedBy":"99"},{"ruleId":"100","severity":1,"message":"101","line":39,"column":20,"nodeType":"102","messageId":"103","endLine":39,"endColumn":25},{"ruleId":"100","severity":1,"message":"104","line":4,"column":8,"nodeType":"102","messageId":"103","endLine":4,"endColumn":15},{"ruleId":"100","severity":1,"message":"105","line":4,"column":40,"nodeType":"102","messageId":"103","endLine":4,"endColumn":45},{"ruleId":"106","severity":1,"message":"107","line":6,"column":1,"nodeType":"108","endLine":15,"endColumn":3},{"ruleId":"109","severity":1,"message":"110","line":716,"column":6,"nodeType":"111","endLine":716,"endColumn":8,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":12,"column":6,"nodeType":"111","endLine":12,"endColumn":8,"suggestions":"114"},{"ruleId":"100","severity":1,"message":"115","line":1,"column":27,"nodeType":"102","messageId":"103","endLine":1,"endColumn":36},{"ruleId":"116","severity":1,"message":"117","line":58,"column":15,"nodeType":"118","endLine":62,"endColumn":17},{"ruleId":"116","severity":1,"message":"117","line":66,"column":15,"nodeType":"118","endLine":66,"endColumn":80},{"ruleId":"116","severity":1,"message":"117","line":70,"column":15,"nodeType":"118","endLine":70,"endColumn":81},{"ruleId":"116","severity":1,"message":"117","line":74,"column":15,"nodeType":"118","endLine":78,"endColumn":17},{"ruleId":"116","severity":1,"message":"117","line":82,"column":15,"nodeType":"118","endLine":82,"endColumn":79},{"ruleId":"116","severity":1,"message":"117","line":86,"column":15,"nodeType":"118","endLine":86,"endColumn":79},{"ruleId":"116","severity":1,"message":"117","line":107,"column":17,"nodeType":"118","endLine":107,"endColumn":47},{"ruleId":"116","severity":1,"message":"117","line":110,"column":17,"nodeType":"118","endLine":110,"endColumn":42},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","'isEmpty' is defined but never used.","'PURGE' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handlerAsyncCallAppis'. Either include it or remove the dependency array.","ArrayExpression",["121"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["122"],"'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [handlerAsyncCallAppis]",{"range":"127","text":"128"},"Update the dependencies array to be: [history]",{"range":"129","text":"130"},[24555,24557],"[handlerAsyncCallAppis]",[318,320],"[history]"]