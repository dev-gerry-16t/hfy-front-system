[{"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js":"1","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js":"2","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js":"3","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx":"4","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js":"5","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js":"6","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js":"7","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js":"8","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js":"9","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js":"10","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js":"11","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js":"12","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js":"13","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx":"14","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx":"15","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Recovery\\RecoveryPass.jsx":"16","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx":"17","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js":"18","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js":"19","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js":"20","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomInput.jsx":"21","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\section\\sectionChangeImage.jsx":"22","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx":"23","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx":"24","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\adviser.jsx":"25","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormOwner.jsx":"26","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administrator.jsx":"27","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\MakeScreen\\makeScreen.jsx":"28","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx":"29","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx":"30","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailableOwner.jsx":"31","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx":"32","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx":"33","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx":"34","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx":"35","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx":"36","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx":"37","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx":"38","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx":"39","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx":"40","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUploadDocuments.jsx":"41","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUserDetailAdviser.jsx":"42","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenant.jsx":"43","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUser.jsx":"44","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionAddUsers.jsx":"45","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwner.jsx":"46","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChartPie.jsx":"47","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChart.jsx":"48","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js":"49","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx":"50","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx":"51","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx":"52","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx":"53","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\customFileUpload.jsx":"54","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx":"55","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx":"56","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx":"57","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx":"58","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx":"59","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx":"60","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx":"61","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx":"62","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx":"63","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx":"64","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionDepositGuarantee.jsx":"65","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionCardOwner.jsx":"66","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionStatsChart.jsx":"67","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx":"68","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customReference.jsx":"69","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Leads\\leads.jsx":"70","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\agents.jsx":"71","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Attorney\\attorney.jsx":"72","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administratorControlDesk.jsx":"73","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwnerControl.jsx":"74","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenantControl.jsx":"75"},{"size":1174,"mtime":1614705795061,"results":"76","hashOfConfig":"77"},{"size":3175,"mtime":1614705794933,"results":"78","hashOfConfig":"77"},{"size":362,"mtime":499162500000,"results":"79","hashOfConfig":"77"},{"size":7182,"mtime":1616468181054,"results":"80","hashOfConfig":"77"},{"size":103596,"mtime":1616632916372,"results":"81","hashOfConfig":"77"},{"size":6911,"mtime":1616632857309,"results":"82","hashOfConfig":"77"},{"size":1234,"mtime":1614705795080,"results":"83","hashOfConfig":"77"},{"size":1319,"mtime":1616685695537,"results":"84","hashOfConfig":"77"},{"size":250,"mtime":1616686862136,"results":"85","hashOfConfig":"77"},{"size":4811,"mtime":1614705795064,"results":"86","hashOfConfig":"77"},{"size":1673,"mtime":1608319107999,"results":"87","hashOfConfig":"77"},{"size":542,"mtime":1614705794935,"results":"88","hashOfConfig":"77"},{"size":106,"mtime":1608319107999,"results":"89","hashOfConfig":"77"},{"size":39043,"mtime":1616530164701,"results":"90","hashOfConfig":"77"},{"size":3195,"mtime":1614705795048,"results":"91","hashOfConfig":"77"},{"size":21340,"mtime":1616686550538,"results":"92","hashOfConfig":"77"},{"size":16110,"mtime":1616530083995,"results":"93","hashOfConfig":"77"},{"size":821,"mtime":1614705795078,"results":"94","hashOfConfig":"77"},{"size":3352,"mtime":1616114321213,"results":"95","hashOfConfig":"77"},{"size":261,"mtime":1614705795075,"results":"96","hashOfConfig":"77"},{"size":745,"mtime":1614705795046,"results":"97","hashOfConfig":"77"},{"size":2469,"mtime":1614961123422,"results":"98","hashOfConfig":"77"},{"size":25302,"mtime":1616638005466,"results":"99","hashOfConfig":"77"},{"size":27979,"mtime":1615494546755,"results":"100","hashOfConfig":"77"},{"size":6294,"mtime":1615493980547,"results":"101","hashOfConfig":"77"},{"size":19510,"mtime":1616638227306,"results":"102","hashOfConfig":"77"},{"size":29649,"mtime":1616468278422,"results":"103","hashOfConfig":"77"},{"size":440,"mtime":1614705795103,"results":"104","hashOfConfig":"77"},{"size":12636,"mtime":1615494585034,"results":"105","hashOfConfig":"77"},{"size":27632,"mtime":1615577037784,"results":"106","hashOfConfig":"77"},{"size":37242,"mtime":1616516598354,"results":"107","hashOfConfig":"77"},{"size":4933,"mtime":1615494040892,"results":"108","hashOfConfig":"77"},{"size":8638,"mtime":1615494059224,"results":"109","hashOfConfig":"77"},{"size":2502,"mtime":1615576221083,"results":"110","hashOfConfig":"77"},{"size":4953,"mtime":1615494084925,"results":"111","hashOfConfig":"77"},{"size":22882,"mtime":1616530083995,"results":"112","hashOfConfig":"77"},{"size":6375,"mtime":1615494331833,"results":"113","hashOfConfig":"77"},{"size":2667,"mtime":1615494294172,"results":"114","hashOfConfig":"77"},{"size":2841,"mtime":1614705795124,"results":"115","hashOfConfig":"77"},{"size":11893,"mtime":1615494264131,"results":"116","hashOfConfig":"77"},{"size":4257,"mtime":1615493605882,"results":"117","hashOfConfig":"77"},{"size":4198,"mtime":1616426742162,"results":"118","hashOfConfig":"77"},{"size":46236,"mtime":1616630414555,"results":"119","hashOfConfig":"77"},{"size":15172,"mtime":1616630791252,"results":"120","hashOfConfig":"77"},{"size":16255,"mtime":1616434686783,"results":"121","hashOfConfig":"77"},{"size":16948,"mtime":1616686616224,"results":"122","hashOfConfig":"77"},{"size":2348,"mtime":1616172228020,"results":"123","hashOfConfig":"77"},{"size":2994,"mtime":1615493533607,"results":"124","hashOfConfig":"77"},{"size":5753,"mtime":1614705795069,"results":"125","hashOfConfig":"77"},{"size":1427,"mtime":1615494339365,"results":"126","hashOfConfig":"77"},{"size":2318,"mtime":1614705795123,"results":"127","hashOfConfig":"77"},{"size":2776,"mtime":1616379391662,"results":"128","hashOfConfig":"77"},{"size":4643,"mtime":1614705795117,"results":"129","hashOfConfig":"77"},{"size":11783,"mtime":1616686667134,"results":"130","hashOfConfig":"77"},{"size":12191,"mtime":1616638851621,"results":"131","hashOfConfig":"77"},{"size":7572,"mtime":1616638813297,"results":"132","hashOfConfig":"77"},{"size":24386,"mtime":1616638773552,"results":"133","hashOfConfig":"77"},{"size":25690,"mtime":1616638716171,"results":"134","hashOfConfig":"77"},{"size":70728,"mtime":1616637837541,"results":"135","hashOfConfig":"77"},{"size":11532,"mtime":1616637745407,"results":"136","hashOfConfig":"77"},{"size":2630,"mtime":1616637781858,"results":"137","hashOfConfig":"77"},{"size":16757,"mtime":1616637479147,"results":"138","hashOfConfig":"77"},{"size":47133,"mtime":1616637373669,"results":"139","hashOfConfig":"77"},{"size":17968,"mtime":1616637208078,"results":"140","hashOfConfig":"77"},{"size":9787,"mtime":1615494505106,"results":"141","hashOfConfig":"77"},{"size":4108,"mtime":1615493823510,"results":"142","hashOfConfig":"77"},{"size":2993,"mtime":1615493951166,"results":"143","hashOfConfig":"77"},{"size":11269,"mtime":1616686775995,"results":"144","hashOfConfig":"77"},{"size":3403,"mtime":1616426742162,"results":"145","hashOfConfig":"77"},{"size":10871,"mtime":1616380565972,"results":"146","hashOfConfig":"77"},{"size":4788,"mtime":1616376964700,"results":"147","hashOfConfig":"77"},{"size":25397,"mtime":1616381721297,"results":"148","hashOfConfig":"77"},{"size":18619,"mtime":1616614282017,"results":"149","hashOfConfig":"77"},{"size":9324,"mtime":1616686427928,"results":"150","hashOfConfig":"77"},{"size":55597,"mtime":1616630445561,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"1vnvna8",{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"154"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"154"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"154"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"154"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"154"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"154"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"191","messages":"192","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"154"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"154"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"154"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"154"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"154"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"154"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"154"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"154"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"154"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"154"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"154"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"154"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245","usedDeprecatedRules":"154"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"154"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"154"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"154"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"154"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"154"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"154"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"280","messages":"281","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"282","messages":"283","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"286","messages":"287","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"154"},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"154"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"154"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"154"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306","usedDeprecatedRules":"154"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"154"},{"filePath":"310","messages":"311","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"154"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"317","messages":"318","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"154"},{"filePath":"326","messages":"327","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"154"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"154"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"334","usedDeprecatedRules":"154"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"337","messages":"338","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339","usedDeprecatedRules":"154"},"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js",[],["340","341"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js",["342","343"],"import React from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { connect } from \"react-redux\";\r\nimport { Router } from \"react-router\";\r\nimport Loadable from \"react-loadable\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport es_ES from \"antd/lib/locale-provider/es_ES\";\r\nimport \"./App.css\";\r\nimport RecoveryPass from \"./containers/Recovery/RecoveryPass\";\r\n\r\nconst loading = () => (\r\n  <div className=\"animated fadeIn pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\" />\r\n  </div>\r\n);\r\n\r\nconst Login = Loadable({\r\n  loader: () => import(\"./containers/Login/login\"),\r\n  loading,\r\n});\r\n\r\nconst Registro = Loadable({\r\n  loader: () => import(\"./containers/Register/Register\"),\r\n  loading,\r\n});\r\n\r\nconst RecoveryPassword = Loadable({\r\n  loader: () => import(\"./containers/Recovery/RecoveryPass\"),\r\n  loading,\r\n});\r\n\r\nconst Auth = Loadable({\r\n  loader: () => import(\"./containers/Auth/auth\"),\r\n  loading,\r\n});\r\n\r\nconst DefaultLayout = Loadable({\r\n  loader: () => import(\"./containers/Layout/layout\"),\r\n  loading,\r\n});\r\n\r\nconst App = (props) => {\r\n  const { history, token, dataProfile } = props;\r\n  const accessDev = false; //window.location.hostname === \"localhost\";\r\n  return (\r\n    <Router history={history}>\r\n      <ConfigProvider locale={es_ES}>\r\n        <Switch>\r\n          <Route exact path=\"/\" name=\"Login Page\" component={Login} />\r\n          <Route path=\"/login\" name=\"Login Page\" component={Login} />\r\n          <Route path=\"/index\" name=\"Login Page\" component={Login} />\r\n          <Route exact path=\"/registro\" name=\"Registro\" component={Registro} />\r\n          <Route\r\n            exact\r\n            path=\"/recoveryPass\"\r\n            name=\"Recuperar contraseña\"\r\n            component={RecoveryPassword}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/registro/:idInvitation/:idCustomerType\"\r\n            name=\"Registro\"\r\n            component={Registro}\r\n          />\r\n          <Route path=\"/auth\" name=\"Autorizacion\" component={Auth} />\r\n          <Route path=\"/logout\" name=\"Clean App and Close\" component={Auth} />\r\n          <Route\r\n            history={history}\r\n            path=\"/websystem/\"\r\n            name=\"Home\"\r\n            render={(props) => (\r\n              <DefaultLayout\r\n                {...props}\r\n                authenticate={\r\n                  isNil(dataProfile.idSystemUser) === false &&\r\n                  isEmpty(dataProfile.idSystemUser) === false\r\n                }\r\n                authenticated={\r\n                  (isNil(dataProfile.dataProfile) === false &&\r\n                    isNil(dataProfile.dataProfile.idSystemUser) === false &&\r\n                    isEmpty(dataProfile.dataProfile.idSystemUser) === false) ||\r\n                  accessDev\r\n                }\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </ConfigProvider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile } = state;\r\n  return { dataProfile };\r\n};\r\n\r\nconst mapDispatchToProps = null;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js",["344"],"import { API_CONSTANTS, HEADER } from \"../constants/apiConstants\";\r\nimport RequesterAxios from \"../requester/requester\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nconst callApiLogin = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.LOGIN,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomers = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllPersons = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PERSON_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllEndorsement = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_ENDORSEMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetInvitationUser = (paramId) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const endPoint = `${API_CONSTANTS.GET_ALL_CUSTOMER_INVITATION}${paramId}`;\r\n    const response = await RequesterAxios.get(endPoint, config);\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRegisterUser = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRequestRecoveryPass = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REQUEST_RECOVERY_PASS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllVerifyCodeRecoveryPass = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.VERIFY_CODE_RECOVERY_PASS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callPutRecoveryPass = (data, id) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.RECOVERY_PASS + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllVerifyCode = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.VERIFY_CODE_REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllUserProfile = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_USER_PROFILE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllMenuProfile = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_MENU_PROFILE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetImageProfile = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_IMAGE_PROFILE + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerTenantById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TENANT_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerTenantDashboardById = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TENANT_DASHBOARD_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractStats = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_STATS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractCoincidences = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractChart = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_CHART,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetSearchProspect = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_SEARCH_CUSTOMER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAddProspect = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ADD_PROSPECT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerCoincidences = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TENANT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetStatsChart = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_STATS_CHART,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetZipCodeAdress = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ZIP_CODE_ADRESS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetMaritalStatus = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_MARITAL_STATUS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetMaritalRegime = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_MARITAL_REGIME,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPropertyTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_PROPERTY_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPolicies = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_POLICIES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetNationalities = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_NATIONALITIES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetIdTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_ID_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetOccupations = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_OCCUPATIONS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllTenantsCatalog = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_TENANTS_CATALOG,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllBankCatalog = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_BANKS_CATALOG,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddProperty = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.CUSTOMER_ADD_PROPERTY,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetProperties = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PROPERTIES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetDepartments = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_DEPARTMENTS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPaymentTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PYMENT_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllDocumentTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_DOCUMENT_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPaymentContractDocument = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_PAYMENT_IN_CONTRACT_DOCUMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPaymentContract = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PYMENT_CONTRACT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.SEND_TENANT_INVITATION,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddCustomerMessage = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.ADD_CUSTOMER_MESSAGE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetCustomerMessage = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CUSTOMER_MESSAGE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callRequestAdvancement = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REQUEST_ADVANCEMENT_RENTS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddDocument = (file, data, callback) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n  formData.append(\"fileProperties\", JSON.stringify(data));\r\n  try {\r\n    const config = {\r\n      headers: { ...HEADER },\r\n      onUploadProgress: (progressEvent) => {\r\n        var percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        );\r\n        callback(percentCompleted);\r\n      },\r\n    };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.ADD_DOCUMENT,\r\n      formData,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetTypeFormTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_TYPEFORM_TENANT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetTypeFormProperties = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_TYPEFORM_PROPERTIES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetTypeFormOwner = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_TYPEFORM_OWNER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetTypeFormDocumentTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_TYPEFORM_DOCUMENT_TENANT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetTypeFormTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.SET_TYPEFORM_DOCUMENT_TENANT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetTypeFormOwner = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.SET_TYPEFORM_OWNER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetTypeFormReferences = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.SET_TYPEFORM_REFERENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddTypeFormDocument = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.PUT_ADD_TYPEFORM_DOCUMENT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callUpdateContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_UPDATE_CONTRACT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSwitchCustomerContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_SWITCH_CUSTOMER_CONTRACT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_CONTRACT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddCommentContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.ADD_CONTRACT_COMMENT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddDocumentContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.ADD_CONTRACT_DOCUMENT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddDocumentContractId = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.ADD_CONTRACT_DOCUMENT_ID + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractDocument = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_DOCUMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractDocumentById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_DOCUMENT_BYID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContract = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractComment = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_COMMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllPolicyStatus = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_POLICY_STATUS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCommercialSocietyTypes = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_COMMERCIAL_SOCIETY_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllStates = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_ALL_STATES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAgentIndicators = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_AGENT_INDICATORS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAgentContractCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_AGENT_CONTRACT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAgentCommissionChart = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_AGENT_COMISSION_CHART,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetDetailCustomer = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_DETAIL_CUSTOMER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetDetailCustomerTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_DETAIL_CUSTOMER_TENANT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetDetailCustomerAgent = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_DETAIL_CUSTOMER_AGENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetLandingProspectStats = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_LANDING_PROSPECT_STATS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllProspectStatus = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PROSPECT_STATUS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRelationshipTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_RELATIONSHIP_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllPersonalReferencesStatus = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PERSONAL_REFERENCE_STATUS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetLandingProspectCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_LANDING_PROSPECT_COINCIDENECES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetCustomerAgentCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CUSTOMER_AGENT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetLegalContractCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_LEGAL_CONTRACT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callUpdateLandingProspectStatus = (data, id) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.UPDATE_LANDING_PROSPECT_STATUS + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callUpdatePersonalReferences = (data, id) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_PERSONAL_REFERENCE_FORM + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAuditReferences = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_AUDIT_REFERENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport {\r\n  callApiLogin,\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetInvitationUser,\r\n  callGetAllRegisterUser,\r\n  callGetAllRequestRecoveryPass,\r\n  callGetAllVerifyCodeRecoveryPass,\r\n  callGetAllVerifyCode,\r\n  callGetAllUserProfile,\r\n  callGetAllMenuProfile,\r\n  callGetAllCustomerById,\r\n  callGetAllCustomerCoincidences,\r\n  callGetStatsChart,\r\n  callAddProperty,\r\n  callGetProperties,\r\n  callGetDepartments,\r\n  callAddTenant,\r\n  callGetZipCodeAdress,\r\n  callGetAllTenantsCatalog,\r\n  callGetAllBankCatalog,\r\n  callRequestAdvancement,\r\n  callGetAllCustomerTenantById,\r\n  callGetPaymentTypes,\r\n  callGetPaymentContract,\r\n  callAddDocument,\r\n  callGetAllDocumentTypes,\r\n  callGetPaymentContractDocument,\r\n  callAddCustomerMessage,\r\n  callGetCustomerMessage,\r\n  callGetTypeFormTenant,\r\n  callGetTypeFormOwner,\r\n  callGetTypeFormDocumentTenant,\r\n  callAddTypeFormDocument,\r\n  callSetTypeFormTenant,\r\n  callSetTypeFormOwner,\r\n  callGetAllCustomerTenantDashboardById,\r\n  callSetTypeFormReferences,\r\n  callGetMaritalStatus,\r\n  callGetPropertyTypes,\r\n  callGetPolicies,\r\n  callPutRecoveryPass,\r\n  callSetImageProfile,\r\n  callGetNationalities,\r\n  callGetIdTypes,\r\n  callGetOccupations,\r\n  callGetContractStats,\r\n  callGetContractCoincidences,\r\n  callGetContractChart,\r\n  callGetSearchProspect,\r\n  callGetAddProspect,\r\n  callUpdateContract,\r\n  callGetAllPolicyStatus,\r\n  callGetDetailCustomer,\r\n  callGetDetailCustomerTenant,\r\n  callGetDetailCustomerAgent,\r\n  callSwitchCustomerContract,\r\n  callGetAgentIndicators,\r\n  callGetAgentContractCoincidences,\r\n  callSetContract,\r\n  callAddCommentContract,\r\n  callGetContract,\r\n  callGetContractComment,\r\n  callGetAgentCommissionChart,\r\n  callAddDocumentContract,\r\n  callGetContractDocument,\r\n  callGetContractDocumentById,\r\n  callAddDocumentContractId,\r\n  callGetMaritalRegime,\r\n  callGetAllCommercialSocietyTypes,\r\n  callGetAllStates,\r\n  callGetLandingProspectStats,\r\n  callGetAllProspectStatus,\r\n  callGetAllRelationshipTypes,\r\n  callGetAllPersonalReferencesStatus,\r\n  callGetLandingProspectCoincidences,\r\n  callGetCustomerAgentCoincidences,\r\n  callGetLegalContractCoincidences,\r\n  callUpdateLandingProspectStatus,\r\n  callUpdatePersonalReferences,\r\n  callGetAuditReferences,\r\n  callGetTypeFormProperties,\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js",["345"],"import { applyMiddleware, compose, createStore } from 'redux';\r\nimport storageSession from 'redux-persist/lib/storage/session';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer, PURGE } from 'redux-persist';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createBrowserHistory } from 'history';\r\nimport { routerMiddleware } from 'react-router-redux';\r\n// TO DO: import immutableTransform from 'redux-persist-transform-immutable';\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './RootSaga';\r\n\r\nexport const history = createBrowserHistory();\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default function configureStore(preloadedState) {\r\n  /* eslint-disable no-underscore-dangle */\r\n  const composeEnhancers =\r\n    process.env.NODE_ENV !== 'production' &&\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      : compose;\r\n  /* eslint-enable */\r\n\r\n  const persistConfig = {\r\n    // TO DO:\r\n    // transforms: [immutableTransform()],\r\n    key: 'root',\r\n    storage: storageSession,\r\n    blacklist: [],\r\n  };\r\n\r\n  const rootReducerMiddleware = (state, action) =>\r\n    rootReducer(state, action, persistConfig);\r\n\r\n  const persistedReducer = persistReducer(persistConfig, rootReducerMiddleware);\r\n\r\n  const store = createStore(\r\n    persistedReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(sagaMiddleware, routerMiddleware(history), thunk),\r\n    ),\r\n  );\r\n\r\n  store.runSaga = sagaMiddleware.run(rootSaga);\r\n\r\n  const persistor = persistStore(store, {});\r\n\r\n  return { store, persistor };\r\n}\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js",["346"],"import { combineReducers } from \"redux\";\r\nimport { purgeStoredState } from \"redux-persist\";\r\nimport {\r\n  dataProfile,\r\n  dataProfileMenu,\r\n} from \"../utils/reducers/dataProfileReducer\";\r\n\r\nconst appReducers = combineReducers({\r\n  dataProfile,\r\n  dataProfileMenu,\r\n});\r\n\r\nexport default (state, action, persistConfig) => {\r\n  // Reset to initialState\r\n  if (action.type === \"PURGE\") {\r\n    purgeStoredState(persistConfig);\r\n    // Default or Current State\r\n    return appReducers({}, action);\r\n  }\r\n\r\n  return appReducers(state, action);\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx",["347","348","349"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  Radio,\r\n  Select,\r\n  Input,\r\n  Spin,\r\n  Skeleton,\r\n  Alert,\r\n  Progress,\r\n  Checkbox,\r\n} from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  LockOutlined,\r\n  SyncOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetAllRegisterUser,\r\n  callGetAllVerifyCode,\r\n  callGetInvitationUser,\r\n} from \"../../utils/actions/actions\";\r\nimport logo from \"../../assets/img/logo.png\";\r\nimport admiration from \"../../assets/icons/exclaim.svg\";\r\nimport Arrow from \"../../assets/icons/Arrow.svg\";\r\nimport CustomInput from \"../../components/CustomInput\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Register = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomers,\r\n    callGetAllPersons,\r\n    callGetAllEndorsement,\r\n    callGetAllRegisterUser,\r\n    callGetAllVerifyCode,\r\n    callGetInvitationUser,\r\n  } = props;\r\n  const [userType, setUserType] = useState(null);\r\n  const [aceptTerms, setAceptTerms] = useState(false);\r\n  const [userCustomer, setUserCustomer] = useState([]);\r\n  const [securePass, setSecurePass] = useState({\r\n    lengthCharacter: false,\r\n    upperLowerword: false,\r\n    numbers: false,\r\n    specialCharacters: false,\r\n    percentStatus: 0,\r\n  });\r\n  const [selectuserCustomer, setSelectUserCustomer] = useState(1);\r\n  const [userPerson, setUserPerson] = useState([]);\r\n  const [userEndorsement, setUserEndorsement] = useState([]);\r\n  const [configComponents, setConfigComponents] = useState({});\r\n  const [verifyPassword, setVerifyPassword] = useState(null);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [dataForm, setDataForm] = useState({\r\n    idPersonType: null,\r\n    idEndorsement: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    username: null,\r\n    password: null,\r\n    idInvitation: null,\r\n  });\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  const copyErrors = {\r\n    errorPass: {\r\n      error: false,\r\n      message: \"Las contraseñas no coinciden\",\r\n      errorEmpty: false,\r\n      messageEmpty: \"La contraseña es requerida\",\r\n    },\r\n    errorPassSecure: {\r\n      error: false,\r\n      message: \"Tu contraseña no es segura\",\r\n      errorEmpty: false,\r\n      messageEmpty: \"Tu contraseña no es segura\",\r\n    },\r\n    errorGivenName: {\r\n      error: false,\r\n      message: \"El Nombre o Razón social es requerido\",\r\n    },\r\n    errorUserName: {\r\n      error: false,\r\n      message: \"El correo electrónico es requerido\",\r\n      errorFormat: false,\r\n      messageFormatError: \"El correo electronico no es valido\",\r\n    },\r\n    errorPersonType: {\r\n      error: false,\r\n      message: \"El tipo de persona es requerido\",\r\n    },\r\n    errorCodeVerify: {\r\n      error: false,\r\n      message: \"El código de verificación ingresado es invalido\",\r\n    },\r\n  };\r\n  const [errorsRegister, setErrorsRegister] = useState(copyErrors);\r\n  const [errorFormulary, setErrorFormulary] = useState(false);\r\n  const [idRequestSignUp, setIdRequestSignUp] = useState(null);\r\n  const [codeVerify, setCodeVerify] = useState({\r\n    value1: \"\",\r\n    value2: \"\",\r\n    value3: \"\",\r\n    value4: \"\",\r\n    value5: \"\",\r\n    value6: \"\",\r\n  });\r\n  const errorCatchBase = {\r\n    error: false,\r\n    message: \"\",\r\n  };\r\n  const [errorBase, setErrorBase] = useState(errorCatchBase);\r\n\r\n  const handlerCallApiCustomer = async (data) => {\r\n    try {\r\n      const response = await callGetAllCustomers(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserCustomer(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiPersonTypes = async (data, person) => {\r\n    const { match } = props;\r\n    const params = isEmpty(match.params) === false ? match.params : {};\r\n    try {\r\n      const response = await callGetAllPersons(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      if (isEmpty(params) === false && isEmpty(responseResult) === false) {\r\n        const filterCondition = responseResult.find((row) => {\r\n          return row.idPersonType == person;\r\n        });\r\n        const parseResult = JSON.parse(filterCondition.jsonProperties);\r\n        setConfigComponents(parseResult);\r\n      }\r\n      setUserPerson(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiEndorsement = async (data) => {\r\n    try {\r\n      const response = await callGetAllEndorsement(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserEndorsement(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetInvitationUser = async (id) => {\r\n    try {\r\n      const response = await callGetInvitationUser(id);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      await handlerCallApiPersonTypes(\r\n        {\r\n          idType: 1,\r\n          idCustomerType: responseResult.idCustomerType,\r\n        },\r\n        responseResult.idPersonType\r\n      );\r\n      await handlerCallApiEndorsement({\r\n        idType: 1,\r\n      });\r\n      setSelectUserCustomer(responseResult.idCustomerType);\r\n      setDataForm({\r\n        ...dataForm,\r\n        idPersonType: responseResult.idPersonType,\r\n        givenName: responseResult.givenName,\r\n        lastName:\r\n          isNil(responseResult.lastName) === false\r\n            ? responseResult.lastName\r\n            : null,\r\n        mothersMaidenName:\r\n          isNil(responseResult.mothersMaidenName) === false\r\n            ? responseResult.mothersMaidenName\r\n            : null,\r\n        username: responseResult.usernameRequested,\r\n        idInvitation: responseResult.idInvitation,\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiRegister = async (data) => {\r\n    try {\r\n      const response = await callGetAllRegisterUser(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : \"\";\r\n      setIdRequestSignUp(\r\n        isEmpty(responseResult) === false ? responseResult.idRequestSignUp : \"\"\r\n      );\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallVerifyCode = async (data) => {\r\n    try {\r\n      await callGetAllVerifyCode(data);\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerVerifyInformation = async (data) => {\r\n    const emailRegex = /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i;\r\n    let objectErrors = errorsRegister;\r\n    let validatePass = true;\r\n    let validatePassSecure = true;\r\n    let validateIdPerson = true;\r\n    let validateGivenName = true;\r\n    let validateUserName = true;\r\n    const validateTypeEmail =\r\n      isNil(data.username) === false ? emailRegex.test(data.username) : false;\r\n\r\n    if (\r\n      isEmpty(data.password) === false &&\r\n      isEmpty(data.verifyPassword) === false &&\r\n      data.password === data.verifyPassword\r\n    ) {\r\n      validatePass = true;\r\n    } else if (isEmpty(data.password) || isEmpty(data.verifyPassword)) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, errorEmpty: true },\r\n      };\r\n      validatePass = false;\r\n    } else if (data.password !== data.verifyPassword) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, error: true },\r\n      };\r\n      validatePass = false;\r\n    }\r\n\r\n    if (securePass.percentStatus < 100) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPassSecure: { ...objectErrors.errorPassSecure, error: true },\r\n      };\r\n      validatePassSecure = false;\r\n    }\r\n\r\n    if (isNil(data.idPersonType) === false || selectuserCustomer === 3) {\r\n      validateIdPerson = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPersonType: { ...objectErrors.errorPersonType, error: true },\r\n      };\r\n      validateIdPerson = false;\r\n    }\r\n\r\n    if (isNil(data.givenName) === false && isEmpty(data.givenName) === false) {\r\n      validateGivenName = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorGivenName: { ...objectErrors.errorGivenName, error: true },\r\n      };\r\n      validateGivenName = false;\r\n    }\r\n\r\n    if (\r\n      isNil(data.username) === false &&\r\n      isEmpty(data.username) === false &&\r\n      validateTypeEmail === true\r\n    ) {\r\n      validateUserName = true;\r\n    } else {\r\n      if (isEmpty(data.username) || isEmpty(data.username)) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, error: true },\r\n        };\r\n      } else if (validateTypeEmail === false) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, errorFormat: true },\r\n        };\r\n      }\r\n      validateUserName = false;\r\n    }\r\n\r\n    setErrorsRegister(objectErrors);\r\n\r\n    return (\r\n      validatePass &&\r\n      validateIdPerson &&\r\n      validateGivenName &&\r\n      validateUserName &&\r\n      validatePassSecure\r\n    );\r\n  };\r\n\r\n  const handlerEvalutePassword = (pass) => {\r\n    const size = /^(?=.{8,}).*$/;\r\n    const lowerInPass = /^(?=\\w*[a-z])/;\r\n    const upperInPass = /^(?=\\w*[A-Z])/;\r\n    const numberInPass = /^(?=.*\\d)/;\r\n    const specialCharacter = /^(?=.*[$@$!%*?&])/;\r\n\r\n    let lengthCharacter = false;\r\n    let upperLowerword = false;\r\n    let numbers = false;\r\n    let specialCharacters = false;\r\n    let lengthCharacterPercent = 0;\r\n    let upperLowerwordPercent = 0;\r\n    let numbersPercent = 0;\r\n    let specialCharactersPercent = 0;\r\n\r\n    if (size.test(pass) === true) {\r\n      lengthCharacter = true;\r\n      lengthCharacterPercent = 25;\r\n    }\r\n    if (lowerInPass.test(pass) === true && upperInPass.test(pass) === true) {\r\n      upperLowerword = true;\r\n      upperLowerwordPercent = 25;\r\n    }\r\n    if (numberInPass.test(pass) === true) {\r\n      numbers = true;\r\n      numbersPercent = 25;\r\n    }\r\n    if (specialCharacter.test(pass) === true) {\r\n      specialCharacters = true;\r\n      specialCharactersPercent = 25;\r\n    }\r\n    setSecurePass({\r\n      lengthCharacter,\r\n      upperLowerword,\r\n      numbers,\r\n      specialCharacters,\r\n      percentStatus:\r\n        lengthCharacterPercent +\r\n        upperLowerwordPercent +\r\n        numbersPercent +\r\n        specialCharactersPercent,\r\n    });\r\n  };\r\n\r\n  const selectPerson = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1>\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            ¿Qué te trae por aquí?{\" \"}\r\n          </h1>\r\n          <div className=\"login_inputs_form\">\r\n            <Skeleton loading={isEmpty(userCustomer) === true} active />\r\n            {isEmpty(userCustomer) === false && (\r\n              <Radio.Group\r\n                name=\"radiogroup\"\r\n                value={selectuserCustomer}\r\n                defaultValue={1}\r\n                onChange={(e) => {\r\n                  setSelectUserCustomer(e.target.value);\r\n                }}\r\n              >\r\n                {userCustomer.map((row) => {\r\n                  return (\r\n                    <p className=\"visible\" style={{ marginBottom: \"32px\" }}>\r\n                      <Radio value={row.id}> {row.text} </Radio>\r\n                    </p>\r\n                  );\r\n                })}\r\n              </Radio.Group>\r\n            )}\r\n\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  await handlerCallApiPersonTypes(\r\n                    {\r\n                      idType: 1,\r\n                      idCustomerType: selectuserCustomer,\r\n                    },\r\n                    dataForm.idPersonType\r\n                  );\r\n                  await handlerCallApiEndorsement({\r\n                    idType: 1,\r\n                  });\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const selectForm = (\r\n    <div className=\"login_main\" style={{ height: \"150%\" }}>\r\n      <div className=\"login_card_form large\">\r\n        <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n          <div className=\"register_holder\">\r\n            <div className=\"login_top_form\">\r\n              <h1>\r\n                <button\r\n                  className=\"arrow-back-to\"\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    const { match } = props;\r\n                    const params =\r\n                      isEmpty(match.params) === false ? match.params : {};\r\n                    if (isEmpty(params) === false) {\r\n                      history.push(\"/login\");\r\n                    } else {\r\n                      setUserType(1);\r\n                    }\r\n                  }}\r\n                >\r\n                  <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                </button>\r\n                Completa tu perfil{\" \"}\r\n              </h1>\r\n              <div\r\n                className={`error_login_incorrect_data ${\r\n                  errorFormulary === false ? \"hide\" : \"visible\"\r\n                }`}\r\n                style={{ display: \"flex\", flexDirection: \"column\" }}\r\n              >\r\n                {errorBase.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorBase.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorGivenName.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorGivenName.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPass.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPass.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPassSecure.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPassSecure.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPass.errorEmpty && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPass.messageEmpty}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPersonType.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPersonType.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorUserName.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorUserName.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorUserName.errorFormat && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>\r\n                      {errorsRegister.errorUserName.messageFormatError}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <label className=\"fieldset_title\">Información personal</label>\r\n              {selectuserCustomer !== 3 && (\r\n                <div className=\"register_row half\">\r\n                  <Select\r\n                    placeholder=\"Tipo de Persona\"\r\n                    value={dataForm.idPersonType}\r\n                    onChange={(value, option) => {\r\n                      const configureOption = option.onClick();\r\n                      setConfigComponents(configureOption);\r\n                      setErrorsRegister(copyErrors);\r\n                      setErrorFormulary(false);\r\n                      setDataForm({ ...dataForm, idPersonType: value });\r\n                    }}\r\n                  >\r\n                    {isEmpty(userPerson) === false &&\r\n                      userPerson.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.id}\r\n                            onClick={() => {\r\n                              return isNil(row) === false &&\r\n                                isNil(row.jsonProperties) === false\r\n                                ? JSON.parse(row.jsonProperties)\r\n                                : {};\r\n                            }}\r\n                          >\r\n                            {row.text}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                  {isEmpty(configComponents) === false &&\r\n                    configComponents.idEndorsement && (\r\n                      <Select\r\n                        placeholder=\"Aval\"\r\n                        onChange={(value) => {\r\n                          setDataForm({ ...dataForm, idEndorsement: value });\r\n                        }}\r\n                      >\r\n                        {isEmpty(userEndorsement) === false &&\r\n                          userEndorsement.map((row) => {\r\n                            return <Option value={row.id}>{row.text}</Option>;\r\n                          })}\r\n                      </Select>\r\n                    )}\r\n                </div>\r\n              )}{\" \"}\r\n              <div className=\"register_row\">\r\n                <CustomInput\r\n                  value={dataForm.givenName}\r\n                  suffix={<UserOutlined />}\r\n                  placeholder={\r\n                    configComponents.lastName || selectuserCustomer === 3\r\n                      ? \"Nombre(s):\"\r\n                      : \"Razón Social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, givenName: e });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"register_row half\">\r\n                {isEmpty(configComponents) === false &&\r\n                  selectuserCustomer !== 3 &&\r\n                  configComponents.lastName && (\r\n                    <CustomInput\r\n                      value={dataForm.lastName}\r\n                      suffix={<UserOutlined />}\r\n                      placeholder=\"Primer Apellido\"\r\n                      onChange={(e) => {\r\n                        setDataForm({ ...dataForm, lastName: e });\r\n                      }}\r\n                    />\r\n                  )}\r\n                {selectuserCustomer === 3 && (\r\n                  <CustomInput\r\n                    value={dataForm.lastName}\r\n                    suffix={<UserOutlined />}\r\n                    placeholder=\"Primer Apellido\"\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, lastName: e });\r\n                    }}\r\n                  />\r\n                )}\r\n                {isEmpty(configComponents) === false &&\r\n                  selectuserCustomer !== 3 &&\r\n                  configComponents.mothersMaidenName && (\r\n                    <CustomInput\r\n                      value={dataForm.mothersMaidenName}\r\n                      suffix={<UserOutlined />}\r\n                      placeholder=\"Segundo Apellido\"\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          mothersMaidenName: e,\r\n                        });\r\n                      }}\r\n                    />\r\n                  )}\r\n                {selectuserCustomer === 3 && (\r\n                  <CustomInput\r\n                    value={dataForm.mothersMaidenName}\r\n                    suffix={<UserOutlined />}\r\n                    placeholder=\"Segundo Apellido\"\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        mothersMaidenName: e,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <label className=\"fieldset_title\">\r\n                {\" \"}\r\n                Información de contacto{\" \"}\r\n              </label>\r\n              <div className=\"register_row half\">\r\n                <CustomInput\r\n                  value={dataForm.phoneNumber}\r\n                  suffix={<PhoneOutlined />}\r\n                  placeholder=\"Teléfono celular\"\r\n                  onChange={(e) => {\r\n                    const regexp = /^([0-9])*$/;\r\n                    if (regexp.test(e) === true) {\r\n                      setDataForm({ ...dataForm, phoneNumber: e });\r\n                    }\r\n                  }}\r\n                />\r\n                <CustomInput\r\n                  value={dataForm.username}\r\n                  suffix={<MailOutlined />}\r\n                  placeholder=\"Correo electrónico\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      username: e,\r\n                    });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <label className=\"fieldset_title\"> Contraseña </label>\r\n              <div className=\"register_row half\">\r\n                <CustomInput\r\n                  value={dataForm.password}\r\n                  suffix={<LockOutlined />}\r\n                  placeholder=\"Contraseña\"\r\n                  type=\"password\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      password: e,\r\n                    });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                    handlerEvalutePassword(e);\r\n                  }}\r\n                />\r\n                <CustomInput\r\n                  value={verifyPassword}\r\n                  suffix={<LockOutlined />}\r\n                  placeholder=\"Confirmar Contraseña\"\r\n                  type=\"password\"\r\n                  onChange={(e) => {\r\n                    setVerifyPassword(e);\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Progress\r\n                  percent={securePass.percentStatus}\r\n                  status={\r\n                    securePass.percentStatus === 100 ? \"success\" : \"exception\"\r\n                  }\r\n                />\r\n                <p className=\"fieldset_title\">\r\n                  {securePass.percentStatus === 100\r\n                    ? \"Tu contraseña es segura\"\r\n                    : \"La contraseña debe contener\"}\r\n                </p>\r\n                {securePass.lengthCharacter === false && (\r\n                  <Alert\r\n                    message=\"Al menos 8 caracteres\"\r\n                    type=\"warning\"\r\n                    showIcon\r\n                  />\r\n                )}\r\n                {securePass.upperLowerword === false && (\r\n                  <Alert\r\n                    message=\"Letras mayusculas y minusculas (AaBbCc)\"\r\n                    type=\"warning\"\r\n                    showIcon\r\n                  />\r\n                )}\r\n                {securePass.numbers === false && (\r\n                  <Alert message=\"Números\" type=\"warning\" showIcon />\r\n                )}\r\n                {securePass.specialCharacters === false && (\r\n                  <Alert\r\n                    message=\"Caracteres especiales (@$&!%*?)\"\r\n                    type=\"warning\"\r\n                    showIcon\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                <Checkbox\r\n                  checked={aceptTerms}\r\n                  onChange={(e) => {\r\n                    setAceptTerms(e.target.checked);\r\n                  }}\r\n                ></Checkbox>\r\n                <span\r\n                  style={{\r\n                    marginLeft: 5,\r\n                    textAlign: \"center\",\r\n                    fontSize: 10,\r\n                    color: \"gray\",\r\n                  }}\r\n                >\r\n                  Acepto el{\" \"}\r\n                  <a href=\"https://segurent.mx/aviso-de-privacidad/\">\r\n                    Aviso de privacidad\r\n                  </a>\r\n                </span>\r\n              </div>\r\n              <div\r\n                className={\r\n                  aceptTerms === true\r\n                    ? \"button_init_primary\"\r\n                    : \"button_init_primary_disabled\"\r\n                }\r\n                style={{ margin: \"16px 0 0\" }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={async () => {\r\n                    try {\r\n                      const verifyData = await handlerVerifyInformation({\r\n                        ...dataForm,\r\n                        verifyPassword,\r\n                      });\r\n                      setErrorFormulary(!verifyData);\r\n                      if (verifyData === true) {\r\n                        setSpinVisible(true);\r\n                        await handlerCallApiRegister({\r\n                          ...dataForm,\r\n                          idCustomerType: selectuserCustomer,\r\n                        });\r\n                        setUserType(3);\r\n                        setSpinVisible(false);\r\n                      }\r\n                    } catch (error) {\r\n                      setSpinVisible(false);\r\n                      setErrorFormulary(true);\r\n                      setErrorBase({\r\n                        ...errorBase,\r\n                        error: true,\r\n                        message: error,\r\n                      });\r\n                      setTimeout(() => {\r\n                        setErrorFormulary(false);\r\n                        setErrorBase(errorCatchBase);\r\n                      }, 3000);\r\n                    }\r\n                  }}\r\n                >\r\n                  <span> Registrarme </span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const insterCodeCompoent = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n          <div className=\"login_top_form\">\r\n            <h1>\r\n              <button\r\n                className=\"arrow-back-to\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n              </button>\r\n              Ingresa tu código{\" \"}\r\n            </h1>\r\n            <div\r\n              className={`error_login_incorrect_data ${\r\n                errorsRegister.errorCodeVerify.error === false\r\n                  ? \"hide\"\r\n                  : \"visible\"\r\n              }`}\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              {errorsRegister.errorCodeVerify.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorCodeVerify.message}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <p className=\"recoverInstructions\">\r\n              Enviamos un código de confirmación al correo{\" \"}\r\n              <strong>{dataForm.username}</strong>\r\n            </p>\r\n            <div className=\"codeForm\">\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-0\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value1}\r\n                  maxLength={1}\r\n                  minLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-1\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value1: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-1\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value2}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-0\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-2\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value2: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-2\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value3}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-1\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-3\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value3: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-3\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value4}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-2\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-4\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value4: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-4\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value5}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-3\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-5\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value5: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-5\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value6}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-4\").focus();\r\n                    } else {\r\n                      document.getElementById(\"button-send-code\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value6: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"button_init_primary\" style={{ margin: \"60px 0 0\" }}>\r\n              <button\r\n                type=\"button\"\r\n                id=\"button-send-code\"\r\n                onClick={async () => {\r\n                  setSpinVisible(true);\r\n                  try {\r\n                    let numberResult = \"\";\r\n                    for (const property in codeVerify) {\r\n                      numberResult += codeVerify[property];\r\n                    }\r\n                    await handlerCallVerifyCode({\r\n                      code: numberResult,\r\n                      idRequestSignUp,\r\n                      idInvitation: dataForm.idInvitation,\r\n                    });\r\n                    setUserType(4);\r\n                  } catch (error) {\r\n                    const objectErrors = {\r\n                      ...errorsRegister,\r\n                      errorCodeVerify: {\r\n                        ...errorsRegister.errorCodeVerify,\r\n                        error: true,\r\n                        message: error,\r\n                      },\r\n                    };\r\n                    setErrorsRegister(objectErrors);\r\n                    setSpinVisible(false);\r\n                  }\r\n                }}\r\n              >\r\n                <span> Validar </span>\r\n              </button>\r\n            </div>\r\n            <div\r\n              className=\"login-recover-pass\"\r\n              style={{ marginTop: \"15px\", cursor: \"pointer\" }}\r\n            >\r\n              <p\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  setErrorsRegister(copyErrors);\r\n                  try {\r\n                    const verifyData = await handlerVerifyInformation({\r\n                      ...dataForm,\r\n                      verifyPassword,\r\n                    });\r\n                    setErrorFormulary(!verifyData);\r\n                    if (verifyData === true) {\r\n                      await handlerCallApiRegister({\r\n                        ...dataForm,\r\n                        idCustomerType: selectuserCustomer,\r\n                      });\r\n                    }\r\n                  } catch (error) {\r\n                    setErrorFormulary(true);\r\n                    setErrorBase({ ...errorBase, error: true, message: error });\r\n                    setTimeout(() => {\r\n                      setErrorFormulary(false);\r\n                      setErrorBase(errorCatchBase);\r\n                    }, 3000);\r\n                  }\r\n                }}\r\n              >\r\n                Reenviar código\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const successRegister = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> Registro completo </h1>\r\n          <p className=\"recoverInstructions\">\r\n            Bienvenido(a) <strong>{dataForm.givenName}</strong>. Estamos muy\r\n            emocionados de tenerte a bordo. Ingresa a tu cuenta y que comience\r\n            la aventura.\r\n          </p>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <span>Ir al Login</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderTypeComponent = (type) => {\r\n    let component = <div />;\r\n    switch (type) {\r\n      case 1:\r\n        component = selectPerson;\r\n        break;\r\n      case 2:\r\n        component = selectForm;\r\n        break;\r\n      case 3:\r\n        component = insterCodeCompoent;\r\n        break;\r\n      case 4:\r\n        component = successRegister;\r\n        break;\r\n      default:\r\n        component = <div />;\r\n        break;\r\n    }\r\n    return component;\r\n  };\r\n\r\n  const handlerAsyncCallAppis = async () => {\r\n    await handlerCallApiCustomer({ idType: 1 });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { match } = props;\r\n    const params = isEmpty(match.params) === false ? match.params : {};\r\n    if (isEmpty(params) === false) {\r\n      setUserType(2);\r\n      handlerCallGetInvitationUser(params.idInvitation, params);\r\n    } else {\r\n      setUserType(1);\r\n      handlerAsyncCallAppis();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"login_head_logo\">\r\n        <img src={logo} alt=\"Homify Logo\" className=\"login_logo\" />\r\n      </div>\r\n      {renderTypeComponent(userType)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomers: (data) => dispatch(callGetAllCustomers(data)),\r\n  callGetAllPersons: (data) => dispatch(callGetAllPersons(data)),\r\n  callGetAllEndorsement: (data) => dispatch(callGetAllEndorsement(data)),\r\n  callGetAllRegisterUser: (data) => dispatch(callGetAllRegisterUser(data)),\r\n  callGetAllVerifyCode: (data) => dispatch(callGetAllVerifyCode(data)),\r\n  callGetInvitationUser: (paramId) => dispatch(callGetInvitationUser(paramId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx",["350"],"import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { notification } from \"antd\";\r\nimport {\r\n  callGetAllUserProfile,\r\n  callGetAllMenuProfile,\r\n} from \"../../utils/actions/actions\";\r\nimport {\r\n  setDataUserProfile,\r\n  setDataUserMenu,\r\n} from \"../../utils/dispatchs/userProfileDispatch\";\r\n\r\nconst Auth = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllUserProfile,\r\n    dataProfile,\r\n    setDataUserProfile,\r\n    setDataUserMenu,\r\n    callGetAllMenuProfile,\r\n    purgeStore,\r\n  } = props;\r\n\r\n  const handlerCallGetAllUserProfile = async () => {\r\n    try {\r\n      const response = await callGetAllUserProfile(dataProfile.dataProfile);\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      const idSystemUser =\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.idSystemUser) === false\r\n          ? responseResult.idSystemUser\r\n          : null;\r\n      const idLoginHistory =\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.idLoginHistory) === false\r\n          ? responseResult.idLoginHistory\r\n          : null;\r\n      const responseMenu = await callGetAllMenuProfile({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResultMenu =\r\n        isNil(responseMenu) === false &&\r\n        isNil(responseMenu.response) === false &&\r\n        isEmpty(responseMenu.response) === false\r\n          ? responseMenu.response\r\n          : [];\r\n      await setDataUserMenu(responseResultMenu);\r\n      await setDataUserProfile({\r\n        ...dataProfile.dataProfile,\r\n        ...responseResult,\r\n      });\r\n      history.push(\r\n        isEmpty(responseResult) === false &&\r\n          isNil(responseResult.path) === false\r\n          ? responseResult.path\r\n          : \"/websystem\"\r\n      );\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerAsyncCallApiis = async () => {\r\n    await handlerCallGetAllUserProfile();\r\n  };\r\n\r\n  const handlerFinishSession = async () => {\r\n    await purgeStore();\r\n    await sessionStorage.clear();\r\n    await localStorage.clear();\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (window.location.pathname === \"/auth\") {\r\n      handlerAsyncCallApiis();\r\n    } else if (window.location.pathname === \"/logout\") {\r\n      notification.destroy();\r\n      handlerFinishSession();\r\n    }\r\n  }, []);\r\n\r\n  return <div className=\"loader-auth-spiner\" />;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile } = state;\r\n  return { dataProfile };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  setDataUserMenu: (data) => dispatch(setDataUserMenu(data)),\r\n  callGetAllUserProfile: (data) => dispatch(callGetAllUserProfile(data)),\r\n  callGetAllMenuProfile: (data) => dispatch(callGetAllMenuProfile(data)),\r\n  purgeStore: () => dispatch({ type: \"PURGE\" }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Recovery\\RecoveryPass.jsx",["351","352","353","354","355","356"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx",["357","358","359","360","361","362","363"],"import React, { useState, useEffect, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Layout, Menu, Drawer, Dropdown, Avatar } from \"antd\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport \"antd/dist/antd.css\";\r\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from \"@ant-design/icons\";\r\nimport IconDashboard from \"../../assets/icons/iconDashboard.svg\";\r\nimport IconOwner from \"../../assets/icons/iconHome.svg\";\r\nimport IconRenter from \"../../assets/icons/renter.svg\";\r\nimport IconDocument from \"../../assets/icons/document.svg\";\r\nimport IconChat from \"../../assets/icons/chat.svg\";\r\nimport IconEdit from \"../../assets/icons/edit.svg\";\r\nimport IconShortLogo from \"../../assets/icons/logoShortWhite.svg\";\r\nimport IconLongtLogo from \"../../assets/icons/logoLongWhite.svg\";\r\nimport IconNotification from \"../../assets/icons/Notification.svg\";\r\nimport IconProfile from \"../../assets/icons/Profile.svg\";\r\nimport IconClose from \"../../assets/icons/LogoutWhite.svg\";\r\nimport IconCloseLogout from \"../../assets/icons/Logout.svg\";\r\nimport IconLead from \"../../assets/icons/IconLead.svg\";\r\nimport routes from \"../../routes\";\r\nimport SectionChangeImage from \"./section/sectionChangeImage\";\r\nimport { callSetImageProfile } from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\n\r\nconst { Header, Sider } = Layout;\r\n\r\nconst Loading = () => (\r\n  <div className=\"loader-auth-spiner\">\r\n    <div />\r\n  </div>\r\n);\r\n\r\nconst DefaultLayout = (props) => {\r\n  const {\r\n    history,\r\n    authenticated,\r\n    dataProfileMenu,\r\n    dataProfile,\r\n    callSetImageProfile,\r\n    setDataUserProfile,\r\n  } = props;\r\n  const [collapsed, setCollapsed] = useState(true);\r\n  const [isVisibleAvatarSection, setIsVisibleAvatarSection] = useState(false);\r\n  const [collapsedButton, setCollapsedButton] = useState(false);\r\n  const arrayIconst = {\r\n    IconDashboard,\r\n    IconOwner,\r\n    IconRenter,\r\n    IconDocument,\r\n    IconChat,\r\n    IconEdit,\r\n    IconClose,\r\n    IconLead,\r\n  };\r\n\r\n  const nameLocation = () => {\r\n    const name = routes.find((row) => {\r\n      return row.path === props.location.pathname;\r\n    });\r\n    return isNil(name) === false && isNil(name.name) === false\r\n      ? name.name\r\n      : \"Dashboard\";\r\n  };\r\n\r\n  const [nameSection, setNameSection] = useState(nameLocation());\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  const handlerCallSetImageProfile = async (data) => {\r\n    const { idCustomer, idLoginHistory, idSystemUser } = dataProfile;\r\n    try {\r\n      await callSetImageProfile(\r\n        {\r\n          idCustomer,\r\n          idLoginHistory,\r\n          documentName: \"avatar_image\",\r\n          extension: \"png/img\",\r\n          preview: null,\r\n          thumbnail: data,\r\n        },\r\n        idSystemUser\r\n      );\r\n      await setDataUserProfile({\r\n        ...dataProfile,\r\n        thumbnail: data,\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const menu = (\r\n    <Menu>\r\n      <Menu.Item>\r\n        <a\r\n          target=\"_self\"\r\n          rel=\"noopener noreferrer\"\r\n          onClick={() => {\r\n            setIsVisibleAvatarSection(!isVisibleAvatarSection);\r\n          }}\r\n        >\r\n          Imagen de perfil\r\n        </a>\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.ItemGroup title=\"Cambiar tema\">\r\n        <Menu.Item\r\n          style={{ display: \"flex\" }}\r\n          onClick={() => {\r\n            const theme = document.getElementsByTagName(\"body\")[0];\r\n            theme.className = \"theme-light\";\r\n            localStorage.setItem(\"theme-app\", \"theme-light\");\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#ff0282\",\r\n              padding: \"0px 10px\",\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Light\r\n          </div>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          style={{ display: \"flex\" }}\r\n          onClick={() => {\r\n            const theme = document.getElementsByTagName(\"body\")[0];\r\n            theme.className = \"theme-dark\";\r\n            localStorage.setItem(\"theme-app\", \"theme-dark\");\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#0c101d\",\r\n              padding: \"0px 10px\",\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Dark\r\n          </div>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          style={{ display: \"flex\" }}\r\n          onClick={() => {\r\n            const theme = document.getElementsByTagName(\"body\")[0];\r\n            theme.className = \"theme-purple\";\r\n            localStorage.setItem(\"theme-app\", \"theme-purple\");\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#9a78b0\",\r\n              padding: \"0px 10px\",\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Purple\r\n          </div>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          style={{ display: \"flex\" }}\r\n          onClick={() => {\r\n            const theme = document.getElementsByTagName(\"body\")[0];\r\n            theme.className = \"theme-dark-blue\";\r\n            localStorage.setItem(\"theme-app\", \"theme-dark-blue\");\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#072146\",\r\n              padding: \"0px 10px\",\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Dark Blue\r\n          </div>\r\n        </Menu.Item>\r\n      </Menu.ItemGroup>\r\n      <Menu.Divider />\r\n      <Menu.Item style={{ display: \"flex\" }}>\r\n        <img\r\n          className=\"ant-menu-item-icon\"\r\n          width=\"15\"\r\n          src={IconCloseLogout}\r\n          style={{ marginRight: \"5px\" }}\r\n        />\r\n        <a target=\"_self\" rel=\"Cerrrar sesión\" href=\"/logout\">\r\n          Cerrar sesión\r\n        </a>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  useEffect(() => {\r\n    const documentHead = document.getElementsByTagName(\"head\");\r\n    const headExtractNode =\r\n      isNil(documentHead) === false &&\r\n      isEmpty(documentHead) === false &&\r\n      isNil(documentHead[0]) === false\r\n        ? documentHead[0]\r\n        : [];\r\n    if (isNil(dataProfile) === true) {\r\n      history.push(\"/\");\r\n    }\r\n    const getThemeApplication = localStorage.getItem(\"theme-app\");\r\n\r\n    if (isNil(getThemeApplication) === false) {\r\n      const theme = document.getElementsByTagName(\"body\")[0];\r\n      theme.className = getThemeApplication;\r\n      localStorage.setItem(\"theme-app\", getThemeApplication);\r\n    } else {\r\n      const theme = document.getElementsByTagName(\"body\")[0];\r\n      theme.className = \"theme-light\";\r\n      localStorage.setItem(\"theme-app\", \"theme-light\");\r\n    }\r\n    if (dataProfile.idUserType === 3 || dataProfile.idUserType === 2) {\r\n      const scriptCreate = document.createElement(\"script\");\r\n      scriptCreate.id = \"script-make-smartsupp-hfy\";\r\n      scriptCreate.innerHTML = `\r\n      var _smartsupp = _smartsupp || {};\r\n      _smartsupp.key = \"c63bfecea33039226338a89e3da23617cb9fd6c0\";\r\n      window.smartsupp ||\r\n        (function (d) {\r\n          var s,\r\n            c,\r\n            o = (smartsupp = function () {\r\n              o._.push(arguments);\r\n            });\r\n          o._ = [];\r\n          s = d.getElementsByTagName(\"script\")[0];\r\n          c = d.createElement(\"script\");\r\n          c.type = \"text/javascript\";\r\n          c.charset = \"utf-8\";\r\n          c.async = true;\r\n          c.src = \"https://www.smartsuppchat.com/loader.js?\";\r\n          s.parentNode.insertBefore(c, s);\r\n        })(document);`;\r\n      headExtractNode.appendChild(scriptCreate);\r\n\r\n      window.smartsupp(\"email\", dataProfile.email);\r\n      window.smartsupp(\"name\", dataProfile.showName);\r\n      window.smartsupp(\"variables\", {\r\n        userType: {\r\n          label: \"Tipo de usuario\",\r\n          value: dataProfile.userType,\r\n        },\r\n        idSystemUser: {\r\n          label: \"idSystemUser\",\r\n          value: dataProfile.idSystemUser,\r\n        },\r\n        idCustomer: {\r\n          label: \"idCustomer\",\r\n          value: dataProfile.idCustomer,\r\n        },\r\n        idCustomerTenant: {\r\n          label: \"Id Inquilino\",\r\n          value: dataProfile.idCustomerTenant,\r\n        },\r\n        agentNo: {\r\n          label: \"Número de agente\",\r\n          value: dataProfile.agentNo,\r\n        },\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const name = routes.find((row) => {\r\n      return row.path === props.location.pathname;\r\n    });\r\n\r\n    setNameSection(\r\n      isNil(name) === false && isNil(name.name) === false\r\n        ? name.name\r\n        : \"Dashboard\"\r\n    );\r\n  }, [props.location.pathname]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isNil(dataProfile) === false && (\r\n        <Layout>\r\n          <Drawer\r\n            placement=\"left\"\r\n            className=\"drawer-menu_header\"\r\n            closable={false}\r\n            onClose={() => {\r\n              setCollapsedButton(!collapsedButton);\r\n            }}\r\n            visible={collapsedButton}\r\n            key=\"left\"\r\n          >\r\n            {\" \"}\r\n            <div className=\"logo\">\r\n              <img src={IconLongtLogo} alt=\"Logo short\" />\r\n            </div>\r\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n              {isEmpty(dataProfileMenu) === false &&\r\n                dataProfileMenu.map((row) => {\r\n                  return (\r\n                    <Menu.Item\r\n                      key={`${row.idMenu}`}\r\n                      onClick={(event) => {\r\n                        history.push(row.path);\r\n                        setNameSection(row.menuName);\r\n                        setCollapsedButton(!collapsedButton);\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"ant-menu-item-icon\"\r\n                        width=\"15\"\r\n                        src={arrayIconst[row.icon]}\r\n                      />\r\n                      <span className=\"tex-menu-icon-ant\">{row.menuName}</span>\r\n                    </Menu.Item>\r\n                  );\r\n                })}\r\n            </Menu>\r\n            <div\r\n              class=\"ant-layout-sider-trigger\"\r\n              style={{ width: \"100%\" }}\r\n              onClick={() => {\r\n                setCollapsedButton(!collapsedButton);\r\n              }}\r\n            >\r\n              <span role=\"img\" aria-label=\"left\" class=\"anticon anticon-left\">\r\n                <svg\r\n                  viewBox=\"64 64 896 896\"\r\n                  focusable=\"false\"\r\n                  data-icon=\"left\"\r\n                  width=\"1em\"\r\n                  height=\"1em\"\r\n                  fill=\"currentColor\"\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  <path d=\"M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z\"></path>\r\n                </svg>\r\n              </span>\r\n            </div>\r\n          </Drawer>\r\n          <Sider collapsible collapsed={collapsed} onCollapse={toggle}>\r\n            <div className=\"logo\">\r\n              <img\r\n                src={IconLongtLogo}\r\n                alt=\"Logo short\"\r\n                style={{ display: collapsed === true ? \"none\" : \"block\" }}\r\n              />\r\n              <img\r\n                src={IconShortLogo}\r\n                alt=\"Logo short\"\r\n                style={{ display: collapsed === true ? \"block\" : \"none\" }}\r\n              />\r\n            </div>\r\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n              {isEmpty(dataProfileMenu) === false &&\r\n                dataProfileMenu.map((row) => {\r\n                  return (\r\n                    <Menu.Item\r\n                      key={`${row.idMenu}`}\r\n                      onClick={(event) => {\r\n                        setNameSection(row.menuName);\r\n                        history.push(row.path);\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"ant-menu-item-icon\"\r\n                        width=\"15\"\r\n                        src={arrayIconst[row.icon]}\r\n                      />\r\n                      <span className=\"tex-menu-icon-ant\">{row.menuName}</span>\r\n                    </Menu.Item>\r\n                  );\r\n                })}\r\n            </Menu>\r\n          </Sider>\r\n          <Layout className=\"site-layout\">\r\n            <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n              <SectionChangeImage\r\n                isModalVisible={isVisibleAvatarSection}\r\n                onClose={() => {\r\n                  setIsVisibleAvatarSection(!isVisibleAvatarSection);\r\n                }}\r\n                onSelectImage={(preview) => {\r\n                  handlerCallSetImageProfile(preview);\r\n                }}\r\n              />\r\n              <div className=\"header-title-button\">\r\n                <button\r\n                  className=\"button-drawer-header\"\r\n                  onClick={() => {\r\n                    setCollapsedButton(!collapsedButton);\r\n                  }}\r\n                >\r\n                  {React.createElement(\r\n                    collapsedButton ? MenuUnfoldOutlined : MenuFoldOutlined\r\n                  )}\r\n                </button>\r\n                <h2>{nameSection}</h2>\r\n              </div>\r\n              <div className=\"header-info-user\">\r\n                <div className=\"hi-user-name-type\">\r\n                  <strong>{dataProfile.showName}</strong>\r\n                  <span>{dataProfile.userType}</span>\r\n                </div>\r\n                <button className=\"button-header\">\r\n                  <img className=\"icon-header-1\" src={IconNotification} />\r\n                </button>\r\n                <Dropdown\r\n                  overlay={menu}\r\n                  placement=\"bottomRight\"\r\n                  arrow\r\n                  trigger=\"click\"\r\n                >\r\n                  <button className=\"button-header\">\r\n                    {isNil(dataProfile.thumbnail) === false ? (\r\n                      <Avatar size={50} src={dataProfile.thumbnail} />\r\n                    ) : (\r\n                      <img className=\"icon-header-2\" src={IconProfile} />\r\n                    )}\r\n                  </button>\r\n                </Dropdown>\r\n              </div>\r\n            </Header>\r\n            <Suspense fallback={<Loading />}>\r\n              <Switch>\r\n                {routes.map((route) => {\r\n                  return (\r\n                    <Route\r\n                      history={history}\r\n                      key={route.id}\r\n                      path={route.path}\r\n                      exact={route.exact}\r\n                      name={route.name}\r\n                      render={(prop) => {\r\n                        if (authenticated === true) {\r\n                          return (\r\n                            <route.component {...prop} history={history} />\r\n                          );\r\n                        } else {\r\n                          return (\r\n                            <Redirect\r\n                              to={{\r\n                                pathname: \"/\",\r\n                                state: { from: props.location },\r\n                              }}\r\n                            />\r\n                          );\r\n                        }\r\n                      }}\r\n                    />\r\n                  );\r\n                })}\r\n              </Switch>\r\n            </Suspense>\r\n          </Layout>\r\n        </Layout>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n    dataProfileMenu: dataProfileMenu.dataProfileMenu,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callSetImageProfile: (data, id) => dispatch(callSetImageProfile(data, id)),\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultLayout);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomInput.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\section\\sectionChangeImage.jsx",["364","365","366","367","368","369","370","371","372","373","374","375","376","377","378"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Avatar from \"react-avatar-edit\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n} from \"antd\";\r\nimport {\r\n  InfoCircleOutlined,\r\n  UserOutlined,\r\n  SyncOutlined,\r\n  CloseOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionChangeImage = (props) => {\r\n  const { isModalVisible, onClose, onSelectImage } = props;\r\n  const [preview, setPreview] = useState(null);\r\n\r\n  const refAvatar = useRef(null);\r\n\r\n  const onCrop = (view) => {\r\n    setPreview(view);\r\n  };\r\n\r\n  const onCloseView = () => {\r\n    setPreview(null);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n    >\r\n      <div className=\"form-modal\">\r\n        <div className=\"title-head-modal\">\r\n          <button\r\n            className=\"arrow-back-to\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setPreview(null);\r\n              onClose();\r\n            }}\r\n          >\r\n            <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n          <h1>Imagen de perfil</h1>\r\n          {isNil(preview) === false && (\r\n            <img\r\n              src={preview}\r\n              alt=\"Preview\"\r\n              width={50}\r\n              height={50}\r\n              className=\"image-avatar-little\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"avatar-image\">\r\n          <Avatar\r\n            width={320}\r\n            height={295}\r\n            label=\"Haz click para seleccionar imagen\"\r\n            onCrop={onCrop}\r\n            onClose={onCloseView}\r\n            src={null}\r\n            ref={refAvatar}\r\n            cropRadius={50}\r\n            maxCropRadius={60}\r\n          />\r\n        </div>\r\n        <div className=\"button_init_primary\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onSelectImage(preview);\r\n              setPreview(null);\r\n              onClose();\r\n              refAvatar.current.onCloseClick();\r\n            }}\r\n          >\r\n            <span>Guardar</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionChangeImage;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx",["379","380","381"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport \"moment/locale/es\";\r\nimport HomeActive from \"../../assets/iconSteps/iconHome.svg\";\r\nimport HomeInactive from \"../../assets/iconSteps/iconHomeInactive.svg\";\r\nimport IconProfile from \"../../assets/iconSteps/Profile.svg\";\r\nimport IconProfileInactive from \"../../assets/iconSteps/ProfileInactive.svg\";\r\nimport Work from \"../../assets/iconSteps/Work.svg\";\r\nimport WorkInactive from \"../../assets/iconSteps/WorkInactive.svg\";\r\nimport DocumentIcon from \"../../assets/iconSteps/document.svg\";\r\nimport DocumentIconInactive from \"../../assets/iconSteps/documentInactive.svg\";\r\nimport Renter from \"../../assets/iconSteps/renter.svg\";\r\nimport RenterInactive from \"../../assets/iconSteps/renterInactive.svg\";\r\nimport Shield from \"../../assets/iconSteps/Shield.svg\";\r\nimport ShieldInactive from \"../../assets/iconSteps/ShieldInactive.svg\";\r\nimport SectionInfoUser from \"./sections/sectionInfoUser\";\r\nimport SectionCurrentAddress from \"./sections/currentAddress\";\r\nimport SectionCurrentWork from \"./sections/sectionCurrentWork\";\r\nimport SectionInfoReferences from \"./sections/sectionInfoReferences\";\r\nimport SectionDocumentation from \"./sections/sectionDocumentation\";\r\nimport SectionInfoAval from \"./sections/sectionInfoAval\";\r\nimport FrontFunctions from \"../../utils/actions/frontFunctions\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetTypeFormTenant,\r\n  callSetTypeFormTenant,\r\n  callGetZipCodeAdress,\r\n  callGetTypeFormDocumentTenant,\r\n  callSetTypeFormReferences,\r\n  callGetNationalities,\r\n  callGetIdTypes,\r\n  callGetOccupations,\r\n  callGetMaritalStatus,\r\n  callGetMaritalRegime,\r\n  callGetAllCommercialSocietyTypes,\r\n  callGetAllStates,\r\n  callGetTypeFormProperties,\r\n} from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst TypeFormUser = (props) => {\r\n  const {\r\n    dataProfile,\r\n    callGetTypeFormTenant,\r\n    callSetTypeFormTenant,\r\n    callGetTypeFormDocumentTenant,\r\n    callGetMaritalRegime,\r\n    callGetMaritalStatus,\r\n    callGetZipCodeAdress,\r\n    callSetTypeFormReferences,\r\n    callGetNationalities,\r\n    callGetIdTypes,\r\n    callGetOccupations,\r\n    callGetAllCommercialSocietyTypes,\r\n    callGetAllStates,\r\n    callGetTypeFormProperties,\r\n    history,\r\n    match,\r\n  } = props;\r\n  const frontFunctions = new FrontFunctions();\r\n  const [current, setCurrent] = useState(null);\r\n  const [dataForm, setDataForm] = useState({});\r\n  const [dataReferences, setDataReferences] = useState([]);\r\n  const [dataProperties, setDataProperties] = useState([]);\r\n  const [dataDocuments, setDataDocuments] = useState([]);\r\n  const [dataDocumentsEndorsement, setDataDocumentsEndorsement] = useState([]);\r\n  const [dataZipCodeAdress, setDataZipCodeAdress] = useState({});\r\n  const [\r\n    dataZipCodeAdressEndorsement,\r\n    setDataZipCodeAdressEndorsement,\r\n  ] = useState({});\r\n  const [dataZipCatalog, setDataZipCatalog] = useState([]);\r\n  const [dataZipCatalogEndorsement, setDataZipCatalogEndorsement] = useState(\r\n    []\r\n  );\r\n  const [dataNationalities, setDataNationalities] = useState([]);\r\n  const [dataIdTypes, setDataIdTypes] = useState([]);\r\n  const [dataOccupations, setDataOccupations] = useState([]);\r\n  const [dataMaritalStatus, setDataMaritalStatus] = useState([]);\r\n  const [dataMaritalRegime, setDataMaritalRegime] = useState([]);\r\n  const [dataCommerceSociality, setDataCommerceSociety] = useState([]);\r\n  const [dataStates, setDataStates] = useState([]);\r\n  const [finishCallApis, setFinishCallApis] = useState(false);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const next = (stepTwo = false) => {\r\n    if (stepTwo === false) {\r\n      setCurrent(current + 1);\r\n    } else {\r\n      setCurrent(current + 2);\r\n    }\r\n  };\r\n\r\n  const prev = () => {\r\n    setCurrent(current - 1);\r\n  };\r\n\r\n  const handlerCallSetTypeFormTenant = async (data) => {\r\n    const {\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callSetTypeFormTenant({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].message) === false\r\n          ? response.response[0].message\r\n          : \"\";\r\n      showMessageStatusApi(\r\n        isEmpty(responseResult) === false\r\n          ? responseResult\r\n          : \"Información actualizada exitosamente.\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallSetTypeFormReferences = async (data) => {\r\n    const {\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    try {\r\n      await callSetTypeFormReferences({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetZipCodeAdress = async (data, isEndorsement = false) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetZipCodeAdress({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false &&\r\n        isNil(response.response1) === false &&\r\n        isNil(response.response1[0]) === false\r\n          ? response.response1[0]\r\n          : {};\r\n      const responseResult2 =\r\n        isNil(response) === false && isNil(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      if (isEndorsement === true) {\r\n        setDataZipCodeAdressEndorsement(responseResult1);\r\n        setDataZipCatalogEndorsement(responseResult2);\r\n      } else {\r\n        setDataZipCodeAdress(responseResult1);\r\n        setDataZipCatalog(responseResult2);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetTypeFormProperties = async (id, step) => {\r\n    const {\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idContract,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetTypeFormProperties({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idContract,\r\n        idTypeForm: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        stepIn: step,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].typeFormProperties) === false\r\n          ? JSON.parse(response.response[0].typeFormProperties)\r\n          : [];\r\n      setDataProperties(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetNationalities = async () => {\r\n    const {\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetNationalities({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataNationalities(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetIdTypes = async () => {\r\n    const {\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetIdTypes({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataIdTypes(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetOccupations = async () => {\r\n    const {\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetOccupations({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataOccupations(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetMaritalStatus = async () => {\r\n    const { idCustomerTF, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetMaritalStatus({\r\n        idCustomer: idCustomerTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataMaritalStatus(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetMaritalRegime = async () => {\r\n    const { idCustomerTF, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetMaritalRegime({\r\n        idCustomer: idCustomerTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataMaritalRegime(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCommercialSocietyTypes = async () => {\r\n    const {\r\n      idCustomerTF,\r\n      idCustomerTenantTF,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCommercialSocietyTypes({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataCommerceSociety(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllStates = async () => {\r\n    const {\r\n      idCustomerTF,\r\n      idCustomerTenantTF,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetAllStates({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataStates(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetTypeFormDocumentTenant = async (data, type) => {\r\n    const {\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetTypeFormDocumentTenant({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idTypeForm: data.idTypeForm,\r\n        isFirstTime: data.isFirstTime,\r\n        type,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      if (type === 1) {\r\n        setDataDocuments(responseResult);\r\n      } else if (type === 2) {\r\n        setDataDocumentsEndorsement(responseResult);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const steps = [\r\n    {\r\n      title: \"Información general\",\r\n      content: (\r\n        <SectionInfoUser\r\n          dataFormSave={dataForm}\r\n          dataProperties={dataProperties}\r\n          dataNationalities={dataNationalities}\r\n          dataCommerceSociality={dataCommerceSociality}\r\n          dataStates={dataStates}\r\n          dataIdTypes={dataIdTypes}\r\n          onClickNext={async (data) => {\r\n            try {\r\n              await handlerCallSetTypeFormTenant({ ...data, stepIn: 1 });\r\n              next();\r\n              setDataForm({ ...dataForm, ...data });\r\n            } catch (error) {}\r\n          }}\r\n        />\r\n      ),\r\n      iconActive: IconProfile,\r\n      iconInactive: IconProfileInactive,\r\n    },\r\n    {\r\n      title: \"Dirección actual\",\r\n      content: (\r\n        <SectionCurrentAddress\r\n          dataFormSave={dataForm}\r\n          dataProperties={dataProperties}\r\n          onClickNext={async (data) => {\r\n            try {\r\n              await handlerCallSetTypeFormTenant({\r\n                ...data,\r\n                stepIn:\r\n                  dataForm.requiresCustomerTenantEntInfo === false ? 2 : 4,\r\n              });\r\n              next(\r\n                dataForm.requiresCustomerTenantEntInfo === false ? false : true\r\n              );\r\n              setDataForm({ ...dataForm, ...data });\r\n              setDataZipCodeAdress({});\r\n              setDataZipCatalog([]);\r\n            } catch (error) {}\r\n          }}\r\n          dataZipCatalog={dataZipCatalog}\r\n          onChangeZipCode={(zipCode) => {\r\n            hanlderCallGetZipCodeAdress({ type: 1, zipCode });\r\n          }}\r\n          dataZipCodeAdress={dataZipCodeAdress}\r\n          onClickBack={() => prev()}\r\n        />\r\n      ),\r\n      iconActive: HomeActive,\r\n      iconInactive: HomeInactive,\r\n    },\r\n    {\r\n      title: \"Información laboral\",\r\n      content: (\r\n        <SectionCurrentWork\r\n          dataFormSave={dataForm}\r\n          dataProperties={dataProperties}\r\n          onClickNext={async (data) => {\r\n            try {\r\n              await handlerCallSetTypeFormTenant({ ...data, stepIn: 3 });\r\n              next();\r\n              setDataForm({ ...dataForm, ...data });\r\n            } catch (error) {}\r\n          }}\r\n          dataOccupations={dataOccupations}\r\n          frontFunctions={frontFunctions}\r\n          onClickBack={() => prev()}\r\n        />\r\n      ),\r\n      iconActive: Work,\r\n      iconInactive: WorkInactive,\r\n    },\r\n    {\r\n      title: \"Referencias\",\r\n      content: (\r\n        <SectionInfoReferences\r\n          dataFormSave={dataForm}\r\n          dataReferences={dataReferences}\r\n          onClickSendReferences={(data) => {\r\n            handlerCallSetTypeFormReferences(data);\r\n          }}\r\n          onClickNext={() => {\r\n            next();\r\n          }}\r\n          onClickBack={() => prev()}\r\n        />\r\n      ),\r\n      iconActive: Renter,\r\n      iconInactive: RenterInactive,\r\n    },\r\n    {\r\n      title: \"Documentación\",\r\n      content: (\r\n        <SectionDocumentation\r\n          dataForm={dataForm}\r\n          onClickNext={() => {\r\n            handlerCallGetTypeFormDocumentTenant(dataForm, 1);\r\n            next();\r\n          }}\r\n          onClickBack={() => prev()}\r\n          dataDocuments={dataDocuments}\r\n          typeDocument={1}\r\n        />\r\n      ),\r\n      iconActive: DocumentIcon,\r\n      iconInactive: DocumentIconInactive,\r\n    },\r\n    {\r\n      title: \"Información aval\",\r\n      content: (\r\n        <SectionInfoAval\r\n          frontFunctions={frontFunctions}\r\n          dataProperties={dataProperties}\r\n          dataNationalities={dataNationalities}\r\n          dataIdTypes={dataIdTypes}\r\n          dataFormSave={dataForm}\r\n          dataDocuments={dataDocumentsEndorsement}\r\n          onClickFinish={async (data) => {\r\n            const { params } = match;\r\n            const idSection = params.idSection;\r\n            try {\r\n              await handlerCallSetTypeFormTenant({ ...data, stepIn: 5 });\r\n              if (isNil(idSection) === false) {\r\n                if (dataProfile.idUserType === 1) {\r\n                  history.push(\"/websystem/dashboard-admin\");\r\n                } else if (dataProfile.idUserType === 5) {\r\n                  history.push(\"/websystem/dashboard-attorney\");\r\n                } else if (dataProfile.idUserType === 7) {\r\n                  history.push(\"/websystem/dashboard-controldesk\");\r\n                }\r\n              } else {\r\n                history.push(\"/websystem/dashboard-tenant\");\r\n              }\r\n            } catch (error) {}\r\n          }}\r\n          onChangeZipCode={(zipCode, fiador) => {\r\n            hanlderCallGetZipCodeAdress({ type: 1, zipCode }, fiador);\r\n          }}\r\n          dataZipCatalog={dataZipCatalog}\r\n          dataZipCodeAdress={dataZipCodeAdress}\r\n          dataZipCatalogEndorsement={dataZipCatalogEndorsement}\r\n          dataZipCodeAdressEndorsement={dataZipCodeAdressEndorsement}\r\n          onClickBack={() => {\r\n            prev();\r\n          }}\r\n          typeDocument={2}\r\n          dataMaritalStatus={dataMaritalStatus}\r\n          dataMaritalRegime={dataMaritalRegime}\r\n        />\r\n      ),\r\n      iconActive: Shield,\r\n      iconInactive: ShieldInactive,\r\n    },\r\n  ];\r\n\r\n  const handlerCallGetTypeFormTenant = async () => {\r\n    const { params } = match;\r\n    const {\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idContract,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    const idSection = params.idSection;\r\n    try {\r\n      const response = await callGetTypeFormTenant({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idContract,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false &&\r\n        isNil(response.response1) === false &&\r\n        isNil(response.response1[0]) === false &&\r\n        isEmpty(response.response1[0]) === false\r\n          ? response.response1[0]\r\n          : {};\r\n      const responseResult2 =\r\n        isNil(response) === false &&\r\n        isNil(response.response2) === false &&\r\n        isEmpty(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      if (\r\n        isEmpty(responseResult1) === false &&\r\n        isNil(responseResult1.stepIn) === false &&\r\n        isNil(idSection) === true\r\n      ) {\r\n        setCurrent(responseResult1.stepIn);\r\n      }\r\n      if (\r\n        isEmpty(responseResult1) === false &&\r\n        isNil(responseResult1.requiresCustomerTenantEntInfo) === false &&\r\n        responseResult1.requiresCustomerTenantEntInfo === true\r\n      ) {\r\n        handlerCallGetAllCommercialSocietyTypes();\r\n        handlerCallGetAllStates();\r\n      }\r\n      setDataForm(responseResult1);\r\n      setDataReferences(responseResult2);\r\n      await handlerCallGetTypeFormDocumentTenant(responseResult1, 1);\r\n      await handlerCallGetTypeFormDocumentTenant(responseResult1, 2);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAsyncApis = async () => {\r\n    await handlerCallGetTypeFormTenant();\r\n    await hanlderCallGetNationalities();\r\n    await hanlderCallGetIdTypes();\r\n    await hanlderCallGetOccupations();\r\n    await handlerCallGetMaritalStatus();\r\n    await handlerCallGetMaritalRegime();\r\n    setFinishCallApis(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { params } = match;\r\n    handlerCallAsyncApis();\r\n    const idSection = params.idSection;\r\n    if (isNil(idSection) === false) {\r\n      setCurrent(Number(idSection));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataForm) === false) {\r\n      hanlderCallGetTypeFormProperties(dataForm.idTypeForm, current);\r\n    }\r\n  }, [current, dataForm]);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"steps-style-header\">\r\n          <hr />\r\n          {isEmpty(steps) === false &&\r\n            finishCallApis === true &&\r\n            steps.map((row, index) => {\r\n              return (\r\n                <div className=\"step-icon\">\r\n                  <div\r\n                    className={\r\n                      current === index\r\n                        ? \"background-circle-active\"\r\n                        : \"background-circle-inactive\"\r\n                    }\r\n                  >\r\n                    <img\r\n                      src={\r\n                        current === index ? row.iconActive : row.iconInactive\r\n                      }\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                  <span\r\n                    style={{\r\n                      visibility: current !== index ? \"visible\" : \"hidden\",\r\n                      color: \"#d6d8e7\",\r\n                    }}\r\n                    className=\"title-steps-typeform\"\r\n                  >\r\n                    {row.title}\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n        {isEmpty(steps) === false && finishCallApis === true && (\r\n          <div className=\"steps-content\">{steps[current].content}</div>\r\n        )}\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetTypeFormTenant: (data) => dispatch(callGetTypeFormTenant(data)),\r\n  callSetTypeFormTenant: (data) => dispatch(callSetTypeFormTenant(data)),\r\n  callSetTypeFormReferences: (data) =>\r\n    dispatch(callSetTypeFormReferences(data)),\r\n  callGetZipCodeAdress: (data) => dispatch(callGetZipCodeAdress(data)),\r\n  callGetTypeFormDocumentTenant: (data) =>\r\n    dispatch(callGetTypeFormDocumentTenant(data)),\r\n  callGetNationalities: (data) => dispatch(callGetNationalities(data)),\r\n  callGetIdTypes: (data) => dispatch(callGetIdTypes(data)),\r\n  callGetOccupations: (data) => dispatch(callGetOccupations(data)),\r\n  callGetMaritalStatus: (data) => dispatch(callGetMaritalStatus(data)),\r\n  callGetMaritalRegime: (data) => dispatch(callGetMaritalRegime(data)),\r\n  callGetAllCommercialSocietyTypes: (data) =>\r\n    dispatch(callGetAllCommercialSocietyTypes(data)),\r\n  callGetAllStates: (data) => dispatch(callGetAllStates(data)),\r\n  callGetTypeFormProperties: (data) =>\r\n    dispatch(callGetTypeFormProperties(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TypeFormUser);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx",["382","383","384","385","386","387","388","389","390"],"import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, notification, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport IconCalendar from \"../../assets/icons/Calendar.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconDanger from \"../../assets/icons/Danger.svg\";\r\nimport FileReport from \"../../assets/icons/FileReport.svg\";\r\nimport MessagesIcon from \"../../assets/icons/MessagesIcon.svg\";\r\nimport DocumentsIcon from \"../../assets/icons/DocumentsIcon.svg\";\r\nimport Arrow from \"../../assets/icons/Arrow.svg\";\r\nimport Tools from \"../../assets/icons/Tools.svg\";\r\nimport Transport from \"../../assets/icons/Transport.svg\";\r\nimport SectionContractAvailable from \"./sections/sectionContractAvailableOwner\";\r\nimport SectionDepositGuarantee from \"./sections/sectionDepositGuarantee\";\r\nimport FrontFunctions from \"../../utils/actions/frontFunctions\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport { API_CONSTANTS, HEADER } from \"../../utils/constants/apiConstants\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\nimport {\r\n  callGetAllCustomerTenantDashboardById,\r\n  callSetContract,\r\n  callAddDocument,\r\n  callAddCommentContract,\r\n  callGetContract,\r\n  callGetContractComment,\r\n  callGetCustomerMessage,\r\n  callAddCustomerMessage,\r\n  callAddDocumentContractId,\r\n  callGetPaymentContract,\r\n  callGetPaymentTypes,\r\n} from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport SectionMessages from \"./sectionDocuments/sectionMessages\";\r\nimport SectionRegisterPayment from \"./sectionDocuments/sectionRegisterPayment\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Tenant = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomerTenantById,\r\n    dataProfile,\r\n    callAddDocument,\r\n    callGetPaymentTypes,\r\n    callGetPaymentContract,\r\n    setDataUserProfile,\r\n    callSetContract,\r\n    callAddCommentContract,\r\n    callGetContract,\r\n    callGetContractComment,\r\n    callGetCustomerMessage,\r\n    callAddCustomerMessage,\r\n    callAddDocumentContractId,\r\n  } = props;\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [dataPayments, setDataPayments] = useState([]);\r\n  const [isVisibleMessages, setIsVisibleMessages] = useState(false);\r\n  const [isVisiblePaymentRent, setIsVisiblePaymentRent] = useState(false);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [dataGetContract, setDataGetContract] = useState([]);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [isModalVisiblePolicy, setIsModalVisiblePolicy] = useState(false);\r\n  const frontFunctions = new FrontFunctions();\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const args = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Antes de iniciar el formulario debes tener lista una identificación\r\n          oficial, tus últimos 3 comprobantes de ingresos y una carta de la\r\n          empresa donde trabajas que acredite desde cuando estás laborando en la\r\n          empresa. Adicional, necesitaras la escritura del inmueble que quedara\r\n          como garantía y los datos e identificación del Aval.\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            notification.destroy();\r\n            history.push(\"/websystem/typeform-user\");\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Ir al formulario</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{\r\n          fontFamily: \"Poppins\",\r\n          fontSize: \"12px\",\r\n          color: \"var(--color-primary)\",\r\n        }}\r\n      >\r\n        Solicitud de Investigación Persona Física con o sin Aval\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const argsv2 = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Buen dia <strong>Sebastian</strong>, estamos en espera del pago de tu{\" \"}\r\n          <strong>depósito en ganarantía</strong>.<br /> <br />\r\n          Si no puedes pagar el\r\n          <strong> depósito en ganarantía</strong> tenemos estas opciones para\r\n          ti\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setIsModalVisiblePolicy(!isModalVisiblePolicy);\r\n            notification.destroy();\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Revisar opciones</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{\r\n          fontFamily: \"Poppins\",\r\n          fontSize: \"12px\",\r\n          color: \"var(--color-primary)\",\r\n        }}\r\n      >\r\n        Depósito en Garantia\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCustomerMessage = async (data, data2) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddCustomerMessage({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data2,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      handlerCallGetCustomerMessage(data2);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentTypes = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPayments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCustomerTenantById = async () => {\r\n    const {\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idCustomerTenant,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerTenantById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenant(responseResult);\r\n      handlerCallGetCustomerMessage({\r\n        idContract: responseResult.idContract,\r\n        idCustomerTenant: responseResult.idCustomerTenant,\r\n        idCustomer: responseResult.idCustomer,\r\n      });\r\n      handlerCallGetAllPaymentTypes({\r\n        type: 1,\r\n        idContract: responseResult.idContract,\r\n        idCustomerTenant: responseResult.idCustomerTenant,\r\n      });\r\n      if (\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.isTypeFormCompleted) === false &&\r\n        responseResult.isTypeFormCompleted === false\r\n      ) {\r\n        setDataUserProfile({\r\n          ...dataProfile,\r\n          idCustomerTenantTF: responseResult.idCustomerTenant,\r\n          idCustomerTF: responseResult.idCustomer,\r\n          idContract: responseResult.idContract,\r\n        });\r\n        notification.open(args);\r\n        //notification.open(argsv2);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentContract = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callGetPaymentContract({\r\n        ...data,\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      handlerCallGetAllCustomerTenantById();\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddDocumentContractId = async (data, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddDocumentContractId(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContract = async (data, name) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      if (data.download === false) {\r\n        const response = await callGetContract({\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        });\r\n        const responseResult =\r\n          isNil(response) === false &&\r\n          isNil(response.response) === false &&\r\n          isNil(response.response[0]) === false\r\n            ? response.response[0]\r\n            : {};\r\n        setDataGetContract(responseResult);\r\n        if (isEmpty(responseResult) === false && data.process === true) {\r\n          handlerCallAddDocumentContractId(\r\n            {\r\n              type: data.type,\r\n              idContract: responseResult.idContract,\r\n            },\r\n            responseResult.idDocument\r\n          );\r\n        }\r\n      } else {\r\n        const { token } = dataProfile;\r\n        const response = await fetch(\r\n          `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT}`,\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              ...data,\r\n              idSystemUser,\r\n              idLoginHistory,\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"Access-Control-Allow-Origin\": \"*\",\r\n              Authorization: `Bearer ${token}`,\r\n              \"Access-Control-Allow-Credentials\": true,\r\n            },\r\n          }\r\n        );\r\n        if (isNil(response.status) === false && response.status !== 200) {\r\n          throw isNil(response.statusText) === false ? response.statusText : \"\";\r\n        }\r\n        const label = `${name}_${moment().format(\"YYYYMMDD-HHmm\")}`;\r\n        const blob = await response.blob();\r\n        const link = document.createElement(\"a\");\r\n        link.className = \"download\";\r\n        link.download = `${label}.${\"docx\"}`;\r\n        link.href = URL.createObjectURL(blob);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.parentElement.removeChild(link);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, type) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: type.idPaymentType,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(data.originFileObj, dataDocument);\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      return Promise.resolve(documentId);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCommentContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddCommentContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu comentario se envio correctamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallSetContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callSetContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu solicitud se procesó exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllCustomerTenantById();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <SectionContractAvailable\r\n        dataProfile={dataProfile}\r\n        isModalVisible={isModalVisible}\r\n        onClose={() => {\r\n          setIsModalVisible(!isModalVisible);\r\n        }}\r\n        dataGetContract={dataGetContract}\r\n        onAddCommentContract={(data) => {\r\n          handlerCallAddCommentContract(data);\r\n        }}\r\n        onVisualiceDocument={async (data) => {\r\n          try {\r\n            await handlerCallGetContract(data);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onDownloadDocument={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContract(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onAcceptContract={async (data) => {\r\n          try {\r\n            await handlerCallSetContract(data);\r\n          } catch (error) {}\r\n        }}\r\n        onFinishContractFlow={() => {\r\n          handlerCallGetAllCustomerTenantById();\r\n        }}\r\n      />\r\n      <SectionDepositGuarantee\r\n        isModalVisible={isModalVisiblePolicy}\r\n        onClose={() => {\r\n          setIsModalVisiblePolicy(!isModalVisiblePolicy);\r\n        }}\r\n        frontFunctions={frontFunctions}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataTenant.shortNameTenant}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataTenant.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"action-buttons-top\">\r\n            <div className=\"button_init_primary\"></div>\r\n            {dataTenant.canSignContract === true && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    handlerCallGetContract({\r\n                      process: false,\r\n                      url: null,\r\n                      download: false,\r\n                      idContract: dataTenant.idContract,\r\n                      idCustomerTenant: dataTenant.idCustomerTenant,\r\n                      idCustomer: dataTenant.idCustomer,\r\n                      type: 1,\r\n                    });\r\n                    setIsModalVisible(!isModalVisible);\r\n                  }}\r\n                >\r\n                  <span>¡Contrato Disponible!</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n            {dataTenant.canDeal === 1 && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setIsVisiblePaymentRent(!isVisiblePaymentRent);\r\n                    setIsVisibleMessages(false);\r\n                  }}\r\n                >\r\n                  <span>Pagar renta</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconCalendar} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.nextPaymentAt}</h2>\r\n            <span>Fecha de próximo pago</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.currentRent}</h2>\r\n            <span>Monto de renta</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconDanger} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.interestAmount}</h2>\r\n            <span>Moratorios</span>\r\n          </div>\r\n        </div>\r\n        {dataTenant.canDeal !== 0 && (\r\n          <div className=\"main-information-owner\">\r\n            <div className=\"title-cards\">\r\n              <span>Acciones</span>\r\n            </div>\r\n            <div className=\"section-information-actions\">\r\n              <div className=\"section-information-buttons\">\r\n                <div className=\"section-information-button-2\">\r\n                  <img src={Tools} height={62} alt=\"Reportar incidencia\" />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {}}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Cotizar incidencia</span>\r\n                  </button>\r\n                </div>\r\n                <div className=\"section-information-button-3\">\r\n                  <img src={Transport} alt=\"Reportar incidencia\" height={62} />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {}}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Solicitar mudanza</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {isVisibleMessages === false && isVisiblePaymentRent === false && (\r\n          <div className=\"main-information-owner\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Propietario</span>\r\n              <div className=\"button_init_secondary\">\r\n                <button type=\"button\" onClick={() => {}}>\r\n                  <span>Reportar Propietario</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"section-information-actions\">\r\n              <div className=\"section-information-info\">\r\n                <div className=\"section-information-data\">\r\n                  {isNil(dataTenant.profileThumbnail) === false ? (\r\n                    <Avatar size={50} src={dataTenant.profileThumbnail} />\r\n                  ) : (\r\n                    <Avatar size={50} icon={<UserOutlined />} />\r\n                  )}\r\n                  <div className=\"info-user\">\r\n                    <strong>{dataTenant.fullName}</strong>\r\n                    <Rate\r\n                      style={{\r\n                        fontSize: \"15px\",\r\n                        position: \"relative\",\r\n                        bottom: \"5px\",\r\n                      }}\r\n                      tooltips={[]}\r\n                      onChange={() => {}}\r\n                      value={dataTenant.ratingRate}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"section-information-button-1\">\r\n                  <img src={FileReport} height={62} alt=\"Reportar incidencia\" />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {}}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Reportar incidencia</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=\"section-information-buttons\">\r\n                <div className=\"section-information-button-2\">\r\n                  <img\r\n                    src={MessagesIcon}\r\n                    height={62}\r\n                    alt=\"Reportar incidencia\"\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setIsVisibleMessages(!isVisibleMessages);\r\n                    }}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Enviar mensaje</span>\r\n                  </button>\r\n                </div>\r\n                <div className=\"section-information-button-3\">\r\n                  <img\r\n                    src={DocumentsIcon}\r\n                    alt=\"Reportar incidencia\"\r\n                    height={62}\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {}}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Ver documentos</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {isVisibleMessages === true && (\r\n          <div className=\"actions-information-tenant\">\r\n            <div className=\"tabs-tenant-information\">\r\n              <div className=\"form-modal\">\r\n                <div className=\"title-head-modal\">\r\n                  <button\r\n                    className=\"arrow-back-to\"\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setIsVisibleMessages(!isVisibleMessages);\r\n                    }}\r\n                  >\r\n                    <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                  </button>\r\n                  <h1>Mensajes</h1>\r\n                </div>\r\n              </div>\r\n              <SectionMessages\r\n                dataMessages={dataMessages}\r\n                getMoreCoincidences={() => {\r\n                  const { idCustomerTF, idCustomerTenantTF } = dataProfile;\r\n                  handlerCallGetCustomerMessage({\r\n                    idContract: dataTenant.idContract,\r\n                    idCustomerTenant: dataTenant.idCustomerTenant,\r\n                    idCustomer: dataTenant.idCustomer,\r\n                  });\r\n                }}\r\n                onSendMessages={(data) => {\r\n                  handlerCallAddCustomerMessage(data, {\r\n                    idContract: dataTenant.idContract,\r\n                    idCustomerTenant: dataTenant.idCustomerTenant,\r\n                    idCustomer: dataTenant.idCustomer,\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        {isVisiblePaymentRent === true && (\r\n          <div className=\"actions-information-tenant\">\r\n            <div className=\"tabs-tenant-information\">\r\n              <div className=\"form-modal\">\r\n                <div className=\"title-head-modal\">\r\n                  <button\r\n                    className=\"arrow-back-to\"\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setIsVisiblePaymentRent(!isVisiblePaymentRent);\r\n                    }}\r\n                  >\r\n                    <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                  </button>\r\n                  <h1>Pagar renta</h1>\r\n                </div>\r\n              </div>\r\n              <SectionRegisterPayment\r\n                dataPayments={dataPayments}\r\n                spinVisible={spinVisible}\r\n                onGetDocuments={async (arrayDocument, data) => {\r\n                  setSpinVisible(true);\r\n                  const dataDocuments = await Promise.all(\r\n                    arrayDocument.map((row) => {\r\n                      const item = handlerAddDocument(row, data);\r\n                      return item;\r\n                    })\r\n                  );\r\n                  const parseDocument = dataDocuments.join();\r\n                  const dataSend = {\r\n                    ...data,\r\n                    idContract: dataTenant.idContract,\r\n                    idCustomerTenant: dataTenant.idCustomerTenant,\r\n                    documents: parseDocument,\r\n                  };\r\n                  handlerCallGetAllPaymentContract(dataSend);\r\n                }}\r\n                onRegisterPayment={(data) => {}}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callAddDocument: (file, data) => dispatch(callAddDocument(file, data)),\r\n  callGetPaymentContract: (data) => dispatch(callGetPaymentContract(data)),\r\n  callGetPaymentTypes: (data) => dispatch(callGetPaymentTypes(data)),\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callSetContract: (data, id) => dispatch(callSetContract(data, id)),\r\n  callAddCommentContract: (data, id) =>\r\n    dispatch(callAddCommentContract(data, id)),\r\n  callGetContract: (data) => dispatch(callGetContract(data)),\r\n  callGetContractComment: (data) => dispatch(callGetContractComment(data)),\r\n  callGetAllCustomerTenantById: (data) =>\r\n    dispatch(callGetAllCustomerTenantDashboardById(data)),\r\n  callAddCustomerMessage: (data) => dispatch(callAddCustomerMessage(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n  callAddDocumentContractId: (data, id) =>\r\n    dispatch(callAddDocumentContractId(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tenant);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\adviser.jsx",["391","392"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, message } from \"antd\";\r\nimport isNil from \"lodash/isNil\";\r\nimport \"moment/locale/es\";\r\nimport IconPolicy from \"../../assets/icons/Policy.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../assets/icons/activity.svg\";\r\nimport {\r\n  callGetAgentIndicators,\r\n  callGetAgentContractCoincidences,\r\n  callGetAgentCommissionChart,\r\n} from \"../../utils/actions/actions\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport SectionStatsChart from \"./sections/sectionStatsChart\";\r\nimport SectionCardOwner from \"./sections/sectionCardOwner\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Adviser = (props) => {\r\n  const {\r\n    dataProfile,\r\n    history,\r\n    callGetAgentIndicators,\r\n    callGetAgentContractCoincidences,\r\n    callGetAgentCommissionChart,\r\n  } = props;\r\n\r\n  const [dataStats, setDataStats] = useState({});\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataChartBar, setDataChartBar] = useState([]);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAgentIndicators = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAgentIndicators({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataStats(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAgentContractCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAgentContractCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: null,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAgentCommissionChart = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAgentCommissionChart({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResultBar =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].dataBar) === false\r\n          ? JSON.parse(response.response[0].dataBar)\r\n          : [];\r\n      setDataChartBar(responseResultBar);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const callAsynApis = async () => {\r\n    await handlerCallGetAgentIndicators();\r\n    await handlerCallGetAgentContractCoincidences();\r\n    await handlerCallGetAgentCommissionChart();\r\n  };\r\n\r\n  useEffect(() => {\r\n    callAsynApis();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataProfile.showName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataProfile.lastSessionStarted}</strong>\r\n            </span>\r\n            <span>\r\n              Número de Asesor: <strong>{dataProfile.agentNo}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalCommissionAmount}</h2>\r\n            <span>Total Comisiones</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconPolicy} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalPolicies}</h2>\r\n            <span>Pólizas</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconActivity} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalRenewals}</h2>\r\n            <span>Renovaciones</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user\">\r\n          <SectionStatsChart dataStatsChart={dataChartBar} finishCallApis />\r\n          <SectionCardOwner\r\n            history={history}\r\n            tenantCoincidences={dataCoincidences}\r\n            finishCallApis\r\n            onClickSendInvitation={() => {}}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAgentIndicators: (data) => dispatch(callGetAgentIndicators(data)),\r\n  callGetAgentContractCoincidences: (data) =>\r\n    dispatch(callGetAgentContractCoincidences(data)),\r\n  callGetAgentCommissionChart: (data) =>\r\n    dispatch(callGetAgentCommissionChart(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Adviser);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormOwner.jsx",["393","394","395"],"import React, { useEffect, useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, message } from \"antd\";\r\nimport HomeActive from \"../../assets/iconSteps/iconHome.svg\";\r\nimport HomeInactive from \"../../assets/iconSteps/iconHomeInactive.svg\";\r\nimport IconProfile from \"../../assets/iconSteps/Profile.svg\";\r\nimport IconProfileInactive from \"../../assets/iconSteps/ProfileInactive.svg\";\r\nimport Wallet from \"../../assets/iconSteps/wallet.svg\";\r\nimport WalletInactive from \"../../assets/iconSteps/walletInactive.svg\";\r\nimport DocumentIcon from \"../../assets/iconSteps/document.svg\";\r\nimport DocumentIconInactive from \"../../assets/iconSteps/documentInactive.svg\";\r\nimport SectionInfoOwner from \"./sections/sectionInfoOwner\";\r\nimport CurrentAddressRenter from \"./sections/currentAddresRenter\";\r\nimport TypePolicy from \"./sections/TypePolicy\";\r\nimport {\r\n  callGetTypeFormDocumentTenant,\r\n  callGetAllBankCatalog,\r\n  callSetTypeFormOwner,\r\n  callGetTypeFormOwner,\r\n  callGetMaritalStatus,\r\n  callGetZipCodeAdress,\r\n  callGetPropertyTypes,\r\n  callGetPolicies,\r\n  callGetNationalities,\r\n  callGetIdTypes,\r\n  callGetTypeFormProperties,\r\n} from \"../../utils/actions/actions\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport FrontFunctions from \"../../utils/actions/frontFunctions\";\r\nimport SectionBankInfo from \"./sections/sectionBankInfo\";\r\nimport \"moment/locale/es\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst TypeFormOwner = (props) => {\r\n  const {\r\n    callGetTypeFormDocumentTenant,\r\n    dataProfile,\r\n    history,\r\n    callGetAllBankCatalog,\r\n    callSetTypeFormOwner,\r\n    callGetTypeFormOwner,\r\n    callGetMaritalStatus,\r\n    callGetZipCodeAdress,\r\n    callGetPropertyTypes,\r\n    callGetPolicies,\r\n    callGetNationalities,\r\n    callGetIdTypes,\r\n    match,\r\n    callGetTypeFormProperties,\r\n  } = props;\r\n  const frontFunctions = new FrontFunctions();\r\n  const [current, setCurrent] = useState(0);\r\n  const [dataForm, setDataForm] = useState({});\r\n  const [dataBank, setDataBank] = useState([]);\r\n  const [dataProperties, setDataProperties] = useState([]);\r\n  const [dataMaritalStatus, setDataMaritalStatus] = useState([]);\r\n  const [dataPropertyTypes, setDataPropertyTypes] = useState([]);\r\n  const [dataPolicies, setDataPolicies] = useState([]);\r\n  const [dataZipCodeAdress, setDataZipCodeAdress] = useState({});\r\n  const [dataZipCatalog, setDataZipCatalog] = useState([]);\r\n  const [dataDocuments, setDataDocuments] = useState([]);\r\n  const [dataNationalities, setDataNationalities] = useState([]);\r\n  const [dataIdTypes, setDataIdTypes] = useState([]);\r\n\r\n  const next = () => {\r\n    setCurrent(current + 1);\r\n  };\r\n\r\n  const prev = () => {\r\n    setCurrent(current - 1);\r\n  };\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetTypeFormProperties = async (id, step) => {\r\n    const {\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idContract,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetTypeFormProperties({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idContract,\r\n        idTypeForm: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        stepIn: step,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].typeFormProperties) === false\r\n          ? JSON.parse(response.response[0].typeFormProperties)\r\n          : [];\r\n      setDataProperties(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallSetTypeFormTenant = async (data) => {\r\n    const {\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idContract,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callSetTypeFormOwner({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idContract,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].message) === false\r\n          ? response.response[0].message\r\n          : \"\";\r\n      showMessageStatusApi(\r\n        isEmpty(responseResult) === false\r\n          ? responseResult\r\n          : \"Información actualizada exitosamente.\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetTypeFormDocument = async (data, type) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetTypeFormDocumentTenant({\r\n        idCustomer,\r\n        idCustomerTenant: null,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idTypeForm: data.idTypeForm,\r\n        isFirstTime: data.isFirstTime,\r\n        type,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : [];\r\n\r\n      setDataDocuments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetZipCodeAdress = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetZipCodeAdress({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false &&\r\n        isNil(response.response1) === false &&\r\n        isNil(response.response1[0]) === false\r\n          ? response.response1[0]\r\n          : {};\r\n      const responseResult2 =\r\n        isNil(response) === false && isNil(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      setDataZipCodeAdress(responseResult1);\r\n      setDataZipCatalog(responseResult2);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetNationalities = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetNationalities({\r\n        idCustomer,\r\n        idCustomerTenant: null,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataNationalities(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetIdTypes = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetIdTypes({\r\n        idCustomer,\r\n        idCustomerTenant: null,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataIdTypes(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const stepsOwner = [\r\n    {\r\n      title: \"Información personal\",\r\n      content: (\r\n        <SectionInfoOwner\r\n          dataProperties={dataProperties}\r\n          dataMaritalStatus={dataMaritalStatus}\r\n          dataFormSave={dataForm}\r\n          onClickNext={async (data) => {\r\n            try {\r\n              await handlerCallSetTypeFormTenant({ ...data, stepIn: 1 });\r\n              next();\r\n              setDataForm({ ...dataForm, ...data });\r\n              setDataZipCodeAdress({});\r\n              setDataZipCatalog([]);\r\n            } catch (error) {}\r\n          }}\r\n          onChangeZipCode={(zipCode) => {\r\n            hanlderCallGetZipCodeAdress({ type: 1, zipCode });\r\n          }}\r\n          dataZipCodeAdress={dataZipCodeAdress}\r\n          dataNationalities={dataNationalities}\r\n          dataIdTypes={dataIdTypes}\r\n          dataZipCatalog={dataZipCatalog}\r\n        />\r\n      ),\r\n      iconActive: IconProfile,\r\n      iconInactive: IconProfileInactive,\r\n    },\r\n    {\r\n      title: \"Inmueble a rentar\",\r\n      content: (\r\n        <CurrentAddressRenter\r\n          dataProperties={dataProperties}\r\n          frontFunctions={frontFunctions}\r\n          dataFormSave={dataForm}\r\n          onClickNext={async (data) => {\r\n            try {\r\n              await handlerCallSetTypeFormTenant({ ...data, stepIn: 2 });\r\n              next();\r\n              setDataForm({ ...dataForm, ...data });\r\n              setDataZipCodeAdress({});\r\n              setDataZipCatalog([]);\r\n            } catch (error) {}\r\n          }}\r\n          dataPropertyTypes={dataPropertyTypes}\r\n          onChangeZipCode={(zipCode) => {\r\n            hanlderCallGetZipCodeAdress({ type: 1, zipCode });\r\n          }}\r\n          dataZipCodeAdress={dataZipCodeAdress}\r\n          dataZipCatalog={dataZipCatalog}\r\n          onClickBack={() => {\r\n            setDataZipCodeAdress({});\r\n            setDataZipCatalog([]);\r\n            prev();\r\n          }}\r\n        />\r\n      ),\r\n      iconActive: HomeActive,\r\n      iconInactive: HomeInactive,\r\n    },\r\n    {\r\n      title: \"Póliza\",\r\n      content: (\r\n        <TypePolicy\r\n          dataProperties={dataProperties}\r\n          frontFunctions={frontFunctions}\r\n          dataFormSave={dataForm}\r\n          dataPolicies={dataPolicies}\r\n          dataDocuments={dataDocuments}\r\n          typeDocument={3}\r\n          onClickNext={async (data) => {\r\n            try {\r\n              await handlerCallSetTypeFormTenant({ ...data, stepIn: 3 });\r\n              next();\r\n              setDataForm({ ...dataForm, ...data });\r\n            } catch (error) {}\r\n          }}\r\n          onClickBack={() => prev()}\r\n        />\r\n      ),\r\n      iconActive: DocumentIcon,\r\n      iconInactive: DocumentIconInactive,\r\n    },\r\n    {\r\n      title: \"Datos bancarios\",\r\n      content: (\r\n        <SectionBankInfo\r\n          dataProperties={dataProperties}\r\n          dataFormSave={dataForm}\r\n          dataBank={dataBank}\r\n          onClickFinish={async (data) => {\r\n            const { params } = match;\r\n            const idSection = params.idSection;\r\n            try {\r\n              await handlerCallSetTypeFormTenant({ ...data, stepIn: 3 });\r\n              if (isNil(idSection) === false) {\r\n                if (dataProfile.idUserType === 1) {\r\n                  history.push(\"/websystem/dashboard-admin\");\r\n                } else if (dataProfile.idUserType === 5) {\r\n                  history.push(\"/websystem/dashboard-attorney\");\r\n                } else if (dataProfile.idUserType === 7) {\r\n                  history.push(\"/websystem/dashboard-controldesk\");\r\n                }\r\n              } else {\r\n                history.push(\"/websystem/dashboard-owner\");\r\n              }\r\n            } catch (error) {}\r\n          }}\r\n          onClickBack={() => prev()}\r\n        />\r\n      ),\r\n      iconActive: Wallet,\r\n      iconInactive: WalletInactive,\r\n    },\r\n  ];\r\n\r\n  const handlerCallGetTypeFormTenant = async () => {\r\n    const { params } = match;\r\n    const {\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idContract,\r\n    } = dataProfile;\r\n    const idSection = params.idSection;\r\n    try {\r\n      const response = await callGetTypeFormOwner({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idContract,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isEmpty(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      if (\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.stepIn) === false &&\r\n        isNil(idSection) === true\r\n      ) {\r\n        setCurrent(responseResult.stepIn);\r\n      }\r\n      setDataForm(responseResult);\r\n      handlerCallGetTypeFormDocument(responseResult, 3);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetMaritalStatus = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetMaritalStatus({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataMaritalStatus(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetPropertyTypes = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPropertyTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPropertyTypes(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetPolicies = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPolicies({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataPolicies(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallBankCatalog = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllBankCatalog({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataBank(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAsyncApis = async () => {\r\n    await handlerCallGetTypeFormTenant();\r\n    await handlerCallGetMaritalStatus();\r\n    await handlerCallGetPropertyTypes();\r\n    await handlerCallGetPolicies();\r\n    await handlerCallBankCatalog();\r\n    await hanlderCallGetNationalities();\r\n    await hanlderCallGetIdTypes();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { params } = match;\r\n    handlerCallAsyncApis();\r\n    const idSection = params.idSection;\r\n    if (isNil(idSection) === false) {\r\n      setCurrent(Number(idSection));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataForm) === false) {\r\n      hanlderCallGetTypeFormProperties(dataForm.idTypeForm, current);\r\n    }\r\n  }, [current, dataForm]);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"steps-style-header\">\r\n          <hr />\r\n          {isEmpty(stepsOwner) === false &&\r\n            stepsOwner.map((row, index) => {\r\n              return (\r\n                <div className=\"step-icon\">\r\n                  <div\r\n                    className={\r\n                      current === index\r\n                        ? \"background-circle-active\"\r\n                        : \"background-circle-inactive\"\r\n                    }\r\n                  >\r\n                    <img\r\n                      src={\r\n                        current === index ? row.iconActive : row.iconInactive\r\n                      }\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                  <span\r\n                    style={{\r\n                      visibility: current !== index ? \"visible\" : \"hidden\",\r\n                      color: \"#d6d8e7\",\r\n                    }}\r\n                    className=\"title-steps-typeform\"\r\n                  >\r\n                    {row.title}\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n        {isEmpty(stepsOwner) === false && (\r\n          <div className=\"steps-content\">{stepsOwner[current].content}</div>\r\n        )}\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetTypeFormDocumentTenant: (data) =>\r\n    dispatch(callGetTypeFormDocumentTenant(data)),\r\n  callGetAllBankCatalog: (data) => dispatch(callGetAllBankCatalog(data)),\r\n  callGetTypeFormOwner: (data) => dispatch(callGetTypeFormOwner(data)),\r\n  callGetMaritalStatus: (data) => dispatch(callGetMaritalStatus(data)),\r\n  callGetZipCodeAdress: (data) => dispatch(callGetZipCodeAdress(data)),\r\n  callGetPropertyTypes: (data) => dispatch(callGetPropertyTypes(data)),\r\n  callGetPolicies: (data) => dispatch(callGetPolicies(data)),\r\n  callSetTypeFormOwner: (data) => dispatch(callSetTypeFormOwner(data)),\r\n  callGetNationalities: (data) => dispatch(callGetNationalities(data)),\r\n  callGetIdTypes: (data) => dispatch(callGetIdTypes(data)),\r\n  callGetTypeFormProperties: (data) =>\r\n    dispatch(callGetTypeFormProperties(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TypeFormOwner);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administrator.jsx",["396","397","398","399","400","401"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport \"moment/locale/es\";\r\nimport IconDanger from \"../../assets/icons/Danger.svg\";\r\nimport Tickets from \"../../assets/icons/tickets.svg\";\r\nimport Payments from \"../../assets/icons/payments.svg\";\r\nimport Balance from \"../../assets/icons/balance.svg\";\r\nimport Agents from \"../../assets/icons/agent.svg\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetContractStats,\r\n  callGetContractCoincidences,\r\n  callGetContractChart,\r\n  callGetSearchProspect,\r\n  callGetAddProspect,\r\n  callUpdateContract,\r\n  callGetAllPolicyStatus,\r\n  callGetDetailCustomer,\r\n  callGetDetailCustomerTenant,\r\n  callGetDetailCustomerAgent,\r\n  callSwitchCustomerContract,\r\n  callGetContractComment,\r\n  callAddDocumentContract,\r\n  callGetContractDocument,\r\n} from \"../../utils/actions/actions\";\r\nimport { API_CONSTANTS } from \"../../utils/constants/apiConstants\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport SectionStatsChart from \"./sections/sectionStatsChart\";\r\nimport SectionStatsChartPie from \"./sections/sectionStatsChartPie\";\r\nimport SectionCardOwner from \"./sections/sectionCardOwner\";\r\nimport SectionAddUsers from \"./sections/sectionAddUsers\";\r\nimport SectionDetailUser from \"./sections/sectionDetailUser\";\r\nimport SectionDetailUserTenant from \"./sections/sectionDetailUserTenant\";\r\nimport SectionDetailUserAdviser from \"./sections/sectionUserDetailAdviser\";\r\nimport SectionUploadDocument from \"./sections/sectionUploadDocuments\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Administrator = (props) => {\r\n  const {\r\n    dataProfile,\r\n    history,\r\n    callGetContractStats,\r\n    callGetContractCoincidences,\r\n    callGetContractChart,\r\n    callGetSearchProspect,\r\n    callGetAddProspect,\r\n    callUpdateContract,\r\n    callGetAllPolicyStatus,\r\n    callGetDetailCustomer,\r\n    callGetDetailCustomerTenant,\r\n    callGetDetailCustomerAgent,\r\n    callSwitchCustomerContract,\r\n    setDataUserProfile,\r\n    callGetContractComment,\r\n    callAddDocumentContract,\r\n    callGetContractDocument,\r\n  } = props;\r\n  const [isVisibleAddUser, setIsVisibleAddUser] = useState(false);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [isVisibleDetailUser, setIsVisibleDetailUser] = useState(false);\r\n  const [isVisibleAddDocs, setIsVisibleAddDocs] = useState(false);\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataDocuments, setDataDocuments] = useState([]);\r\n  const [dataStats, setDataStats] = useState({});\r\n  const [dataDetailCustomer, setDataDetailCustomer] = useState({});\r\n  const [dataDetailCustomerTenant, setDataDetailCustomerTenant] = useState([]);\r\n  const [dataDetailReferences, setDataDetailReferences] = useState([]);\r\n  const [dataDetailAgent, setDataDetailAgent] = useState({});\r\n  const [dataChartBar, setDataChartBar] = useState([]);\r\n  const [dataChartPie, setDataChartPie] = useState([]);\r\n  const [dataAllPolicyStatus, setDataAllPolicyStatus] = useState([]);\r\n  const [dataOwnerSearch, setDataOwnerSearch] = useState({\r\n    idPersonType: 1,\r\n    idCustomer: null,\r\n  });\r\n  const [dataTenantSearch, setDataTenantSearch] = useState({\r\n    idCustomerTenant: null,\r\n    idCustomerType: null,\r\n    idPersonType: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    emailAddress: null,\r\n    phoneNumber: null,\r\n  });\r\n  const [dataSecondTenant, setDataSecondTenant] = useState({\r\n    idCustomerTenant: null,\r\n    idCustomerType: null,\r\n    idPersonType: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    emailAddress: null,\r\n    phoneNumber: null,\r\n  });\r\n  const [dataAdviserSearch, setDataAdviserSearch] = useState({\r\n    idCustomerAgent: null,\r\n  });\r\n  const [isVisibleDetailUserTenant, setIsVisibleDetailUserTenant] = useState(\r\n    false\r\n  );\r\n  const [isVisibleDetailUserAdviser, setIsVisibleDetailUserAdviser] = useState(\r\n    false\r\n  );\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractStats = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractStats({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataStats(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallContractComment = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractComment({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallContractDocument = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractDocument({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: null,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocuments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetDetailCustomer = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetDetailCustomer({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataDetailCustomer(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetDetailCustomerTenant = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    const arrayResult = [];\r\n    try {\r\n      const response = await callGetDetailCustomerTenant({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false && isNil(response.response1) === false\r\n          ? response.response1\r\n          : [];\r\n      const responseResult2 =\r\n        isNil(response) === false && isNil(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      setDataDetailCustomerTenant(responseResult1);\r\n      setDataDetailReferences(responseResult2);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetDetailCustomerAgent = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetDetailCustomerAgent({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataDetailAgent(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetSearchProspect = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetSearchProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        dataFiltered: data,\r\n        idCustomer: null,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataOwnerSearch(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetSearchProspectTenant = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetSearchProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        dataFiltered: data,\r\n        idCustomer: null,\r\n        type: 2,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenantSearch(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetSearchSecondTenant = async (data, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetSearchProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        dataFiltered: data,\r\n        idCustomer: id,\r\n        type: 2,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataSecondTenant(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetSearchProspectAdviser = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetSearchProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        dataFiltered: data,\r\n        idCustomer: null,\r\n        type: 3,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataAdviserSearch(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAddProspect = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAddProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      showMessageStatusApi(\r\n        \"La solicitud se procesó exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractChart = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractChart({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResultBar =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].dataBar) === false\r\n          ? JSON.parse(response.response[0].dataBar)\r\n          : [];\r\n      const responseResultPie =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].dataPAI) === false\r\n          ? JSON.parse(response.response[0].dataPAI)\r\n          : [];\r\n      setDataChartBar(responseResultBar);\r\n      setDataChartPie(responseResultPie);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPolicyStatus = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllPolicyStatus({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataAllPolicyStatus(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const callAsynApis = async () => {\r\n    await handlerCallGetContractStats();\r\n    await handlerCallGetContractCoincidences();\r\n    await handlerCallGetContractChart();\r\n  };\r\n\r\n  const handlerCallUpdateContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callUpdateContract(\r\n        {\r\n          idCustomer: data.idCustomer,\r\n          idCustomerTenant: data.idCustomerTenant,\r\n          idPolicyStatus: data.idPolicyStatus,\r\n          rating: isNil(data.rating) === false ? data.rating : null,\r\n          isApproved: isNil(data.isApproved) === false ? data.isApproved : null,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallSwitchCustomerContract = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callSwitchCustomerContract(\r\n        {\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n      handlerCallGetDetailCustomerTenant(id);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractDocumentById = async (data, name) => {\r\n    const { idSystemUser, idLoginHistory, token } = dataProfile;\r\n    try {\r\n      const responseInfo = await fetch(\r\n        `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT_DOCUMENT_BYID}`,\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            ...data,\r\n            idDigitalContract: null,\r\n            idSystemUser,\r\n            idLoginHistory,\r\n            download: false,\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      if (isNil(responseInfo.status) === false && responseInfo.status !== 200) {\r\n        throw isNil(responseInfo.statusText) === false\r\n          ? responseInfo.statusText\r\n          : \"\";\r\n      }\r\n      const resultInfo = await responseInfo.json();\r\n      const resultExtension = resultInfo.extension;\r\n\r\n      const responseDownload = await fetch(\r\n        `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT_DOCUMENT_BYID}`,\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            ...data,\r\n            idDigitalContract: null,\r\n            idSystemUser,\r\n            idLoginHistory,\r\n            download: true,\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (\r\n        isNil(responseDownload.status) === false &&\r\n        responseDownload.status !== 200\r\n      ) {\r\n        throw isNil(responseDownload.statusText) === false\r\n          ? responseDownload.statusText\r\n          : \"\";\r\n      }\r\n      const blob = await responseDownload.blob();\r\n      const link = document.createElement(\"a\");\r\n      link.className = \"download\";\r\n      link.download = `${name}.${resultExtension}`;\r\n      link.href = URL.createObjectURL(blob);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentElement.removeChild(link);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"No está disponible el documento\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    callAsynApis();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <SectionUploadDocument\r\n        dataDocuments={dataDocuments}\r\n        isModalVisible={isVisibleAddDocs}\r\n        onClose={() => {\r\n          setIsVisibleAddDocs(!isVisibleAddDocs);\r\n        }}\r\n      />\r\n      <SectionAddUsers\r\n        isModalVisible={isVisibleAddUser}\r\n        dataOwnerSearch={dataOwnerSearch}\r\n        dataTenantSearch={dataTenantSearch}\r\n        dataAdviserSearch={dataAdviserSearch}\r\n        dataSecondTenant={dataSecondTenant}\r\n        onClose={() => {\r\n          setIsVisibleAddUser(!isVisibleAddUser);\r\n        }}\r\n        spinVisible={false}\r\n        onSearchOwner={(data) => {\r\n          handlerCallGetSearchProspect(data);\r\n        }}\r\n        onSearchTenant={(data) => {\r\n          handlerCallGetSearchProspectTenant(data);\r\n        }}\r\n        onSearchSecondTenant={(data, id) => {\r\n          handlerCallGetSearchSecondTenant(data, id);\r\n        }}\r\n        onSearchAdviser={(data) => {\r\n          handlerCallGetSearchProspectAdviser(data);\r\n        }}\r\n        onSendInformation={async (data) => {\r\n          try {\r\n            await handlerCallGetAddProspect(data);\r\n            callAsynApis();\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n      />\r\n      <SectionDetailUser\r\n        isDrawerVisible={isVisibleDetailUser}\r\n        onClose={() => {\r\n          setIsVisibleDetailUser(!isVisibleDetailUser);\r\n        }}\r\n        dataDetailCustomer={dataDetailCustomer}\r\n        onRedirectTo={async (key, idCustomer, idContract) => {\r\n          await setDataUserProfile({\r\n            ...dataProfile,\r\n            idCustomerTenant: null,\r\n            idCustomerTF: idCustomer,\r\n            idCustomer: idCustomer,\r\n            idContract: idContract,\r\n          });\r\n          history.push(`/websystem/typeform-owner/${key}`);\r\n        }}\r\n        dataMessages={dataMessages}\r\n        onDownloadDocumentById={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContractDocumentById(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n      />\r\n      <SectionDetailUserTenant\r\n        isDrawerVisible={isVisibleDetailUserTenant}\r\n        onClose={() => {\r\n          setIsVisibleDetailUserTenant(!isVisibleDetailUserTenant);\r\n          callAsynApis();\r\n        }}\r\n        dataDetailCustomerTenant={dataDetailCustomerTenant}\r\n        dataDetailReferences={dataDetailReferences}\r\n        onSendRatingUser={async (data) => {\r\n          try {\r\n            await handlerCallUpdateContract(data);\r\n            await handlerCallGetDetailCustomerTenant(data.idContract);\r\n            callAsynApis();\r\n          } catch (error) {}\r\n        }}\r\n        changeRolesCustomers={(id) => {\r\n          handlerCallSwitchCustomerContract(id);\r\n        }}\r\n        onRedirectTo={async (key, idCustomer, idContract, idCustomerTenant) => {\r\n          await setDataUserProfile({\r\n            ...dataProfile,\r\n            idCustomerTenantTF: idCustomerTenant,\r\n            idCustomerTF: idCustomer,\r\n            idContract: idContract,\r\n          });\r\n          history.push(`/websystem/typeform-user/${key}`);\r\n        }}\r\n        dataMessages={dataMessages}\r\n        onDownloadDocumentById={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContractDocumentById(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n      />\r\n      <SectionDetailUserAdviser\r\n        isDrawerVisible={isVisibleDetailUserAdviser}\r\n        onClose={() => {\r\n          setIsVisibleDetailUserAdviser(!isVisibleDetailUserAdviser);\r\n        }}\r\n        dataDetailAgent={dataDetailAgent}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataProfile.showName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataProfile.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n          <div\r\n            className=\"action-buttons-top\"\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  history.push(`/websystem/leads-landingpage`);\r\n                }}\r\n              >\r\n                <span>Leads ({dataStats.totalLeads})</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={Tickets} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.grandTotalSale}</h2>\r\n            <span>\r\n              Cierres <strong>({dataStats.totalClosings})</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#FF6961\" }}>\r\n              <img src={Payments} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalCommissionAmount}</h2>\r\n            <span>\r\n              Comisiones pagadas <strong>({dataStats.totalCommissions})</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#98FF98\" }}>\r\n              <img src={Balance} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalBalance}</h2>\r\n            <span>Balance</span>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"indicators-amount-renter\"\r\n          style={{ justifyContent: \"space-around\" }}\r\n        >\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconDanger} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalForClosing}</h2>\r\n            <span>Por cerrar</span>\r\n          </div>\r\n          <div\r\n            className=\"cards-amount-renter\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              history.push(`/websystem/dashboard-agents`);\r\n            }}\r\n          >\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffa420\" }}>\r\n              <img src={Agents} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalAgent}</h2>\r\n            <span>Asesores</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user-admin\">\r\n          <SectionStatsChart dataStatsChart={dataChartBar} finishCallApis />\r\n          <SectionStatsChartPie dataStatsChart={dataChartPie} finishCallApis />\r\n          <SectionCardOwner\r\n            onOpenUploadDocument={(id) => {\r\n              handlerCallContractDocument(id);\r\n              setIsVisibleAddDocs(!isVisibleAddDocs);\r\n            }}\r\n            history={history}\r\n            dataAllPolicyStatus={dataAllPolicyStatus}\r\n            onAddUser={() => {\r\n              setIsVisibleAddUser(!isVisibleAddUser);\r\n            }}\r\n            onOpenDetail={(type, id, data) => {\r\n              if (data.canViewDatail === true) {\r\n                if (id === 1) {\r\n                  handlerCallGetDetailCustomer(type);\r\n                  handlerCallContractComment({\r\n                    idCustomer: data.idCustomer,\r\n                    idCustomerTenant: null,\r\n                    idContract: data.idContract,\r\n                    idDigitalContract: data.idDigitalContract,\r\n                  });\r\n                  setIsVisibleDetailUser(!isVisibleDetailUser);\r\n                } else if (id === 2) {\r\n                  handlerCallGetDetailCustomerTenant(type);\r\n                  handlerCallContractComment({\r\n                    idCustomer: data.idCustomer,\r\n                    idCustomerTenant: data.idCustomerTenant,\r\n                    idContract: data.idContract,\r\n                    idDigitalContract: data.idDigitalContract,\r\n                  });\r\n                  setIsVisibleDetailUserTenant(!isVisibleDetailUserTenant);\r\n                } else if (id === 3) {\r\n                  handlerCallGetDetailCustomerAgent(type);\r\n                  setIsVisibleDetailUserAdviser(!isVisibleDetailUserAdviser);\r\n                }\r\n              }\r\n            }}\r\n            dataCoincidences={dataCoincidences}\r\n            finishCallApis\r\n            onClickSendInvitation={() => {}}\r\n            onGetPolicyStatus={(id) => {\r\n              handlerCallGetAllPolicyStatus(id);\r\n            }}\r\n            onClosePolicy={async (data) => {\r\n              await handlerCallUpdateContract(data);\r\n              callAsynApis();\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetContractStats: (data) => dispatch(callGetContractStats(data)),\r\n  callGetContractCoincidences: (data) =>\r\n    dispatch(callGetContractCoincidences(data)),\r\n  callGetContractChart: (data) => dispatch(callGetContractChart(data)),\r\n  callGetSearchProspect: (data) => dispatch(callGetSearchProspect(data)),\r\n  callGetAddProspect: (data) => dispatch(callGetAddProspect(data)),\r\n  callUpdateContract: (data, id) => dispatch(callUpdateContract(data, id)),\r\n  callSwitchCustomerContract: (data, id) =>\r\n    dispatch(callSwitchCustomerContract(data, id)),\r\n  callGetAllPolicyStatus: (data) => dispatch(callGetAllPolicyStatus(data)),\r\n  callGetDetailCustomer: (data) => dispatch(callGetDetailCustomer(data)),\r\n  callGetDetailCustomerTenant: (data) =>\r\n    dispatch(callGetDetailCustomerTenant(data)),\r\n  callGetDetailCustomerAgent: (data) =>\r\n    dispatch(callGetDetailCustomerAgent(data)),\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callGetContractComment: (data) => dispatch(callGetContractComment(data)),\r\n  callAddDocumentContract: (data, id) =>\r\n    dispatch(callAddDocumentContract(data, id)),\r\n  callGetContractDocument: (data) => dispatch(callGetContractDocument(data)),\r\n  callGetContractDocumentById: (data) =>\r\n    dispatch(callGetContractDocument(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Administrator);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\MakeScreen\\makeScreen.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx",["402","403","404","405","406"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Tabs, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport SectionDocuments from \"./sectionDocuments/sectionDocuments\";\r\nimport SectionInfoTenant from \"./sectionDocuments/sectionCardInformation\";\r\nimport SectionMessages from \"./sectionDocuments/sectionMessages\";\r\nimport SectionRegisterPayment from \"./sectionDocuments/sectionRegisterPayment\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetAllCustomerTenantById,\r\n  callGetPaymentTypes,\r\n  callGetPaymentContract,\r\n  callAddDocument,\r\n  callGetAllDocumentTypes,\r\n  callGetPaymentContractDocument,\r\n  callAddCustomerMessage,\r\n  callGetCustomerMessage,\r\n} from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\nconst { TabPane } = Tabs;\r\n\r\nconst TenantFromOwner = (props) => {\r\n  const {\r\n    dataProfile,\r\n    match,\r\n    callGetAllCustomerTenantById,\r\n    callGetPaymentTypes,\r\n    callGetPaymentContract,\r\n    callAddDocument,\r\n    callGetAllDocumentTypes,\r\n    callGetPaymentContractDocument,\r\n    callAddCustomerMessage,\r\n    callGetCustomerMessage,\r\n  } = props;\r\n  const { params } = match;\r\n  const idCustomerTenant = params.idCustomerTenant;\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataPayments, setDataPayments] = useState([]);\r\n  const [dataDocumentTypes, setDataDocumentTypes] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [dataDocumentsRepository, setDataDocumentsRepository] = useState([]);\r\n  const [idContractData, setIdContractData] = useState(null);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [idTopIndexDocuments, setIdTopIndexDocuments] = useState(-1);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n\r\n  const dotChange = useRef(null);\r\n  const contentStyle = {\r\n    height: \"160px\",\r\n    color: \"#fff\",\r\n    lineHeight: \"160px\",\r\n    textAlign: \"center\",\r\n    background: \"#364d79\",\r\n  };\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentTypes = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPayments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllDocumentTypes = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllDocumentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentTypes(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetPaymentContractDocument = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentContractDocument({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        topIndex: idTopIndexDocuments,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentsRepository(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexDocuments(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCustomerTenantById = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerTenantById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenant(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdContractData(responseResult.idContract);\r\n        handlerCallGetAllPaymentTypes({\r\n          type: 1,\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n        handlerCallGetCustomerMessage({\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentContract = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callGetPaymentContract({\r\n        ...data,\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      handlerCallGetAllCustomerTenantById();\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, type) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: type.idPaymentType,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(data.originFileObj, dataDocument);\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      return Promise.resolve(documentId);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      handlerCallGetCustomerMessage({\r\n        idContract: idContractData,\r\n        idCustomerTenant,\r\n      });\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllCustomerTenantById();\r\n    handlerCallGetAllDocumentTypes();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <SectionInfoTenant dataTenant={dataTenant} />\r\n        <div className=\"actions-information-tenant\">\r\n          <div className=\"tabs-tenant-information\">\r\n            <Tabs\r\n              defaultActiveKey=\"1\"\r\n              onChange={() => {}}\r\n              tabBarStyle={{ color: \"#A0A3BD\" }}\r\n              tabPosition=\"top\"\r\n            >\r\n              <TabPane tab=\"Registrar pago\" key=\"1\">\r\n                <SectionRegisterPayment\r\n                  dataPayments={dataPayments}\r\n                  spinVisible={spinVisible}\r\n                  onGetDocuments={async (arrayDocument, data) => {\r\n                    setSpinVisible(true);\r\n                    const dataDocuments = await Promise.all(\r\n                      arrayDocument.map((row) => {\r\n                        const item = handlerAddDocument(row, data);\r\n                        return item;\r\n                      })\r\n                    );\r\n                    const parseDocument = dataDocuments.join();\r\n                    const dataSend = {\r\n                      ...data,\r\n                      idCustomerTenant,\r\n                      idContract: idContractData,\r\n                      documents: parseDocument,\r\n                    };\r\n                    handlerCallGetAllPaymentContract(dataSend);\r\n                  }}\r\n                  onRegisterPayment={(data) => {}}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Documentos\" key=\"2\">\r\n                <SectionDocuments\r\n                  dataDocumentTypes={dataDocumentTypes}\r\n                  dataDocumentsRepository={dataDocumentsRepository}\r\n                  onSearchDocument={(data) => {\r\n                    handlerCallGetPaymentContractDocument(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Mensajes\" key=\"3\">\r\n                <SectionMessages\r\n                  dataMessages={dataMessages}\r\n                  getMoreCoincidences={() => {\r\n                    handlerCallGetCustomerMessage({\r\n                      idContract: idContractData,\r\n                      idCustomerTenant,\r\n                    });\r\n                  }}\r\n                  onSendMessages={(data) => {\r\n                    handlerCallAddCustomerMessage(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Cotizar incidencia\" key=\"4\" />\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomerTenantById: (data) =>\r\n    dispatch(callGetAllCustomerTenantById(data)),\r\n  callGetPaymentTypes: (data) => dispatch(callGetPaymentTypes(data)),\r\n  callGetPaymentContract: (data) => dispatch(callGetPaymentContract(data)),\r\n  callAddDocument: (file, data) => dispatch(callAddDocument(file, data)),\r\n  callGetAllDocumentTypes: (data) => dispatch(callGetAllDocumentTypes(data)),\r\n  callGetPaymentContractDocument: (data) =>\r\n    dispatch(callGetPaymentContractDocument(data)),\r\n  callAddCustomerMessage: (data) => dispatch(callAddCustomerMessage(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TenantFromOwner);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx",["407","408","409","410","411","412","413"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { Layout, notification, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport IconOwner from \"../../assets/icons/iconHomeIndicator.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../assets/icons/activity.svg\";\r\nimport {\r\n  callGetAllCustomerById,\r\n  callGetAllCustomerCoincidences,\r\n  callGetStatsChart,\r\n  callAddProperty,\r\n  callGetAllPersons,\r\n  callGetProperties,\r\n  callGetDepartments,\r\n  callAddTenant,\r\n  callGetZipCodeAdress,\r\n  callGetAllTenantsCatalog,\r\n  callGetAllBankCatalog,\r\n  callRequestAdvancement,\r\n  callSetContract,\r\n  callAddCommentContract,\r\n  callGetContract,\r\n  callGetContractComment,\r\n  callAddDocumentContractId,\r\n  callGetPropertyTypes,\r\n} from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport { API_CONSTANTS, HEADER } from \"../../utils/constants/apiConstants\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\nimport SectionCardTenant from \"./sections/sectionCardTenants\";\r\nimport SectionStatsChart from \"./sections/sectionStatsChart\";\r\nimport SectionAddProperty from \"./sections/sectionAddProperty\";\r\nimport SectionAddTenant from \"./sections/sectionAddTenant\";\r\nimport SectionAdvancement from \"./sections/sectionAdvancement\";\r\nimport SectionContractAvailable from \"../Tenant/sections/sectionContractAvailableOwner\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Owner = (props) => {\r\n  const {\r\n    dataProfile,\r\n    setDataUserProfile,\r\n    callGetAllCustomerById,\r\n    history,\r\n    callGetTenantCoincidences,\r\n    callGetStatsChart,\r\n    callAddProperty,\r\n    callGetAllPersons,\r\n    callGetProperties,\r\n    callGetDepartments,\r\n    callAddTenant,\r\n    callGetZipCodeAdress,\r\n    callGetAllTenantsCatalog,\r\n    callGetAllBankCatalog,\r\n    callRequestAdvancement,\r\n    callSetContract,\r\n    callAddCommentContract,\r\n    callGetContract,\r\n    callGetContractComment,\r\n    callAddDocumentContractId,\r\n    callGetPropertyTypes,\r\n  } = props;\r\n  const [dataCustomer, setDataCustomer] = useState({});\r\n  const [dataStatsChart, setDataStatsChart] = useState([]);\r\n  const [dataCatalogProperty, setDataCatalogProperty] = useState([]);\r\n  const [dataPersonType, setDataPersonType] = useState([]);\r\n  const [dataDepartment, setDataDepartment] = useState([]);\r\n  const [dataZipCodeAdress, setDataZipCodeAdress] = useState({});\r\n  const [dataZipCatalog, setDataZipCatalog] = useState([]);\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataBank, setDataBank] = useState([]);\r\n  const [dataPropertyTypes, setDataPropertyTypes] = useState([]);\r\n  const [dataGetContract, setDataGetContract] = useState([]);\r\n  const [tenantCoincidences, setTenantCoincidences] = useState([]);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isModalVisibleTenant, setIsModalVisibleTenant] = useState(false);\r\n  const [isVisibleContract, setIsVisibleContract] = useState(false);\r\n  const [isModalVisibleAdvancement, setIsModalVisibleAdvancement] = useState(\r\n    false\r\n  );\r\n  const [finishCallApis, setFinishCallApis] = useState(false);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const args = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Necesitamos que nos ayudes a ingresar tu información personal, la cual\r\n          sera utilizada para la elaboración del contrato y póliza.\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            notification.destroy();\r\n            history.push(\"/websystem/typeform-owner\");\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Ir al formulario</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{\r\n          fontFamily: \"Poppins\",\r\n          fontSize: \"12px\",\r\n          color: \"var(--color-primary)\",\r\n        }}\r\n      >\r\n        Solicitud Póliza Homify Propietario\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const handlerCallApiPersonTypes = async (data) => {\r\n    try {\r\n      const response = await callGetAllPersons(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setDataPersonType(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCustomerById = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataCustomer(responseResult);\r\n      if (\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.isTypeFormCompleted) === false &&\r\n        responseResult.isTypeFormCompleted === false\r\n      ) {\r\n        setDataUserProfile({\r\n          ...dataProfile,\r\n          idContract: responseResult.idContract,\r\n          idCustomerTF: responseResult.idCustomer,\r\n          idCustomerTenantTF: null,\r\n        });\r\n        notification.open(args);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetTenantCoincidences = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetTenantCoincidences({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setTenantCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetCallGetStatsChart = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetStatsChart({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        jsonConditions: [],\r\n      });\r\n\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataStatsChart(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetZipCodeAdress = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetZipCodeAdress({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false &&\r\n        isNil(response.response1) === false &&\r\n        isNil(response.response1[0]) === false\r\n          ? response.response1[0]\r\n          : {};\r\n      const responseResult2 =\r\n        isNil(response) === false && isNil(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      setDataZipCodeAdress(responseResult1);\r\n      setDataZipCatalog(responseResult2);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n  const handlerCallAddProperty = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddProperty({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setSpinVisible(false);\r\n      setIsModalVisible(!isModalVisible);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallRequestAdvancement = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callRequestAdvancement({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setSpinVisible(false);\r\n      setIsModalVisibleAdvancement(!isModalVisibleAdvancement);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetProperties = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetProperties({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataCatalogProperty(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetDepartments = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetDepartments({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataDepartment(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddTenant = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddTenant({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setSpinVisible(false);\r\n      setIsModalVisibleTenant(!isModalVisibleTenant);\r\n      handlerCallGetTenantCoincidences();\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(error, GLOBAL_CONSTANTS.STATUS_API.ERROR);\r\n    }\r\n  };\r\n\r\n  const handlerCallTenantCatalog = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllTenantsCatalog({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataTenant(responseResult);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallBankCatalog = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllBankCatalog({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataBank(responseResult);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddDocumentContractId = async (data, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddDocumentContractId(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContract = async (data, name) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      if (data.download === false) {\r\n        const response = await callGetContract({\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        });\r\n        const responseResult =\r\n          isNil(response) === false &&\r\n          isNil(response.response) === false &&\r\n          isNil(response.response[0]) === false\r\n            ? response.response[0]\r\n            : {};\r\n        setDataGetContract(responseResult);\r\n        if (isEmpty(responseResult) === false && data.process === true) {\r\n          handlerCallAddDocumentContractId(\r\n            {\r\n              type: data.type,\r\n              idContract: responseResult.idContract,\r\n            },\r\n            responseResult.idDocument\r\n          );\r\n        }\r\n      } else {\r\n        const { token } = dataProfile;\r\n        const response = await fetch(\r\n          `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT}`,\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              ...data,\r\n              idSystemUser,\r\n              idLoginHistory,\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${token}`,\r\n              \"Access-Control-Allow-Origin\": \"*\",\r\n            },\r\n          }\r\n        );\r\n        if (isNil(response.status) === false && response.status !== 200) {\r\n          const responseResult = await response.json();\r\n          const responseText =\r\n            isNil(responseResult) === false &&\r\n            isNil(responseResult.response) === false &&\r\n            isNil(responseResult.response.statusText) === false\r\n              ? responseResult.response.statusText\r\n              : \"\";\r\n          throw responseText;\r\n        }\r\n        const label = `${name}_${moment().format(\"YYYYMMDD-HHmm\")}`;\r\n        const blob = await response.blob();\r\n        const link = document.createElement(\"a\");\r\n        link.className = \"download\";\r\n        link.download = `${label}.${\"docx\"}`;\r\n        link.href = URL.createObjectURL(blob);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.parentElement.removeChild(link);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false && isEmpty(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCommentContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddCommentContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu comentario se envió correctamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallSetContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callSetContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu solicitud se procesó exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetPropertyTypes = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPropertyTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPropertyTypes(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCalllSyncApis = async () => {\r\n    await handlerCallGetAllCustomerById();\r\n    await handlerCallGetTenantCoincidences();\r\n    await handlerCallGetCallGetStatsChart();\r\n    setFinishCallApis(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCalllSyncApis();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <SectionContractAvailable\r\n        dataProfile={dataProfile}\r\n        isModalVisible={isVisibleContract}\r\n        onClose={() => {\r\n          setIsVisibleContract(!isVisibleContract);\r\n        }}\r\n        dataGetContract={dataGetContract}\r\n        onAddCommentContract={(data) => {\r\n          handlerCallAddCommentContract(data);\r\n        }}\r\n        onVisualiceDocument={async (data) => {\r\n          try {\r\n            await handlerCallGetContract(data);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onDownloadDocument={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContract(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onAcceptContract={async (data) => {\r\n          try {\r\n            await handlerCallSetContract(data);\r\n          } catch (error) {}\r\n        }}\r\n        onFinishContractFlow={() => {\r\n          handlerCalllSyncApis();\r\n        }}\r\n      />\r\n      <SectionAddProperty\r\n        dataPropertyTypes={dataPropertyTypes}\r\n        spinVisible={spinVisible}\r\n        isModalVisible={isModalVisible}\r\n        onClose={() => {\r\n          setIsModalVisible(!isModalVisible);\r\n        }}\r\n        onClickAddProperty={async (data) => {\r\n          setSpinVisible(true);\r\n          await handlerCallAddProperty(data);\r\n          await handlerCallGetAllCustomerById();\r\n        }}\r\n        dataZipCodeAdress={dataZipCodeAdress}\r\n        dataZipCatalog={dataZipCatalog}\r\n        onChangeZipCode={(zipCode) => {\r\n          hanlderCallGetZipCodeAdress({ type: 1, zipCode });\r\n        }}\r\n      />\r\n      <SectionAddTenant\r\n        dataPersonType={dataPersonType}\r\n        dataCatalogProperty={dataCatalogProperty}\r\n        dataDepartment={dataDepartment}\r\n        spinVisible={spinVisible}\r\n        isModalVisible={isModalVisibleTenant}\r\n        onClose={() => {\r\n          setIsModalVisibleTenant(!isModalVisibleTenant);\r\n        }}\r\n        onClickAddProperty={(data) => {\r\n          setSpinVisible(true);\r\n          handlerCallAddTenant(data);\r\n        }}\r\n        onChangeSelectProperty={(value) => {\r\n          handlerCallGetDepartments({\r\n            idProperty: value,\r\n            type: 1,\r\n          });\r\n        }}\r\n      />\r\n      <SectionAdvancement\r\n        isModalVisible={isModalVisibleAdvancement}\r\n        onClose={() => {\r\n          setIsModalVisibleAdvancement(!isModalVisibleAdvancement);\r\n        }}\r\n        onClickAdvancement={(data) => {\r\n          setSpinVisible(true);\r\n          handlerCallRequestAdvancement(data);\r\n        }}\r\n        spinVisible={spinVisible}\r\n        dataTenant={dataTenant}\r\n        dataBank={dataBank}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataCustomer.shortName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataCustomer.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"action-buttons-top\">\r\n            {(dataCustomer.canRequestProperty === 1 ||\r\n              dataCustomer.canRequestProperty === true) && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    handlerCallGetPropertyTypes();\r\n                    setIsModalVisible(!isModalVisible);\r\n                  }}\r\n                >\r\n                  <span>Registrar Propiedad</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n            {(dataCustomer.canRequestAdvanceRent === 1 ||\r\n              dataCustomer.canRequestAdvanceRent === true) && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={async () => {\r\n                    setIsModalVisibleAdvancement(!isModalVisibleAdvancement);\r\n                    await handlerCallTenantCatalog();\r\n                    await handlerCallBankCatalog();\r\n                  }}\r\n                >\r\n                  <span>Adelanto de renta</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconOwner} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataCustomer.totalCumulativeRentAmount}</h2>\r\n            <span>\r\n              Total Rentas Acumuladas ({dataCustomer.totalCumulativeRents})\r\n            </span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataCustomer.totalExpensiveAmount}</h2>\r\n            <span>Total Gastos Acumulados</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconActivity} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataCustomer.totalCumulativeBalance}</h2>\r\n            <span>Balance Acumulado</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user\">\r\n          <SectionStatsChart\r\n            dataStatsChart={dataStatsChart}\r\n            finishCallApis={finishCallApis}\r\n          />\r\n          <SectionCardTenant\r\n            dataCustomer={dataCustomer}\r\n            history={history}\r\n            tenantCoincidences={tenantCoincidences}\r\n            finishCallApis={finishCallApis}\r\n            onClickSendInvitation={async () => {\r\n              setIsModalVisibleTenant(!isModalVisibleTenant);\r\n              await handlerCallApiPersonTypes({\r\n                idType: 2,\r\n                idCustomerType: null,\r\n              });\r\n              await handlerCallGetProperties();\r\n            }}\r\n            onOpenContract={(data) => {\r\n              handlerCallGetContract({\r\n                download: false,\r\n                process: false,\r\n                url: null,\r\n                idCustomer: data.idCustomer,\r\n                idCustomerTenant: data.idCustomerTenant,\r\n                idContract: data.idContract,\r\n                type: 1,\r\n              });\r\n              setIsVisibleContract(!isVisibleContract);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callGetAllCustomerById: (data) => dispatch(callGetAllCustomerById(data)),\r\n  callGetStatsChart: (data) => dispatch(callGetStatsChart(data)),\r\n  callGetTenantCoincidences: (data) =>\r\n    dispatch(callGetAllCustomerCoincidences(data)),\r\n  callAddProperty: (data) => dispatch(callAddProperty(data)),\r\n  callGetAllPersons: (data) => dispatch(callGetAllPersons(data)),\r\n  callGetProperties: (data) => dispatch(callGetProperties(data)),\r\n  callGetDepartments: (data) => dispatch(callGetDepartments(data)),\r\n  callAddTenant: (data) => dispatch(callAddTenant(data)),\r\n  callGetZipCodeAdress: (data) => dispatch(callGetZipCodeAdress(data)),\r\n  callGetAllTenantsCatalog: (data) => dispatch(callGetAllTenantsCatalog(data)),\r\n  callGetAllBankCatalog: (data) => dispatch(callGetAllBankCatalog(data)),\r\n  callRequestAdvancement: (data) => dispatch(callRequestAdvancement(data)),\r\n  callSetContract: (data, id) => dispatch(callSetContract(data, id)),\r\n  callAddCommentContract: (data, id) =>\r\n    dispatch(callAddCommentContract(data, id)),\r\n  callGetContract: (data) => dispatch(callGetContract(data)),\r\n  callGetContractComment: (data) => dispatch(callGetContractComment(data)),\r\n  callAddDocumentContractId: (data, id) =>\r\n    dispatch(callAddDocumentContractId(data, id)),\r\n  callGetPropertyTypes: (data) => dispatch(callGetPropertyTypes(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Owner);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailableOwner.jsx",["414","415","416"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { Modal, Row, Col, Checkbox, DatePicker } from \"antd\";\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\nimport {\r\n  SyncOutlined,\r\n  MobileOutlined,\r\n  SnippetsOutlined,\r\n  FileDoneOutlined,\r\n  FileProtectOutlined,\r\n  CreditCardOutlined,\r\n  FolderOpenOutlined,\r\n  CloudDownloadOutlined,\r\n  CheckOutlined,\r\n  FormOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport EmptyDocument from \"../../../assets/icons/EmptyDocument.svg\";\r\nimport ENVIROMENT from \"../../../utils/constants/enviroments\";\r\n\r\nconst SectionContractAvailable = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onAddCommentContract,\r\n    dataGetContract,\r\n    onDownloadDocument,\r\n    onAcceptContract,\r\n    dataProfile,\r\n    onVisualiceDocument,\r\n    onFinishContractFlow,\r\n  } = props;\r\n  const [signature, setSignature] = useState(\"\");\r\n  const reconstructOriginal = {\r\n    contract: true,\r\n    policy: true,\r\n    contractTenant: true,\r\n    payments: true,\r\n  };\r\n  const [reconstructionSection, setReconstructionSection] = useState(\r\n    reconstructOriginal\r\n  );\r\n  const [startedAt, setStartedAt] = useState(null);\r\n  const [scheduleSignatureDate, setScheduleSignatureDate] = useState(null);\r\n  const [valueText, setValueText] = useState(null);\r\n  const [openSection, setOpenSection] = useState(null);\r\n  const [aceptTerms, setAceptTerms] = useState(false);\r\n  const [internalModal, setInternalModal] = useState(false);\r\n  const [isEditableContract, setIsEditableContract] = useState(false);\r\n  const [typeSignatureDigital, setTypeSignatureDigital] = useState(1);\r\n  const [documentSigned, setDocumentSigned] = useState({\r\n    contract: false,\r\n    policy: false,\r\n    payment: false,\r\n  });\r\n  const [isDownloadDocument, setIsDownloadDocument] = useState(false);\r\n  const [signaturePrecencial, setSignaturePrecencial] = useState(false);\r\n  const signatureRef = useRef(null);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataGetContract) === false && isNil(openSection) === true) {\r\n      if (\r\n        dataGetContract.isEditable === 1 ||\r\n        dataGetContract.isEditable === true\r\n      ) {\r\n        if (\r\n          dataProfile.idUserType === 3 &&\r\n          isNil(dataGetContract.startedAt) === true\r\n        ) {\r\n          setOpenSection(1);\r\n        } else {\r\n          setOpenSection(4);\r\n          setSignaturePrecencial(true);\r\n        }\r\n        setIsEditableContract(true);\r\n      } else {\r\n        setOpenSection(4);\r\n        setIsEditableContract(false);\r\n      }\r\n    }\r\n  }, [dataGetContract]);\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      className=\"modal-signature-contract\"\r\n    >\r\n      <Modal\r\n        style={{ top: 20 }}\r\n        visible={internalModal}\r\n        closable={false}\r\n        footer={false}\r\n        className=\"modal-signature-contract\"\r\n      >\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setInternalModal(!internalModal);\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Documento</h1>\r\n          </div>\r\n          <div className=\"contract-children-information\">\r\n            {isNil(dataGetContract) === false &&\r\n            isNil(dataGetContract.url) === false ? (\r\n              <iframe\r\n                className=\"iframe-docx-hfy\"\r\n                src={`https://docs.google.com/gview?url=${ENVIROMENT}${dataGetContract.url}&embedded=true`}\r\n              ></iframe>\r\n            ) : (\r\n              <div className=\"empty-data-document\">\r\n                <img\r\n                  src={EmptyDocument}\r\n                  alt=\"make-page\"\r\n                  width={50}\r\n                  height={40}\r\n                />\r\n                <label>No está disponible el documento</label>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n      <div className=\"form-modal\">\r\n        <div className=\"title-head-modal\">\r\n          <button\r\n            className=\"arrow-back-to\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onClose();\r\n              setReconstructionSection(reconstructOriginal);\r\n            }}\r\n          >\r\n            <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n          <h1>Contrato</h1>\r\n          {/* <button\r\n            className=\"chat-contract-icon\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setOpenSection(3);\r\n              setAceptTerms(false);\r\n            }}\r\n          >\r\n            <img src={ChatContract} alt=\"backTo\" width=\"30\" />\r\n          </button> */}\r\n        </div>\r\n\r\n        <div className=\"main-form-information\">\r\n          <div className=\"contract-card-information\">\r\n            {openSection === 1 && (\r\n              <div id=\"step_1_contract\" className=\"main-form-information\">\r\n                <div style={{ marginBottom: \"15px\", textAlign: \"center\" }}>\r\n                  <h3\r\n                    style={{\r\n                      fontWeight: \"500\",\r\n                      color: \"var(--color-primary)\",\r\n                    }}\r\n                  >\r\n                    ¿Como quieres firmar tu contrato?\r\n                  </h3>\r\n                </div>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    justifyContent: \"space-around\",\r\n                    fontFamily: \"Poppins\",\r\n                    flexWrap: \"wrap\",\r\n                  }}\r\n                >\r\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <MobileOutlined\r\n                      style={{\r\n                        fontSize: \"80px\",\r\n                        color: \"#a0a3bd\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() => {\r\n                        setOpenSection(3);\r\n                        setSignaturePrecencial(true);\r\n                      }}\r\n                    />\r\n                    <label\r\n                      style={{\r\n                        color: \"#4e4b66\",\r\n                        fontWeight: 600,\r\n                        fontSize: 15,\r\n                        marginTop: 5,\r\n                      }}\r\n                    >\r\n                      Firma electrónica\r\n                    </label>\r\n                  </div>\r\n                  <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                    <SnippetsOutlined\r\n                      style={{\r\n                        fontSize: \"80px\",\r\n                        color: \"#a0a3bd\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() => {\r\n                        setOpenSection(2);\r\n                        setSignaturePrecencial(false);\r\n                      }}\r\n                    />\r\n                    <label\r\n                      style={{\r\n                        color: \"#4e4b66\",\r\n                        fontWeight: 600,\r\n                        fontSize: 15,\r\n                        marginTop: 5,\r\n                      }}\r\n                    >\r\n                      Firma presencial\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {openSection === 2 && (\r\n              <div\r\n                id=\"step_2_contract_presencial\"\r\n                className=\"contract-children-information\"\r\n              >\r\n                <div style={{ marginBottom: \"15px\" }}>\r\n                  <label\r\n                    style={{\r\n                      fontSize: \"14px\",\r\n                      fontWeight: \"500\",\r\n                      color: \"var(--color-primary)\",\r\n                    }}\r\n                  >\r\n                    Selecciona el dia que quieres firmar el contrato y el dia de\r\n                    inicio de tu contrato de arrendamiento\r\n                  </label>\r\n                </div>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DatePicker\r\n                      value={\r\n                        isNil(scheduleSignatureDate) === false\r\n                          ? moment(scheduleSignatureDate, \"YYYY-MM-DD\")\r\n                          : null\r\n                      }\r\n                      placeholder=\"Fecha de firma\"\r\n                      onChange={(momentFormat, date) => {\r\n                        setScheduleSignatureDate(\r\n                          moment(momentFormat).format(\"YYYY-MM-DD\")\r\n                        );\r\n                      }}\r\n                      format=\"DD MMMM YYYY\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DatePicker\r\n                      value={\r\n                        isNil(startedAt) === false\r\n                          ? moment(startedAt, \"YYYY-MM-DD\")\r\n                          : null\r\n                      }\r\n                      placeholder=\"Fecha de inicio del contrato\"\r\n                      onChange={(momentFormat, date) => {\r\n                        setStartedAt(moment(momentFormat).format(\"YYYY-MM-DD\"));\r\n                      }}\r\n                      format=\"DD MMMM YYYY\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <div className=\"two-action-buttons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setOpenSection(1);\r\n                    }}\r\n                  >\r\n                    <span>Cancelar</span>\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={async () => {\r\n                      await onAcceptContract({\r\n                        idCustomer: dataGetContract.idCustomer,\r\n                        idCustomerTenant: dataGetContract.idCustomerTenant,\r\n                        idPolicy: dataGetContract.idPolicy,\r\n                        idContract: dataGetContract.idContract,\r\n                        digitalSignature: signature,\r\n                        anex2: null,\r\n                        startedAt: startedAt,\r\n                        scheduleSignatureDate: scheduleSignatureDate,\r\n                        collectionDays: null,\r\n                        type: 1,\r\n                      });\r\n                      setOpenSection(4);\r\n                    }}\r\n                  >\r\n                    <span>Aceptar</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {openSection === 3 && (\r\n              <div\r\n                id=\"step_3_contract_digital\"\r\n                className=\"contract-children-information\"\r\n              >\r\n                <div style={{ marginBottom: \"15px\" }}>\r\n                  <label\r\n                    style={{\r\n                      fontSize: \"14px\",\r\n                      fontWeight: \"500\",\r\n                      color: \"var(--color-primary)\",\r\n                    }}\r\n                  >\r\n                    Selecciona el dia que iniciara el contrato de arrendamiento\r\n                  </label>\r\n                </div>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DatePicker\r\n                      value={\r\n                        isNil(startedAt) === false\r\n                          ? moment(startedAt, \"YYYY-MM-DD\")\r\n                          : null\r\n                      }\r\n                      placeholder=\"Fecha de inicio del contrato\"\r\n                      onChange={(momentFormat, date) => {\r\n                        setStartedAt(moment(momentFormat).format(\"YYYY-MM-DD\"));\r\n                      }}\r\n                      format=\"DD MMMM YYYY\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <div className=\"two-action-buttons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setOpenSection(1);\r\n                    }}\r\n                  >\r\n                    <span>Cancelar</span>\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={async () => {\r\n                      await onAcceptContract({\r\n                        idCustomer: dataGetContract.idCustomer,\r\n                        idCustomerTenant: dataGetContract.idCustomerTenant,\r\n                        idPolicy: dataGetContract.idPolicy,\r\n                        idContract: dataGetContract.idContract,\r\n                        digitalSignature: null,\r\n                        anex2: null,\r\n                        startedAt: startedAt,\r\n                        scheduleSignatureDate:\r\n                          dataProfile.idUserType === 3\r\n                            ? moment().format(\"YYYY-MM-DD\")\r\n                            : null,\r\n                        collectionDays: null,\r\n                        type: 1,\r\n                      });\r\n                      setOpenSection(4);\r\n                    }}\r\n                  >\r\n                    <span>Aceptar</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {openSection === 4 && isDownloadDocument === false && (\r\n              <div id=\"step_4_contract_docs\">\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    justifyContent: \"space-around\",\r\n                    fontFamily: \"Poppins\",\r\n                    flexWrap: \"wrap\",\r\n                  }}\r\n                >\r\n                  <h3\r\n                    style={{\r\n                      fontWeight: \"500\",\r\n                      color: \"var(--color-primary)\",\r\n                    }}\r\n                  >\r\n                    Contrato de Arrendamiento\r\n                  </h3>\r\n                  <div style={{ display: \"flex\", marginBottom: 20 }}>\r\n                    <FileDoneOutlined\r\n                      style={{\r\n                        fontSize: \"50px\",\r\n                        color:\r\n                          documentSigned.contract === false\r\n                            ? \"#a0a3bd\"\r\n                            : \"var(--color-primary)\",\r\n                      }}\r\n                      onClick={() => {}}\r\n                    />\r\n                    <div className=\"button-contract-actions\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={async () => {\r\n                          try {\r\n                            if (reconstructionSection.contract === true) {\r\n                              await onVisualiceDocument({\r\n                                download: false,\r\n                                process: true,\r\n                                url: dataGetContract.url,\r\n                                idCustomer: dataGetContract.idCustomer,\r\n                                idCustomerTenant:\r\n                                  dataGetContract.idCustomerTenant,\r\n                                idContract: dataGetContract.idContract,\r\n                                type: 1,\r\n                              });\r\n                              setReconstructionSection({\r\n                                ...reconstructionSection,\r\n                                contract: false,\r\n                              });\r\n                            }\r\n\r\n                            setInternalModal(!internalModal);\r\n                          } catch (error) {}\r\n                        }}\r\n                      >\r\n                        <FolderOpenOutlined style={{ fontSize: 15 }} /> Ver\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={async () => {\r\n                          try {\r\n                            setIsDownloadDocument(true);\r\n                            await onDownloadDocument(\r\n                              {\r\n                                download: true,\r\n                                process: false,\r\n                                url: dataGetContract.url,\r\n                                idCustomer: dataGetContract.idCustomer,\r\n                                idCustomerTenant:\r\n                                  dataGetContract.idCustomerTenant,\r\n                                idContract: dataGetContract.idContract,\r\n                                type: 1,\r\n                              },\r\n                              \"Contrato\"\r\n                            );\r\n                            setIsDownloadDocument(false);\r\n                          } catch (error) {\r\n                            setIsDownloadDocument(false);\r\n                          }\r\n                        }}\r\n                      >\r\n                        <CloudDownloadOutlined style={{ fontSize: 15 }} />{\" \"}\r\n                        Descargar\r\n                      </button>\r\n                      {signaturePrecencial === true &&\r\n                        isEditableContract === true && (\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() => {\r\n                              if (documentSigned.contract === false) {\r\n                                setOpenSection(5);\r\n                                setTypeSignatureDigital(1);\r\n                              }\r\n                            }}\r\n                          >\r\n                            {documentSigned.contract === false ? (\r\n                              <FormOutlined style={{ fontSize: 15 }} />\r\n                            ) : (\r\n                              <CheckOutlined\r\n                                style={{\r\n                                  fontSize: 15,\r\n                                  color: \"var(--color-primary)\",\r\n                                }}\r\n                              />\r\n                            )}{\" \"}\r\n                            {documentSigned.contract === false\r\n                              ? \"Firmar\"\r\n                              : \"Firmado\"}\r\n                          </button>\r\n                        )}\r\n                    </div>\r\n                  </div>\r\n                  <h3\r\n                    style={{\r\n                      fontWeight: \"500\",\r\n                      color: \"var(--color-primary)\",\r\n                    }}\r\n                  >\r\n                    Póliza\r\n                  </h3>\r\n                  <div style={{ display: \"flex\", marginBottom: 20 }}>\r\n                    <FileProtectOutlined\r\n                      style={{\r\n                        fontSize: \"50px\",\r\n                        color:\r\n                          documentSigned.policy === false\r\n                            ? \"#a0a3bd\"\r\n                            : \"var(--color-primary)\",\r\n                      }}\r\n                      onClick={() => {}}\r\n                    />\r\n                    <div className=\"button-contract-actions\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={async () => {\r\n                          try {\r\n                            if (reconstructionSection.policy === true) {\r\n                              await onVisualiceDocument({\r\n                                download: false,\r\n                                process: true,\r\n                                url: dataGetContract.url,\r\n                                idCustomer: dataGetContract.idCustomer,\r\n                                idCustomerTenant:\r\n                                  dataGetContract.idCustomerTenant,\r\n                                idContract: dataGetContract.idContract,\r\n                                type: 2,\r\n                              });\r\n                              setReconstructionSection({\r\n                                ...reconstructionSection,\r\n                                policy: false,\r\n                              });\r\n                            }\r\n                            setInternalModal(!internalModal);\r\n                          } catch (error) {}\r\n                        }}\r\n                      >\r\n                        <FolderOpenOutlined style={{ fontSize: 15 }} /> Ver\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={async () => {\r\n                          try {\r\n                            setIsDownloadDocument(true);\r\n                            await onDownloadDocument(\r\n                              {\r\n                                download: true,\r\n                                process: false,\r\n                                url: dataGetContract.url,\r\n                                idCustomer: dataGetContract.idCustomer,\r\n                                idCustomerTenant:\r\n                                  dataGetContract.idCustomerTenant,\r\n                                idContract: dataGetContract.idContract,\r\n                                type: 2,\r\n                              },\r\n                              \"Poliza\"\r\n                            );\r\n                            setIsDownloadDocument(false);\r\n                          } catch (error) {\r\n                            setIsDownloadDocument(false);\r\n                          }\r\n                        }}\r\n                      >\r\n                        <CloudDownloadOutlined style={{ fontSize: 15 }} />{\" \"}\r\n                        Descargar\r\n                      </button>\r\n                      {signaturePrecencial === true &&\r\n                        isEditableContract === true && (\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() => {\r\n                              if (documentSigned.policy === false) {\r\n                                setOpenSection(5);\r\n                                setTypeSignatureDigital(2);\r\n                              }\r\n                            }}\r\n                          >\r\n                            {documentSigned.policy === false ? (\r\n                              <FormOutlined style={{ fontSize: 15 }} />\r\n                            ) : (\r\n                              <CheckOutlined\r\n                                style={{\r\n                                  fontSize: 15,\r\n                                  color: \"var(--color-primary)\",\r\n                                }}\r\n                              />\r\n                            )}{\" \"}\r\n                            {documentSigned.policy === false\r\n                              ? \"Firmar\"\r\n                              : \"Firmado\"}\r\n                          </button>\r\n                        )}\r\n                    </div>\r\n                  </div>\r\n                  <h3\r\n                    style={{\r\n                      fontWeight: \"500\",\r\n                      color: \"var(--color-primary)\",\r\n                    }}\r\n                  >\r\n                    Pagarés\r\n                  </h3>\r\n                  <div style={{ display: \"flex\", marginBottom: 20 }}>\r\n                    <CreditCardOutlined\r\n                      style={{\r\n                        fontSize: \"50px\",\r\n                        color:\r\n                          documentSigned.payment === false\r\n                            ? \"#a0a3bd\"\r\n                            : \"var(--color-primary)\",\r\n                      }}\r\n                      onClick={() => {}}\r\n                    />\r\n                    <div className=\"button-contract-actions\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={async () => {\r\n                          try {\r\n                            if (reconstructionSection.payments === true) {\r\n                              await onVisualiceDocument({\r\n                                download: false,\r\n                                process: true,\r\n                                url: dataGetContract.url,\r\n                                idCustomer: dataGetContract.idCustomer,\r\n                                idCustomerTenant:\r\n                                  dataGetContract.idCustomerTenant,\r\n                                idContract: dataGetContract.idContract,\r\n                                type: 4,\r\n                              });\r\n                              setReconstructionSection({\r\n                                ...reconstructionSection,\r\n                                payments: false,\r\n                              });\r\n                            }\r\n\r\n                            setInternalModal(!internalModal);\r\n                          } catch (error) {}\r\n                        }}\r\n                      >\r\n                        <FolderOpenOutlined style={{ fontSize: 15 }} /> Ver\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={async () => {\r\n                          try {\r\n                            setIsDownloadDocument(true);\r\n                            await onDownloadDocument(\r\n                              {\r\n                                download: true,\r\n                                process: false,\r\n                                url: dataGetContract.url,\r\n                                idCustomer: dataGetContract.idCustomer,\r\n                                idCustomerTenant:\r\n                                  dataGetContract.idCustomerTenant,\r\n                                idContract: dataGetContract.idContract,\r\n                                type: 4,\r\n                              },\r\n                              \"Pagare\"\r\n                            );\r\n                            setIsDownloadDocument(false);\r\n                          } catch (error) {\r\n                            setIsDownloadDocument(false);\r\n                          }\r\n                        }}\r\n                      >\r\n                        <CloudDownloadOutlined style={{ fontSize: 15 }} />{\" \"}\r\n                        Descargar\r\n                      </button>\r\n                      {signaturePrecencial === true &&\r\n                        dataProfile.idUserType !== 3 &&\r\n                        isEditableContract === true && (\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() => {\r\n                              if (documentSigned.payment === false) {\r\n                                setOpenSection(5);\r\n                                setTypeSignatureDigital(4);\r\n                              }\r\n                            }}\r\n                          >\r\n                            {documentSigned.payment === false ? (\r\n                              <FormOutlined style={{ fontSize: 15 }} />\r\n                            ) : (\r\n                              <CheckOutlined\r\n                                style={{\r\n                                  fontSize: 15,\r\n                                  color: \"var(--color-primary)\",\r\n                                }}\r\n                              />\r\n                            )}{\" \"}\r\n                            {documentSigned.payment === false\r\n                              ? \"Firmar\"\r\n                              : \"Firmado\"}\r\n                          </button>\r\n                        )}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"two-action-buttons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={async () => {\r\n                      setOpenSection(6);\r\n                    }}\r\n                  >\r\n                    <span>Comentarios</span>\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={async () => {\r\n                      onClose();\r\n                      setOpenSection(1);\r\n                      onFinishContractFlow();\r\n                      setReconstructionSection(reconstructOriginal);\r\n                    }}\r\n                  >\r\n                    <span>Terminar</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {openSection === 4 && isDownloadDocument === true && (\r\n              <div\r\n                id=\"step_4_contract_docs_download\"\r\n                style={{\r\n                  height: \"269px\",\r\n                  position: \"relative\",\r\n                }}\r\n              >\r\n                <div\r\n                  style={{\r\n                    fontFamily: \"Poppins\",\r\n                    fontWeight: \"bold\",\r\n                    fontSize: \"18px\",\r\n                    color: \"var(--color-primary)\",\r\n                    textAlign: \"center\",\r\n                    width: \"98%\",\r\n                  }}\r\n                >\r\n                  Descargando...\r\n                </div>\r\n                <div class=\"loader\"></div>\r\n                <div class=\"shadow\"></div>\r\n                <div\r\n                  style={{\r\n                    position: \"absolute\",\r\n                    bottom: \"15px\",\r\n                    fontFamily: \"Poppins\",\r\n                    fontWeight: \"bold\",\r\n                    color: \"var(--color-primary)\",\r\n                    textAlign: \"center\",\r\n                    margn: \"0px auto\",\r\n                    width: \"98%\",\r\n                  }}\r\n                >\r\n                  Estamos procesando tu documento\r\n                  <br /> espera por favor\r\n                </div>\r\n              </div>\r\n            )}\r\n            {openSection === 5 && (\r\n              <div\r\n                id=\"step_5_contract_signature\"\r\n                className=\"contract-section-signature\"\r\n              >\r\n                <p style={{ fontSize: \"18px\" }}>\r\n                  {typeSignatureDigital === 1 &&\r\n                    \"Firma de Contrato de arrendamiento\"}\r\n                  {typeSignatureDigital === 2 && \"Firma de Póliza\"}\r\n                  {typeSignatureDigital === 4 && \"Firma de Pagarés\"}\r\n                </p>\r\n                <div className=\"signature\">\r\n                  <SignatureCanvas\r\n                    penColor=\"black\"\r\n                    canvasProps={{\r\n                      width: 320,\r\n                      height: 150,\r\n                      className: \"sigCanvas\",\r\n                    }}\r\n                    ref={signatureRef}\r\n                  />\r\n                </div>\r\n                <div className=\"conditions-name\">\r\n                  <strong>{dataGetContract.fullName}</strong>\r\n                </div>\r\n                <Checkbox\r\n                  checked={aceptTerms}\r\n                  onChange={(e) => {\r\n                    const signatureCurrent = signatureRef.current;\r\n                    if (signatureCurrent.isEmpty() === false) {\r\n                      setAceptTerms(e.target.checked);\r\n                      const signatureBase64 = signatureCurrent.toDataURL();\r\n                      setSignature(signatureBase64);\r\n                    }\r\n                  }}\r\n                ></Checkbox>\r\n                <span\r\n                  style={{\r\n                    marginLeft: 5,\r\n                    textAlign: \"center\",\r\n                    fontSize: 10,\r\n                    color: \"black\",\r\n                  }}\r\n                >\r\n                  Acepto los términos publicados en la pagina\r\n                  https://segurent.mx/aviso-de-privacidad/\r\n                </span>\r\n                <div className=\"two-action-buttons\">\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      signatureRef.current.clear();\r\n                      setAceptTerms(false);\r\n                    }}\r\n                  >\r\n                    <span>Limpiar firma</span>\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={async () => {\r\n                      signatureRef.current.clear();\r\n                      setAceptTerms(false);\r\n                      await onAcceptContract({\r\n                        idCustomer: dataGetContract.idCustomer,\r\n                        idCustomerTenant: dataGetContract.idCustomerTenant,\r\n                        idPolicy: dataGetContract.idPolicy,\r\n                        idContract: dataGetContract.idContract,\r\n                        digitalSignature: signature,\r\n                        anex2: null,\r\n                        startedAt: startedAt,\r\n                        scheduleSignatureDate:\r\n                          dataProfile.idUserType === 3\r\n                            ? moment().format(\"YYYY-MM-DD\")\r\n                            : null,\r\n                        collectionDays: null,\r\n                        type: typeSignatureDigital,\r\n                      });\r\n                      if (typeSignatureDigital === 1) {\r\n                        setDocumentSigned({\r\n                          ...documentSigned,\r\n                          contract: true,\r\n                        });\r\n                        setReconstructionSection({\r\n                          ...reconstructionSection,\r\n                          contract: true,\r\n                        });\r\n                      } else if (typeSignatureDigital === 2) {\r\n                        setDocumentSigned({ ...documentSigned, policy: true });\r\n                        setReconstructionSection({\r\n                          ...reconstructionSection,\r\n                          policy: true,\r\n                        });\r\n                      } else if (typeSignatureDigital === 4) {\r\n                        setDocumentSigned({ ...documentSigned, payment: true });\r\n                        setReconstructionSection({\r\n                          ...reconstructionSection,\r\n                          payments: true,\r\n                        });\r\n                      }\r\n                      setOpenSection(4);\r\n                    }}\r\n                    className={aceptTerms === true ? \"\" : \"disabled-button\"}\r\n                  >\r\n                    <span>Aceptar</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {openSection === 6 && (\r\n              <>\r\n                <div\r\n                  id=\"step_6_contract_comments\"\r\n                  className=\"contract-section-signature\"\r\n                >\r\n                  <p style={{ fontSize: \"12px\" }}>\r\n                    No estás de acuerdo con tu contrato, puedes mandarnos tus\r\n                    observaciones\r\n                  </p>\r\n                  <div className=\"section-type-messages-fixed\">\r\n                    <div className=\"section-type-messages\">\r\n                      <div className=\"text-header\">Redactar mensaje</div>\r\n                      <textarea\r\n                        value={valueText}\r\n                        maxlength=\"200\"\r\n                        style={{ fontFamily: \"Poppins\" }}\r\n                        onChange={(e) => {\r\n                          setValueText(e.target.value);\r\n                        }}\r\n                        className=\"text-area-contract\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"two-action-buttons\" style={{ marginTop: 20 }}>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setOpenSection(4);\r\n                    }}\r\n                  >\r\n                    <span>Cancelar</span>\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      onAddCommentContract({\r\n                        idCustomer: dataGetContract.idCustomer,\r\n                        idCustomerTenant: dataGetContract.idCustomerTenant,\r\n                        idDigitalContract: dataGetContract.idDigitalContract,\r\n                        idContract: dataGetContract.idContract,\r\n                        comment: valueText,\r\n                      });\r\n                      setOpenSection(1);\r\n                      onClose();\r\n                      setReconstructionSection(reconstructOriginal);\r\n                    }}\r\n                  >\r\n                    <span>Enviar</span>\r\n                  </button>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionContractAvailable;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx",["417","418","419","420"],"import React, { useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Modal, Input, Row, Col, Select, Spin } from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport FrontFunctions from \"../../../utils/actions/frontFunctions\";\r\nimport SubSectionSummary from \"./subSectionSummary\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAdvancement = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onClickAdvancement,\r\n    spinVisible,\r\n    dataTenant,\r\n    dataBank,\r\n  } = props;\r\n  const frontFunctions = new FrontFunctions();\r\n  const initialDataForm = {\r\n    text: null,\r\n    currentRentFormat: \"\",\r\n    advanceRents: null,\r\n    accountHolder: null,\r\n    accountNumber: null,\r\n    clabeNumber: null,\r\n    idContract: null,\r\n    idBank: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [property, setProperty] = useState(null);\r\n  const [viewSummary, setViewSummary] = useState(false);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  return (\r\n    <Modal\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      style={{ top: 20 }}\r\n      width={600}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Adelanto de renta</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>\r\n              Llena la siguiente información para solicitar un adelanto de renta\r\n            </p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Row>\r\n                  <Select\r\n                    placeholder=\"Inquilino\"\r\n                    value={dataForm.text}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        text: value,\r\n                        currentRentFormat: dataSelect.currentRentAmount,\r\n                        idContract: dataSelect.idContract,\r\n                      });\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataTenant) === false &&\r\n                      dataTenant.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.id}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.fullName}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Row>\r\n                <Row>\r\n                  <NumberFormat\r\n                    id={null}\r\n                    customInput={Input}\r\n                    thousandSeparator=\",\"\r\n                    decimalSeparator=\".\"\r\n                    decimalPrecision={2}\r\n                    allowNegative={false}\r\n                    prefix=\"$\"\r\n                    suffix=\"\"\r\n                    disabled\r\n                    value={dataForm.currentRentFormat}\r\n                    className=\"inputLogin\"\r\n                    floatingLabelText=\"\"\r\n                    isVisible\r\n                    toBlock={false}\r\n                    disable={false}\r\n                    placeholder=\"Monto de renta\"\r\n                    onValueChange={(values) => {\r\n                      const { formattedValue, value, floatValue } = values;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        currentRentFormat: floatValue,\r\n                      });\r\n                    }}\r\n                    onClick={(event) => {}}\r\n                    onFocus={(event) => {}}\r\n                    onBlur={(event) => {}}\r\n                  />\r\n                </Row>\r\n                <Row>\r\n                  <Select\r\n                    placeholder=\"Rentas adelantadas\"\r\n                    value={dataForm.advanceRents}\r\n                    onChange={(value, option) => {\r\n                      setDataForm({ ...dataForm, advanceRents: value });\r\n                    }}\r\n                  >\r\n                    <Option value={1}>1</Option>\r\n                    <Option value={2}>2</Option>\r\n                    <Option value={3}>3</Option>\r\n                  </Select>\r\n                </Row>\r\n              </Col>\r\n              <Col\r\n                span={13}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 13 }}\r\n                className=\"total-advancement-amount\"\r\n              >\r\n                <SubSectionSummary\r\n                  viewSummary={viewSummary}\r\n                  onClickViewSummary={() => {\r\n                    setViewSummary(!viewSummary);\r\n                  }}\r\n                  dataForm={dataForm}\r\n                  frontFunctions={frontFunctions}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Información bancaria</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Mis cuentas guardadas\"\r\n                  value={dataForm.accountSave}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, accountSave: value });\r\n                  }}\r\n                >\r\n                  <Option value={1}>cuenta 1</Option>\r\n                  <Option value={2}>cuenta 2</Option>\r\n                  <Option value={3}>cuenta 3</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <p>Nueva cuenta</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.accountHolder}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      accountHolder: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.clabeNumber}\r\n                  placeholder={\"CLABE\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      clabeNumber: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.accountNumber}\r\n                  placeholder={\"Número de cuenta\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      accountNumber: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Select\r\n                  placeholder=\"Banco\"\r\n                  showSearch\r\n                  value={dataForm.idBank}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, idBank: value });\r\n                  }}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {isEmpty(dataBank) === false &&\r\n                    dataBank.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClickAdvancement(dataForm);\r\n                setDataForm(initialDataForm);\r\n              }}\r\n            >\r\n              <span>Solicitar adelanto</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAdvancement;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx",["421","422","423","424","425","426","427"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Modal, Input, Row, Col, Select, Spin, Tooltip, Radio } from \"antd\";\r\nimport { SyncOutlined, CloseOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAddProperty = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onClickAddProperty,\r\n    spinVisible,\r\n    onChangeZipCode,\r\n    dataZipCodeAdress,\r\n    dataZipCatalog,\r\n    dataPropertyTypes,\r\n  } = props;\r\n  const initialDataForm = {\r\n    street: null,\r\n    suite: null,\r\n    streetNumber: null,\r\n    neighborhood: null,\r\n    city: null,\r\n    state: null,\r\n    zipCode: null,\r\n    idZipCode: null,\r\n    firstStreetReference: null,\r\n    secondStreetReference: null,\r\n    totalSuites: [],\r\n    departament: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [statesDynamic, setStateDynamic] = useState({});\r\n  const [totalDepartment, setTotalDepartment] = useState([]);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        state: dataZipCodeAdress.state,\r\n        city: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Registrar Propiedad</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>Datos de localización</p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.street}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, street: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.streetNumber}\r\n                  placeholder={\"Numero\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, streetNumber: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.zipCode}\r\n                  placeholder={\"Código postal\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    if (value.length >= 5) {\r\n                      setDataForm({ ...dataForm, zipCode: value });\r\n                      onChangeZipCode(e.target.value);\r\n                    } else {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: null,\r\n                        idZipCode: null,\r\n                        zipCode: value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.state}\r\n                  placeholder={\"Estado\"}\r\n                  disabled\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, state: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.city}\r\n                  disabled\r\n                  placeholder={\"Municipio/Delegacion\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, city: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                {isOpenInput === false ? (\r\n                  <Select\r\n                    placeholder=\"Colonia\"\r\n                    value={dataForm.idZipCode}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setIsOpenInput(dataSelect.isOpen);\r\n                      if (dataSelect.isOpen === true) {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: null,\r\n                          idZipCode: value,\r\n                        });\r\n                      } else {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: option.children,\r\n                          idZipCode: value,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataZipCatalog) === false &&\r\n                      dataZipCatalog.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idZipCode}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.neighborhood}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                ) : (\r\n                  <Input\r\n                    value={dataForm.neighborhood}\r\n                    placeholder={\"Indicar Colonia\"}\r\n                    suffix={\r\n                      <Tooltip title=\"Cerrar\">\r\n                        <CloseOutlined\r\n                          style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                          onClick={() => {\r\n                            setIsOpenInput(false);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idZipCode: null,\r\n                              neighborhood: null,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                    }\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <p>Entre Calles</p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.firstStreetReference}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      firstStreetReference: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.secondStreetReference}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      secondStreetReference: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Agrega departamentos</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Número de departamentos\"\r\n                  value={dataForm.totalSuites}\r\n                  onChange={(value, option) => {\r\n                    let array = [];\r\n                    let statesObject = {};\r\n                    for (let index = 0; index < value; index++) {\r\n                      array.push({\r\n                        id: `suite-${index + 1}`,\r\n                      });\r\n                      statesObject[`suite-${index + 1}`] = {\r\n                        suite: null,\r\n                        currentRent: null,\r\n                      };\r\n                    }\r\n                    setStateDynamic({ ...statesObject, ...statesDynamic });\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      totalSuites: value,\r\n                    });\r\n                    setTotalDepartment(array);\r\n                  }}\r\n                >\r\n                  <Option value={1}>1 Departamento</Option>\r\n                  <Option value={2}>2 Departamentos</Option>\r\n                  <Option value={3}>3 Departamentos</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            {isEmpty(totalDepartment) === false &&\r\n              totalDepartment.map((row, indx) => {\r\n                return (\r\n                  <>\r\n                    <p>Propiedad {indx + 1}</p>\r\n                    <Row>\r\n                      <Col span={11}>\r\n                        <Input\r\n                          value={statesDynamic[row.id].suite}\r\n                          placeholder={\"Número interior\"}\r\n                          onChange={(e) => {\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                suite: e.target.value,\r\n                              },\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} />\r\n                      <Col span={11}>\r\n                        <NumberFormat\r\n                          id={null}\r\n                          customInput={Input}\r\n                          thousandSeparator=\",\"\r\n                          decimalSeparator=\".\"\r\n                          decimalPrecision={2}\r\n                          allowNegative={false}\r\n                          prefix=\"$\"\r\n                          suffix=\"\"\r\n                          value={statesDynamic[row.id].currentRent}\r\n                          className=\"inputLogin\"\r\n                          floatingLabelText=\"\"\r\n                          isVisible\r\n                          toBlock={false}\r\n                          disable={false}\r\n                          placeholder=\"Monto de renta\"\r\n                          onValueChange={(values) => {\r\n                            const {\r\n                              formattedValue,\r\n                              value,\r\n                              floatValue,\r\n                            } = values;\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                currentRent: floatValue,\r\n                              },\r\n                            });\r\n                          }}\r\n                          onClick={(event) => {}}\r\n                          onFocus={(event) => {}}\r\n                          onBlur={(event) => {}}\r\n                        />\r\n                      </Col>\r\n                      <Col span={1} />\r\n                      <Col\r\n                        span={2}\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          margin: \"auto\",\r\n                        }}\r\n                      ></Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11}>\r\n                        <div className=\"option-select-radio\">\r\n                          <span\r\n                            style={{\r\n                              color: \"var(--color-primary)\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            ¿Eres el propietario?\r\n                          </span>\r\n                          <Radio.Group\r\n                            onChange={(e) => {\r\n                              const value = e.target.value;\r\n                              setStateDynamic({\r\n                                ...statesDynamic,\r\n                                [row.id]: {\r\n                                  ...statesDynamic[row.id],\r\n                                  isOwner: value,\r\n                                },\r\n                              });\r\n                            }}\r\n                            value={statesDynamic[row.id].isOwner}\r\n                          >\r\n                            <Radio value={1}>Si</Radio>\r\n                            <Radio value={0}>No, lo represento</Radio>\r\n                          </Radio.Group>\r\n                        </div>\r\n                      </Col>\r\n                      <Col span={2} />\r\n                      <Col span={11}>\r\n                        <div className=\"option-select-radio\">\r\n                          <span\r\n                            style={{\r\n                              color: \"var(--color-primary)\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            ¿Está amueblado?\r\n                          </span>\r\n                          <Radio.Group\r\n                            onChange={(e) => {\r\n                              setStateDynamic({\r\n                                ...statesDynamic,\r\n                                [row.id]: {\r\n                                  ...statesDynamic[row.id],\r\n                                  isFurnished: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                            value={statesDynamic[row.id].isFurnished}\r\n                          >\r\n                            <Radio value={1}>Si</Radio>\r\n                            <Radio value={0}>No</Radio>\r\n                          </Radio.Group>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11}>\r\n                        <div className=\"option-select-radio\">\r\n                          <span\r\n                            style={{\r\n                              color: \"var(--color-primary)\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            ¿Está Asegurada?\r\n                          </span>\r\n                          <Radio.Group\r\n                            onChange={(e) => {\r\n                              setStateDynamic({\r\n                                ...statesDynamic,\r\n                                [row.id]: {\r\n                                  ...statesDynamic[row.id],\r\n                                  hasInsurance: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                            value={statesDynamic[row.id].hasInsurance}\r\n                          >\r\n                            <Radio value={1}>Si</Radio>\r\n                            <Radio value={0}>No</Radio>\r\n                          </Radio.Group>\r\n                        </div>\r\n                      </Col>\r\n                      <Col span={2} />\r\n                      <Col span={11}>\r\n                        <Select\r\n                          placeholder=\"Tipo de inmueble\"\r\n                          value={statesDynamic[row.id].idPropertyType}\r\n                          onChange={(value, option) => {\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                idPropertyType: value,\r\n                              },\r\n                            });\r\n                          }}\r\n                        >\r\n                          {isEmpty(dataPropertyTypes) === false &&\r\n                            dataPropertyTypes.map((row) => {\r\n                              return (\r\n                                <Option\r\n                                  value={row.idPropertyType}\r\n                                  onClick={() => {\r\n                                    return row;\r\n                                  }}\r\n                                >\r\n                                  {row.text}\r\n                                </Option>\r\n                              );\r\n                            })}\r\n                        </Select>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11}>\r\n                        <NumberFormat\r\n                          id={null}\r\n                          customInput={Input}\r\n                          thousandSeparator=\",\"\r\n                          decimalSeparator=\".\"\r\n                          decimalPrecision={2}\r\n                          allowNegative={false}\r\n                          prefix=\"$\"\r\n                          suffix=\"\"\r\n                          value={statesDynamic[row.id].maintenanceAmount}\r\n                          className=\"inputLogin\"\r\n                          floatingLabelText=\"\"\r\n                          isVisible\r\n                          toBlock={false}\r\n                          disable={false}\r\n                          placeholder=\"Monto de mantenimiento\"\r\n                          onValueChange={(values) => {\r\n                            const {\r\n                              formattedValue,\r\n                              value,\r\n                              floatValue,\r\n                            } = values;\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                maintenanceAmount: floatValue,\r\n                              },\r\n                            });\r\n                          }}\r\n                          onClick={(event) => {}}\r\n                          onFocus={(event) => {}}\r\n                          onBlur={(event) => {}}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} />\r\n                      <Col span={11}>\r\n                        <NumberFormat\r\n                          id={null}\r\n                          customInput={Input}\r\n                          thousandSeparator=\",\"\r\n                          decimalSeparator=\".\"\r\n                          decimalPrecision={2}\r\n                          allowNegative={false}\r\n                          prefix=\"\"\r\n                          suffix=\"\"\r\n                          value={statesDynamic[row.id].totalParkingSpots}\r\n                          className=\"inputLogin\"\r\n                          floatingLabelText=\"\"\r\n                          isVisible\r\n                          toBlock={false}\r\n                          disable={false}\r\n                          placeholder=\"Número de estacionamientos\"\r\n                          onValueChange={(values) => {\r\n                            const {\r\n                              formattedValue,\r\n                              value,\r\n                              floatValue,\r\n                            } = values;\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                totalParkingSpots: floatValue,\r\n                              },\r\n                            });\r\n                          }}\r\n                          onClick={(event) => {}}\r\n                          onFocus={(event) => {}}\r\n                          onBlur={(event) => {}}\r\n                        />\r\n                      </Col>\r\n                      <Col span={1} />\r\n                      <Col\r\n                        span={2}\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          margin: \"auto\",\r\n                        }}\r\n                      ></Col>\r\n                    </Row>\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                const arrayDepartment = [];\r\n                const objentSend = dataForm;\r\n                const statesDepartment = statesDynamic;\r\n                for (const key in statesDepartment) {\r\n                  arrayDepartment.push(statesDepartment[key]);\r\n                }\r\n                objentSend.departament = arrayDepartment;\r\n                onClickAddProperty(objentSend);\r\n                setDataForm(initialDataForm);\r\n                setStateDynamic({});\r\n                setTotalDepartment([]);\r\n              }}\r\n            >\r\n              <span>Registrar Propiedad</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAddProperty;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx",["428","429","430"],"import React, { useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Input, Row, Col, Select, Spin } from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport PicturesWall from \"./customUploadFile\";\r\nimport SubSectionSummary from \"./subSectionSummary\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst SectionRegisterPayment = (props) => {\r\n  const { dataPayments, spinVisible, onGetDocuments } = props;\r\n  const initialDataForm = {\r\n    idIncidence: null,\r\n    idPaymentType: null,\r\n    paymentDate: null,\r\n    amount: \"\",\r\n    advancingRents: null,\r\n    documents: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [dataSummary, setDataSummary] = useState({});\r\n  const [fileList, setFileList] = useState([]);\r\n  const [fileList1, setFileList1] = useState([]);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  const handlerSelectAmont = (data) => {\r\n    const { isForAdavancingRent, isForCurrentRent, currentRent, amount } = data;\r\n    let amoutData = \"\";\r\n    if (isForAdavancingRent === false && isForCurrentRent === false) {\r\n      amoutData = \"\";\r\n    } else if (isForAdavancingRent === false && isForCurrentRent === true) {\r\n      amoutData = amount;\r\n    } else if (isForAdavancingRent === true && isForCurrentRent === false) {\r\n      amoutData = currentRent;\r\n    }\r\n    return amoutData;\r\n  };\r\n\r\n  const handleChange = ({ fileList }) => {\r\n    setFileList(fileList);\r\n  };\r\n\r\n  const handleChange1 = ({ fileList }) => {\r\n    setFileList1(fileList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-content-tabs button-middle\">\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"content-messages-sections\">\r\n          <div className=\"section-history-messages\">\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Tipo de pago\"\r\n                  style={{ width: \"100%\" }}\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    const informationSummary =\r\n                      isNil(configureOption.interestArrearsDescription) ===\r\n                      false\r\n                        ? JSON.parse(\r\n                            configureOption.interestArrearsDescription\r\n                          )[0]\r\n                        : {};\r\n                    const amountPayable = handlerSelectAmont(configureOption);\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idPaymentType: value,\r\n                      amount: amountPayable,\r\n                    });\r\n                    setDataSummary(informationSummary);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataPayments) === false &&\r\n                    dataPayments.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idPaymentType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.paymentType}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col span={24}>\r\n                {isEmpty(dataSummary) === false ? (\r\n                  <div className=\"total-advancement-amount\">\r\n                    <p>Monto</p>\r\n                    <div>\r\n                      <h2>{dataSummary.totalAmountFormat}</h2>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <NumberFormat\r\n                    id={null}\r\n                    style={{ borderRadius: \"8px\" }}\r\n                    customInput={Input}\r\n                    thousandSeparator=\",\"\r\n                    decimalSeparator=\".\"\r\n                    decimalPrecision={2}\r\n                    allowNegative={false}\r\n                    prefix=\"$\"\r\n                    suffix=\"\"\r\n                    value={dataForm.amount}\r\n                    className=\"inputLogin\"\r\n                    floatingLabelText=\"\"\r\n                    isVisible\r\n                    toBlock={false}\r\n                    placeholder=\"Monto\"\r\n                    onValueChange={(values) => {\r\n                      const { formattedValue, value, floatValue } = values;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        amount: floatValue,\r\n                      });\r\n                    }}\r\n                    onClick={(event) => {}}\r\n                    onFocus={(event) => {}}\r\n                    onBlur={(event) => {}}\r\n                  />\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <SubSectionSummary dataSummary={dataSummary} />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"section-type-messages\" style={{ width: \"50%\" }}>\r\n            <div className=\"text-header\">Evidencia</div>\r\n            <div className=\"section-upload-files\">\r\n              <div className=\"section-upload-file\">\r\n                <PicturesWall fileList={fileList} handleChange={handleChange} />\r\n              </div>\r\n              <div className=\"section-upload-file\">\r\n                <PicturesWall\r\n                  handleChange={handleChange1}\r\n                  fileList={fileList1}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"button-action-payment\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              const documents = [...fileList, ...fileList1];\r\n              onGetDocuments(documents, dataForm);\r\n              setDataForm(initialDataForm);\r\n              setFileList([]);\r\n              setFileList1([]);\r\n              // onRegisterPayment(dataForm);\r\n            }}\r\n          >\r\n            <span>Registrar pago</span>\r\n          </button>\r\n        </div>\r\n      </Spin>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionRegisterPayment;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx",["431"],"import React, { useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport moment from \"moment\";\r\nimport { Select, Row, Col, DatePicker, Image, Button } from \"antd\";\r\nimport Search from \"../../../assets/icons/Search.svg\";\r\nimport EmptyDocument from \"../../../assets/icons/EmptyDocument.svg\";\r\nimport ENVIROMENT from \"../../../utils/constants/enviroments\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionDocuments = (props) => {\r\n  const {\r\n    dataDocumentTypes,\r\n    onSearchDocument,\r\n    dataDocumentsRepository,\r\n  } = props;\r\n  const [selectDateFilter, setSelectDateFilter] = useState(null);\r\n  const [selectDocumentType, setSelectDocumentType] = useState(null);\r\n  const [statesDates, setStatesDates] = useState({\r\n    now: `${moment().format(\"YYYY-MM-DD\")},${moment().format(\"YYYY-MM-DD\")}`,\r\n    month: `${moment().startOf(\"month\").format(\"YYYY-MM-DD\")},${moment()\r\n      .endOf(\"month\")\r\n      .format(\"YYYY-MM-DD\")}`,\r\n    startDate: moment().format(\"YYYY-MM-DD\"),\r\n    endDate: moment().format(\"YYYY-MM-DD\"),\r\n  });\r\n\r\n  const handlerToRenderPickerType = (type) => {\r\n    let component = null;\r\n    switch (type) {\r\n      case \"1\":\r\n        component = null;\r\n        break;\r\n      case \"2\":\r\n        component = (\r\n          <Col\r\n            span={4}\r\n            xs={{ span: 24 }}\r\n            md={{ span: 4 }}\r\n            style={{ marginBottom: \"10px\" }}\r\n          >\r\n            <DatePicker\r\n              placeholder=\"Seleccionar Mes\"\r\n              onChange={(momentFormat, date) => {\r\n                const initDay = moment(momentFormat)\r\n                  .startOf(\"month\")\r\n                  .format(\"YYYY-MM-DD\");\r\n                const endDate = moment(momentFormat)\r\n                  .endOf(\"month\")\r\n                  .format(\"YYYY-MM-DD\");\r\n                setStatesDates({\r\n                  ...statesDates,\r\n                  month: `${initDay},${endDate}`,\r\n                });\r\n              }}\r\n              picker=\"month\"\r\n              format=\"MMMM YYYY\"\r\n            />\r\n          </Col>\r\n        );\r\n        break;\r\n      case \"3\":\r\n        component = (\r\n          <>\r\n            <Col\r\n              span={4}\r\n              xs={{ span: 24 }}\r\n              md={{ span: 4 }}\r\n              style={{ marginBottom: \"10px\" }}\r\n            >\r\n              <DatePicker\r\n                placeholder=\"Fecha inicial\"\r\n                onChange={(momentFormat, date) => {\r\n                  setStatesDates({\r\n                    ...statesDates,\r\n                    startDate: moment(momentFormat).format(\"YYYY-MM-DD\"),\r\n                  });\r\n                }}\r\n                format=\"DD MMMM YYYY\"\r\n              />\r\n            </Col>\r\n            <Col span={1} />\r\n            <Col\r\n              span={4}\r\n              xs={{ span: 24 }}\r\n              md={{ span: 4 }}\r\n              style={{ marginBottom: \"10px\" }}\r\n            >\r\n              <DatePicker\r\n                placeholder=\"Fecha final\"\r\n                onChange={(momentFormat, date) => {\r\n                  setStatesDates({\r\n                    ...statesDates,\r\n                    endDate: moment(momentFormat).format(\"YYYY-MM-DD\"),\r\n                  });\r\n                }}\r\n                format=\"DD MMMM YYYY\"\r\n              />\r\n            </Col>\r\n          </>\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return component;\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-content-tabs\">\r\n      <div className=\"content-documents\">\r\n        <div className=\"content-history\">\r\n          <div className=\"select-file\">\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col\r\n                span={7}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 7 }}\r\n                style={{ marginBottom: \"10px\" }}\r\n              >\r\n                <Select\r\n                  placeholder=\"Tipo de documento\"\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    setSelectDocumentType(value);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataDocumentTypes) === false &&\r\n                    dataDocumentTypes.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idDocumentType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.documentType}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} />\r\n              <Col\r\n                span={4}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 4 }}\r\n                style={{ marginBottom: \"10px\" }}\r\n              >\r\n                <Select\r\n                  placeholder=\"Filtrar por\"\r\n                  onChange={(value, option) => {\r\n                    setSelectDateFilter(value);\r\n                    if (value === \"1\") {\r\n                      const toDay = moment().format(\"YYYY-MM-DD\");\r\n                      setStatesDates({\r\n                        ...statesDates,\r\n                        now: `${toDay},${toDay}`,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  <Option value=\"1\" onClick={() => {}}>\r\n                    Hoy\r\n                  </Option>\r\n                  <Option value=\"2\" onClick={() => {}}>\r\n                    Mes\r\n                  </Option>\r\n                  <Option value=\"3\" onClick={() => {}}>\r\n                    Rango de fecha\r\n                  </Option>\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} />\r\n              {handlerToRenderPickerType(selectDateFilter)}\r\n              <Col span={1} />\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }}>\r\n                <button\r\n                  type=\"button\"\r\n                  style={{ backgroundColor: \"transparent\", border: \"none\" }}\r\n                  onClick={() => {\r\n                    let sendDateFormat = \"\";\r\n                    if (selectDateFilter === \"1\") {\r\n                      sendDateFormat = statesDates.now;\r\n                    } else if (selectDateFilter === \"2\") {\r\n                      sendDateFormat = statesDates.month;\r\n                    } else if (selectDateFilter === \"3\") {\r\n                      sendDateFormat = `${statesDates.startDate},${statesDates.endDate}`;\r\n                    } else {\r\n                      sendDateFormat = `${moment().format(\r\n                        \"YYYY-MM-DD\"\r\n                      )},${moment().format(\"YYYY-MM-DD\")}`;\r\n                    }\r\n                    onSearchDocument({\r\n                      filterDate: sendDateFormat,\r\n                      idDocumentType: selectDocumentType,\r\n                    });\r\n                  }}\r\n                >\r\n                  <img src={Search} alt=\"search\" />\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"content-files\">\r\n            {isEmpty(dataDocumentsRepository) === false &&\r\n              dataDocumentsRepository.map((row) => {\r\n                return (\r\n                  <div className=\"card-file-information\">\r\n                    <div className=\"box-preview\">\r\n                      <Image\r\n                        width={100}\r\n                        height={120}\r\n                        src={`${ENVIROMENT}/api/viewFile/${row.idDocument}/${row.bucketSoruce}`}\r\n                      />\r\n                    </div>\r\n                    <div className=\"box-information\">\r\n                      <strong>{row.documentType}</strong>\r\n                      <div className=\"data-image\">\r\n                        <div>\r\n                          <span>Subido por:</span>\r\n                          <span>Fecha de pago:</span>\r\n                        </div>\r\n                        <div>\r\n                          <strong>{row.uploadedByUser}</strong>\r\n                          <strong>{row.uploadedAt}</strong>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}{\" \"}\r\n            {isEmpty(dataDocumentsRepository) === true && (\r\n              <div className=\"empty-data-document\">\r\n                <img\r\n                  src={EmptyDocument}\r\n                  alt=\"make-page\"\r\n                  width={50}\r\n                  height={40}\r\n                />\r\n                <label>\r\n                  No hay documentos en este periodo de tiempo, prueba buscando\r\n                  en otro periodo o tipo de documento\r\n                </label>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"content-upload\">\r\n          <div className=\"button_init_primary\">\r\n            <label type=\"button\" for=\"file-input\" onClick={() => {}}>\r\n              <span>Subir documentos</span>\r\n            </label>\r\n            <input\r\n              id=\"file-input\"\r\n              type=\"file\"\r\n              accept=\"image/png, image/jpeg, image/jpg , image/gif\"\r\n              onChange={(e) => {}}\r\n            />\r\n          </div>\r\n          <div className=\"section-container-action-up\">\r\n            <div className=\"container-carousel\">\r\n              <Carousel afterChange={() => {}} ref={dotChange} dots={false}>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n              </Carousel>\r\n            </div>\r\n            <Pagination\r\n              pageSize={1}\r\n              size=\"small\"\r\n              total={3}\r\n              onChange={(event) => {\r\n                dotChange.current.goTo(event - 1);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n       */}\r\n      </div>\r\n      {isEmpty(dataDocumentsRepository) === false && (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => {\r\n              let sendDateFormat = \"\";\r\n              if (selectDateFilter === \"1\") {\r\n                sendDateFormat = statesDates.now;\r\n              } else if (selectDateFilter === \"2\") {\r\n                sendDateFormat = statesDates.month;\r\n              } else if (selectDateFilter === \"3\") {\r\n                sendDateFormat = `${statesDates.startDate},${statesDates.endDate}`;\r\n              } else {\r\n                sendDateFormat = `${moment().format(\r\n                  \"YYYY-MM-DD\"\r\n                )},${moment().format(\"YYYY-MM-DD\")}`;\r\n              }\r\n              onSearchDocument({\r\n                filterDate: sendDateFormat,\r\n                idDocumentType: selectDocumentType,\r\n              });\r\n            }}\r\n          >\r\n            Mostrar mas\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionDocuments;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUploadDocuments.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUserDetailAdviser.jsx",["432","433","434"],"import React from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Row, Col, Drawer, Menu, Dropdown } from \"antd\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst SectionDetailUserAdviser = (props) => {\r\n  const { isDrawerVisible, onClose, dataDetailAgent } = props;\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div className=\"site-description-item-profile-wrapper\">\r\n      <strong className=\"site-description-item-profile-p-label\">\r\n        {title}:\r\n      </strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  const menu = (row) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item key=\"0\">\r\n          <a\r\n            href={\r\n              isNil(row.phoneNumber) === false\r\n                ? `https://api.whatsapp.com/send?phone=52${row.phoneNumber}`\r\n                : \"#\"\r\n            }\r\n            target=\"_blank\"\r\n          >\r\n            Whatsapp\r\n          </a>\r\n        </Menu.Item>\r\n        {/* <Menu.Item key=\"1\">\r\n          <a>Notificación</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <a>Mensaje app</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\">\r\n          <a>Correo</a>\r\n        </Menu.Item> */}\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      width={500}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={isDrawerVisible}\r\n    >\r\n      <div className=\"content-infomation-drawer\">\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Detalle de Asesor</h1>\r\n          </div>\r\n        </div>\r\n        <h3>Información general</h3>\r\n        <Row>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Nombre completo\"\r\n              content={dataDetailAgent.fullName}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Enviar mensaje\"\r\n              content={\r\n                <Dropdown overlay={menu(dataDetailAgent)} trigger={[\"click\"]}>\r\n                  <a>Enviar</a>\r\n                </Dropdown>\r\n              }\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={24}>\r\n            <DescriptionItem\r\n              title=\"Correo\"\r\n              content={dataDetailAgent.emailAddress}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Teléfono\"\r\n              content={dataDetailAgent.phoneNumber}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Pólizas Totales\"\r\n              content={dataDetailAgent.totalCommissions}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Renovaciones\"\r\n              content={\r\n                isNil(dataDetailAgent.totalRenewals) === false &&\r\n                isNil(dataDetailAgent.totalRenewals[0]) === false\r\n                  ? dataDetailAgent.totalRenewals[0]\r\n                  : \"-\"\r\n              }\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Comisiones totales\"\r\n              content={dataDetailAgent.totalCommissionsAmount}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <h3>Información de póliza actual</h3>\r\n        <Row>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Comisión por\"\r\n              content={dataDetailAgent.commissionType}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Comisión póliza Actual\"\r\n              content={dataDetailAgent.totalCommissionAmount}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row></Row>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SectionDetailUserAdviser;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenant.jsx",["435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466"],"import React, { useEffect, useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Drawer,\r\n  Collapse,\r\n  Menu,\r\n  Dropdown,\r\n  Button,\r\n  Popover,\r\n  Timeline,\r\n} from \"antd\";\r\nimport {\r\n  SyncOutlined,\r\n  EditOutlined,\r\n  CloseOutlined,\r\n  CheckOutlined,\r\n  CloseCircleFilled,\r\n  CheckCircleFilled,\r\n} from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst SectionDetailUserTenant = (props) => {\r\n  const {\r\n    isDrawerVisible,\r\n    onClose,\r\n    dataDetailCustomerTenant,\r\n    dataDetailReferences,\r\n    changeRolesCustomers,\r\n    onSendRatingUser,\r\n    onRedirectTo,\r\n    dataMessages,\r\n    onDownloadDocumentById,\r\n  } = props;\r\n\r\n  const [valueCalification, setValueCalification] = useState({});\r\n  const [dataIsMainTenant, setDataIsMainTenant] = useState({});\r\n  const [openPopover, setOpenPopover] = useState({});\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div className=\"site-description-item-profile-wrapper\">\r\n      <strong className=\"site-description-item-profile-p-label\">\r\n        {title}:\r\n      </strong>\r\n      <br />\r\n      {isNil(content) === false ? content : \"-\"}\r\n    </div>\r\n  );\r\n\r\n  const replaceUrl = (address) => {\r\n    let domainPath = \"https://www.google.com/maps/search/\";\r\n\r\n    if (isNil(address) === false) {\r\n      const replaceString = address.replaceAll(\" \", \"+\");\r\n      domainPath = domainPath + replaceString;\r\n    }\r\n    return (\r\n      <a href={domainPath} target=\"_blank\">\r\n        {address}\r\n      </a>\r\n    );\r\n  };\r\n\r\n  const menu = (row) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item key=\"0\">\r\n          <a\r\n            href={\r\n              isNil(row.phoneNumber) === false\r\n                ? `https://api.whatsapp.com/send?phone=52${row.phoneNumber}`\r\n                : \"#\"\r\n            }\r\n            target=\"_blank\"\r\n          >\r\n            Whatsapp\r\n          </a>\r\n        </Menu.Item>\r\n        {/* <Menu.Item key=\"1\">\r\n          <a>Notificación</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <a>Mensaje app</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\">\r\n          <a>Correo</a>\r\n        </Menu.Item> */}\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataDetailCustomerTenant) === false) {\r\n      const dataFilter = dataDetailCustomerTenant.find((row) => {\r\n        return row.isMain === true;\r\n      });\r\n      setDataIsMainTenant(dataFilter);\r\n    }\r\n  }, [dataDetailCustomerTenant]);\r\n\r\n  return (\r\n    <Drawer\r\n      width={500}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={isDrawerVisible}\r\n    >\r\n      <div className=\"content-infomation-drawer\">\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Detalle de Inquilino</h1>\r\n          </div>\r\n        </div>\r\n        <Collapse defaultActiveKey={[\"1\"]} ghost>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Información general</h3>}\r\n            key=\"1\"\r\n          >\r\n            {dataDetailCustomerTenant.length === 2 && (\r\n              <Row>\r\n                <Col span={20} xs={{ span: 24 }} md={{ span: 20 }}>\r\n                  <strong>Cambiar Roles Inquilino-Obligado Solidario</strong>\r\n                </Col>\r\n                <Col span={4} xs={{ span: 24 }} md={{ span: 4 }}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={<SyncOutlined />}\r\n                    onClick={() => {\r\n                      changeRolesCustomers(\r\n                        dataDetailCustomerTenant[0].idContract\r\n                      );\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <div\r\n              className=\"ant-divider ant-divider-horizontal\"\r\n              role=\"separator\"\r\n            />\r\n\r\n            {isEmpty(dataDetailCustomerTenant) === false &&\r\n              dataDetailCustomerTenant.map((row) => {\r\n                const catalogProperties =\r\n                  isNil(row.typeFormProperties) === false\r\n                    ? JSON.parse(row.typeFormProperties)\r\n                    : [];\r\n                return (\r\n                  <>\r\n                    <h3>\r\n                      {row.isMain === true ? \"Inquilino\" : \"Obligado Solidario\"}\r\n                    </h3>\r\n                    <Row>\r\n                      <Col span={13} xs={{ span: 24 }} md={{ span: 13 }}>\r\n                        <strong>Resultado de investigación</strong>\r\n                        <Popover\r\n                          content={\r\n                            <>\r\n                              <Row>\r\n                                <Col span={24}>\r\n                                  <NumberFormat\r\n                                    id={null}\r\n                                    customInput={Input}\r\n                                    thousandSeparator=\",\"\r\n                                    decimalSeparator=\".\"\r\n                                    decimalPrecision={2}\r\n                                    allowNegative={false}\r\n                                    prefix=\"\"\r\n                                    suffix=\"\"\r\n                                    value={\r\n                                      isNil(\r\n                                        valueCalification[row.idCustomerTenant]\r\n                                      ) === false\r\n                                        ? valueCalification[\r\n                                            row.idCustomerTenant\r\n                                          ]\r\n                                        : row.rating\r\n                                    }\r\n                                    className=\"inputLogin\"\r\n                                    floatingLabelText=\"\"\r\n                                    isVisible\r\n                                    toBlock={false}\r\n                                    disable={false}\r\n                                    placeholder=\"Calificación\"\r\n                                    onValueChange={(values) => {\r\n                                      const {\r\n                                        formattedValue,\r\n                                        value,\r\n                                        floatValue,\r\n                                      } = values;\r\n                                      setValueCalification({\r\n                                        ...valueCalification,\r\n                                        [row.idCustomerTenant]: floatValue,\r\n                                      });\r\n                                    }}\r\n                                    onClick={(event) => {}}\r\n                                    onFocus={(event) => {}}\r\n                                    onBlur={(event) => {}}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                              <div\r\n                                className=\"ant-divider ant-divider-horizontal\"\r\n                                role=\"separator\"\r\n                              />\r\n                              <Row>\r\n                                <Col span={11}>\r\n                                  <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    icon={<CloseOutlined />}\r\n                                    size=\"small\"\r\n                                    danger\r\n                                    onClick={() => {\r\n                                      onSendRatingUser({\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: null,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        idPolicyStatus: null,\r\n                                        rating:\r\n                                          isNil(\r\n                                            valueCalification[\r\n                                              row.idCustomerTenant\r\n                                            ]\r\n                                          ) === false\r\n                                            ? valueCalification[\r\n                                                row.idCustomerTenant\r\n                                              ]\r\n                                            : row.rating,\r\n                                        isApproved: false,\r\n                                      });\r\n                                      setOpenPopover({\r\n                                        [row.idCustomerTenant]:\r\n                                          isNil(\r\n                                            openPopover[row.idCustomerTenant]\r\n                                          ) === false\r\n                                            ? !openPopover[row.idCustomerTenant]\r\n                                            : false,\r\n                                      });\r\n                                    }}\r\n                                  >\r\n                                    Rechazada\r\n                                  </Button>\r\n                                </Col>\r\n                                <Col span={2} />\r\n                                <Col span={11}>\r\n                                  <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    icon={<CheckOutlined />}\r\n                                    size=\"small\"\r\n                                    className=\"color-green\"\r\n                                    onClick={() => {\r\n                                      onSendRatingUser({\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: null,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        idPolicyStatus: null,\r\n                                        rating:\r\n                                          isNil(\r\n                                            valueCalification[\r\n                                              row.idCustomerTenant\r\n                                            ]\r\n                                          ) === false\r\n                                            ? valueCalification[\r\n                                                row.idCustomerTenant\r\n                                              ]\r\n                                            : row.rating,\r\n                                        isApproved: true,\r\n                                      });\r\n                                      setOpenPopover({\r\n                                        [row.idCustomerTenant]:\r\n                                          isNil(\r\n                                            openPopover[row.idCustomerTenant]\r\n                                          ) === false\r\n                                            ? !openPopover[row.idCustomerTenant]\r\n                                            : false,\r\n                                      });\r\n                                    }}\r\n                                  >\r\n                                    Aprobada\r\n                                  </Button>\r\n                                </Col>\r\n                              </Row>\r\n                            </>\r\n                          }\r\n                          title={\r\n                            <div>\r\n                              <span>Resultado definitivo</span>\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                  setOpenPopover({\r\n                                    [row.idCustomerTenant]:\r\n                                      isNil(\r\n                                        openPopover[row.idCustomerTenant]\r\n                                      ) === false\r\n                                        ? !openPopover[row.idCustomerTenant]\r\n                                        : false,\r\n                                  });\r\n                                }}\r\n                                style={{\r\n                                  marginLeft: 5,\r\n                                  background: \"transparent\",\r\n                                  border: \"none\",\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\" />\r\n                              </button>\r\n                            </div>\r\n                          }\r\n                          trigger=\"click\"\r\n                          visible={\r\n                            isNil(openPopover[row.idCustomerTenant]) === false\r\n                              ? openPopover[row.idCustomerTenant]\r\n                              : false\r\n                          }\r\n                        >\r\n                          <Button\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            icon={<EditOutlined />}\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                              setOpenPopover({\r\n                                [row.idCustomerTenant]:\r\n                                  isNil(openPopover[row.idCustomerTenant]) ===\r\n                                  false\r\n                                    ? !openPopover[row.idCustomerTenant]\r\n                                    : true,\r\n                              });\r\n                            }}\r\n                          >\r\n                            Asignar\r\n                          </Button>\r\n                        </Popover>\r\n                      </Col>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <DescriptionItem\r\n                          title=\"Calificación 0-5\"\r\n                          content={\r\n                            isNil(row.rating) === false ? row.rating : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Nombre completo\"\r\n                          content={\r\n                            isNil(row.fullName) === false ? row.fullName : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={24}>\r\n                        <DescriptionItem\r\n                          title=\"Correo\"\r\n                          content={\r\n                            isNil(row.emailAddress) === false\r\n                              ? row.emailAddress\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Teléfono\"\r\n                          content={\r\n                            isNil(row.phoneNumber) === false\r\n                              ? row.phoneNumber\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Tipo de cliente\"\r\n                          content={\r\n                            isNil(row.customerType) === false\r\n                              ? row.customerType\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Ocupación\"\r\n                          content={\r\n                            isNil(row.occupationActivity) === false\r\n                              ? row.occupationActivity\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Salario mensual\"\r\n                          content={\r\n                            isNil(row.currentSalary) === false\r\n                              ? row.currentSalary\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"RFC\"\r\n                          content={isNil(row.taxId) === false ? row.taxId : \"-\"}\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"CURP\"\r\n                          content={\r\n                            isNil(row.citizenId) === false ? row.citizenId : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={24}>\r\n                        <DescriptionItem\r\n                          title=\"Dirección\"\r\n                          content={\r\n                            isNil(row.fullAddress) === false\r\n                              ? replaceUrl(row.fullAddress)\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Enviar mensaje\"\r\n                          content={\r\n                            <Dropdown overlay={menu(row)} trigger={[\"click\"]}>\r\n                              <a>Enviar</a>\r\n                            </Dropdown>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"TypeForm\"\r\n                          content={\r\n                            <Dropdown\r\n                              overlay={\r\n                                <Menu\r\n                                  onClick={(value) => {\r\n                                    onRedirectTo(\r\n                                      value.key,\r\n                                      row.idCustomer,\r\n                                      row.idContract,\r\n                                      row.idCustomerTenant\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  {isEmpty(catalogProperties) === false &&\r\n                                    catalogProperties.map((rowMap) => {\r\n                                      return (\r\n                                        <Menu.Item\r\n                                          key={`${rowMap.idStepIn}`}\r\n                                          style={{\r\n                                            display: \"flex\",\r\n                                            alignItems: \"center\",\r\n                                            justifyContent: \"space-between\",\r\n                                          }}\r\n                                        >\r\n                                          <a style={{ marginRight: 2 }}>\r\n                                            {rowMap.stepIn}\r\n                                          </a>\r\n                                          {rowMap.isCompleted === true ? (\r\n                                            <CheckCircleFilled\r\n                                              style={{ color: \"green\" }}\r\n                                            />\r\n                                          ) : (\r\n                                            <CloseCircleFilled\r\n                                              style={{ color: \"red\" }}\r\n                                            />\r\n                                          )}\r\n                                        </Menu.Item>\r\n                                      );\r\n                                    })}\r\n                                </Menu>\r\n                              }\r\n                              trigger={[\"click\"]}\r\n                            >\r\n                              <a>Ver</a>\r\n                            </Dropdown>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                    {isNil(row.hasEndorsement) === false &&\r\n                      row.hasEndorsement === true &&\r\n                      row.isMain === true && (\r\n                        <>\r\n                          <h3>Fiador</h3>\r\n                          <Row>\r\n                            <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                              <DescriptionItem\r\n                                title=\"Nombre completo\"\r\n                                content={row.endorsementFullName}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                              <DescriptionItem\r\n                                title=\"Correo\"\r\n                                content={row.endorsementEmailAddress}\r\n                              />\r\n                            </Col>\r\n                            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                              <DescriptionItem\r\n                                title=\"Teléfono\"\r\n                                content={\r\n                                  <a\r\n                                    href={\r\n                                      isNil(row.endorsementPhoneNumber) ===\r\n                                      false\r\n                                        ? `https://api.whatsapp.com/send?phone=52${row.endorsementPhoneNumber}`\r\n                                        : \"#\"\r\n                                    }\r\n                                    target=\"_blank\"\r\n                                  >\r\n                                    {row.endorsementPhoneNumber}\r\n                                  </a>\r\n                                }\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                        </>\r\n                      )}\r\n                  </>\r\n                );\r\n              })}\r\n          </Panel>\r\n          <Panel header={<h3 role=\"title-section\">Referencias</h3>} key=\"2\">\r\n            {isEmpty(dataDetailReferences) === false &&\r\n              dataDetailReferences.map((row) => {\r\n                return (\r\n                  <>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Nombre\"\r\n                          content={`${row.fullName} ${row.detailTenant}`}\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Tipo de referencia\"\r\n                          content={row.referenceType}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Correo\"\r\n                          content={row.emailAddress}\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Teléfono\"\r\n                          content={\r\n                            <a\r\n                              href={\r\n                                isNil(row.phoneNumber) === false\r\n                                  ? `https://api.whatsapp.com/send?phone=52${row.phoneNumber}`\r\n                                  : \"#\"\r\n                              }\r\n                              target=\"_blank\"\r\n                            >\r\n                              {row.phoneNumber}\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n          </Panel>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Documentos Legales</h3>}\r\n            key=\"3\"\r\n          >\r\n            <p>\r\n              <h3>Contrato</h3>\r\n            </p>\r\n            <Row>\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"Tipo de persona fiscal\"\r\n                  content={dataIsMainTenant.personType}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"Estatus\"\r\n                  content={dataIsMainTenant.contractStatus}\r\n                />\r\n              </Col>\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"Folio\"\r\n                  content={dataIsMainTenant.hfInvoice}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"Vencimiento\"\r\n                  content={dataIsMainTenant.expireAt}\r\n                />\r\n              </Col>\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <a\r\n                  onClick={() => {\r\n                    if (isEmpty(dataIsMainTenant) === false) {\r\n                      onDownloadDocumentById(\r\n                        {\r\n                          idContract: dataIsMainTenant.idContract,\r\n                          idCustomer: dataIsMainTenant.idCustomer,\r\n                          idCustomerTenant: dataIsMainTenant.idCustomerTenant,\r\n                          type: 1,\r\n                        },\r\n                        `Contrato_${dataIsMainTenant.idContract}`\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Descargar Contrato\r\n                </a>\r\n              </Col>\r\n            </Row>\r\n            <div\r\n              className=\"ant-divider ant-divider-horizontal\"\r\n              role=\"separator\"\r\n            />\r\n            <p>\r\n              <h3>Póliza</h3>\r\n            </p>\r\n            <Row>\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"Póliza\"\r\n                  content={dataIsMainTenant.policy}\r\n                />\r\n              </Col>\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <a\r\n                  onClick={() => {\r\n                    if (isEmpty(dataIsMainTenant) === false) {\r\n                      onDownloadDocumentById(\r\n                        {\r\n                          idContract: dataIsMainTenant.idContract,\r\n                          idCustomer: dataIsMainTenant.idCustomer,\r\n                          idCustomerTenant: dataIsMainTenant.idCustomerTenant,\r\n                          type: 3,\r\n                        },\r\n                        `Poliza_${dataIsMainTenant.idContract}`\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Descargar Póliza\r\n                </a>\r\n              </Col>\r\n            </Row>\r\n            <div\r\n              className=\"ant-divider ant-divider-horizontal\"\r\n              role=\"separator\"\r\n            />\r\n            <p>\r\n              <h3>Pagares</h3>\r\n            </p>\r\n            <Row>\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <a\r\n                  onClick={() => {\r\n                    if (isEmpty(dataIsMainTenant) === false) {\r\n                      onDownloadDocumentById(\r\n                        {\r\n                          idContract: dataIsMainTenant.idContract,\r\n                          idCustomer: dataIsMainTenant.idCustomer,\r\n                          idCustomerTenant: dataIsMainTenant.idCustomerTenant,\r\n                          type: 2,\r\n                        },\r\n                        `Pagares_${dataIsMainTenant.idContract}`\r\n                      );\r\n                    }\r\n                  }}\r\n                >\r\n                  Descargar Pagares\r\n                </a>\r\n              </Col>\r\n            </Row>\r\n          </Panel>\r\n\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Documentos personales</h3>}\r\n            key=\"4\"\r\n          >\r\n            {isEmpty(dataDetailCustomerTenant) === false &&\r\n              dataDetailCustomerTenant.map((row) => {\r\n                return (\r\n                  <>\r\n                    <h3>\r\n                      {row.isMain === true ? \"Inquilino\" : \"Obligado Solidario\"}\r\n                    </h3>\r\n                    <Row>\r\n                      <Col span={8}>\r\n                        <DescriptionItem\r\n                          title=\"Selfie\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 5,\r\n                                  },\r\n                                  `Selfie_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      {row.hasINECustomerTenant === 1 ||\r\n                      row.hasINECustomerTenant === true ? (\r\n                        <>\r\n                          <Col span={8}>\r\n                            <DescriptionItem\r\n                              title=\"Ine frontal\"\r\n                              content={\r\n                                <a\r\n                                  onClick={() => {\r\n                                    onDownloadDocumentById(\r\n                                      {\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: row.idCustomer,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        type: 6,\r\n                                      },\r\n                                      `Identificacion1_${row.idContract}`\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  Descargar\r\n                                </a>\r\n                              }\r\n                            />\r\n                          </Col>\r\n                          <Col span={8}>\r\n                            <DescriptionItem\r\n                              title=\"Ine vuelta\"\r\n                              content={\r\n                                <a\r\n                                  onClick={() => {\r\n                                    onDownloadDocumentById(\r\n                                      {\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: row.idCustomer,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        type: 7,\r\n                                      },\r\n                                      `Identificacion2_${row.idContract}`\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  Descargar\r\n                                </a>\r\n                              }\r\n                            />\r\n                          </Col>\r\n                        </>\r\n                      ) : (\r\n                        <Col span={16}>\r\n                          <DescriptionItem\r\n                            title=\"Identificación oficial\"\r\n                            content={\r\n                              <a\r\n                                onClick={() => {\r\n                                  onDownloadDocumentById(\r\n                                    {\r\n                                      idContract: row.idContract,\r\n                                      idCustomer: row.idCustomer,\r\n                                      idCustomerTenant: row.idCustomerTenant,\r\n                                      type: 6,\r\n                                    },\r\n                                    `Identificacion1_${row.idContract}`\r\n                                  );\r\n                                }}\r\n                              >\r\n                                Descargar\r\n                              </a>\r\n                            }\r\n                          />\r\n                        </Col>\r\n                      )}\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={8}>\r\n                        <DescriptionItem\r\n                          title=\"Carta laboral\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 8,\r\n                                  },\r\n                                  `Carta_Laboral_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12}>\r\n                        <DescriptionItem\r\n                          title=\"Comprobante de ingreso 1\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 9,\r\n                                  },\r\n                                  `Comprobante_1_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12}>\r\n                        <DescriptionItem\r\n                          title=\"Comprobante de ingreso 2\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 10,\r\n                                  },\r\n                                  `Comprobante_2_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12}>\r\n                        <DescriptionItem\r\n                          title=\"Comprobante de ingreso 3\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 11,\r\n                                  },\r\n                                  `Comprobante_3_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {isNil(row.hasEndorsement) === false &&\r\n                      row.hasEndorsement === true &&\r\n                      row.isMain === true && (\r\n                        <>\r\n                          <div\r\n                            className=\"ant-divider ant-divider-horizontal\"\r\n                            role=\"separator\"\r\n                          />\r\n                          <h3>Fiador</h3>\r\n                          <Row>\r\n                            <Col span={8}>\r\n                              <DescriptionItem\r\n                                title=\"Escrituras\"\r\n                                content={\r\n                                  <a\r\n                                    onClick={() => {\r\n                                      onDownloadDocumentById(\r\n                                        {\r\n                                          idContract: row.idContract,\r\n                                          idCustomer: row.idCustomer,\r\n                                          idCustomerTenant:\r\n                                            row.idCustomerTenant,\r\n                                          type: 12,\r\n                                        },\r\n                                        `Escrituras_${row.idContract}`\r\n                                      );\r\n                                    }}\r\n                                  >\r\n                                    Descargar\r\n                                  </a>\r\n                                }\r\n                              />\r\n                            </Col>\r\n                            {row.hasINEEndorsement === 1 ||\r\n                            row.hasINEEndorsement === true ? (\r\n                              <>\r\n                                <Col span={8}>\r\n                                  <DescriptionItem\r\n                                    title=\"Ine frontal\"\r\n                                    content={\r\n                                      <a\r\n                                        onClick={() => {\r\n                                          onDownloadDocumentById(\r\n                                            {\r\n                                              idContract: row.idContract,\r\n                                              idCustomer: row.idCustomer,\r\n                                              idCustomerTenant:\r\n                                                row.idCustomerTenant,\r\n                                              type: 13,\r\n                                            },\r\n                                            `Identificacion1_${row.idContract}`\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        Descargar\r\n                                      </a>\r\n                                    }\r\n                                  />\r\n                                </Col>\r\n                                <Col span={8}>\r\n                                  <DescriptionItem\r\n                                    title=\"Ine vuelta\"\r\n                                    content={\r\n                                      <a\r\n                                        onClick={() => {\r\n                                          onDownloadDocumentById(\r\n                                            {\r\n                                              idContract: row.idContract,\r\n                                              idCustomer: row.idCustomer,\r\n                                              idCustomerTenant:\r\n                                                row.idCustomerTenant,\r\n                                              type: 14,\r\n                                            },\r\n                                            `Identificacion1_${row.idContract}`\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        Descargar\r\n                                      </a>\r\n                                    }\r\n                                  />\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <Col span={16}>\r\n                                <DescriptionItem\r\n                                  title=\"Identificación oficial\"\r\n                                  content={\r\n                                    <a\r\n                                      onClick={() => {\r\n                                        onDownloadDocumentById(\r\n                                          {\r\n                                            idContract: row.idContract,\r\n                                            idCustomer: row.idCustomer,\r\n                                            idCustomerTenant:\r\n                                              row.idCustomerTenant,\r\n                                            type: 13,\r\n                                          },\r\n                                          `Identificacion1_${row.idContract}`\r\n                                        );\r\n                                      }}\r\n                                    >\r\n                                      Descargar\r\n                                    </a>\r\n                                  }\r\n                                />\r\n                              </Col>\r\n                            )}\r\n                          </Row>\r\n                        </>\r\n                      )}\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n          </Panel>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Comentarios Contrato</h3>}\r\n            key=\"5\"\r\n          >\r\n            <div className=\"panel-comment-user\">\r\n              {isEmpty(dataMessages) === false ? (\r\n                <Timeline>\r\n                  {dataMessages.map((row) => {\r\n                    return (\r\n                      <Timeline.Item>\r\n                        <div>\r\n                          <p>\r\n                            <strong>\r\n                              {row.createdByUser} | {row.createdAt}\r\n                            </strong>\r\n                          </p>\r\n                          {row.comment}\r\n                        </div>\r\n                      </Timeline.Item>\r\n                    );\r\n                  })}\r\n                </Timeline>\r\n              ) : (\r\n                <strong>No existen comentarios por parte del Inquilino</strong>\r\n              )}\r\n            </div>\r\n          </Panel>\r\n        </Collapse>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SectionDetailUserTenant;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUser.jsx",["467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483"],"import React, { useState, useEffect } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { Row, Col, Drawer, Collapse, Menu, Dropdown, Timeline } from \"antd\";\r\nimport { CloseCircleFilled, CheckCircleFilled } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Panel } = Collapse;\r\n\r\nconst SectionDetailUser = (props) => {\r\n  const {\r\n    isDrawerVisible,\r\n    onClose,\r\n    dataDetailCustomer,\r\n    onRedirectTo,\r\n    dataMessages,\r\n    onDownloadDocumentById,\r\n  } = props;\r\n  const [catalogProperties, setCatalogProperties] = useState([]);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div className=\"site-description-item-profile-wrapper\">\r\n      <strong className=\"site-description-item-profile-p-label\">\r\n        {title}:\r\n      </strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  const replaceUrl = (address) => {\r\n    let domainPath = \"https://www.google.com/maps/search/\";\r\n\r\n    if (isNil(address) === false) {\r\n      const replaceString = address.replaceAll(\" \", \"+\");\r\n      domainPath = domainPath + replaceString;\r\n    }\r\n    return (\r\n      <a href={domainPath} target=\"_blank\">\r\n        {address}\r\n      </a>\r\n    );\r\n  };\r\n\r\n  const menu = (row) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item key=\"0\">\r\n          <a\r\n            href={\r\n              isNil(row.phoneNumber) === false\r\n                ? `https://api.whatsapp.com/send?phone=52${row.phoneNumber}`\r\n                : \"#\"\r\n            }\r\n            target=\"_blank\"\r\n          >\r\n            Whatsapp\r\n          </a>\r\n        </Menu.Item>\r\n        {/* <Menu.Item key=\"1\">\r\n          <a>Notificación</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <a>Mensaje app</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\">\r\n          <a>Correo</a>\r\n        </Menu.Item> */}\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isNil(dataDetailCustomer.typeFormProperties) === false) {\r\n      const catalogProps = JSON.parse(dataDetailCustomer.typeFormProperties);\r\n      setCatalogProperties(catalogProps);\r\n    }\r\n  }, [dataDetailCustomer]);\r\n\r\n  return (\r\n    <Drawer\r\n      width={500}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={isDrawerVisible}\r\n    >\r\n      <div className=\"content-infomation-drawer\">\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Detalle de Propietario</h1>\r\n          </div>\r\n        </div>\r\n        <Collapse defaultActiveKey={[\"1\"]} ghost>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Información general</h3>}\r\n            key=\"1\"\r\n          >\r\n            <Row>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Nombre completo\"\r\n                  content={dataDetailCustomer.fullName}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <DescriptionItem\r\n                  title=\"Correo\"\r\n                  content={dataDetailCustomer.emailAddress}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Teléfono\"\r\n                  content={dataDetailCustomer.phoneNumber}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Tipo de cliente\"\r\n                  content={dataDetailCustomer.customerType}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"RFC\"\r\n                  content={dataDetailCustomer.taxId}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"CURP\"\r\n                  content={dataDetailCustomer.citizenId}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <DescriptionItem\r\n                  title=\"Dirección\"\r\n                  content={replaceUrl(dataDetailCustomer.fullAddress)}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Enviar mensaje\"\r\n                  content={\r\n                    <Dropdown\r\n                      overlay={menu(dataDetailCustomer)}\r\n                      trigger={[\"click\"]}\r\n                    >\r\n                      <a>Enviar</a>\r\n                    </Dropdown>\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"TypeForm\"\r\n                  content={\r\n                    <Dropdown\r\n                      overlay={\r\n                        <Menu\r\n                          onClick={(value) => {\r\n                            onRedirectTo(\r\n                              value.key,\r\n                              dataDetailCustomer.idCustomer,\r\n                              dataDetailCustomer.idContract\r\n                            );\r\n                          }}\r\n                        >\r\n                          {isEmpty(catalogProperties) === false &&\r\n                            catalogProperties.map((rowMap) => {\r\n                              return (\r\n                                <Menu.Item\r\n                                  key={`${rowMap.idStepIn}`}\r\n                                  style={{\r\n                                    display: \"flex\",\r\n                                    alignItems: \"center\",\r\n                                    justifyContent: \"space-between\",\r\n                                  }}\r\n                                >\r\n                                  <a style={{ marginRight: 2 }}>\r\n                                    {rowMap.stepIn}\r\n                                  </a>\r\n                                  {rowMap.isCompleted === true ? (\r\n                                    <CheckCircleFilled\r\n                                      style={{ color: \"green\" }}\r\n                                    />\r\n                                  ) : (\r\n                                    <CloseCircleFilled\r\n                                      style={{ color: \"red\" }}\r\n                                    />\r\n                                  )}\r\n                                </Menu.Item>\r\n                              );\r\n                            })}\r\n                        </Menu>\r\n                      }\r\n                      trigger={[\"click\"]}\r\n                    >\r\n                      <a>Ver</a>\r\n                    </Dropdown>\r\n                  }\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Panel>\r\n          <Panel header={<h3 role=\"title-section\">Propiedad</h3>} key=\"2\">\r\n            <Row>\r\n              <Col span={24}>\r\n                <DescriptionItem\r\n                  title=\"Dirección\"\r\n                  content={replaceUrl(dataDetailCustomer.fullAddressProperty)}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Monto de renta\"\r\n                  content={dataDetailCustomer.currentRent}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Subir inventario\"\r\n                  content={<a>seleccionar</a>}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Panel>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Documentos Legales</h3>}\r\n            key=\"3\"\r\n          >\r\n            <p>\r\n              <h3>Contrato</h3>\r\n            </p>\r\n            <Row>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Tipo de persona fiscal\"\r\n                  content={dataDetailCustomer.personType}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Estatus\"\r\n                  content={dataDetailCustomer.contractStatus}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Folio\"\r\n                  content={dataDetailCustomer.hfInvoice}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Vencimiento\"\r\n                  content={dataDetailCustomer.expireAt}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <a\r\n                  onClick={() => {\r\n                    onDownloadDocumentById(\r\n                      {\r\n                        idContract: dataDetailCustomer.idContract,\r\n                        idCustomer: dataDetailCustomer.idCustomer,\r\n                        idCustomerTenant: null,\r\n                        type: 1,\r\n                      },\r\n                      `Contrato_${dataDetailCustomer.idContract}`\r\n                    );\r\n                  }}\r\n                >\r\n                  Descargar Contrato\r\n                </a>\r\n              </Col>\r\n            </Row>\r\n            <div\r\n              className=\"ant-divider ant-divider-horizontal\"\r\n              role=\"separator\"\r\n            />\r\n            <p>\r\n              <h3>Póliza</h3>\r\n            </p>\r\n            <Row>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Póliza\"\r\n                  content={dataDetailCustomer.policy}\r\n                />\r\n              </Col>\r\n              <Col span={12}>\r\n                <DescriptionItem\r\n                  title=\"Vencimiento\"\r\n                  content={dataDetailCustomer.expireAtPolicy}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={12}>\r\n                <a\r\n                  onClick={() => {\r\n                    onDownloadDocumentById(\r\n                      {\r\n                        idContract: dataDetailCustomer.idContract,\r\n                        idCustomer: dataDetailCustomer.idCustomer,\r\n                        idCustomerTenant: null,\r\n                        type: 3,\r\n                      },\r\n                      `Poliza_${dataDetailCustomer.idContract}`\r\n                    );\r\n                  }}\r\n                >\r\n                  Descargar Póliza\r\n                </a>\r\n              </Col>\r\n            </Row>\r\n          </Panel>\r\n\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Documentación personal</h3>}\r\n            key=\"4\"\r\n          >\r\n            <Row>\r\n              {dataDetailCustomer.hasINECustomer === 1 ||\r\n              dataDetailCustomer.hasINECustomer === true ? (\r\n                <>\r\n                  <Col span={8}>\r\n                    <DescriptionItem\r\n                      title=\"Ine frontal\"\r\n                      content={\r\n                        <a\r\n                          onClick={() => {\r\n                            onDownloadDocumentById(\r\n                              {\r\n                                idContract: dataDetailCustomer.idContract,\r\n                                idCustomer: dataDetailCustomer.idCustomer,\r\n                                idCustomerTenant: null,\r\n                                type: 6,\r\n                              },\r\n                              \"Identificacion_1\"\r\n                            );\r\n                          }}\r\n                        >\r\n                          Descargar\r\n                        </a>\r\n                      }\r\n                    />\r\n                  </Col>\r\n                  <Col span={8}>\r\n                    <DescriptionItem\r\n                      title=\"Ine vuelta\"\r\n                      content={\r\n                        <a\r\n                          onClick={() => {\r\n                            onDownloadDocumentById(\r\n                              {\r\n                                idContract: dataDetailCustomer.idContract,\r\n                                idCustomer: dataDetailCustomer.idCustomer,\r\n                                idCustomerTenant: null,\r\n                                type: 7,\r\n                              },\r\n                              \"Identificacion_2\"\r\n                            );\r\n                          }}\r\n                        >\r\n                          Descargar\r\n                        </a>\r\n                      }\r\n                    />\r\n                  </Col>{\" \"}\r\n                </>\r\n              ) : (\r\n                <Col span={16}>\r\n                  <DescriptionItem\r\n                    title=\"Identificación oficial\"\r\n                    content={\r\n                      <a\r\n                        onClick={() => {\r\n                          onDownloadDocumentById(\r\n                            {\r\n                              idContract: dataDetailCustomer.idContract,\r\n                              idCustomer: dataDetailCustomer.idCustomer,\r\n                              idCustomerTenant: null,\r\n                              type: 6,\r\n                            },\r\n                            \"Identificacion_1\"\r\n                          );\r\n                        }}\r\n                      >\r\n                        Descargar\r\n                      </a>\r\n                    }\r\n                  />\r\n                </Col>\r\n              )}\r\n            </Row>\r\n          </Panel>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Comentarios Contrato</h3>}\r\n            key=\"5\"\r\n          >\r\n            <div className=\"panel-comment-user\">\r\n              {isEmpty(dataMessages) === false ? (\r\n                <Timeline>\r\n                  {dataMessages.map((row) => {\r\n                    return (\r\n                      <Timeline.Item>\r\n                        <div>\r\n                          <p>\r\n                            <strong>\r\n                              {row.createdByUser} | {row.createdAt}\r\n                            </strong>\r\n                          </p>\r\n                          {row.comment}\r\n                        </div>\r\n                      </Timeline.Item>\r\n                    );\r\n                  })}\r\n                </Timeline>\r\n              ) : (\r\n                <strong>\r\n                  No existen comentarios por parte del Propietario\r\n                </strong>\r\n              )}\r\n            </div>\r\n          </Panel>\r\n        </Collapse>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SectionDetailUser;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionAddUsers.jsx",["484","485","486","487","488","489","490","491"],"import React, { useEffect, useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n} from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAddUsers = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    spinVisible,\r\n    dataTenantSearch,\r\n    dataSecondTenant,\r\n    dataAdviserSearch,\r\n    dataOwnerSearch,\r\n    onSearchTenant,\r\n    onSearchSecondTenant,\r\n    onSearchAdviser,\r\n    onSearchOwner,\r\n    onSendInformation,\r\n  } = props;\r\n  const initialDataForm = {\r\n    emailOwner: null,\r\n    emailAdviser: null,\r\n    emailTenant: null,\r\n    emailTenant2: null,\r\n    nameOwner: null,\r\n    lastNameOwner: null,\r\n    mothersLastNameOwner: null,\r\n    nameTenant: null,\r\n    lastNameTenant: null,\r\n    mothersLastNameTenant: null,\r\n    personType: null,\r\n    nameTenant2: null,\r\n    lastNameTenant2: null,\r\n    mothersLastNameTenant2: null,\r\n    personType2: null,\r\n    nameAdviser: null,\r\n    lastNameAdviser: null,\r\n    mothersLastNameAdviser: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataOwnerSearch) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameOwner: dataOwnerSearch.givenName,\r\n        lastNameOwner: dataOwnerSearch.lastName,\r\n        mothersLastNameOwner: dataOwnerSearch.mothersMaidenName,\r\n      });\r\n    } else {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameOwner: null,\r\n        lastNameOwner: null,\r\n        mothersLastNameOwner: null,\r\n      });\r\n    }\r\n  }, [dataOwnerSearch]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataTenantSearch) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameTenant: dataTenantSearch.givenName,\r\n        lastNameTenant: dataTenantSearch.lastName,\r\n        mothersLastNameTenant: dataTenantSearch.mothersMaidenName,\r\n        personType: dataTenantSearch.idPersonType,\r\n      });\r\n    } else {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameTenant: null,\r\n        lastNameTenant: null,\r\n        mothersLastNameTenant: null,\r\n        personType: null,\r\n      });\r\n    }\r\n  }, [dataTenantSearch]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataSecondTenant) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameTenant2: dataSecondTenant.givenName,\r\n        lastNameTenant2: dataSecondTenant.lastName,\r\n        mothersLastNameTenant2: dataSecondTenant.mothersMaidenName,\r\n        personType2: dataSecondTenant.idPersonType,\r\n      });\r\n    } else {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameTenant2: null,\r\n        lastNameTenant2: null,\r\n        mothersLastNameTenant2: null,\r\n        personType2: null,\r\n      });\r\n    }\r\n  }, [dataSecondTenant]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataAdviserSearch) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameAdviser: dataAdviserSearch.givenName,\r\n        lastNameAdviser: dataAdviserSearch.lastName,\r\n        mothersLastNameAdviser: dataAdviserSearch.mothersMaidenName,\r\n      });\r\n    } else {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameAdviser: null,\r\n        lastNameAdviser: null,\r\n        mothersLastNameAdviser: null,\r\n      });\r\n    }\r\n  }, [dataAdviserSearch]);\r\n\r\n  return (\r\n    <Modal\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      style={{ top: 20 }}\r\n      width={600}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Agregar Prospectos</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>Ingresa la información del Propietario</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailOwner}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                  onBlur={() => {\r\n                    onSearchOwner(dataForm.emailOwner);\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.nameOwner}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.lastNameOwner}\r\n                  placeholder={\"Apellido paterno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      lastNameOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.mothersLastNameOwner}\r\n                  placeholder={\"Apellido materno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      mothersLastNameOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Ingresa la información del Inquilino</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailTenant}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailTenant: e.target.value,\r\n                    });\r\n                  }}\r\n                  onBlur={() => {\r\n                    onSearchTenant(dataForm.emailTenant);\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Select\r\n                  placeholder=\"Tipo de persona\"\r\n                  value={dataForm.personType}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, personType: value });\r\n                  }}\r\n                >\r\n                  <Option value={1}>Fisica</Option>\r\n                  <Option value={2}>Moral</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.nameTenant}\r\n                  placeholder={\r\n                    dataForm.personType !== 2 ? \"Nombre\" : \"Razon social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameTenant: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {dataForm.personType !== 2 && (\r\n              <Row>\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.lastNameTenant}\r\n                    placeholder={\"Apellido paterno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        lastNameTenant: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} />\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.mothersLastNameTenant}\r\n                    placeholder={\"Apellido materno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        mothersLastNameTenant: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <p>Ingresa la información del segundo inquilino (Opcional)</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailTenant2}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailTenant2: e.target.value,\r\n                    });\r\n                  }}\r\n                  onBlur={() => {\r\n                    onSearchSecondTenant(\r\n                      dataForm.emailTenant2,\r\n                      dataTenantSearch.idCustomerTenant\r\n                    );\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Select\r\n                  placeholder=\"Tipo de persona\"\r\n                  value={dataForm.personType2}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, personType2: value });\r\n                  }}\r\n                >\r\n                  <Option value={1}>Fisica</Option>\r\n                  <Option value={2}>Moral</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.nameTenant2}\r\n                  placeholder={\r\n                    dataForm.personType !== 2 ? \"Nombre\" : \"Razon social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameTenant2: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {dataForm.personType2 !== 2 && (\r\n              <Row>\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.lastNameTenant2}\r\n                    placeholder={\"Apellido paterno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        lastNameTenant2: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} />\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.mothersLastNameTenant2}\r\n                    placeholder={\"Apellido materno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        mothersLastNameTenant2: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <p>Ingresa la información del Asesor</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailAdviser}\r\n                  placeholder={\"Correo/No Asesor\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                  onBlur={() => {\r\n                    onSearchAdviser(dataForm.emailAdviser);\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.nameAdviser}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.lastNameAdviser}\r\n                  placeholder={\"Apellido paterno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      lastNameAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.mothersLastNameAdviser}\r\n                  placeholder={\"Apellido materno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      mothersLastNameAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={async () => {\r\n                const arrayTenants = [];\r\n\r\n                if (\r\n                  isNil(dataForm.emailTenant) === false &&\r\n                  isNil(dataForm.nameTenant) === false\r\n                ) {\r\n                  const object = {\r\n                    ...dataTenantSearch,\r\n                    id: 1,\r\n                    idPersonType: dataForm.personType,\r\n                    givenName: dataForm.nameTenant,\r\n                    lastName: dataForm.lastNameTenant,\r\n                    mothersMaidenName: dataForm.mothersLastNameTenant,\r\n                    emailAddress: dataForm.emailTenant,\r\n                    phoneNumber: null,\r\n                  };\r\n\r\n                  arrayTenants.push(object);\r\n                }\r\n\r\n                if (\r\n                  isNil(dataForm.emailTenant2) === false &&\r\n                  isNil(dataForm.nameTenant2) === false\r\n                ) {\r\n                  const object1 = {\r\n                    ...dataSecondTenant,\r\n                    id: 2,\r\n                    idPersonType: dataForm.personType2,\r\n                    givenName: dataForm.nameTenant2,\r\n                    lastName: dataForm.lastNameTenant2,\r\n                    mothersMaidenName: dataForm.mothersLastNameTenant2,\r\n                    emailAddress: dataForm.emailTenant2,\r\n                    phoneNumber: null,\r\n                  };\r\n                  arrayTenants.push(object1);\r\n                }\r\n                const dataResult = {\r\n                  idCustomer: dataOwnerSearch.idCustomer,\r\n                  idPersonType: 1,\r\n                  givenName: dataForm.nameOwner,\r\n                  lastName: dataForm.lastNameOwner,\r\n                  mothersMaidenName: dataForm.mothersLastNameOwner,\r\n                  emailAddress: dataForm.emailOwner,\r\n                  customerTenant: arrayTenants,\r\n                  idCustomerAgent: dataAdviserSearch.idCustomerAgent,\r\n                  CAGivenName: dataForm.nameAdviser,\r\n                  CALastName: dataForm.lastNameAdviser,\r\n                  CAMothersMaidenName: dataForm.mothersLastNameAdviser,\r\n                  CAEmailAddress: dataForm.emailAdviser,\r\n                };\r\n                try {\r\n                  await onSendInformation(dataResult);\r\n                  onClose();\r\n                  setDataForm(initialDataForm);\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <span>Enviar Prospectos</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAddUsers;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwner.jsx",["492","493","494","495","496","497"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChartPie.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChart.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js",["498","499","500","501","502","503","504","505"],"import isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nclass FrontFunctions {\r\n  constructor() {\r\n    this.currency = {\r\n      plural: \"PESOS\",\r\n      singular: \"PESO\",\r\n      centPlural: \"CENTAVOS\",\r\n      centSingular: \"CENTAVO\",\r\n    };\r\n  }\r\n\r\n  Unidades(num) {\r\n    switch (num) {\r\n      case 1:\r\n        return \"UN\";\r\n      case 2:\r\n        return \"DOS\";\r\n      case 3:\r\n        return \"TRES\";\r\n      case 4:\r\n        return \"CUATRO\";\r\n      case 5:\r\n        return \"CINCO\";\r\n      case 6:\r\n        return \"SEIS\";\r\n      case 7:\r\n        return \"SIETE\";\r\n      case 8:\r\n        return \"OCHO\";\r\n      case 9:\r\n        return \"NUEVE\";\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  Decenas(num) {\r\n    let decena = Math.floor(num / 10);\r\n    let unidad = num - decena * 10;\r\n\r\n    switch (decena) {\r\n      case 1:\r\n        switch (unidad) {\r\n          case 0:\r\n            return \"DIEZ\";\r\n          case 1:\r\n            return \"ONCE\";\r\n          case 2:\r\n            return \"DOCE\";\r\n          case 3:\r\n            return \"TRECE\";\r\n          case 4:\r\n            return \"CATORCE\";\r\n          case 5:\r\n            return \"QUINCE\";\r\n          default:\r\n            return \"DIECI\" + this.Unidades(unidad);\r\n        }\r\n      case 2:\r\n        switch (unidad) {\r\n          case 0:\r\n            return \"VEINTE\";\r\n          default:\r\n            return \"VEINTI\" + this.Unidades(unidad);\r\n        }\r\n      case 3:\r\n        return this.DecenasY(\"TREINTA\", unidad);\r\n      case 4:\r\n        return this.DecenasY(\"CUARENTA\", unidad);\r\n      case 5:\r\n        return this.DecenasY(\"CINCUENTA\", unidad);\r\n      case 6:\r\n        return this.DecenasY(\"SESENTA\", unidad);\r\n      case 7:\r\n        return this.DecenasY(\"SETENTA\", unidad);\r\n      case 8:\r\n        return this.DecenasY(\"OCHENTA\", unidad);\r\n      case 9:\r\n        return this.DecenasY(\"NOVENTA\", unidad);\r\n      case 0:\r\n        return this.Unidades(unidad);\r\n    }\r\n  }\r\n\r\n  DecenasY(strSin, numUnidades) {\r\n    if (numUnidades > 0) return strSin + \" Y \" + this.Unidades(numUnidades);\r\n\r\n    return strSin;\r\n  }\r\n\r\n  Centenas(num) {\r\n    let centenas = Math.floor(num / 100);\r\n    let decenas = num - centenas * 100;\r\n\r\n    switch (centenas) {\r\n      case 1:\r\n        if (decenas > 0) return \"CIENTO \" + this.Decenas(decenas);\r\n        return \"CIEN\";\r\n      case 2:\r\n        return \"DOSCIENTOS \" + this.Decenas(decenas);\r\n      case 3:\r\n        return \"TRESCIENTOS \" + this.Decenas(decenas);\r\n      case 4:\r\n        return \"CUATROCIENTOS \" + this.Decenas(decenas);\r\n      case 5:\r\n        return \"QUINIENTOS \" + this.Decenas(decenas);\r\n      case 6:\r\n        return \"SEISCIENTOS \" + this.Decenas(decenas);\r\n      case 7:\r\n        return \"SETECIENTOS \" + this.Decenas(decenas);\r\n      case 8:\r\n        return \"OCHOCIENTOS \" + this.Decenas(decenas);\r\n      case 9:\r\n        return \"NOVECIENTOS \" + this.Decenas(decenas);\r\n    }\r\n\r\n    return this.Decenas(decenas);\r\n  }\r\n\r\n  Seccion(num, divisor, strSingular, strPlural) {\r\n    let cientos = Math.floor(num / divisor);\r\n    let resto = num - cientos * divisor;\r\n\r\n    let letras = \"\";\r\n\r\n    if (cientos > 0)\r\n      if (cientos > 1) letras = this.Centenas(cientos) + \" \" + strPlural;\r\n      else letras = strSingular;\r\n\r\n    if (resto > 0) letras += \"\";\r\n\r\n    return letras;\r\n  }\r\n\r\n  Miles(num) {\r\n    let divisor = 1000;\r\n    let cientos = Math.floor(num / divisor);\r\n    let resto = num - cientos * divisor;\r\n\r\n    let strMiles = this.Seccion(num, divisor, \"UN MIL\", \"MIL\");\r\n    let strCentenas = this.Centenas(resto);\r\n\r\n    if (strMiles == \"\") return strCentenas;\r\n\r\n    return strMiles + \" \" + strCentenas;\r\n  }\r\n\r\n  parseNumberToLetter(num) {\r\n    const currency = this.currency || {};\r\n    let data = {\r\n      numero: num,\r\n      enteros: Math.floor(num),\r\n      centavos: Math.round(num * 100) - Math.floor(num) * 100,\r\n      letrasCentavos: \"\",\r\n      letrasMonedaPlural: currency.plural || \"PESOS CHILENOS\", //'PESOS', 'Dólares', 'Bolívares', 'etcs'\r\n      letrasMonedaSingular: currency.singular || \"PESO CHILENO\", //'PESO', 'Dólar', 'Bolivar', 'etc'\r\n      letrasMonedaCentavoPlural: currency.centPlural || \"CHIQUI PESOS CHILENOS\",\r\n      letrasMonedaCentavoSingular:\r\n        currency.centSingular || \"CHIQUI PESO CHILENO\",\r\n    };\r\n\r\n    if (data.centavos > 0) {\r\n      data.letrasCentavos =\r\n        \"CON \" +\r\n        (function () {\r\n          if (data.centavos == 1)\r\n            return (\r\n              this.Millones(data.centavos) +\r\n              \" \" +\r\n              data.letrasMonedaCentavoSingular\r\n            );\r\n          else\r\n            return (\r\n              this.Millones(data.centavos) +\r\n              \" \" +\r\n              data.letrasMonedaCentavoPlural\r\n            );\r\n        })();\r\n    }\r\n\r\n    if (data.enteros == 0)\r\n      return \"CERO \" + data.letrasMonedaPlural + \" \" + data.letrasCentavos;\r\n    if (data.enteros == 1)\r\n      return (\r\n        this.Millones(data.enteros) +\r\n        \" \" +\r\n        data.letrasMonedaSingular +\r\n        \" \" +\r\n        data.letrasCentavos\r\n      );\r\n    else\r\n      return (\r\n        this.Millones(data.enteros) +\r\n        \" \" +\r\n        data.letrasMonedaPlural +\r\n        \" \" +\r\n        data.letrasCentavos\r\n      );\r\n  }\r\n\r\n  parseFormatCurrency = (money, fraction, maxFraction) => {\r\n    let resultNumber = \"\";\r\n    if (isNil(money) === false) {\r\n      const formatMoneyJson = {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n        minimumFractionDigits: fraction,\r\n        maximumFractionDigits: maxFraction || 20,\r\n      };\r\n      const locale = \"en-US\";\r\n      const moneyFormat = new Intl.NumberFormat(locale, formatMoneyJson);\r\n      resultNumber = moneyFormat.format(money);\r\n    }\r\n    return resultNumber;\r\n  };\r\n}\r\n\r\nexport default FrontFunctions;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\customFileUpload.jsx",["506"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx",["507","508","509","510","511","512","513","514"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Input, Row, Col, Select, Tooltip, Radio, Alert } from \"antd\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst CurrentAddressRenter = (props) => {\r\n  const {\r\n    onClickNext,\r\n    dataFormSave,\r\n    frontFunctions,\r\n    dataZipCatalog,\r\n    onChangeZipCode,\r\n    dataZipCodeAdress,\r\n    dataPropertyTypes,\r\n    dataProperties,\r\n  } = props;\r\n  const initialForm = {\r\n    isOwner: null,\r\n    streetProperty: null,\r\n    suiteProperty: null,\r\n    streetNumberProperty: null,\r\n    idZipCodeProperty: null,\r\n    zipCodeProperty: null,\r\n    city: null,\r\n    state: null,\r\n    neighborhoodProperty: null,\r\n    idPropertyType: null,\r\n    idPropertyTypeText: null,\r\n    isFurnished: null,\r\n    currentRent: null,\r\n    maintenanceAmount: null,\r\n    totalParkingSpots: null,\r\n    hasInsurance: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isEmpty(dataFormSave) === false &&\r\n      isEmpty(dataPropertyTypes) === false\r\n    ) {\r\n      const selectDefaulPropertyType = dataPropertyTypes.find((row) => {\r\n        return dataFormSave.idPropertyType === row.idPropertyType;\r\n      });\r\n      setDataForm({\r\n        ...dataFormSave,\r\n        idPropertyTypeText:\r\n          isNil(selectDefaulPropertyType) === false\r\n            ? selectDefaulPropertyType.text\r\n            : \"\",\r\n      });\r\n      onChangeZipCode(dataFormSave.zipCodeProperty);\r\n    }\r\n  }, [dataFormSave, dataPropertyTypes]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        state: dataZipCodeAdress.state,\r\n        city: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Datos del Inmueble a rentar\"\r\n          : \"Confirmar datos del Inmueble a rentar\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            {isEmpty(dataProperties) === false && (\r\n              <div className=\"message-typeform-requires\">\r\n                <Alert\r\n                  message={\r\n                    <div style={{ width: \"100%\" }}>\r\n                      Los siguientes campos son requeridos:\r\n                      <br />\r\n                      <ul>\r\n                        {dataProperties.map((row) => {\r\n                          return <li>{row.label}</li>;\r\n                        })}\r\n                      </ul>\r\n                    </div>\r\n                  }\r\n                  type=\"error\"\r\n                />\r\n              </div>\r\n            )}\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    ¿Eres el propietario?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        isOwner: value,\r\n                      });\r\n                    }}\r\n                    value={\r\n                      dataForm.isOwner === true || dataForm.isOwner === 1\r\n                        ? 1\r\n                        : isNil(dataForm.isOwner) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No, lo estoy representando</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Input\r\n                  value={dataForm.streetProperty}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      streetProperty: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.suiteProperty}\r\n                  placeholder={\"Número interior\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, suiteProperty: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.streetNumberProperty}\r\n                  placeholder={\"Número exterior\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      streetNumberProperty: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <Input\r\n                  value={dataForm.zipCodeProperty}\r\n                  placeholder={\"Código postal\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    if (value.length >= 5) {\r\n                      setDataForm({ ...dataForm, zipCodeProperty: value });\r\n                      onChangeZipCode(e.target.value);\r\n                    } else {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhoodProperty: null,\r\n                        idZipCodeProperty: null,\r\n                        zipCodeProperty: value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.state}\r\n                  placeholder={\"Estado\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.city}\r\n                  placeholder={\"Municipio/Delegación\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                {isOpenInput === false ? (\r\n                  <Select\r\n                    placeholder=\"Colonia\"\r\n                    value={dataForm.idZipCodeProperty}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setIsOpenInput(dataSelect.isOpen);\r\n                      if (dataSelect.isOpen === true) {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhoodProperty: null,\r\n                          idZipCodeProperty: value,\r\n                        });\r\n                      } else {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhoodProperty: option.children,\r\n                          idZipCodeProperty: value,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataZipCatalog) === false &&\r\n                      dataZipCatalog.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idZipCode}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.neighborhood}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                ) : (\r\n                  <Input\r\n                    value={dataForm.neighborhoodProperty}\r\n                    placeholder={\"Indicar Colonia\"}\r\n                    suffix={\r\n                      <Tooltip title=\"Cerrar\">\r\n                        <CloseOutlined\r\n                          style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                          onClick={() => {\r\n                            setIsOpenInput(false);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idZipCodeProperty: null,\r\n                              neighborhoodProperty: null,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                    }\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhoodProperty: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Select\r\n                  value={dataForm.idPropertyType}\r\n                  placeholder=\"Tipo de inmueble\"\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idPropertyType: value,\r\n                      idPropertyTypeText: option.children,\r\n                    });\r\n                  }}\r\n                >\r\n                  {isEmpty(dataPropertyTypes) === false &&\r\n                    dataPropertyTypes.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idPropertyType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    ¿El inmueble está asegurado?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        hasInsurance: e.target.value,\r\n                      });\r\n                    }}\r\n                    value={\r\n                      dataForm.hasInsurance === true ||\r\n                      dataForm.hasInsurance === 1\r\n                        ? 1\r\n                        : isNil(dataForm.hasInsurance) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    ¿El inmueble está amueblado?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, isFurnished: e.target.value });\r\n                    }}\r\n                    value={\r\n                      dataForm.isFurnished === true ||\r\n                      dataForm.isFurnished === 1\r\n                        ? 1\r\n                        : isNil(dataForm.isFurnished) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"$\"\r\n                  suffix=\"\"\r\n                  value={dataForm.currentRent}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Monto de renta\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      currentRent: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"$\"\r\n                  suffix=\"\"\r\n                  value={dataForm.maintenanceAmount}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder={\"Monto de mandetimiento\"}\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      maintenanceAmount: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={dataForm.totalParkingSpots}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder={\"Lugares de estacionamiento\"}\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      totalParkingSpots: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              {/* <button\r\n                type=\"button\"\r\n                onClick={onClickBack}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Regresar</span>\r\n              </button> */}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <p>\r\n              Verifica que tu información sea correcta, de lo contrario no\r\n              podras hacer modificaciones.\r\n            </p>\r\n            <Row>\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }} />\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"¿Eres el propietario?\"\r\n                  content={\r\n                    dataForm.isOwner === true || dataForm.isOwner === 1\r\n                      ? \"Si\"\r\n                      : isNil(dataForm.isOwner) === false\r\n                      ? \"No, lo estoy representando\"\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }} />\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Calle\"\r\n                  content={dataForm.streetProperty}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Número exterior\"\r\n                  content={dataForm.streetNumberProperty}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Número interior\"\r\n                  content={dataForm.suiteProperty}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Colonia\"\r\n                  content={dataForm.neighborhoodProperty}\r\n                />\r\n              </Col>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Municipio/Delegación\"\r\n                  content={dataForm.city}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem title=\"Estado\" content={dataForm.state} />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <DescriptionItem\r\n                  title=\"Código postal\"\r\n                  content={dataForm.zipCodeProperty}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"Tipo de inmueble\"\r\n                  content={dataForm.idPropertyTypeText}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <DescriptionItem\r\n                  title=\"¿Está amueblado?\"\r\n                  content={\r\n                    dataForm.isFurnished === true || dataForm.isFurnished === 1\r\n                      ? \"Si\"\r\n                      : isNil(dataForm.isFurnished) === false\r\n                      ? \"No\"\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"¿Está asegurado?\"\r\n                  content={\r\n                    dataForm.hasInsurance === true ||\r\n                    dataForm.hasInsurance === 1\r\n                      ? \"Si\"\r\n                      : isNil(dataForm.hasInsurance) === false\r\n                      ? \"No\"\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Monto de renta\"\r\n                  content={\r\n                    isNil(dataForm.currentRent) === false\r\n                      ? frontFunctions.parseFormatCurrency(\r\n                          dataForm.currentRent,\r\n                          2,\r\n                          2\r\n                        )\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Monto de mantenimiento\"\r\n                  content={\r\n                    isNil(dataForm.maintenanceAmount) === false\r\n                      ? frontFunctions.parseFormatCurrency(\r\n                          dataForm.maintenanceAmount,\r\n                          2,\r\n                          2\r\n                        )\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Estacionamiento\"\r\n                  content={dataForm.totalParkingSpots}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentAddressRenter;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx",["515","516"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Input, Row, Col, Select, Tooltip, Alert } from \"antd\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionInfoOwner = (props) => {\r\n  const {\r\n    onClickNext,\r\n    dataFormSave,\r\n    dataMaritalStatus,\r\n    onChangeZipCode,\r\n    dataZipCodeAdress,\r\n    dataZipCatalog,\r\n    dataNationalities,\r\n    dataIdTypes,\r\n    dataProperties,\r\n  } = props;\r\n  const initialForm = {\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    emailAddress: null,\r\n    taxId: null,\r\n    citizenId: null,\r\n    idMaritalStatus: null,\r\n    idMaritalStatusText: null,\r\n    street: null,\r\n    suite: null,\r\n    streetNumber: null,\r\n    zipCode: null,\r\n    idZipCode: null,\r\n    state: null,\r\n    municipality: null,\r\n    neighborhood: null,\r\n    idCountryNationality: null,\r\n    idCountryNationalityText: null,\r\n    idType: null,\r\n    idTypeText: null,\r\n    idTypeNumber: null,\r\n    placeOfIssue: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n  const [visibleComponents, setVisibleComponents] = useState({\r\n    givenName: true,\r\n    lastName: true,\r\n    mothersMaidenName: true,\r\n    idEndorsement: true,\r\n  });\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isEmpty(dataFormSave) === false &&\r\n      isEmpty(dataNationalities) === false &&\r\n      isEmpty(dataIdTypes) === false &&\r\n      isEmpty(dataMaritalStatus) === false\r\n    ) {\r\n      const visibleField =\r\n        isNil(dataFormSave.jsonProperties) === false\r\n          ? JSON.parse(dataFormSave.jsonProperties)\r\n          : {};\r\n      const selectDefaultNationality = dataNationalities.find((row) => {\r\n        return dataForm.idCountryNationality === row.idCountryNationality;\r\n      });\r\n      const selectDefaultIdType = dataIdTypes.find((row) => {\r\n        return dataForm.idType === row.idType;\r\n      });\r\n      const selectDefaultMaritalStatus = dataMaritalStatus.find((row) => {\r\n        return dataForm.idMaritalStatus === row.idMaritalStatus;\r\n      });\r\n      setDataForm({\r\n        ...dataFormSave,\r\n        idCountryNationalityText:\r\n          isNil(selectDefaultNationality) === false\r\n            ? selectDefaultNationality.text\r\n            : \"\",\r\n        idTypeText:\r\n          isNil(selectDefaultIdType) === false ? selectDefaultIdType.text : \"\",\r\n        idMaritalStatusText:\r\n          isNil(selectDefaultMaritalStatus) === false\r\n            ? selectDefaultMaritalStatus.text\r\n            : \"\",\r\n        isRequiresPlaceOfIssue:\r\n          isNil(selectDefaultIdType) === false\r\n            ? selectDefaultIdType.requiresPlaceOfIssue\r\n            : null,\r\n      });\r\n      setVisibleComponents({ ...visibleComponents, ...visibleField });\r\n      onChangeZipCode(dataFormSave.zipCode);\r\n    }\r\n  }, [dataFormSave, dataNationalities, dataIdTypes, dataMaritalStatus]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        state: dataZipCodeAdress.state,\r\n        city: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Información personal\"\r\n          : \"Confirmar Información Personal\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            {isEmpty(dataProperties) === false && (\r\n              <div className=\"message-typeform-requires\">\r\n                <Alert\r\n                  message={\r\n                    <div style={{ width: \"100%\" }}>\r\n                      Los siguientes campos son requeridos:\r\n                      <br />\r\n                      <ul>\r\n                        {dataProperties.map((row) => {\r\n                          return <li>{row.label}</li>;\r\n                        })}\r\n                      </ul>\r\n                    </div>\r\n                  }\r\n                  type=\"error\"\r\n                />\r\n              </div>\r\n            )}\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <Input\r\n                  value={dataForm.givenName}\r\n                  placeholder={\r\n                    visibleComponents.lastName === true\r\n                      ? \"Nombres\"\r\n                      : \"Razón social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, givenName: value });\r\n                  }}\r\n                  suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              {visibleComponents.lastName === true && (\r\n                <>\r\n                  {\" \"}\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <Input\r\n                      value={dataForm.lastName}\r\n                      placeholder={\"Apellido paterno\"}\r\n                      onChange={(e) => {\r\n                        // const value = e.target.value;\r\n                        // setDataForm({ ...dataForm, lastName: value });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <Input\r\n                      value={dataForm.mothersMaidenName}\r\n                      placeholder={\"Apellido materno\"}\r\n                      onChange={(e) => {\r\n                        // const value = e.target.value;\r\n                        // setDataForm({ ...dataForm, mothersMaidenName: value });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </>\r\n              )}\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.phoneNumber}\r\n                  placeholder={\"Teléfono\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, phoneNumber: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.emailAddress}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, emailAddress: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.taxId}\r\n                  placeholder={\"RFC con Homoclave\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, taxId: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.citizenId}\r\n                  placeholder={\"CURP\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, citizenId: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                <Select\r\n                  placeholder=\"Nacionalidad\"\r\n                  showSearch\r\n                  value={dataForm.idCountryNationality}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idCountryNationality: value,\r\n                      idCountryNationalityText: option.children,\r\n                    });\r\n                  }}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {isEmpty(dataNationalities) === false &&\r\n                    dataNationalities.map((row) => {\r\n                      return (\r\n                        <Option value={row.idCountryNationality}>\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                <Select\r\n                  placeholder=\"Identificación oficial\"\r\n                  showSearch\r\n                  value={dataForm.idType}\r\n                  onChange={(value, option) => {\r\n                    const valueSelect = option.onClick();\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idType: value,\r\n                      idTypeText: option.children,\r\n                      isRequiresPlaceOfIssue: valueSelect.requiresPlaceOfIssue,\r\n                    });\r\n                  }}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {isEmpty(dataIdTypes) === false &&\r\n                    dataIdTypes.map((row) => {\r\n                      return (\r\n                        <Option value={row.idType} onClick={() => row}>\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              {isNil(dataForm.idType) === false && (\r\n                <Col span={10} xs={{ span: 24 }} md={{ span: 10 }}>\r\n                  <Input\r\n                    value={dataForm.idTypeNumber}\r\n                    placeholder={`Número de ${dataForm.idTypeText}`}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, idTypeNumber: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              )}\r\n            </Row>\r\n            {dataForm.isRequiresPlaceOfIssue === true && (\r\n              <Row>\r\n                <Col span={13} xs={{ span: 24 }} md={{ span: 13 }}>\r\n                  <Input\r\n                    value={dataForm.placeOfIssue}\r\n                    placeholder={\"Lugar de expedición de la identificación\"}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, placeOfIssue: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Select\r\n                  placeholder=\"Estado Civil\"\r\n                  value={dataForm.idMaritalStatus}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idMaritalStatus: value,\r\n                      idMaritalStatusText: option.children,\r\n                    });\r\n                  }}\r\n                >\r\n                  {isEmpty(dataMaritalStatus) === false &&\r\n                    dataMaritalStatus.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idMaritalStatus}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <p>Domicilio Actual</p>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Input\r\n                  value={dataForm.street}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, street: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.suite}\r\n                  placeholder={\"Número interior\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, suite: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.streetNumber}\r\n                  placeholder={\"Número exterior\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, streetNumber: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <Input\r\n                  value={dataForm.zipCode}\r\n                  placeholder={\"Código postal\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    if (value.length >= 5) {\r\n                      setDataForm({ ...dataForm, zipCode: value });\r\n                      onChangeZipCode(e.target.value);\r\n                    } else {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: null,\r\n                        idZipCode: null,\r\n                        zipCode: value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.state}\r\n                  placeholder={\"Estado\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.city}\r\n                  placeholder={\"Municipio/Delegación\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                {isOpenInput === false ? (\r\n                  <Select\r\n                    placeholder=\"Colonia\"\r\n                    value={dataForm.idZipCode}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setIsOpenInput(dataSelect.isOpen);\r\n                      if (dataSelect.isOpen === true) {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: null,\r\n                          idZipCode: value,\r\n                        });\r\n                      } else {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: option.children,\r\n                          idZipCode: value,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataZipCatalog) === false &&\r\n                      dataZipCatalog.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idZipCode}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.neighborhood}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                ) : (\r\n                  <Input\r\n                    value={dataForm.neighborhood}\r\n                    placeholder={\"Indicar Colonia\"}\r\n                    suffix={\r\n                      <Tooltip title=\"Cerrar\">\r\n                        <CloseOutlined\r\n                          style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                          onClick={() => {\r\n                            setIsOpenInput(false);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idZipCode: null,\r\n                              neighborhood: null,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                    }\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <p>\r\n              Verifica que tu información sea correcta, de lo contrario no\r\n              podras hacer modificaciones.\r\n            </p>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title={\r\n                    visibleComponents.lastName === true\r\n                      ? \"Nombre completo\"\r\n                      : \"Razón social\"\r\n                  }\r\n                  content={`${dataForm.givenName} ${\r\n                    visibleComponents.lastName === true ? dataForm.lastName : \"\"\r\n                  } ${\r\n                    visibleComponents.lastName === true\r\n                      ? dataForm.mothersMaidenName\r\n                      : \"\"\r\n                  }`}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Teléfono\"\r\n                  content={dataForm.phoneNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Correo\"\r\n                  content={dataForm.emailAddress}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"RFC con Homoclave\"\r\n                  content={dataForm.taxId}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem title=\"CURP\" content={dataForm.citizenId} />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Nacionalidad\"\r\n                  content={dataForm.idCountryNationalityText}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Identificación oficial\"\r\n                  content={dataForm.idTypeText}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title={`Número de ${dataForm.idTypeText}`}\r\n                  content={dataForm.idTypeNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Estado civil\"\r\n                  content={dataForm.idMaritalStatusText}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {dataForm.isRequiresPlaceOfIssue === true && (\r\n              <Row>\r\n                <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n                <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n                  <DescriptionItem\r\n                    title={`Lugar de expedición de identificación`}\r\n                    content={dataForm.placeOfIssue}\r\n                  />\r\n                </Col>\r\n                <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n              </Row>\r\n            )}\r\n            <p>Domicilio Actual</p>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem title=\"Calle\" content={dataForm.street} />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Número exterior\"\r\n                  content={dataForm.streetNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Número interior\"\r\n                  content={dataForm.suite}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Colonia\"\r\n                  content={dataForm.neighborhood}\r\n                />\r\n              </Col>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Municipio/Delegación\"\r\n                  content={dataForm.city}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem title=\"Estado\" content={dataForm.state} />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Código postal\"\r\n                  content={dataForm.zipCode}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionInfoOwner;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx",["517","518","519","520","521"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\nimport {\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Tooltip,\r\n  Radio,\r\n  DatePicker,\r\n  Collapse,\r\n  Alert,\r\n} from \"antd\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\nimport CustomFileUpload from \"./customFileUpload\";\r\n\r\nconst { Option } = Select;\r\nconst { Panel } = Collapse;\r\n\r\nconst SectionInfoAval = (props) => {\r\n  const {\r\n    dataNationalities,\r\n    dataIdTypes,\r\n    onClickFinish,\r\n    dataFormSave,\r\n    onChangeZipCode,\r\n    dataZipCatalog,\r\n    dataZipCodeAdressEndorsement,\r\n    dataZipCatalogEndorsement,\r\n    dataZipCodeAdress,\r\n    dataDocuments,\r\n    typeDocument,\r\n    dataMaritalStatus,\r\n    dataMaritalRegime,\r\n    frontFunctions,\r\n    dataProperties,\r\n  } = props;\r\n  const initialForm = {\r\n    hasEndorsement: null,\r\n    endorsementGivenName: null,\r\n    endorsementLastName: null,\r\n    endorsementMothersMaidenName: null,\r\n    endorsementEmailAddress: null,\r\n    endorsementPhoneNumber: null,\r\n    collateralPropertyStreet: null,\r\n    collateralPropertySuite: null,\r\n    collateralPropertyStreetNumber: null,\r\n    collateralPropertyIdZipCoode: null,\r\n    collateralPropertyZipCode: null,\r\n    collateralPropertyNeighborhood: null,\r\n    collateralPropertyCity: null,\r\n    collateralPropertyState: null,\r\n    documentNumber: null,\r\n    documentSignedAt: null,\r\n    notaryOfficeNumber: null,\r\n    notaryName: null,\r\n    signedAtPlace: null,\r\n    idEndorsementNationality: null,\r\n    idEndorsementNationalityText: null,\r\n    idEndorsementType: null,\r\n    idEndorsementTypeText: null,\r\n    idEndorsementTypeNumber: null,\r\n    endorsementCitizenId: null,\r\n    publicPropertyRegistry: null,\r\n    endorsementPlaceOfIssue: null,\r\n    idEndorsementMaritalStatus: null,\r\n    idEndorsementMaritalStatusText: null,\r\n    idEndorsementMaritalRegime: null,\r\n    idEndorsementMaritalRegimeText: null,\r\n    endorsementAssessment: null,\r\n    endorsementStreet: null,\r\n    endorsementSuite: null,\r\n    endorsementStreetNumber: null,\r\n    endorsementZipCode: null,\r\n    endorsementIdZipCode: null,\r\n    endorsementState: null,\r\n    endorsementCity: null,\r\n    endorsementNeighborhood: null,\r\n    assessmentInvoice: null,\r\n    assessmentTicket: null,\r\n    assessmentDate: null,\r\n    assessmentIssuedBy: null,\r\n    hasAssessment: null,\r\n    repeatAddress: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n  const [isOpenInputEndorsement, setIsOpenInputEndorsement] = useState(false);\r\n  const [isOpenSelectRegime, setIsOpenSelectRegime] = useState(false);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n  const [keyCollapse, setKeyCollapse] = useState(\"1\");\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {isNil(content) === false ? content : \"N/A\"}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isEmpty(dataFormSave) === false &&\r\n      isEmpty(dataNationalities) === false &&\r\n      isEmpty(dataIdTypes) === false &&\r\n      isEmpty(dataMaritalStatus) === false &&\r\n      isEmpty(dataMaritalRegime) === false\r\n    ) {\r\n      const selectDefaultNationality = dataNationalities.find((row) => {\r\n        return (\r\n          dataFormSave.idEndorsementNationality === row.idCountryNationality\r\n        );\r\n      });\r\n      const selectDefaultIdType = dataIdTypes.find((row) => {\r\n        return dataFormSave.idEndorsementType === row.idType;\r\n      });\r\n      const selectDefaultMaritalStatus = dataMaritalStatus.find((row) => {\r\n        return dataFormSave.idEndorsementMaritalStatus === row.idMaritalStatus;\r\n      });\r\n      const selectDefaultMaritalRegime = dataMaritalRegime.find((row) => {\r\n        return dataFormSave.idEndorsementMaritalRegime === row.idMaritalRegime;\r\n      });\r\n      if (\r\n        isNil(selectDefaultMaritalStatus) === false &&\r\n        isNil(selectDefaultMaritalStatus.hasMaritalRegime) === false\r\n      ) {\r\n        setIsOpenSelectRegime(selectDefaultMaritalStatus.hasMaritalRegime);\r\n      }\r\n      setDataForm({\r\n        ...dataFormSave,\r\n        idEndorsementNationalityText:\r\n          isNil(selectDefaultNationality) === false\r\n            ? selectDefaultNationality.text\r\n            : \"\",\r\n        idEndorsementTypeText:\r\n          isNil(selectDefaultIdType) === false ? selectDefaultIdType.text : \"\",\r\n        isRequiresPlaceOfIssue:\r\n          isNil(selectDefaultIdType) === false\r\n            ? selectDefaultIdType.requiresPlaceOfIssue\r\n            : null,\r\n        idEndorsementMaritalStatusText:\r\n          isNil(selectDefaultMaritalStatus) === false\r\n            ? selectDefaultMaritalStatus.text\r\n            : \"\",\r\n        idEndorsementMaritalRegimeText:\r\n          isNil(selectDefaultMaritalRegime) === false\r\n            ? selectDefaultMaritalRegime.text\r\n            : \"\",\r\n      });\r\n      onChangeZipCode(dataFormSave.collateralPropertyZipCode);\r\n      onChangeZipCode(dataFormSave.endorsementZipCode, true);\r\n    }\r\n  }, [\r\n    dataNationalities,\r\n    dataIdTypes,\r\n    dataFormSave,\r\n    dataMaritalStatus,\r\n    dataMaritalRegime,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        collateralPropertyState: dataZipCodeAdress.state,\r\n        collateralPropertyCity: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdressEndorsement) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        endorsementState: dataZipCodeAdressEndorsement.state,\r\n        endorsementCity: dataZipCodeAdressEndorsement.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdressEndorsement]);\r\n\r\n  const getTypeIdDocument = (type) => {\r\n    let word = \"\";\r\n\r\n    switch (type) {\r\n      case 1:\r\n        word = \"IFE/INE Frontal y Vuelta\";\r\n        break;\r\n      case 2:\r\n        word = \"Pasaporte\";\r\n        break;\r\n      case 3:\r\n        word = \"FM3\";\r\n        break;\r\n      default:\r\n        word = \"IFE/INE Frontal y Vuelta\";\r\n        break;\r\n    }\r\n    return word;\r\n  };\r\n\r\n  const repeatAddressEndorsement = (value, data, callback) => {\r\n    if (value === true || value === 1) {\r\n      onChangeZipCode(data.endorsementZipCode);\r\n      callback({\r\n        collateralPropertyStreet: data.endorsementStreet,\r\n        collateralPropertyStreetNumber: data.endorsementStreetNumber,\r\n        collateralPropertyIdZipCoode: data.endorsementIdZipCode,\r\n        collateralPropertyZipCode: data.endorsementZipCode,\r\n        collateralPropertyNeighborhood: data.endorsementNeighborhood,\r\n        collateralPropertyCity: data.endorsementCity,\r\n        collateralPropertyState: data.endorsementState,\r\n        repeatAddress: value,\r\n      });\r\n    } else {\r\n      callback({\r\n        collateralPropertyStreet: null,\r\n        collateralPropertyStreetNumber: null,\r\n        collateralPropertyIdZipCoode: null,\r\n        collateralPropertyZipCode: null,\r\n        collateralPropertyNeighborhood: null,\r\n        collateralPropertyCity: null,\r\n        collateralPropertyState: null,\r\n        repeatAddress: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Información Aval\"\r\n          : \"Confirmar Información Aval\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            {isEmpty(dataProperties) === false && (\r\n              <div className=\"message-typeform-requires\">\r\n                <Alert\r\n                  message={\r\n                    <div style={{ width: \"100%\" }}>\r\n                      Los siguientes campos son requeridos:\r\n                      <br />\r\n                      <ul>\r\n                        {dataProperties.map((row) => {\r\n                          return <li>{row.label}</li>;\r\n                        })}\r\n                      </ul>\r\n                    </div>\r\n                  }\r\n                  type=\"error\"\r\n                />\r\n              </div>\r\n            )}\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    ¿Cuentas con Aval?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, hasEndorsement: value });\r\n                    }}\r\n                    value={\r\n                      dataForm.hasEndorsement === true ||\r\n                      dataForm.hasEndorsement === 1\r\n                        ? 1\r\n                        : isNil(dataForm.hasEndorsement) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            {(dataForm.hasEndorsement === 1 ||\r\n              dataForm.hasEndorsement === true) && (\r\n              <>\r\n                <Collapse activeKey={keyCollapse}>\r\n                  <Panel\r\n                    header={\r\n                      <p style={{ marginBottom: 0 }}>Información personal</p>\r\n                    }\r\n                    key=\"1\"\r\n                  >\r\n                    <Row>\r\n                      <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementGivenName}\r\n                          placeholder={\"Nombres\"}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              endorsementGivenName: value,\r\n                            });\r\n                          }}\r\n                          suffix={\r\n                            <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                      <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementLastName}\r\n                          placeholder={\"Apellido paterno\"}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              endorsementLastName: value,\r\n                            });\r\n                          }}\r\n                          suffix={\r\n                            <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                      <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementMothersMaidenName}\r\n                          placeholder={\"Apellido materno\"}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              endorsementMothersMaidenName: value,\r\n                            });\r\n                          }}\r\n                          suffix={\r\n                            <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementPhoneNumber}\r\n                          placeholder={\"Teléfono\"}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              endorsementPhoneNumber: value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementEmailAddress}\r\n                          placeholder={\"Correo\"}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              endorsementEmailAddress: value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                        <Select\r\n                          placeholder=\"Nacionalidad\"\r\n                          showSearch\r\n                          value={dataForm.idEndorsementNationality}\r\n                          onChange={(value, option) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idEndorsementNationality: value,\r\n                              idEndorsementNationalityText: option.children,\r\n                            });\r\n                          }}\r\n                          filterOption={(input, option) =>\r\n                            option.children\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                        >\r\n                          {isEmpty(dataNationalities) === false &&\r\n                            dataNationalities.map((row) => {\r\n                              return (\r\n                                <Option value={row.idCountryNationality}>\r\n                                  {row.text}\r\n                                </Option>\r\n                              );\r\n                            })}\r\n                        </Select>\r\n                      </Col>\r\n                      <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                      <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                        <Select\r\n                          placeholder=\"Identificación oficial\"\r\n                          showSearch\r\n                          value={dataForm.idEndorsementType}\r\n                          onChange={(value, option) => {\r\n                            const valueSelect = option.onClick();\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idEndorsementType: value,\r\n                              idEndorsementTypeText: option.children,\r\n                              isRequiresPlaceOfIssue:\r\n                                valueSelect.requiresPlaceOfIssue,\r\n                            });\r\n                          }}\r\n                          filterOption={(input, option) =>\r\n                            option.children\r\n                              .toLowerCase()\r\n                              .indexOf(input.toLowerCase()) >= 0\r\n                          }\r\n                        >\r\n                          {isEmpty(dataIdTypes) === false &&\r\n                            dataIdTypes.map((row) => {\r\n                              return (\r\n                                <Option value={row.idType} onClick={() => row}>\r\n                                  {row.text}\r\n                                </Option>\r\n                              );\r\n                            })}\r\n                        </Select>\r\n                      </Col>\r\n                      <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                      {isNil(dataForm.idEndorsementType) === false && (\r\n                        <Col span={10} xs={{ span: 24 }} md={{ span: 10 }}>\r\n                          <Input\r\n                            value={dataForm.idEndorsementTypeNumber}\r\n                            placeholder={`Número de ${dataForm.idEndorsementTypeText}`}\r\n                            onChange={(e) => {\r\n                              const value = e.target.value;\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                idEndorsementTypeNumber: value,\r\n                              });\r\n                            }}\r\n                          />\r\n                        </Col>\r\n                      )}\r\n                    </Row>\r\n                    {dataForm.isRequiresPlaceOfIssue === true && (\r\n                      <Row>\r\n                        <Col span={13} xs={{ span: 24 }} md={{ span: 13 }}>\r\n                          <Input\r\n                            value={dataForm.endorsementPlaceOfIssue}\r\n                            placeholder={\r\n                              \"Lugar de expedición de la identificación\"\r\n                            }\r\n                            onChange={(e) => {\r\n                              const value = e.target.value;\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                endorsementPlaceOfIssue: value,\r\n                              });\r\n                            }}\r\n                          />\r\n                        </Col>\r\n                      </Row>\r\n                    )}\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementCitizenId}\r\n                          placeholder={\"CURP\"}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              endorsementCitizenId: value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Select\r\n                          placeholder=\"Estado Civil\"\r\n                          value={dataForm.idEndorsementMaritalStatus}\r\n                          onChange={(value, option) => {\r\n                            const dataClick = option.onClick();\r\n                            setIsOpenSelectRegime(dataClick.hasMaritalRegime);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idEndorsementMaritalStatus: value,\r\n                              idEndorsementMaritalStatusText: option.children,\r\n                            });\r\n                          }}\r\n                        >\r\n                          {isEmpty(dataMaritalStatus) === false &&\r\n                            dataMaritalStatus.map((row) => {\r\n                              return (\r\n                                <Option\r\n                                  value={row.idMaritalStatus}\r\n                                  onClick={() => {\r\n                                    return row;\r\n                                  }}\r\n                                >\r\n                                  {row.text}\r\n                                </Option>\r\n                              );\r\n                            })}\r\n                        </Select>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      {isOpenSelectRegime === true && (\r\n                        <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                          <Select\r\n                            placeholder=\"Régimen\"\r\n                            value={dataForm.idEndorsementMaritalRegime}\r\n                            onChange={(value, option) => {\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                idEndorsementMaritalRegime: value,\r\n                                idEndorsementMaritalRegimeText: option.children,\r\n                              });\r\n                            }}\r\n                          >\r\n                            {isEmpty(dataMaritalRegime) === false &&\r\n                              dataMaritalRegime.map((row) => {\r\n                                return (\r\n                                  <Option\r\n                                    value={row.idMaritalRegime}\r\n                                    onClick={() => {\r\n                                      return row;\r\n                                    }}\r\n                                  >\r\n                                    {row.text}\r\n                                  </Option>\r\n                                );\r\n                              })}\r\n                          </Select>\r\n                        </Col>\r\n                      )}\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                    </Row>\r\n                    <div className=\"button_actions\">\r\n                      {/* <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"1\");\r\n                        }}\r\n                        className=\"button_secondary\"\r\n                      >\r\n                        <span>Regresar</span>\r\n                      </button> */}\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"2\");\r\n                        }}\r\n                        className=\"button_primary\"\r\n                      >\r\n                        <span>Continuar</span>\r\n                      </button>\r\n                    </div>\r\n                  </Panel>\r\n                  <Panel\r\n                    header={\r\n                      <p style={{ marginBottom: 0 }}>Dirección del Aval</p>\r\n                    }\r\n                    key=\"2\"\r\n                  >\r\n                    <Row>\r\n                      <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementStreet}\r\n                          placeholder={\"Calle\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              endorsementStreet: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementStreetNumber}\r\n                          placeholder={\"Número\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              endorsementStreetNumber: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementZipCode}\r\n                          placeholder={\"Código postal\"}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            if (value.length >= 5) {\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                endorsementZipCode: value,\r\n                              });\r\n                              onChangeZipCode(e.target.value, true);\r\n                            } else {\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                endorsementNeighborhood: null,\r\n                                endorsementIdZipCode: null,\r\n                                endorsementZipCode: value,\r\n                              });\r\n                            }\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementState}\r\n                          placeholder={\"Estado\"}\r\n                          onChange={(e) => {}}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.endorsementCity}\r\n                          placeholder={\"Municipio/Delegación\"}\r\n                          onChange={(e) => {}}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        {isOpenInputEndorsement === false ? (\r\n                          <Select\r\n                            placeholder=\"Colonia\"\r\n                            value={dataForm.endorsementIdZipCode}\r\n                            onChange={(value, option) => {\r\n                              const dataSelect = option.onClick();\r\n                              setIsOpenInputEndorsement(dataSelect.isOpen);\r\n                              if (dataSelect.isOpen === true) {\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  endorsementNeighborhood: null,\r\n                                  endorsementIdZipCode: value,\r\n                                });\r\n                              } else {\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  endorsementNeighborhood: option.children,\r\n                                  endorsementIdZipCode: value,\r\n                                });\r\n                              }\r\n                            }}\r\n                          >\r\n                            {isEmpty(dataZipCatalogEndorsement) === false &&\r\n                              dataZipCatalogEndorsement.map((row) => {\r\n                                return (\r\n                                  <Option\r\n                                    value={row.idZipCode}\r\n                                    onClick={() => {\r\n                                      return row;\r\n                                    }}\r\n                                  >\r\n                                    {row.neighborhood}\r\n                                  </Option>\r\n                                );\r\n                              })}\r\n                          </Select>\r\n                        ) : (\r\n                          <Input\r\n                            value={dataForm.endorsementNeighborhood}\r\n                            placeholder={\"Indicar Colonia\"}\r\n                            suffix={\r\n                              <Tooltip title=\"Cerrar\">\r\n                                <CloseOutlined\r\n                                  style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                                  onClick={() => {\r\n                                    setIsOpenInputEndorsement(false);\r\n                                    setDataForm({\r\n                                      ...dataForm,\r\n                                      endorsementIdZipCode: null,\r\n                                      endorsementNeighborhood: null,\r\n                                    });\r\n                                  }}\r\n                                />\r\n                              </Tooltip>\r\n                            }\r\n                            onChange={(e) => {\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                endorsementNeighborhood: e.target.value,\r\n                              });\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </Col>\r\n                    </Row>\r\n                    <div className=\"button_actions\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"1\");\r\n                        }}\r\n                        className=\"button_secondary\"\r\n                      >\r\n                        <span>Regresar</span>\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"3\");\r\n                        }}\r\n                        className=\"button_primary\"\r\n                      >\r\n                        <span>Continuar</span>\r\n                      </button>\r\n                    </div>\r\n                  </Panel>\r\n                  <Panel\r\n                    header={\r\n                      <p style={{ marginBottom: 0 }}>\r\n                        Dirección de la propiedad en garantía\r\n                      </p>\r\n                    }\r\n                    key=\"3\"\r\n                  >\r\n                    <Row>\r\n                      <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                        <div className=\"option-select-radio\">\r\n                          <span\r\n                            style={{\r\n                              color: \"var(--color-primary)\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            ¿Quieres ocupar la dirección del Aval?\r\n                          </span>\r\n                          <Radio.Group\r\n                            onChange={(e) => {\r\n                              const value = e.target.value;\r\n                              repeatAddressEndorsement(\r\n                                value,\r\n                                dataForm,\r\n                                (newData) => {\r\n                                  setDataForm({ ...dataForm, ...newData });\r\n                                }\r\n                              );\r\n                            }}\r\n                            value={\r\n                              dataForm.repeatAddress === true ||\r\n                              dataForm.repeatAddress === 1\r\n                                ? 1\r\n                                : isNil(dataForm.repeatAddress) === false\r\n                                ? 0\r\n                                : null\r\n                            }\r\n                          >\r\n                            <Radio value={1}>Si</Radio>\r\n                            <Radio value={0}>No, es diferente</Radio>\r\n                          </Radio.Group>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                        <Input\r\n                          value={dataForm.collateralPropertyStreet}\r\n                          placeholder={\"Calle\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              collateralPropertyStreet: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.collateralPropertyStreetNumber}\r\n                          placeholder={\"Número\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              collateralPropertyStreetNumber: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.collateralPropertyZipCode}\r\n                          placeholder={\"Código postal\"}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            if (value.length >= 5) {\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                collateralPropertyZipCode: value,\r\n                              });\r\n                              onChangeZipCode(e.target.value);\r\n                            } else {\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                collateralPropertyNeighborhood: null,\r\n                                collateralPropertyIdZipCoode: null,\r\n                                collateralPropertyZipCode: value,\r\n                              });\r\n                            }\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.collateralPropertyState}\r\n                          placeholder={\"Estado\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              collateralPropertyState: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.collateralPropertyCity}\r\n                          placeholder={\"Municipio/Delegación\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              collateralPropertyCity: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        {isOpenInput === false ? (\r\n                          <Select\r\n                            placeholder=\"Colonia\"\r\n                            value={dataForm.collateralPropertyIdZipCoode}\r\n                            onChange={(value, option) => {\r\n                              const dataSelect = option.onClick();\r\n                              setIsOpenInput(dataSelect.isOpen);\r\n                              if (dataSelect.isOpen === true) {\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  collateralPropertyNeighborhood: null,\r\n                                  collateralPropertyIdZipCoode: value,\r\n                                });\r\n                              } else {\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  collateralPropertyNeighborhood:\r\n                                    option.children,\r\n                                  collateralPropertyIdZipCoode: value,\r\n                                });\r\n                              }\r\n                            }}\r\n                          >\r\n                            {isEmpty(dataZipCatalog) === false &&\r\n                              dataZipCatalog.map((row) => {\r\n                                return (\r\n                                  <Option\r\n                                    value={row.idZipCode}\r\n                                    onClick={() => {\r\n                                      return row;\r\n                                    }}\r\n                                  >\r\n                                    {row.neighborhood}\r\n                                  </Option>\r\n                                );\r\n                              })}\r\n                          </Select>\r\n                        ) : (\r\n                          <Input\r\n                            value={dataForm.collateralPropertyNeighborhood}\r\n                            placeholder={\"Indicar Colonia\"}\r\n                            suffix={\r\n                              <Tooltip title=\"Cerrar\">\r\n                                <CloseOutlined\r\n                                  style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                                  onClick={() => {\r\n                                    setIsOpenInput(false);\r\n                                    setDataForm({\r\n                                      ...dataForm,\r\n                                      collateralPropertyIdZipCoode: null,\r\n                                      collateralPropertyNeighborhood: null,\r\n                                    });\r\n                                  }}\r\n                                />\r\n                              </Tooltip>\r\n                            }\r\n                            onChange={(e) => {\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                collateralPropertyNeighborhood: e.target.value,\r\n                              });\r\n                            }}\r\n                          />\r\n                        )}\r\n                      </Col>\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.publicPropertyRegistry}\r\n                          placeholder=\"Registro público/Folio real\"\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              publicPropertyRegistry: value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <div className=\"button_actions\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"2\");\r\n                        }}\r\n                        className=\"button_secondary\"\r\n                      >\r\n                        <span>Regresar</span>\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"4\");\r\n                        }}\r\n                        className=\"button_primary\"\r\n                      >\r\n                        <span>Continuar</span>\r\n                      </button>\r\n                    </div>\r\n                  </Panel>\r\n                  <Panel\r\n                    header={<p style={{ marginBottom: 0 }}>Gravamen</p>}\r\n                    key=\"4\"\r\n                  >\r\n                    <Row>\r\n                      <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                        <div className=\"option-select-radio\">\r\n                          <span\r\n                            style={{\r\n                              color: \"var(--color-primary)\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            ¿Cuentas con Certificado de Libertad de Gravamen?\r\n                          </span>\r\n                          <Radio.Group\r\n                            onChange={(e) => {\r\n                              const value = e.target.value;\r\n                              setDataForm({\r\n                                ...dataForm,\r\n                                hasAssessment: value,\r\n                              });\r\n                            }}\r\n                            value={\r\n                              dataForm.hasAssessment === true ||\r\n                              dataForm.hasAssessment === 1\r\n                                ? 1\r\n                                : isNil(dataForm.hasAssessment) === false\r\n                                ? 0\r\n                                : null\r\n                            }\r\n                          >\r\n                            <Radio value={1}>Si</Radio>\r\n                            <Radio value={0}>No, tengo un Gravamen</Radio>\r\n                          </Radio.Group>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    {(dataForm.hasAssessment === 1 ||\r\n                      dataForm.hasAssessment === true) && (\r\n                      <>\r\n                        <Row>\r\n                          <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                            <Input\r\n                              value={dataForm.assessmentInvoice}\r\n                              placeholder=\"Folio\"\r\n                              onChange={(e) => {\r\n                                const value = e.target.value;\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  assessmentInvoice: value,\r\n                                });\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                          <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                            <Input\r\n                              value={dataForm.assessmentTicket}\r\n                              placeholder=\"Boleta\"\r\n                              onChange={(e) => {\r\n                                const value = e.target.value;\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  assessmentTicket: value,\r\n                                });\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                          <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                          <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                            <DatePicker\r\n                              value={\r\n                                isNil(dataForm.assessmentDate) === false\r\n                                  ? moment(\r\n                                      dataForm.assessmentDate,\r\n                                      \"YYYY-MM-DD\"\r\n                                    )\r\n                                  : null\r\n                              }\r\n                              placeholder=\"Fecha de expedición\"\r\n                              onChange={(momentFormat, date) => {\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  assessmentDate: moment(momentFormat).format(\r\n                                    \"YYYY-MM-DD\"\r\n                                  ),\r\n                                });\r\n                              }}\r\n                              format=\"DD MMMM YYYY\"\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                        <Row>\r\n                          <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                            <Input\r\n                              value={dataForm.assessmentIssuedBy}\r\n                              placeholder=\"Expedido por: EJ. Instituto Registral y Catastral...:\"\r\n                              onChange={(e) => {\r\n                                const value = e.target.value;\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  assessmentIssuedBy: value,\r\n                                });\r\n                              }}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </>\r\n                    )}\r\n                    {(dataForm.hasAssessment === 0 ||\r\n                      dataForm.hasAssessment === false) && (\r\n                      <>\r\n                        <Row>\r\n                          <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                            <NumberFormat\r\n                              id={null}\r\n                              customInput={Input}\r\n                              thousandSeparator=\",\"\r\n                              decimalSeparator=\".\"\r\n                              decimalPrecision={2}\r\n                              allowNegative={false}\r\n                              prefix=\"$\"\r\n                              suffix=\"\"\r\n                              value={dataForm.endorsementAssessment}\r\n                              className=\"inputLogin\"\r\n                              floatingLabelText=\"\"\r\n                              isVisible\r\n                              toBlock={false}\r\n                              disable={false}\r\n                              placeholder=\"Monto del Gravamen\"\r\n                              onValueChange={(values) => {\r\n                                const {\r\n                                  formattedValue,\r\n                                  value,\r\n                                  floatValue,\r\n                                } = values;\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  endorsementAssessment: floatValue,\r\n                                });\r\n                              }}\r\n                              onClick={(event) => {}}\r\n                              onFocus={(event) => {}}\r\n                              onBlur={(event) => {}}\r\n                            />\r\n                          </Col>\r\n                        </Row>\r\n                      </>\r\n                    )}\r\n                    {(dataForm.hasAssessment === 1 ||\r\n                      dataForm.hasAssessment === true) && (\r\n                      <div className=\"section-top-documentation\">\r\n                        <div className=\"section-card-documentation\">\r\n                          <div className=\"section-title-card-doc\">\r\n                            <strong>Certificado de libertad de Gravamen</strong>\r\n                            <span></span>\r\n                          </div>\r\n                          <div\r\n                            className=\"section-content-card-doc\"\r\n                            style={{ justifyContent: \"center\" }}\r\n                          >\r\n                            <CustomFileUpload\r\n                              acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                              dataDocument={\r\n                                isEmpty(dataDocuments) === false &&\r\n                                isNil(dataDocuments[4]) === false\r\n                                  ? dataDocuments[4]\r\n                                  : {}\r\n                              }\r\n                              typeDocument={typeDocument}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                    <div className=\"button_actions\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"3\");\r\n                        }}\r\n                        className=\"button_secondary\"\r\n                      >\r\n                        <span>Regresar</span>\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"5\");\r\n                        }}\r\n                        className=\"button_primary\"\r\n                      >\r\n                        <span>Continuar</span>\r\n                      </button>\r\n                    </div>\r\n                  </Panel>\r\n                  <Panel\r\n                    header={<p style={{ marginBottom: 0 }}>Escrituras</p>}\r\n                    key=\"5\"\r\n                  >\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.documentNumber}\r\n                          placeholder={\"Número de las escrituras\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              documentNumber: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <DatePicker\r\n                          value={\r\n                            isNil(dataForm.documentSignedAt) === false\r\n                              ? moment(dataForm.documentSignedAt, \"YYYY-MM-DD\")\r\n                              : null\r\n                          }\r\n                          placeholder=\"Fecha de firma de las escrituras\"\r\n                          onChange={(momentFormat, date) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              documentSignedAt: moment(momentFormat).format(\r\n                                \"YYYY-MM-DD\"\r\n                              ),\r\n                            });\r\n                          }}\r\n                          format=\"DD MMMM YYYY\"\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                        <Input\r\n                          value={dataForm.signedAtPlace}\r\n                          placeholder={\"Lugar de firma de la escritura\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              signedAtPlace: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.notaryOfficeNumber}\r\n                          placeholder={\"Número de la notaria\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              notaryOfficeNumber: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <Input\r\n                          value={dataForm.notaryName}\r\n                          placeholder={\"Nombre del notario\"}\r\n                          onChange={(e) => {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              notaryName: e.target.value,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <div className=\"button_actions\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"4\");\r\n                        }}\r\n                        className=\"button_secondary\"\r\n                      >\r\n                        <span>Regresar</span>\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"6\");\r\n                        }}\r\n                        className=\"button_primary\"\r\n                      >\r\n                        <span>Continuar</span>\r\n                      </button>\r\n                    </div>\r\n                  </Panel>\r\n                  <Panel\r\n                    header={<p style={{ marginBottom: 0 }}>Documentación</p>}\r\n                    key=\"6\"\r\n                  >\r\n                    <div className=\"section-top-documentation\">\r\n                      <div className=\"section-card-documentation\">\r\n                        <div className=\"section-title-card-doc\">\r\n                          <strong>Identificación oficial</strong>\r\n                          <span>\r\n                            {getTypeIdDocument(dataForm.idEndorsementType)}\r\n                          </span>\r\n                        </div>\r\n                        <div className=\"section-content-card-doc\">\r\n                          <CustomFileUpload\r\n                            acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                            dataDocument={\r\n                              isEmpty(dataDocuments) === false &&\r\n                              isNil(dataDocuments[0]) === false\r\n                                ? dataDocuments[0]\r\n                                : {}\r\n                            }\r\n                            typeDocument={typeDocument}\r\n                          />\r\n                          {(dataForm.idEndorsementType === 1 ||\r\n                            isNil(dataForm.idEndorsementType) === true) && (\r\n                            <CustomFileUpload\r\n                              acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                              dataDocument={\r\n                                isEmpty(dataDocuments) === false &&\r\n                                isNil(dataDocuments[1]) === false\r\n                                  ? dataDocuments[1]\r\n                                  : {}\r\n                              }\r\n                              typeDocument={typeDocument}\r\n                            />\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                      {isOpenSelectRegime === true && (\r\n                        <div className=\"section-card-documentation\">\r\n                          <div className=\"section-title-card-doc\">\r\n                            <strong>Acta de Matrimonio</strong>\r\n                            <span style={{ visibility: \"hidden\" }}>N/A</span>\r\n                          </div>\r\n                          <div className=\"section-content-card-doc\">\r\n                            <CustomFileUpload\r\n                              acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                              dataDocument={\r\n                                isEmpty(dataDocuments) === false &&\r\n                                isNil(dataDocuments[3]) === false\r\n                                  ? dataDocuments[3]\r\n                                  : {}\r\n                              }\r\n                              typeDocument={typeDocument}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                      <div className=\"section-card-documentation\">\r\n                        <div className=\"section-title-card-doc\">\r\n                          <strong>Escrituras de la propiedad</strong>\r\n                          <span style={{ visibility: \"hidden\" }}>N/A</span>\r\n                        </div>\r\n                        <div className=\"section-content-card-doc\">\r\n                          <CustomFileUpload\r\n                            acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                            dataDocument={\r\n                              isEmpty(dataDocuments) === false &&\r\n                              isNil(dataDocuments[2]) === false\r\n                                ? dataDocuments[2]\r\n                                : {}\r\n                            }\r\n                            typeDocument={typeDocument}\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"button_actions\">\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setKeyCollapse(\"5\");\r\n                        }}\r\n                        className=\"button_secondary\"\r\n                      >\r\n                        <span>Regresar</span>\r\n                      </button>\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          setConfirmData(true);\r\n                        }}\r\n                        className=\"button_primary\"\r\n                      >\r\n                        <span>Finalizar</span>\r\n                      </button>\r\n                    </div>\r\n                  </Panel>\r\n                </Collapse>\r\n              </>\r\n            )}\r\n            {(dataForm.hasEndorsement === 0 ||\r\n              dataForm.hasEndorsement === false) && (\r\n              <div className=\"button_actions\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setConfirmData(true);\r\n                  }}\r\n                  className=\"button_primary\"\r\n                >\r\n                  <span>Finalizar</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <p>Información personal</p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <DescriptionItem\r\n                  title=\"¿Cuentas con Aval?\"\r\n                  content={\r\n                    dataForm.hasEndorsement === true ||\r\n                    dataForm.hasEndorsement === 1\r\n                      ? \"Si\"\r\n                      : isNil(dataForm.hasEndorsement) === false\r\n                      ? \"No\"\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              {(dataForm.hasEndorsement === true ||\r\n                dataForm.hasEndorsement === 1) && (\r\n                <>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                    <DescriptionItem\r\n                      title=\"Nombre completo\"\r\n                      content={`${dataForm.endorsementGivenName} ${dataForm.endorsementLastName} ${dataForm.endorsementMothersMaidenName}`}\r\n                    />\r\n                  </Col>\r\n                </>\r\n              )}\r\n            </Row>\r\n            {(dataForm.hasEndorsement === true ||\r\n              dataForm.hasEndorsement === 1) && (\r\n              <>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <DescriptionItem\r\n                      title=\"Teléfono\"\r\n                      content={dataForm.endorsementPhoneNumber}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                    <DescriptionItem\r\n                      title=\"Correo\"\r\n                      content={dataForm.endorsementEmailAddress}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title=\"Nacionalidad\"\r\n                      content={dataForm.idEndorsementNationalityText}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"Identificacion oficial\"\r\n                      content={dataForm.idEndorsementTypeText}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Número de ${dataForm.idEndorsementTypeText}`}\r\n                      content={dataForm.idEndorsementTypeNumber}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                {dataForm.isRequiresPlaceOfIssue === true && (\r\n                  <Row>\r\n                    <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n                    <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n                      <DescriptionItem\r\n                        title={`Lugar de expedición de identificación`}\r\n                        content={dataForm.endorsementPlaceOfIssue}\r\n                      />\r\n                    </Col>\r\n                    <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n                  </Row>\r\n                )}\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title=\"CURP\"\r\n                      content={dataForm.endorsementCitizenId}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"Estado CIvil\"\r\n                      content={dataForm.idEndorsementMaritalStatusText}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  {isOpenSelectRegime === true && (\r\n                    <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                      <DescriptionItem\r\n                        title=\"Régimen\"\r\n                        content={dataForm.idEndorsementMaritalRegimeText}\r\n                      />\r\n                    </Col>\r\n                  )}\r\n                </Row>\r\n                <p>Dirección de la propiedad en garantía</p>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title=\"Calle\"\r\n                      content={dataForm.collateralPropertyStreet}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"Número\"\r\n                      content={dataForm.collateralPropertyStreetNumber}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"Colonia\"\r\n                      content={dataForm.collateralPropertyNeighborhood}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title=\"Municipio/Delegación\"\r\n                      content={dataForm.collateralPropertyCity}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"Estado\"\r\n                      content={dataForm.collateralPropertyState}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"Código postal\"\r\n                      content={dataForm.collateralPropertyZipCode}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <DescriptionItem\r\n                      title=\"Registro público/Folio real de la propiedad\"\r\n                      content={dataForm.publicPropertyRegistry}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <DescriptionItem\r\n                      title=\"Gravamen\"\r\n                      content={\r\n                        isNil(dataForm.endorsementAssessment) === false\r\n                          ? frontFunctions.parseFormatCurrency(\r\n                              dataForm.endorsementAssessment,\r\n                              2,\r\n                              2\r\n                            )\r\n                          : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <p>Escrituras</p>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <DescriptionItem\r\n                      title=\"Número de las escrituras\"\r\n                      content={dataForm.documentNumber}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <DescriptionItem\r\n                      title=\"Fecha de firma de las escrituras\"\r\n                      content={moment(\r\n                        dataForm.documentSignedAt,\r\n                        \"YYYY-MM-DD\"\r\n                      ).format(\"DD MMMM YYYY\")}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <DescriptionItem\r\n                      title=\"Lugar de la firma de las escrituras\"\r\n                      content={dataForm.signedAtPlace}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <DescriptionItem\r\n                      title=\"Número de la notaria\"\r\n                      content={dataForm.notaryOfficeNumber}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title=\"Nombre del notario\"\r\n                      content={dataForm.notaryOfficeNumber}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </>\r\n            )}\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickFinish(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionInfoAval;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx",["522","523"],"import React from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport CustomFileUpload from \"./customFileUpload\";\r\n\r\nconst CustomSubSectionCardDocument = (props) => {\r\n  const { children, title, subtitle, visibleSubtitle } = props;\r\n  return (\r\n    <div className=\"section-card-documentation\">\r\n      <div className=\"section-title-card-doc\">\r\n        <strong>{title}</strong>\r\n        <span\r\n          style={{\r\n            visibility: visibleSubtitle === true ? \"visible\" : \"hidden\",\r\n          }}\r\n        >\r\n          {subtitle}\r\n        </span>\r\n      </div>\r\n      <div className=\"section-content-card-doc\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SectionDocumentation = (props) => {\r\n  const {\r\n    onClickBack,\r\n    onClickNext,\r\n    dataDocuments,\r\n    typeDocument,\r\n    dataForm,\r\n    dataProperties,\r\n  } = props;\r\n\r\n  const getTypeIdDocument = (type) => {\r\n    let word = \"\";\r\n\r\n    switch (type) {\r\n      case 1:\r\n        word = \"IFE/INE Frontal y Vuelta\";\r\n        break;\r\n      case 2:\r\n        word = \"Pasaporte\";\r\n        break;\r\n      case 3:\r\n        word = \"FM3\";\r\n        break;\r\n      default:\r\n        word = \"IFE/INE Frontal y Vuelta\";\r\n        break;\r\n    }\r\n    return word;\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>Documentación</h3>\r\n      <p>\r\n        Selecciona el documento que se te indica, si estás seguro de que es el\r\n        documento correcto haz clic en Subir\r\n      </p>\r\n      {dataForm.requiresCustomerTenantEntInfo === false && (\r\n        <>\r\n          <div className=\"section-top-documentation\">\r\n            <CustomSubSectionCardDocument\r\n              title=\"Selfie\"\r\n              subtitle=\"N/A\"\r\n              visibleSubtitle={false}\r\n            >\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[6]) === false\r\n                    ? dataDocuments[6]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n            </CustomSubSectionCardDocument>\r\n            <CustomSubSectionCardDocument\r\n              title=\"Identificación oficial\"\r\n              subtitle={getTypeIdDocument(dataForm.idType)}\r\n              visibleSubtitle\r\n            >\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[0]) === false\r\n                    ? dataDocuments[0]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n              {(dataForm.idType === 1 || isNil(dataForm.idType) === true) && (\r\n                <CustomFileUpload\r\n                  acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                  dataDocument={\r\n                    isEmpty(dataDocuments) === false &&\r\n                    isNil(dataDocuments[1]) === false\r\n                      ? dataDocuments[1]\r\n                      : {}\r\n                  }\r\n                  typeDocument={typeDocument}\r\n                />\r\n              )}\r\n            </CustomSubSectionCardDocument>\r\n            <CustomSubSectionCardDocument\r\n              title=\"Carta laboral\"\r\n              subtitle=\"Membretada y firmada\"\r\n              visibleSubtitle\r\n            >\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[5]) === false\r\n                    ? dataDocuments[5]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n            </CustomSubSectionCardDocument>\r\n          </div>\r\n          <div className=\"section-bottom-documentation\">\r\n            <CustomSubSectionCardDocument\r\n              title=\"últimos 3 comprobantes de ingreso\"\r\n              subtitle=\"N/A\"\r\n              visibleSubtitle={false}\r\n            >\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[2]) === false\r\n                    ? dataDocuments[2]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[3]) === false\r\n                    ? dataDocuments[3]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[4]) === false\r\n                    ? dataDocuments[4]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n            </CustomSubSectionCardDocument>\r\n            {(dataForm.isOwn === 0 || dataForm.isOwn === false) && (\r\n              <CustomSubSectionCardDocument\r\n                title=\"Contrato de arrendamiento\"\r\n                subtitle=\"sólo caratula\"\r\n                visibleSubtitle\r\n              >\r\n                <CustomFileUpload\r\n                  acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                  dataDocument={\r\n                    isEmpty(dataDocuments) === false &&\r\n                    isNil(dataDocuments[7]) === false\r\n                      ? dataDocuments[7]\r\n                      : {}\r\n                  }\r\n                  typeDocument={typeDocument}\r\n                />\r\n              </CustomSubSectionCardDocument>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n      {dataForm.requiresCustomerTenantEntInfo === true && (\r\n        <>\r\n          <div className=\"section-top-documentation\">\r\n            <CustomSubSectionCardDocument\r\n              title=\"Identificación oficial\"\r\n              subtitle={getTypeIdDocument(dataForm.legalRepIdType)}\r\n              visibleSubtitle\r\n            >\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[0]) === false\r\n                    ? dataDocuments[0]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n              {(dataForm.legalRepIdType === 1 ||\r\n                isNil(dataForm.legalRepIdType) === true) && (\r\n                <CustomFileUpload\r\n                  acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                  dataDocument={\r\n                    isEmpty(dataDocuments) === false &&\r\n                    isNil(dataDocuments[1]) === false\r\n                      ? dataDocuments[1]\r\n                      : {}\r\n                  }\r\n                  typeDocument={typeDocument}\r\n                />\r\n              )}\r\n            </CustomSubSectionCardDocument>\r\n            <CustomSubSectionCardDocument\r\n              title=\"Acta Constitutiva\"\r\n              subtitle=\"N/A\"\r\n              visibleSubtitle={false}\r\n            >\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[5]) === false\r\n                    ? dataDocuments[5]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n            </CustomSubSectionCardDocument>\r\n            <CustomSubSectionCardDocument\r\n              title=\"Testimonio notarial\"\r\n              subtitle=\"N/A\"\r\n              visibleSubtitle={false}\r\n            >\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[6]) === false\r\n                    ? dataDocuments[6]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n            </CustomSubSectionCardDocument>\r\n          </div>\r\n          <div className=\"section-bottom-documentation\">\r\n            <CustomSubSectionCardDocument\r\n              title=\"últimos 3 comprobantes de ingreso\"\r\n              subtitle=\"N/A\"\r\n              visibleSubtitle={false}\r\n            >\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[2]) === false\r\n                    ? dataDocuments[2]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[3]) === false\r\n                    ? dataDocuments[3]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n              <CustomFileUpload\r\n                acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                dataDocument={\r\n                  isEmpty(dataDocuments) === false &&\r\n                  isNil(dataDocuments[4]) === false\r\n                    ? dataDocuments[4]\r\n                    : {}\r\n                }\r\n                typeDocument={typeDocument}\r\n              />\r\n            </CustomSubSectionCardDocument>\r\n            {(dataForm.isOwn === 0 || dataForm.isOwn === false) && (\r\n              <CustomSubSectionCardDocument\r\n                title=\"Contrato de arrendamiento\"\r\n                subtitle=\"sólo caratula\"\r\n                visibleSubtitle\r\n              >\r\n                <CustomFileUpload\r\n                  acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                  dataDocument={\r\n                    isEmpty(dataDocuments) === false &&\r\n                    isNil(dataDocuments[7]) === false\r\n                      ? dataDocuments[7]\r\n                      : {}\r\n                  }\r\n                  typeDocument={typeDocument}\r\n                />\r\n              </CustomSubSectionCardDocument>\r\n            )}\r\n          </div>\r\n        </>\r\n      )}\r\n      <div className=\"button_actions\">\r\n        {/* <button\r\n          type=\"button\"\r\n          onClick={onClickBack}\r\n          className=\"button_secondary\"\r\n        >\r\n          <span>Regresar</span>\r\n        </button> */}\r\n        <button type=\"button\" onClick={onClickNext} className=\"button_primary\">\r\n          <span>Continuar</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionDocumentation;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx",["524","525","526","527","528","529","530"],"import React, { useState, useEffect } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Input, Row, Col, Select, Alert } from \"antd\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionCurrentWork = (props) => {\r\n  const {\r\n    onClickNext,\r\n    dataFormSave,\r\n    frontFunctions,\r\n    dataOccupations,\r\n    dataProperties,\r\n  } = props;\r\n  const initialForm = {\r\n    idOccupationActivity: null,\r\n    idOccupationActivityText: null,\r\n    economicDependents: null,\r\n    companyName: null,\r\n    currentSalary: null,\r\n    currentSalaryFormat: null,\r\n    antiquityTimeRange: null,\r\n    antiquityTimeRangeText: null,\r\n    antiquity: null,\r\n    bossName: null,\r\n    bossEmailAddress: null,\r\n    bossPhoneNumber: null,\r\n    otherIncomes: null,\r\n    otherIncomesDescription: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataFormSave) === false && isEmpty(dataOccupations) === false) {\r\n      const selectDefaultOccupation = dataOccupations.find((row) => {\r\n        return dataFormSave.idOccupationActivity === row.idOccupationActivity;\r\n      });\r\n\r\n      setDataForm({\r\n        ...dataFormSave,\r\n        antiquityTimeRangeText:\r\n          dataFormSave.antiquityTimeRange === \"Y\"\r\n            ? \"Años\"\r\n            : dataFormSave.antiquityTimeRange === \"M\"\r\n            ? \"Meses\"\r\n            : null,\r\n        currentSalaryFormat:\r\n          isNil(dataFormSave.currentSalary) === false\r\n            ? frontFunctions.parseFormatCurrency(\r\n                dataFormSave.currentSalary,\r\n                2,\r\n                2\r\n              )\r\n            : null,\r\n        idOccupationActivityText:\r\n          isNil(selectDefaultOccupation) === false\r\n            ? selectDefaultOccupation.text\r\n            : \"\",\r\n      });\r\n    }\r\n  }, [dataFormSave, dataOccupations]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Información laboral\"\r\n          : \"Confirmar Información laboral\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            {isEmpty(dataProperties) === false && (\r\n              <div className=\"message-typeform-requires\">\r\n                <Alert\r\n                  message={\r\n                    <div style={{ width: \"100%\" }}>\r\n                      Los siguientes campos son requeridos:\r\n                      <br />\r\n                      <ul>\r\n                        {dataProperties.map((row) => {\r\n                          return <li>{row.label}</li>;\r\n                        })}\r\n                      </ul>\r\n                    </div>\r\n                  }\r\n                  type=\"error\"\r\n                />\r\n              </div>\r\n            )}\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Select\r\n                  placeholder=\"Puesto/Ocupación\"\r\n                  showSearch\r\n                  value={dataForm.idOccupationActivity}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idOccupationActivity: value,\r\n                      idOccupationActivityText: option.children,\r\n                    });\r\n                  }}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {isEmpty(dataOccupations) === false &&\r\n                    dataOccupations.map((row) => {\r\n                      return (\r\n                        <Option value={row.idOccupationActivity}>\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={dataForm.economicDependents}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Número de dependientes economicos\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      economicDependents: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Input\r\n                  value={dataForm.companyName}\r\n                  placeholder={\"Nombre de la empresa\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, companyName: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"$\"\r\n                  suffix=\"\"\r\n                  value={dataForm.currentSalary}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Sueldo mensual\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      currentSalary: floatValue,\r\n                      currentSalaryFormat: formattedValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={dataForm.antiquity}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Antiguedad\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({ ...dataForm, antiquity: floatValue });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Select\r\n                  placeholder=\"Periodo\"\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      antiquityTimeRange: value,\r\n                      antiquityTimeRangeText: option.children,\r\n                    });\r\n                  }}\r\n                  value={dataForm.antiquityTimeRange}\r\n                >\r\n                  <Option value={\"M\"} onClick={() => {}}>\r\n                    Meses\r\n                  </Option>\r\n                  <Option value={\"Y\"} onClick={() => {}}>\r\n                    Años\r\n                  </Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"$\"\r\n                  suffix=\"\"\r\n                  value={dataForm.otherIncomes}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Otros ingresos\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      otherIncomes: floatValue,\r\n                      otherIncomesFormat: formattedValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                <textarea\r\n                  style={{\r\n                    background: \"transparent\",\r\n                    borderRadius: 10,\r\n                    fontWeight: \"bold\",\r\n                  }}\r\n                  className=\"ant-input inputLogin\"\r\n                  placeholder=\"Descripción de otros ingresos\"\r\n                  value={\r\n                    isNil(dataForm.otherIncomesDescription) === false\r\n                      ? dataForm.otherIncomesDescription\r\n                      : \"\"\r\n                  }\r\n                  maxlength=\"1000\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      otherIncomesDescription: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Información de tu jefe directo</p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.bossName}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, bossName: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.bossEmailAddress}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      bossEmailAddress: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.bossPhoneNumber}\r\n                  placeholder={\"Teléfono\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, bossPhoneNumber: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              {/* <button\r\n                type=\"button\"\r\n                onClick={onClickBack}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Regresar</span>\r\n              </button> */}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <p>\r\n              Verifica que tu información sea correcta, de lo contrario no\r\n              podras hacer modificaciones.\r\n            </p>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Puesto/Ocupación\"\r\n                  content={dataForm.idOccupationActivityText}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Número de dependientes\"\r\n                  content={dataForm.economicDependents}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Nombre de la empresa\"\r\n                  content={dataForm.companyName}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Sueldo mensual\"\r\n                  content={dataForm.currentSalaryFormat}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Antiguedad\"\r\n                  content={`${dataForm.antiquity} ${dataForm.antiquityTimeRangeText}`}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Nombre de tu jefe\"\r\n                  content={dataForm.bossName}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Correo de tu jefe\"\r\n                  content={dataForm.bossEmailAddress}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionCurrentWork;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx",["531","532"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Input, Row, Col, Select, Tooltip, Radio, Alert } from \"antd\";\r\nimport { AuditOutlined, QuestionCircleOutlined } from \"@ant-design/icons\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionInfoUser = (props) => {\r\n  const {\r\n    onClickNext,\r\n    dataFormSave,\r\n    dataNationalities,\r\n    dataIdTypes,\r\n    dataCommerceSociality,\r\n    dataStates,\r\n    dataProperties,\r\n  } = props;\r\n  const initialForm = {\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    emailAddress: null,\r\n    taxId: null,\r\n    citizenId: null,\r\n    hasCar: null,\r\n    carriagePlate: null,\r\n    idCountryNationality: null,\r\n    idCountryNationalityText: null,\r\n    idType: null,\r\n    idTypeText: null,\r\n    idTypeNumber: null,\r\n    placeOfIssue: null,\r\n    enterpriseIdCommercialSocietyType: null,\r\n    enterpriseIdCommercialSocietyTypeText: null,\r\n    enterpriseIdStatePublicProperty: null,\r\n    enterpriseIdStatePublicPropertyText: null,\r\n    enterprisePublicWrtitingNo: null,\r\n    enterprisePublicBookNo: null,\r\n    enterpriseNotaryName: null,\r\n    enterpriseNotaryOfficeNo: null,\r\n    enterpriseSignedAtPlace: null,\r\n    enterpriseCommercialInvoice: null,\r\n    legalRepGivenName: null,\r\n    legalRepLastName: null,\r\n    legalRepMothersMaidenName: null,\r\n    legalRepPublicWritingNo: null,\r\n    legalRepPublicBookNo: null,\r\n    legalRepNotaryName: null,\r\n    legalRepNotaryOfficeNo: null,\r\n    legalRepSignedAtPlace: null,\r\n    legalRepIdType: null,\r\n    legalRepIdTypeText: null,\r\n    legalRepIdTypeNumber: null,\r\n    NIV: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n  const [visibleComponents, setVisibleComponents] = useState({\r\n    givenName: true,\r\n    lastName: true,\r\n    mothersMaidenName: true,\r\n    idEndorsement: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isEmpty(dataFormSave) === false &&\r\n      isEmpty(dataNationalities) === false &&\r\n      isEmpty(dataIdTypes) === false\r\n    ) {\r\n      const visibleField =\r\n        isNil(dataFormSave.jsonProperties) === false\r\n          ? JSON.parse(dataFormSave.jsonProperties)\r\n          : {};\r\n      if (dataFormSave.requiresCustomerTenantEntInfo === true) {\r\n        const selectDefaultTypeSociety = dataCommerceSociality.find((row) => {\r\n          return (\r\n            dataFormSave.enterpriseIdCommercialSocietyType ===\r\n            row.idCommercialSocietyType\r\n          );\r\n        });\r\n        const selectDefaultLegalIdType = dataIdTypes.find((row) => {\r\n          return dataFormSave.legalRepIdType === row.idType;\r\n        });\r\n        const selectDefaultState = dataStates.find((row) => {\r\n          return dataFormSave.enterpriseIdStatePublicProperty === row.idState;\r\n        });\r\n        setDataForm({\r\n          ...dataFormSave,\r\n          enterpriseIdCommercialSocietyTypeText:\r\n            isNil(selectDefaultTypeSociety) === false\r\n              ? selectDefaultTypeSociety.text\r\n              : \"\",\r\n          legalRepIdTypeText:\r\n            isNil(selectDefaultLegalIdType) === false\r\n              ? selectDefaultLegalIdType.text\r\n              : \"\",\r\n          enterpriseIdStatePublicPropertyText:\r\n            isNil(selectDefaultState) === false ? selectDefaultState.text : \"\",\r\n        });\r\n      } else {\r\n        const selectDefaultNationality = dataNationalities.find((row) => {\r\n          return dataFormSave.idCountryNationality === row.idCountryNationality;\r\n        });\r\n        const selectDefaultIdType = dataIdTypes.find((row) => {\r\n          return dataFormSave.idType === row.idType;\r\n        });\r\n        setDataForm({\r\n          ...dataFormSave,\r\n          idCountryNationalityText:\r\n            isNil(selectDefaultNationality) === false\r\n              ? selectDefaultNationality.text\r\n              : \"\",\r\n          idTypeText:\r\n            isNil(selectDefaultIdType) === false\r\n              ? selectDefaultIdType.text\r\n              : \"\",\r\n          isRequiresPlaceOfIssue:\r\n            isNil(selectDefaultIdType) === false\r\n              ? selectDefaultIdType.requiresPlaceOfIssue\r\n              : null,\r\n        });\r\n      }\r\n      setVisibleComponents({ ...visibleComponents, ...visibleField });\r\n    }\r\n  }, [dataNationalities, dataIdTypes, dataFormSave]);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {isNil(content) === false ? content : \"N/A\"}\r\n    </div>\r\n  );\r\n\r\n  const repeatInfoMoralPerson = (value, data, callback) => {\r\n    if (value === true || value === 1) {\r\n      callback({\r\n        legalRepPublicWritingNo: data.enterprisePublicWrtitingNo,\r\n        legalRepPublicBookNo: data.enterprisePublicBookNo,\r\n        legalRepNotaryName: data.enterpriseNotaryName,\r\n        legalRepNotaryOfficeNo: data.enterpriseNotaryOfficeNo,\r\n        legalRepSignedAtPlace: data.enterpriseSignedAtPlace,\r\n        repeatInfoMoral: value,\r\n      });\r\n    } else {\r\n      callback({\r\n        legalRepPublicWritingNo: null,\r\n        legalRepPublicBookNo: null,\r\n        legalRepNotaryName: null,\r\n        legalRepNotaryOfficeNo: null,\r\n        legalRepSignedAtPlace: null,\r\n        repeatInfoMoral: value,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Información general\"\r\n          : \"Confirmar Información general\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            {isEmpty(dataProperties) === false && (\r\n              <div className=\"message-typeform-requires\">\r\n                <Alert\r\n                  message={\r\n                    <div style={{ width: \"100%\" }}>\r\n                      Los siguientes campos son requeridos:\r\n                      <br />\r\n                      <ul>\r\n                        {dataProperties.map((row) => {\r\n                          return <li>{row.label}</li>;\r\n                        })}\r\n                      </ul>\r\n                    </div>\r\n                  }\r\n                  type=\"error\"\r\n                />\r\n              </div>\r\n            )}\r\n            <Row>\r\n              <Col\r\n                span={visibleComponents.lastName === true ? 8 : 11}\r\n                xs={{ span: 24 }}\r\n                md={{ span: visibleComponents.lastName === true ? 8 : 11 }}\r\n              >\r\n                <Input\r\n                  value={dataForm.givenName}\r\n                  placeholder={\r\n                    visibleComponents.lastName === true\r\n                      ? \"Nombres\"\r\n                      : \"Razón social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    if (visibleComponents.lastName === false) {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, givenName: value });\r\n                    }\r\n                  }}\r\n                  suffix={\r\n                    visibleComponents.lastName === true ? (\r\n                      <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                    ) : (\r\n                      <AuditOutlined />\r\n                    )\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={visibleComponents.lastName === true ? 1 : 2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: visibleComponents.lastName === true ? 1 : 2 }}\r\n              />\r\n              {dataForm.requiresCustomerTenantEntInfo === true && (\r\n                <>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Select\r\n                      placeholder=\"Tipo de Sociedad Mercantil\"\r\n                      showSearch\r\n                      value={dataForm.enterpriseIdCommercialSocietyType}\r\n                      onChange={(value, option) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          enterpriseIdCommercialSocietyType: value,\r\n                          enterpriseIdCommercialSocietyTypeText:\r\n                            option.children,\r\n                        });\r\n                      }}\r\n                      filterOption={(input, option) =>\r\n                        option.children\r\n                          .toLowerCase()\r\n                          .indexOf(input.toLowerCase()) >= 0\r\n                      }\r\n                    >\r\n                      {isEmpty(dataCommerceSociality) === false &&\r\n                        dataCommerceSociality.map((row) => {\r\n                          return (\r\n                            <Option value={row.idCommercialSocietyType}>\r\n                              {row.text}\r\n                            </Option>\r\n                          );\r\n                        })}\r\n                    </Select>\r\n                  </Col>\r\n                </>\r\n              )}\r\n              {visibleComponents.lastName === true && (\r\n                <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                  <Input\r\n                    value={dataForm.lastName}\r\n                    placeholder={\"Apellido paterno\"}\r\n                    onChange={(e) => {\r\n                      // const value = e.target.value;\r\n                      // setDataForm({ ...dataForm, lastName: value });\r\n                    }}\r\n                    suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n                  />\r\n                </Col>\r\n              )}\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              {visibleComponents.mothersMaidenName === true && (\r\n                <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                  <Input\r\n                    value={dataForm.mothersMaidenName}\r\n                    placeholder={\"Apellido materno\"}\r\n                    onChange={(e) => {\r\n                      // const value = e.target.value;\r\n                      // setDataForm({ ...dataForm, mothersMaidenName: value });\r\n                    }}\r\n                    suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n                  />\r\n                </Col>\r\n              )}\r\n            </Row>\r\n            {dataForm.requiresCustomerTenantEntInfo === true && (\r\n              <Row>\r\n                <Col span={10} xs={{ span: 23 }} md={{ span: 10 }}>\r\n                  <Select\r\n                    placeholder=\"Estado de emisión\"\r\n                    showSearch\r\n                    value={dataForm.enterpriseIdStatePublicProperty}\r\n                    onChange={(value, option) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        enterpriseIdStatePublicProperty: value,\r\n                        enterpriseIdStatePublicPropertyText: option.children,\r\n                      });\r\n                    }}\r\n                    filterOption={(input, option) =>\r\n                      option.children\r\n                        .toLowerCase()\r\n                        .indexOf(input.toLowerCase()) >= 0\r\n                    }\r\n                  >\r\n                    {isEmpty(dataStates) === false &&\r\n                      dataStates.map((row) => {\r\n                        return <Option value={row.idState}>{row.text}</Option>;\r\n                      })}\r\n                  </Select>\r\n                </Col>\r\n                <Col span={1} xs={{ span: 1 }} md={{ span: 1 }}>\r\n                  <Tooltip\r\n                    placement=\"top\"\r\n                    title=\"Estado donde se emitió el Registro Público de la Propiedad de la empresa.\"\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        padding: \"5px 0px 0px 5px\",\r\n                      }}\r\n                    >\r\n                      <QuestionCircleOutlined />\r\n                    </div>\r\n                  </Tooltip>\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.enterpriseCommercialInvoice}\r\n                    placeholder=\"Folio Mercantil\"\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        enterpriseCommercialInvoice: value,\r\n                      });\r\n                    }}\r\n                    suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <Row>\r\n              {visibleComponents.phoneNumber === true && (\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.phoneNumber}\r\n                    placeholder={\"Teléfono\"}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, phoneNumber: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              )}\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.emailAddress}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, emailAddress: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {visibleComponents.idCountryNationality === true &&\r\n              visibleComponents.idType === true &&\r\n              visibleComponents.idTypeNumber === true && (\r\n                <>\r\n                  <Row>\r\n                    <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                      <Select\r\n                        placeholder=\"Nacionalidad\"\r\n                        showSearch\r\n                        value={dataForm.idCountryNationality}\r\n                        onChange={(value, option) => {\r\n                          setDataForm({\r\n                            ...dataForm,\r\n                            idCountryNationality: value,\r\n                            idCountryNationalityText: option.children,\r\n                          });\r\n                        }}\r\n                        filterOption={(input, option) =>\r\n                          option.children\r\n                            .toLowerCase()\r\n                            .indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                      >\r\n                        {isEmpty(dataNationalities) === false &&\r\n                          dataNationalities.map((row) => {\r\n                            return (\r\n                              <Option value={row.idCountryNationality}>\r\n                                {row.text}\r\n                              </Option>\r\n                            );\r\n                          })}\r\n                      </Select>\r\n                    </Col>\r\n                    <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                    <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                      <Select\r\n                        placeholder=\"Identificación oficial\"\r\n                        showSearch\r\n                        value={dataForm.idType}\r\n                        onChange={(value, option) => {\r\n                          const valueSelect = option.onClick();\r\n                          setDataForm({\r\n                            ...dataForm,\r\n                            idType: value,\r\n                            idTypeText: option.children,\r\n                            isRequiresPlaceOfIssue:\r\n                              valueSelect.requiresPlaceOfIssue,\r\n                          });\r\n                        }}\r\n                        filterOption={(input, option) =>\r\n                          option.children\r\n                            .toLowerCase()\r\n                            .indexOf(input.toLowerCase()) >= 0\r\n                        }\r\n                      >\r\n                        {isEmpty(dataIdTypes) === false &&\r\n                          dataIdTypes.map((row) => {\r\n                            return (\r\n                              <Option value={row.idType} onClick={() => row}>\r\n                                {row.text}\r\n                              </Option>\r\n                            );\r\n                          })}\r\n                      </Select>\r\n                    </Col>\r\n                    <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                    {isNil(dataForm.idType) === false && (\r\n                      <Col span={10} xs={{ span: 24 }} md={{ span: 10 }}>\r\n                        <Input\r\n                          value={dataForm.idTypeNumber}\r\n                          placeholder={`Número de ${dataForm.idTypeText}`}\r\n                          onChange={(e) => {\r\n                            const value = e.target.value;\r\n                            setDataForm({ ...dataForm, idTypeNumber: value });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                    )}\r\n                  </Row>\r\n                </>\r\n              )}\r\n            {dataForm.isRequiresPlaceOfIssue === true &&\r\n              visibleComponents.idTypeNumber === true && (\r\n                <Row>\r\n                  <Col span={13} xs={{ span: 24 }} md={{ span: 13 }}>\r\n                    <Input\r\n                      value={dataForm.placeOfIssue}\r\n                      placeholder={\"Lugar de expedición de la identificación\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({ ...dataForm, placeOfIssue: value });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.taxId}\r\n                  placeholder={\"RFC con Homoclave\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, taxId: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              {visibleComponents.citizenId === true && (\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.citizenId}\r\n                    placeholder={\"CURP\"}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, citizenId: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              )}\r\n            </Row>\r\n            <Row>\r\n              {visibleComponents.hasCar === true && (\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <div className=\"option-select-radio\">\r\n                    <span\r\n                      style={{\r\n                        color: \"var(--color-primary)\",\r\n                        fontWeight: \"bold\",\r\n                      }}\r\n                    >\r\n                      Tienes Auto\r\n                    </span>\r\n                    <Radio.Group\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({ ...dataForm, hasCar: value });\r\n                      }}\r\n                      value={\r\n                        dataForm.hasCar === true || dataForm.hasCar === 1\r\n                          ? 1\r\n                          : isNil(dataForm.hasCar) === false\r\n                          ? 0\r\n                          : null\r\n                      }\r\n                    >\r\n                      <Radio value={1}>Si</Radio>\r\n                      <Radio value={0}>No</Radio>\r\n                    </Radio.Group>\r\n                  </div>\r\n                </Col>\r\n              )}\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              {(dataForm.hasCar === 1 || dataForm.hasCar === true) && (\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.carriagePlate}\r\n                    placeholder={\"Ingresa las placas\"}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, carriagePlate: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              )}\r\n            </Row>\r\n            {(dataForm.hasCar === 1 || dataForm.hasCar === true) && (\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.NIV}\r\n                    placeholder={\"Número de Identificación Vehicular\"}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, NIV: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            {dataForm.requiresCustomerTenantEntInfo === true && (\r\n              <>\r\n                <p>Información Acta Constitutiva</p>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.enterprisePublicWrtitingNo}\r\n                      placeholder={\"Escritura pública No.\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          enterprisePublicWrtitingNo: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.enterprisePublicBookNo}\r\n                      placeholder={\"Libro\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          enterprisePublicBookNo: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.enterpriseNotaryName}\r\n                      placeholder={\"Nombre del notario\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          enterpriseNotaryName: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.enterpriseNotaryOfficeNo}\r\n                      placeholder={\"Número de notaría\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          enterpriseNotaryOfficeNo: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                    <Input\r\n                      value={dataForm.enterpriseSignedAtPlace}\r\n                      placeholder={\"Lugar de firma de escritura\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          enterpriseSignedAtPlace: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <p>Representante Legal</p>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <Input\r\n                      value={dataForm.legalRepGivenName}\r\n                      placeholder={\"Nombres\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepGivenName: value,\r\n                        });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <Input\r\n                      value={dataForm.legalRepLastName}\r\n                      placeholder={\"Apellido paterno\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepLastName: value,\r\n                        });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <Input\r\n                      value={dataForm.legalRepMothersMaidenName}\r\n                      placeholder={\"Apellido materno\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepMothersMaidenName: value,\r\n                        });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Select\r\n                      placeholder=\"Identificación oficial\"\r\n                      showSearch\r\n                      value={dataForm.legalRepIdType}\r\n                      onChange={(value, option) => {\r\n                        const valueSelect = option.onClick();\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepIdType: value,\r\n                          legalRepIdTypeText: option.children,\r\n                        });\r\n                      }}\r\n                      filterOption={(input, option) =>\r\n                        option.children\r\n                          .toLowerCase()\r\n                          .indexOf(input.toLowerCase()) >= 0\r\n                      }\r\n                    >\r\n                      {isEmpty(dataIdTypes) === false &&\r\n                        dataIdTypes.map((row) => {\r\n                          return (\r\n                            <Option value={row.idType} onClick={() => row}>\r\n                              {row.text}\r\n                            </Option>\r\n                          );\r\n                        })}\r\n                    </Select>\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.legalRepIdTypeNumber}\r\n                      placeholder={`Número de ${\r\n                        isNil(dataForm.legalRepIdTypeText) === false\r\n                          ? dataForm.legalRepIdTypeText\r\n                          : \"\"\r\n                      }`}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepIdTypeNumber: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <p>\r\n                  Información del documento que acredita la legalidad del\r\n                  representante\r\n                </p>\r\n                <Row>\r\n                  <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                    <div className=\"option-select-radio\">\r\n                      <span\r\n                        style={{\r\n                          color: \"var(--color-primary)\",\r\n                          fontWeight: \"bold\",\r\n                        }}\r\n                      >\r\n                        ¿La legalidad del representante está indicada en el Acta\r\n                        Constitutiva?\r\n                      </span>\r\n                      <Radio.Group\r\n                        onChange={(e) => {\r\n                          const value = e.target.value;\r\n                          repeatInfoMoralPerson(value, dataForm, (newData) => {\r\n                            setDataForm({ ...dataForm, ...newData });\r\n                          });\r\n                        }}\r\n                        value={\r\n                          dataForm.repeatInfoMoral === true ||\r\n                          dataForm.repeatInfoMoral === 1\r\n                            ? 1\r\n                            : isNil(dataForm.repeatInfoMoral) === false\r\n                            ? 0\r\n                            : null\r\n                        }\r\n                      >\r\n                        <Radio value={1}>Si</Radio>\r\n                        <Radio value={0}>No, es diferente</Radio>\r\n                      </Radio.Group>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.legalRepPublicWritingNo}\r\n                      placeholder=\"Escritura pública No.\"\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepPublicWritingNo: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.legalRepPublicBookNo}\r\n                      placeholder=\"Libro\"\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepPublicBookNo: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.legalRepNotaryName}\r\n                      placeholder={\"Nombre del notario\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepNotaryName: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.legalRepNotaryOfficeNo}\r\n                      placeholder={\"Número de notaría\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepNotaryOfficeNo: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                    <Input\r\n                      value={dataForm.legalRepSignedAtPlace}\r\n                      placeholder={\"Lugar de firma de escritura\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          legalRepSignedAtPlace: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </>\r\n            )}\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <p>\r\n              Verifica que tu información sea correcta, de lo contrario no\r\n              podras hacer modificaciones.\r\n            </p>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title={\r\n                    visibleComponents.lastName === true\r\n                      ? \"Nombre completo\"\r\n                      : \"Razón social\"\r\n                  }\r\n                  content={`${dataForm.givenName} ${\r\n                    visibleComponents.lastName === true ? dataForm.lastName : \"\"\r\n                  } ${\r\n                    visibleComponents.lastName === true\r\n                      ? dataForm.mothersMaidenName\r\n                      : \"\"\r\n                  }`}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Teléfono\"\r\n                  content={dataForm.phoneNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Correo\"\r\n                  content={dataForm.emailAddress}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {dataForm.requiresCustomerTenantEntInfo === false && (\r\n              <>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title=\"Nacionalidad\"\r\n                      content={dataForm.idCountryNationalityText}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"Identificación oficial\"\r\n                      content={dataForm.idTypeText}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Número de ${dataForm.idTypeText}`}\r\n                      content={dataForm.idTypeNumber}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </>\r\n            )}\r\n            {dataForm.isRequiresPlaceOfIssue === true &&\r\n              dataForm.requiresCustomerTenantEntInfo === false && (\r\n                <Row>\r\n                  <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n                  <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n                    <DescriptionItem\r\n                      title={`Lugar de expedición de identificación`}\r\n                      content={dataForm.placeOfIssue}\r\n                    />\r\n                  </Col>\r\n                  <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n                </Row>\r\n              )}\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"RFC con Homoclave\"\r\n                  content={dataForm.taxId}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              {dataForm.requiresCustomerTenantEntInfo === true && (\r\n                <>\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"Sociedad Mercantil\"\r\n                      content={dataForm.enterpriseIdCommercialSocietyTypeText}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"Folio Mercantil\"\r\n                      content={dataForm.enterpriseCommercialInvoice}\r\n                    />\r\n                  </Col>\r\n                </>\r\n              )}\r\n              {dataForm.requiresCustomerTenantEntInfo === false && (\r\n                <>\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title=\"CURP\"\r\n                      content={dataForm.citizenId}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={3} xs={{ span: 24 }} md={{ span: 3 }}>\r\n                    <DescriptionItem\r\n                      title=\"Tienes Auto\"\r\n                      content={\r\n                        dataForm.hasCar === true || dataForm.hasCar === 1\r\n                          ? \"Si\"\r\n                          : isNil(dataForm.hasCar) === false\r\n                          ? \"No\"\r\n                          : null\r\n                      }\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  {(dataForm.hasCar === true || dataForm.hasCar === 1) && (\r\n                    <Col span={3} xs={{ span: 24 }} md={{ span: 3 }}>\r\n                      <DescriptionItem\r\n                        title=\"Placas\"\r\n                        content={dataForm.carriagePlate}\r\n                      />\r\n                    </Col>\r\n                  )}\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                </>\r\n              )}\r\n            </Row>\r\n            {dataForm.requiresCustomerTenantEntInfo === true && (\r\n              <>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title={`Estado de emisión`}\r\n                      content={dataForm.enterpriseIdStatePublicPropertyText}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <p style={{ textAlign: \"center\" }}>\r\n                  Información Acta Constitutiva\r\n                </p>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title={`Número de escritura pública`}\r\n                      content={dataForm.enterprisePublicWrtitingNo}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Libro`}\r\n                      content={dataForm.enterprisePublicBookNo}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Nombre del Notario`}\r\n                      content={dataForm.enterpriseNotaryName}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title={`Número de Notaría`}\r\n                      content={dataForm.enterpriseNotaryOfficeNo}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Lugar de Firma de escritura`}\r\n                      content={dataForm.enterprisePublicBookNo}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <p style={{ textAlign: \"center\" }}>Representante Legal</p>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title={`Nombre`}\r\n                      content={dataForm.legalRepGivenName}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Apellido paterno`}\r\n                      content={dataForm.legalRepLastName}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Apellido materno`}\r\n                      content={dataForm.legalRepMothersMaidenName}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title={`Identificación oficial`}\r\n                      content={dataForm.legalRepIdTypeText}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Número de ${dataForm.legalRepIdTypeText}`}\r\n                      content={dataForm.legalRepIdTypeNumber}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title={`Número de escritura pública`}\r\n                      content={dataForm.legalRepPublicWritingNo}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Libro`}\r\n                      content={dataForm.legalRepPublicBookNo}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Nombre del Notario`}\r\n                      content={dataForm.legalRepNotaryName}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <DescriptionItem\r\n                      title={`Número de Notaría`}\r\n                      content={dataForm.legalRepNotaryOfficeNo}\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <DescriptionItem\r\n                      title={`Lugar de Firma de escritura`}\r\n                      content={dataForm.legalRepSignedAtPlace}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </>\r\n            )}\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionInfoUser;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx",["533","534","535","536"],"import React, { useState, useEffect } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Input, Row, Col, Select, Tooltip, Radio, Alert } from \"antd\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionCurrentAddress = (props) => {\r\n  const {\r\n    onClickNext,\r\n    dataFormSave,\r\n    dataZipCatalog,\r\n    onChangeZipCode,\r\n    dataZipCodeAdress,\r\n    dataProperties,\r\n  } = props;\r\n  const initialForm = {\r\n    street: null,\r\n    suite: null,\r\n    streetNumber: null,\r\n    idZipCode: null,\r\n    zipCode: null,\r\n    city: null,\r\n    state: null,\r\n    neighborhood: null,\r\n    isOwn: null,\r\n    currentTimeRange: null,\r\n    currentTimeRangeText: null,\r\n    currentTime: null,\r\n    dateChangeAddress: null,\r\n    lessorFullName: null,\r\n    lessorPhoneNumber: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataFormSave) === false) {\r\n      setDataForm({\r\n        ...dataFormSave,\r\n        currentTimeRangeText:\r\n          dataFormSave.currentTimeRange === \"Y\"\r\n            ? \"Años\"\r\n            : dataFormSave.currentTimeRange === \"M\"\r\n            ? \"Meses\"\r\n            : null,\r\n      });\r\n      onChangeZipCode(dataFormSave.zipCode);\r\n    }\r\n  }, [dataFormSave]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        state: dataZipCodeAdress.state,\r\n        city: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Domicilio actual\"\r\n          : \"Confirmar Domicilio actual\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            {isEmpty(dataProperties) === false && (\r\n              <div className=\"message-typeform-requires\">\r\n                <Alert\r\n                  message={\r\n                    <div style={{ width: \"100%\" }}>\r\n                      Los siguientes campos son requeridos:\r\n                      <br />\r\n                      <ul>\r\n                        {dataProperties.map((row) => {\r\n                          return <li>{row.label}</li>;\r\n                        })}\r\n                      </ul>\r\n                    </div>\r\n                  }\r\n                  type=\"error\"\r\n                />\r\n              </div>\r\n            )}\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Input\r\n                  value={dataForm.street}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, street: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.streetNumber}\r\n                  placeholder={\"Número\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, streetNumber: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.zipCode}\r\n                  placeholder={\"Código postal\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    if (value.length >= 5) {\r\n                      setDataForm({ ...dataForm, zipCode: value });\r\n                      onChangeZipCode(e.target.value);\r\n                    } else {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: null,\r\n                        idZipCode: null,\r\n                        zipCode: value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.state}\r\n                  placeholder={\"Estado\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.city}\r\n                  placeholder={\"Municipio/Delegación\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                {isOpenInput === false ? (\r\n                  <Select\r\n                    placeholder=\"Colonia\"\r\n                    value={dataForm.idZipCode}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setIsOpenInput(dataSelect.isOpen);\r\n                      if (dataSelect.isOpen === true) {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: null,\r\n                          idZipCode: value,\r\n                        });\r\n                      } else {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: option.children,\r\n                          idZipCode: value,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataZipCatalog) === false &&\r\n                      dataZipCatalog.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idZipCode}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.neighborhood}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                ) : (\r\n                  <Input\r\n                    value={dataForm.neighborhood}\r\n                    placeholder={\"Indicar Colonia\"}\r\n                    suffix={\r\n                      <Tooltip title=\"Cerrar\">\r\n                        <CloseOutlined\r\n                          style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                          onClick={() => {\r\n                            setIsOpenInput(false);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idZipCode: null,\r\n                              neighborhood: null,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                    }\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    La propiedad actual es\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, isOwn: e.target.value });\r\n                    }}\r\n                    value={\r\n                      dataForm.isOwn === 1 || dataForm.isOwn === true\r\n                        ? 1\r\n                        : isNil(dataForm.isOwn) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Propia</Radio>\r\n                    <Radio value={0}>Rentada</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            {(dataForm.isOwn === 0 || dataForm.isOwn === false) && (\r\n              <Row>\r\n                <Col span={13} xs={{ span: 24 }} md={{ span: 13 }}>\r\n                  <Input\r\n                    value={dataForm.lessorFullName}\r\n                    placeholder={\"Nombre del arrendador\"}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, lessorFullName: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={9} xs={{ span: 24 }} md={{ span: 9 }}>\r\n                  <Input\r\n                    value={dataForm.lessorPhoneNumber}\r\n                    placeholder={\"Teléfono del arrendador\"}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, lessorPhoneNumber: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <NumberFormat\r\n                      id={null}\r\n                      customInput={Input}\r\n                      thousandSeparator=\",\"\r\n                      decimalSeparator=\".\"\r\n                      decimalPrecision={2}\r\n                      allowNegative={false}\r\n                      prefix=\"\"\r\n                      suffix=\"\"\r\n                      value={dataForm.currentTime}\r\n                      className=\"inputLogin\"\r\n                      floatingLabelText=\"\"\r\n                      isVisible\r\n                      toBlock={false}\r\n                      disable={false}\r\n                      placeholder=\"Tiempo habitando\"\r\n                      onValueChange={(values) => {\r\n                        const { formattedValue, value, floatValue } = values;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          currentTime: floatValue,\r\n                        });\r\n                      }}\r\n                      onClick={(event) => {}}\r\n                      onFocus={(event) => {}}\r\n                      onBlur={(event) => {}}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Select\r\n                      placeholder=\"Periodo\"\r\n                      onChange={(value, option) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          currentTimeRange: value,\r\n                          currentTimeRangeText: option.children,\r\n                        });\r\n                      }}\r\n                      value={dataForm.currentTimeRange}\r\n                    >\r\n                      <Option value={\"M\"} onClick={() => {}}>\r\n                        Meses\r\n                      </Option>\r\n                      <Option value={\"Y\"} onClick={() => {}}>\r\n                        Años\r\n                      </Option>\r\n                    </Select>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n            {/* <Row>\r\n              <Col span={14} xs={{ span: 24 }} md={{ span: 14 }}>\r\n                <DatePicker\r\n                  value={\r\n                    isNil(dataForm.dateChangeAddress) === false\r\n                      ? moment(dataForm.dateChangeAddress, \"YYYY-MM-DD\")\r\n                      : null\r\n                  }\r\n                  placeholder=\"Fecha de cambio proximo domicilio\"\r\n                  onChange={(momentFormat, date) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      dateChangeAddress: moment(momentFormat).format(\r\n                        \"YYYY-MM-DD\"\r\n                      ),\r\n                    });\r\n                  }}\r\n                  format=\"DD MMMM YYYY\"\r\n                />\r\n              </Col>\r\n            </Row> */}\r\n            <div className=\"button_actions\">\r\n              {/* <button\r\n                type=\"button\"\r\n                onClick={onClickBack}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Regresar</span>\r\n              </button> */}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <p>\r\n              Verifica que tu información sea correcta, de lo contrario no\r\n              podras hacer modificaciones.\r\n            </p>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem title=\"Calle\" content={dataForm.street} />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Número\"\r\n                  content={dataForm.streetNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Colonia\"\r\n                  content={dataForm.neighborhood}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Municipio/Delegación\"\r\n                  content={dataForm.city}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem title=\"Estado\" content={dataForm.state} />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Código postal\"\r\n                  content={dataForm.zipCode}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"La propiedad es\"\r\n                  content={\r\n                    dataForm.isOwn === 1 || dataForm.isOwn === true\r\n                      ? \"Propia\"\r\n                      : isNil(dataForm.isOwn) === false\r\n                      ? \"Rentada\"\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                <DescriptionItem\r\n                  title=\"Tiempo habitando\"\r\n                  content={`${dataForm.currentTime} ${dataForm.currentTimeRangeText}`}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              {/* <Col span={9} xs={{ span: 24 }} md={{ span: 9 }}>\r\n                <DescriptionItem\r\n                  title=\"Fecha de cambio proximo domicilio\"\r\n                  content={moment(\r\n                    dataForm.dateChangeAddress,\r\n                    \"YYYY-MM-DD\"\r\n                  ).format(\"DD MMMM YYYY\")}\r\n                />\r\n              </Col> */}\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionCurrentAddress;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionDepositGuarantee.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionCardOwner.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionStatsChart.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx",["537","538"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customReference.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Leads\\leads.jsx",["539","540","541"],"import React, { useEffect, useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Table, Tag, Menu, Dropdown, Button, message } from \"antd\";\r\nimport Tickets from \"../../assets/icons/tickets.svg\";\r\nimport Calling from \"../../assets/icons/Calling.svg\";\r\nimport CallMissed from \"../../assets/icons/CallMissed.svg\";\r\nimport Register from \"../../assets/icons/Register.svg\";\r\nimport UserAccept from \"../../assets/icons/UserAccept.svg\";\r\nimport IconDanger from \"../../assets/icons/Danger.svg\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetLandingProspectStats,\r\n  callGetLandingProspectCoincidences,\r\n  callGetAllProspectStatus,\r\n  callUpdateLandingProspectStatus,\r\n} from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst LeadsLandingPage = (props) => {\r\n  const {\r\n    dataProfile,\r\n    callGetLandingProspectStats,\r\n    callGetLandingProspectCoincidences,\r\n    callGetAllProspectStatus,\r\n    callUpdateLandingProspectStatus,\r\n  } = props;\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataStats, setDataStats] = useState({});\r\n  const [dataProspectStatus, setDataProspectStatus] = useState([]);\r\n\r\n  const arrayIconst = {\r\n    Tickets,\r\n    Calling,\r\n    CallMissed,\r\n    Register,\r\n    UserAccept,\r\n    IconDanger,\r\n  };\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetLandingProspectCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetLandingProspectCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetLandingProspectStats = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetLandingProspectStats({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataStats(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllProspectStatus = async (id = null) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllProspectStatus({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idLandingProspect: id,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataProspectStatus(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallUpdateLandingProspectStatus = async (idStatus, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callUpdateLandingProspectStatus(\r\n        {\r\n          idProspectStatus: idStatus,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n      await handlerCallGetLandingProspectCoincidences();\r\n      handlerCallGetLandingProspectStats();\r\n      showMessageStatusApi(\r\n        \"Se actualizó correctamente el estatus\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Nombre\",\r\n      dataIndex: \"fullName\",\r\n      key: \"fullName\",\r\n      width: 200,\r\n    },\r\n    {\r\n      title: \"Teléfono\",\r\n      dataIndex: \"phoneNumber\",\r\n      key: \"phoneNumber\",\r\n    },\r\n    {\r\n      title: \"Correo\",\r\n      dataIndex: \"emailAddress\",\r\n      key: \"emailAddress\",\r\n    },\r\n    {\r\n      title: \"Fecha de pre-registro\",\r\n      dataIndex: \"requestedAt\",\r\n      key: \"requestedAt\",\r\n      width: 200,\r\n    },\r\n    {\r\n      title: \"Prospecto a\",\r\n      dataIndex: \"prospectType\",\r\n      key: \"prospectType\",\r\n    },\r\n    {\r\n      title: \"Póliza\",\r\n      dataIndex: \"policy\",\r\n      key: \"policy\",\r\n    },\r\n    {\r\n      title: \"Renta\",\r\n      dataIndex: \"budgeAmount\",\r\n      key: \"budgeAmount\",\r\n    },\r\n    {\r\n      title: \"Cotización\",\r\n      dataIndex: \"policyAmount\",\r\n      key: \"policyAmount\",\r\n    },\r\n    {\r\n      title: \"Atendido por\",\r\n      dataIndex: \"lastUpdatedBy\",\r\n      key: \"lastUpdatedBy\",\r\n    },\r\n    {\r\n      title: \"Estatus\",\r\n      dataIndex: \"prospectStatus\",\r\n      key: \"prospectStatus\",\r\n      fixed: \"right\",\r\n      render: (status, record) => {\r\n        const style = record.prospectStatusStyle;\r\n        const parseStyle =\r\n          isNil(style) === false && isEmpty(style) === false\r\n            ? JSON.parse(style)\r\n            : {};\r\n        return (\r\n          <span>\r\n            <Tag\r\n              color={\r\n                isEmpty(parseStyle) === false &&\r\n                isNil(parseStyle.color) === false\r\n                  ? parseStyle.color\r\n                  : \"gray\"\r\n              }\r\n            >\r\n              {status}\r\n            </Tag>\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Asignar\",\r\n      dataIndex: \"idLandingProspect\",\r\n      key: \"idLandingProspect\",\r\n      fixed: \"right\",\r\n      render: (asign, record) => {\r\n        return (\r\n          <Dropdown\r\n            overlay={\r\n              <Menu onClick={(value, option) => {}}>\r\n                {isEmpty(dataProspectStatus) === false &&\r\n                  dataProspectStatus.map((row) => {\r\n                    return (\r\n                      <Menu.Item\r\n                        key={row.idProspectStatus}\r\n                        onClick={() => {\r\n                          handlerCallUpdateLandingProspectStatus(\r\n                            row.idProspectStatus,\r\n                            record.idLandingProspect\r\n                          );\r\n                        }}\r\n                      >\r\n                        <a>{row.prospectStatus}</a>\r\n                      </Menu.Item>\r\n                    );\r\n                  })}\r\n              </Menu>\r\n            }\r\n            trigger={[\"click\"]}\r\n          >\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size=\"small\"\r\n              onClick={() => {}}\r\n            >\r\n              Asignar\r\n            </Button>\r\n          </Dropdown>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    handlerCallGetLandingProspectCoincidences();\r\n    handlerCallGetLandingProspectStats();\r\n    handlerCallGetAllProspectStatus();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div\r\n          className=\"indicators-amount-renter\"\r\n          style={{\r\n            justifyContent: \"space-around\",\r\n            flexWrap: \"wrap\",\r\n          }}\r\n        >\r\n          {isEmpty(dataStats) === false &&\r\n            dataStats.map((row) => {\r\n              const style = row.style;\r\n              const parseStyle =\r\n                isNil(style) === false && isEmpty(style) === false\r\n                  ? JSON.parse(style)\r\n                  : {};\r\n              const color =\r\n                isEmpty(parseStyle) === false &&\r\n                isNil(parseStyle.color) === false\r\n                  ? parseStyle.color\r\n                  : \"gray\";\r\n              const icon =\r\n                isEmpty(parseStyle) === false &&\r\n                isNil(parseStyle.icon) === false\r\n                  ? parseStyle.icon\r\n                  : \"IconDanger\";\r\n              return (\r\n                <div\r\n                  className=\"cards-amount-renter\"\r\n                  style={{ marginBottom: 15 }}\r\n                >\r\n                  <div\r\n                    className=\"elipse-icon\"\r\n                    style={{\r\n                      background: color,\r\n                      opacity: \"1\",\r\n                      zIndex: \"0\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={arrayIconst[icon]}\r\n                      alt=\"icon\"\r\n                      width=\"20px\"\r\n                      style={{ opacity: \"1\", zIndex: \"1\" }}\r\n                    ></img>\r\n                  </div>\r\n                  <h2>{row.stat}</h2>\r\n                  <span>{row.prospectStatus}</span>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n        <div className=\"main-information-user-admin\">\r\n          <div className=\"renter-card-information total-width\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Leads</span>\r\n            </div>\r\n            <div className=\"section-information-renters\">\r\n              <Table\r\n                columns={columns}\r\n                dataSource={dataCoincidences}\r\n                className=\"table-users-hfy\"\r\n                size=\"small\"\r\n                bordered\r\n                scroll={{ x: 2000 }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetLandingProspectStats: (data) =>\r\n    dispatch(callGetLandingProspectStats(data)),\r\n  callGetLandingProspectCoincidences: (data) =>\r\n    dispatch(callGetLandingProspectCoincidences(data)),\r\n  callGetAllProspectStatus: (data) => dispatch(callGetAllProspectStatus(data)),\r\n  callUpdateLandingProspectStatus: (data, id) =>\r\n    dispatch(callUpdateLandingProspectStatus(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LeadsLandingPage);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\agents.jsx",["542","543","544","545","546","547"],"import React, { useEffect, useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Table, Tag, Menu, Dropdown, Button, message } from \"antd\";\r\nimport Agents from \"../../assets/icons/agent.svg\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport { callGetCustomerAgentCoincidences } from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst AgentsSystem = (props) => {\r\n  const { callGetCustomerAgentCoincidences, dataProfile } = props;\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataTotalAgents, setDataTotalAgents] = useState(0);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Número de asesor\",\r\n      dataIndex: \"agentNo\",\r\n      key: \"agentNo\",\r\n      fixed: \"left\",\r\n    },\r\n    {\r\n      title: \"Nombre\",\r\n      dataIndex: \"fullName\",\r\n      key: \"fullName\",\r\n      width: 200,\r\n    },\r\n    {\r\n      title: \"Teléfono\",\r\n      dataIndex: \"phoneNumber\",\r\n      key: \"phoneNumber\",\r\n    },\r\n    {\r\n      title: \"Correo\",\r\n      dataIndex: \"emailAddress\",\r\n      key: \"emailAddress\",\r\n    },\r\n    {\r\n      title: \"Inmobiliaria\",\r\n      dataIndex: \"realState\",\r\n      key: \"realState\",\r\n      width: 200,\r\n    },\r\n    {\r\n      title: \"Efectividad\",\r\n      dataIndex: \"percentCompleted\",\r\n      key: \"percentCompleted\",\r\n    },\r\n    {\r\n      title: \"Comisiones Primera vez\",\r\n      dataIndex: \"totalCommissionsAmount\",\r\n      key: \"totalCommissionsAmount\",\r\n    },\r\n    {\r\n      title: \"Comisión por renovación\",\r\n      dataIndex: \"totalRenewalsAmount\",\r\n      key: \"totalRenewalsAmount\",\r\n    },\r\n    {\r\n      title: \"Comisión global\",\r\n      dataIndex: \"grandTotalCommissionsAmount\",\r\n      key: \"grandTotalCommissionsAmount\",\r\n    },\r\n    {\r\n      title: \"Última comisión\",\r\n      dataIndex: \"lastCommissionAt\",\r\n      key: \"lastCommissionAt\",\r\n    },\r\n  ];\r\n\r\n  const handlerCallGetCustomerAgentCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerAgentCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      const totalAgents =\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult[0]) === false &&\r\n        isNil(responseResult[0].totalAgents) === false\r\n          ? responseResult[0].totalAgents\r\n          : 0;\r\n      setDataTotalAgents(totalAgents);\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetCustomerAgentCoincidences();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={Agents} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTotalAgents}</h2>\r\n            <span>Total de asesores</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user-admin\">\r\n          <div className=\"renter-card-information total-width\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Asesores</span>\r\n            </div>\r\n            <div className=\"section-information-renters\">\r\n              <Table\r\n                columns={columns}\r\n                dataSource={dataCoincidences}\r\n                className=\"table-users-hfy\"\r\n                size=\"small\"\r\n                bordered\r\n                scroll={{ x: 1500 }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetCustomerAgentCoincidences: (data) =>\r\n    dispatch(callGetCustomerAgentCoincidences(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AgentsSystem);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Attorney\\attorney.jsx",["548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567","568"],"import React, { useState, useEffect } from \"react\";\r\nimport Magnifier from \"react-magnifier\";\r\nimport { connect } from \"react-redux\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  Layout,\r\n  Table,\r\n  Tag,\r\n  Menu,\r\n  Dropdown,\r\n  Modal,\r\n  Button,\r\n  message,\r\n  Tooltip,\r\n  Timeline,\r\n} from \"antd\";\r\nimport {\r\n  CheckSquareOutlined,\r\n  DownloadOutlined,\r\n  CheckCircleTwoTone,\r\n  EditTwoTone,\r\n  QuestionCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  callGetLegalContractCoincidences,\r\n  callGetContractDocument,\r\n  callGetCustomerMessage,\r\n} from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport DocumentIcon from \"../../assets/icons/DocumentsIcon.svg\";\r\nimport Lock from \"../../assets/icons/Lock.svg\";\r\nimport Arrow from \"../../assets/icons/Arrow.svg\";\r\nimport SectionUploadDocument from \"../Admin/sections/sectionUploadDocuments\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Attorney = (props) => {\r\n  const {\r\n    history,\r\n    dataProfile,\r\n    callGetLegalContractCoincidences,\r\n    callGetContractDocument,\r\n    callGetCustomerMessage,\r\n    setDataUserProfile,\r\n  } = props;\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [isVisibleAddDocs, setIsVisibleAddDocs] = useState(false);\r\n  const [isVisibleViewImage, setIsVisibleViewImage] = useState(false);\r\n  const [isVisibleMeessages, setIsVisibleMeessages] = useState(false);\r\n  const [dataDocuments, setDataDocuments] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [documentUrl, setDocumentUrl] = useState({});\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallContractDocument = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractDocument({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: null,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocuments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idCustomer: data.idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        idContract: data.idContract,\r\n        idCustomerTenant: data.idCustomerTenant,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetLegalContractCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetLegalContractCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Folio\",\r\n      dataIndex: \"hfInvoice\",\r\n      key: \"hfInvoice\",\r\n      fixed: \"left\",\r\n      render: (label, record) => {\r\n        const recorsStyle =\r\n          isNil(record.hfInvoiceStyle) === false &&\r\n          isEmpty(record.hfInvoiceStyle) === false\r\n            ? JSON.parse(record.hfInvoiceStyle)\r\n            : {};\r\n        return <span style={recorsStyle}>{label}</span>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Partes involucradas\",\r\n      fixed: \"left\",\r\n      children: [\r\n        {\r\n          title: \"Arrendador\",\r\n          dataIndex: \"customerFullName\",\r\n          key: \"customerFullName\",\r\n          width: 200,\r\n          fixed: \"left\",\r\n          render: (name, record) => {\r\n            return (\r\n              <Dropdown\r\n                overlay={\r\n                  <Menu\r\n                    onClick={async (value) => {\r\n                      await setDataUserProfile({\r\n                        ...dataProfile,\r\n                        idCustomerTenant: null,\r\n                        idCustomerTF: record.idCustomer,\r\n                        idCustomer: record.idCustomer,\r\n                        idContract: record.idContract,\r\n                      });\r\n                      history.push(`/websystem/typeform-owner/${value.key}`);\r\n                    }}\r\n                  >\r\n                    <Menu.Item key=\"0\">\r\n                      <a>Información personal</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"1\">\r\n                      <a>Inmueble a rentar</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\">\r\n                      <a>Póliza</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"3\">\r\n                      <a>Datos bancarios</a>\r\n                    </Menu.Item>\r\n                  </Menu>\r\n                }\r\n                trigger={[\"click\"]}\r\n              >\r\n                <a>{name}</a>\r\n              </Dropdown>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          title: \"Arrendatario\",\r\n          dataIndex: \"customerTenantFullName\",\r\n          key: \"customerTenantFullName\",\r\n          width: 200,\r\n          fixed: \"left\",\r\n          render: (name, record) => {\r\n            return (\r\n              <Dropdown\r\n                overlay={\r\n                  <Menu\r\n                    onClick={async (value) => {\r\n                      await setDataUserProfile({\r\n                        ...dataProfile,\r\n                        idCustomerTenantTF: record.idCustomerTenant,\r\n                        idCustomerTF: record.idCustomer,\r\n                        idContract: record.idContract,\r\n                      });\r\n                      history.push(`/websystem/typeform-user/${value.key}`);\r\n                    }}\r\n                  >\r\n                    <Menu.Item key=\"0\">\r\n                      <a>Información personal</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"1\">\r\n                      <a>Dirección actual</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\">\r\n                      <a>Información laboral</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"3\">\r\n                      <a>Referencias</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"4\">\r\n                      <a>Documentación</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"5\">\r\n                      <a>Información aval</a>\r\n                    </Menu.Item>\r\n                  </Menu>\r\n                }\r\n                trigger={[\"click\"]}\r\n              >\r\n                <a>{name}</a>\r\n              </Dropdown>\r\n            );\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Conversaciones\",\r\n      dataIndex: \"messages\",\r\n      key: \"messages\",\r\n      align: \"center\",\r\n      render: (status, record) => {\r\n        return (\r\n          <div>\r\n            <Button\r\n              type=\"link\"\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setIsVisibleMeessages(true);\r\n                setIsVisibleViewImage(true);\r\n                handlerCallGetCustomerMessage(record);\r\n              }}\r\n            >\r\n              Ver\r\n            </Button>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          Tipo de contrato\r\n          <br />\r\n          Estado / Propietario - Inquilino / Obligado S. / Aval\r\n        </div>\r\n      ),\r\n      dataIndex: \"digitalContractTemplate\",\r\n      key: \"digitalContractTemplate\",\r\n      width: 350,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Contrato\",\r\n      children: [\r\n        {\r\n          title: \"Estatus\",\r\n          dataIndex: \"contractStatus\",\r\n          key: \"contractStatus\",\r\n          align: \"center\",\r\n          render: (status, record) => {\r\n            return (\r\n              <span>\r\n                <Tag color={record.contractStatusStyle} key=\"1\">\r\n                  {status}\r\n                </Tag>\r\n              </span>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          title: \"Documento\",\r\n          dataIndex: \"infoContractDocument\",\r\n          key: \"infoContractDocument\",\r\n          align: \"center\",\r\n          render: (doc, record) => {\r\n            const dataDocument =\r\n              isNil(doc) === false && isEmpty(doc) === false\r\n                ? JSON.parse(doc)\r\n                : [];\r\n            const dataObjectDocument =\r\n              isEmpty(dataDocument) === false &&\r\n              isNil(dataDocument[0]) === false\r\n                ? dataDocument[0]\r\n                : {};\r\n            const documentId =\r\n              isEmpty(dataObjectDocument.idDocument) === false &&\r\n              isNil(dataObjectDocument.idDocument) === false\r\n                ? dataObjectDocument.idDocument\r\n                : \"\";\r\n            const bucketSource =\r\n              isEmpty(dataObjectDocument.bucketSource) === false &&\r\n              isNil(dataObjectDocument.bucketSource) === false\r\n                ? dataObjectDocument.bucketSource\r\n                : \"\";\r\n            const extension =\r\n              isEmpty(dataObjectDocument.extension) === false &&\r\n              isNil(dataObjectDocument.extension) === false\r\n                ? dataObjectDocument.extension\r\n                : \"\";\r\n            let url = \"\";\r\n\r\n            if (extension === \"docx\" || extension === \"pdf\") {\r\n              url = `/api/viewFilesDocx/${documentId}/${bucketSource}`;\r\n            } else {\r\n              url = `${ENVIROMENT}/api/viewFile/${documentId}/${bucketSource}`;\r\n            }\r\n\r\n            return (\r\n              <div>\r\n                {isEmpty(documentId) === false &&\r\n                isEmpty(bucketSource) === false &&\r\n                isEmpty(extension) === false ? (\r\n                  <>\r\n                    <Button\r\n                      type=\"link\"\r\n                      size=\"small\"\r\n                      onClick={() => {\r\n                        setDocumentUrl({ url, extension });\r\n                        setIsVisibleViewImage(!isVisibleViewImage);\r\n                      }}\r\n                    >\r\n                      Ver\r\n                    </Button>\r\n                    <a\r\n                      href={`${ENVIROMENT}/api/downloadFile/${documentId}/${bucketSource}/Contrato_${record.idContract}/${extension}`}\r\n                      className=\"download\"\r\n                      download\r\n                      style={{ fontSize: 14 }}\r\n                    >\r\n                      Descargar\r\n                    </a>\r\n                  </>\r\n                ) : (\r\n                  \"No disponible\"\r\n                )}\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          title: \"Fecha de inicio\",\r\n          dataIndex: \"startedAt\",\r\n          key: \"startedAt\",\r\n        },\r\n        {\r\n          title: \"Fecha de vencimiento\",\r\n          dataIndex: \"expireAt\",\r\n          key: \"expireAt\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Póliza\",\r\n      children: [\r\n        {\r\n          title: \"Estatus \",\r\n          dataIndex: \"idPolicyStatus\",\r\n          key: \"idPolicyStatus\",\r\n          align: \"center\",\r\n          render: (status, record) => {\r\n            let component = <div />;\r\n            const contractStatus = record.contractStatus;\r\n            if (status === 1) {\r\n              component = (\r\n                <Tag icon={<CheckSquareOutlined />} color=\"#1890ff\">\r\n                  {record.policyStatus}\r\n                </Tag>\r\n              );\r\n            } else if (status === 2 || status === 3) {\r\n              component = (\r\n                <Tag\r\n                  icon={\r\n                    <span className=\"anticon\">\r\n                      <i className=\"fa fa-handshake-o\" aria-hidden=\"true\" />\r\n                    </span>\r\n                  }\r\n                  color=\"#00bb2d\"\r\n                >\r\n                  {record.policyStatus}\r\n                </Tag>\r\n              );\r\n            } else if (status === 4) {\r\n              component = (\r\n                <Tag\r\n                  icon={\r\n                    <span className=\"anticon\">\r\n                      <i className=\"fa fa-ban\" aria-hidden=\"true\" />\r\n                    </span>\r\n                  }\r\n                  color=\"#ff0000\"\r\n                >\r\n                  {record.policyStatus}\r\n                </Tag>\r\n              );\r\n            }\r\n            return component;\r\n          },\r\n        },\r\n        {\r\n          title: \"Tipo de póliza\",\r\n          dataIndex: \"policy\",\r\n          key: \"policy\",\r\n        },\r\n        {\r\n          title: \"Documento\",\r\n          dataIndex: \"infoPolicyDocument\",\r\n          key: \"infoPolicyDocument\",\r\n          align: \"center\",\r\n          render: (doc, record) => {\r\n            const dataDocument =\r\n              isNil(doc) === false && isEmpty(doc) === false\r\n                ? JSON.parse(doc)\r\n                : [];\r\n            const dataObjectDocument =\r\n              isEmpty(dataDocument) === false &&\r\n              isNil(dataDocument[0]) === false\r\n                ? dataDocument[0]\r\n                : {};\r\n            const documentId =\r\n              isEmpty(dataObjectDocument.idDocument) === false &&\r\n              isNil(dataObjectDocument.idDocument) === false\r\n                ? dataObjectDocument.idDocument\r\n                : \"\";\r\n            const bucketSource =\r\n              isEmpty(dataObjectDocument.bucketSource) === false &&\r\n              isNil(dataObjectDocument.bucketSource) === false\r\n                ? dataObjectDocument.bucketSource\r\n                : \"\";\r\n            const extension =\r\n              isEmpty(dataObjectDocument.extension) === false &&\r\n              isNil(dataObjectDocument.extension) === false\r\n                ? dataObjectDocument.extension\r\n                : \"\";\r\n            let url = \"\";\r\n\r\n            if (extension === \"docx\" || extension === \"pdf\") {\r\n              url = `/api/viewFilesDocx/${documentId}/${bucketSource}`;\r\n            } else {\r\n              url = `${ENVIROMENT}/api/viewFile/${documentId}/${bucketSource}`;\r\n            }\r\n\r\n            return (\r\n              <div>\r\n                {isEmpty(documentId) === false &&\r\n                isEmpty(bucketSource) === false &&\r\n                isEmpty(extension) === false ? (\r\n                  <>\r\n                    <Button\r\n                      type=\"link\"\r\n                      size=\"small\"\r\n                      onClick={() => {\r\n                        setDocumentUrl({ url, extension });\r\n                        setIsVisibleViewImage(!isVisibleViewImage);\r\n                      }}\r\n                    >\r\n                      Ver\r\n                    </Button>\r\n                    <a\r\n                      href={`${ENVIROMENT}/api/downloadFile/${documentId}/${bucketSource}/Poliza_${record.idContract}/${extension}`}\r\n                      className=\"download\"\r\n                      download\r\n                      style={{ fontSize: 14 }}\r\n                    >\r\n                      Descargar\r\n                    </a>\r\n                  </>\r\n                ) : (\r\n                  \"No disponible\"\r\n                )}\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Pagarés\",\r\n      children: [\r\n        {\r\n          title: \"Documento\",\r\n          dataIndex: \"infoPaymentDocument\",\r\n          key: \"infoPaymentDocument\",\r\n          align: \"center\",\r\n          render: (doc, record) => {\r\n            const dataDocument =\r\n              isNil(doc) === false && isEmpty(doc) === false\r\n                ? JSON.parse(doc)\r\n                : [];\r\n            const dataObjectDocument =\r\n              isEmpty(dataDocument) === false &&\r\n              isNil(dataDocument[0]) === false\r\n                ? dataDocument[0]\r\n                : {};\r\n            const documentId =\r\n              isEmpty(dataObjectDocument.idDocument) === false &&\r\n              isNil(dataObjectDocument.idDocument) === false\r\n                ? dataObjectDocument.idDocument\r\n                : \"\";\r\n            const bucketSource =\r\n              isEmpty(dataObjectDocument.bucketSource) === false &&\r\n              isNil(dataObjectDocument.bucketSource) === false\r\n                ? dataObjectDocument.bucketSource\r\n                : \"\";\r\n            const extension =\r\n              isEmpty(dataObjectDocument.extension) === false &&\r\n              isNil(dataObjectDocument.extension) === false\r\n                ? dataObjectDocument.extension\r\n                : \"\";\r\n            let url = \"\";\r\n\r\n            if (extension === \"docx\" || extension === \"pdf\") {\r\n              url = `/api/viewFilesDocx/${documentId}/${bucketSource}`;\r\n            } else {\r\n              url = `${ENVIROMENT}/api/viewFile/${documentId}/${bucketSource}`;\r\n            }\r\n\r\n            return (\r\n              <div>\r\n                {isEmpty(documentId) === false &&\r\n                isEmpty(bucketSource) === false &&\r\n                isEmpty(extension) === false ? (\r\n                  <>\r\n                    <Button\r\n                      type=\"link\"\r\n                      size=\"small\"\r\n                      onClick={() => {\r\n                        setDocumentUrl({ url, extension });\r\n                        setIsVisibleViewImage(!isVisibleViewImage);\r\n                      }}\r\n                    >\r\n                      Ver\r\n                    </Button>\r\n                    <a\r\n                      href={`${ENVIROMENT}/api/downloadFile/${documentId}/${bucketSource}/Pagare_${record.idContract}/${extension}`}\r\n                      className=\"download\"\r\n                      download\r\n                      style={{ fontSize: 14 }}\r\n                    >\r\n                      Descargar\r\n                    </a>\r\n                  </>\r\n                ) : (\r\n                  \"No disponible\"\r\n                )}\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Modificación documentos legales\",\r\n      dataIndex: \"hasAllDocumentation\",\r\n      key: \"hasAllDocumentationPayment\",\r\n      align: \"center\",\r\n      render: (documents, record) => {\r\n        return (\r\n          <div>\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              style={{ border: \"none\", background: \"transparent\" }}\r\n              onClick={() => {\r\n                if (documents === false) {\r\n                  handlerCallContractDocument(record.idContract);\r\n                  setIsVisibleAddDocs(!isVisibleAddDocs);\r\n                }\r\n              }}\r\n            >\r\n              {documents === false ? (\r\n                <img src={DocumentIcon} alt=\"backTo\" width=\"20\" />\r\n              ) : (\r\n                <img src={Lock} alt=\"backTo\" width=\"20\" />\r\n              )}\r\n            </button>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    { title: \"Incidencias\", dataIndex: \"incidents\", key: \"incidents\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    handlerCallGetLegalContractCoincidences();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <Modal\r\n        style={{ top: 20 }}\r\n        visible={isVisibleViewImage}\r\n        closable={false}\r\n        footer={false}\r\n        className=\"modal-signature-contract\"\r\n      >\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setIsVisibleViewImage(!isVisibleViewImage);\r\n                setIsVisibleMeessages(false);\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>\r\n              {isVisibleMeessages === false ? \"Documento\" : \"Conversación\"}\r\n            </h1>\r\n          </div>\r\n          {isVisibleMeessages === false ? (\r\n            <div className=\"contract-children-information\">\r\n              {documentUrl.extension === \"docx\" ||\r\n              documentUrl.extension === \"pdf\" ? (\r\n                <iframe\r\n                  className=\"iframe-docx-hfy\"\r\n                  src={`https://docs.google.com/gview?url=${ENVIROMENT}${documentUrl.url}&embedded=true`}\r\n                />\r\n              ) : (\r\n                <Magnifier src={documentUrl.url} />\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {isEmpty(dataMessages) === false ? (\r\n                <Timeline>\r\n                  {dataMessages.map((row) => {\r\n                    return (\r\n                      <Timeline.Item>\r\n                        <div style={{ marginBottom: \"15px\" }}>\r\n                          <p style={{ margin: \"0px\" }}>\r\n                            <strong>\r\n                              {row.sentByUser} | {row.sentAt}\r\n                            </strong>\r\n                          </p>\r\n                          {row.customerMessage}\r\n                        </div>\r\n                        {isNil(row.sentAtParent) === false && (\r\n                          <Timeline>\r\n                            <Timeline.Item>\r\n                              <div>\r\n                                <p style={{ margin: \"0px\" }}>\r\n                                  <strong>\r\n                                    {row.sentByUserParent} | {row.sentAtParent}\r\n                                  </strong>\r\n                                </p>\r\n                                {row.customerMessageParent}\r\n                              </div>\r\n                            </Timeline.Item>\r\n                          </Timeline>\r\n                        )}\r\n                      </Timeline.Item>\r\n                    );\r\n                  })}\r\n                </Timeline>\r\n              ) : (\r\n                <strong style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  Aún no hay una Conversación\r\n                </strong>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </Modal>\r\n      <SectionUploadDocument\r\n        dataDocuments={dataDocuments}\r\n        isModalVisible={isVisibleAddDocs}\r\n        onClose={() => {\r\n          setIsVisibleAddDocs(!isVisibleAddDocs);\r\n        }}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataProfile.showName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataProfile.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user-admin\">\r\n          <div className=\"renter-card-information total-width\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Información legal</span>\r\n            </div>\r\n            <div className=\"section-information-renters\">\r\n              <Table\r\n                columns={columns}\r\n                dataSource={dataCoincidences}\r\n                className=\"table-users-hfy\"\r\n                size=\"small\"\r\n                bordered\r\n                scroll={{ x: 3500 }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callGetLegalContractCoincidences: (data) =>\r\n    dispatch(callGetLegalContractCoincidences(data)),\r\n  callGetContractDocument: (data) => dispatch(callGetContractDocument(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Attorney);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administratorControlDesk.jsx",["569","570","571","572"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, message } from \"antd\";\r\nimport isNil from \"lodash/isNil\";\r\nimport \"moment/locale/es\";\r\nimport UserAccept from \"../../assets/icons/UserAccept.svg\";\r\nimport UserMissed from \"../../assets/icons/UserMissed.svg\";\r\nimport Agents from \"../../assets/icons/agent.svg\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetContractStats,\r\n  callGetContractCoincidences,\r\n  callUpdateContract,\r\n  callGetAllPolicyStatus,\r\n  callGetDetailCustomerTenant,\r\n  callSwitchCustomerContract,\r\n  callGetContractDocument,\r\n  callGetAllRelationshipTypes,\r\n  callGetAllPersonalReferencesStatus,\r\n  callUpdatePersonalReferences,\r\n  callGetAuditReferences,\r\n} from \"../../utils/actions/actions\";\r\nimport { API_CONSTANTS } from \"../../utils/constants/apiConstants\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport SectionCardOwner from \"./sections/sectionCardOwnerControl\";\r\nimport SectionDetailUserTenant from \"./sections/sectionDetailUserTenantControl\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst ControlDesk = (props) => {\r\n  const {\r\n    dataProfile,\r\n    history,\r\n    callGetContractStats,\r\n    callGetContractCoincidences,\r\n    callUpdateContract,\r\n    callGetAllPolicyStatus,\r\n    callGetDetailCustomerTenant,\r\n    callSwitchCustomerContract,\r\n    setDataUserProfile,\r\n    callGetAllRelationshipTypes,\r\n    callGetAllPersonalReferencesStatus,\r\n    callUpdatePersonalReferences,\r\n    callGetAuditReferences,\r\n  } = props;\r\n  const [isVisibleAddDocs, setIsVisibleAddDocs] = useState(false);\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataStats, setDataStats] = useState({});\r\n  const [dataDetailCustomerTenant, setDataDetailCustomerTenant] = useState([]);\r\n  const [dataDetailReferences, setDataDetailReferences] = useState([]);\r\n  const [dataAllPolicyStatus, setDataAllPolicyStatus] = useState([]);\r\n  const [dataRelatioshipTypes, setDataRelatioshipTypes] = useState([]);\r\n  const [dataReferenceStatus, setDataReferenceStatus] = useState([]);\r\n  const [dataHistory, setDataHistory] = useState([]);\r\n  const [isVisibleDetailUserTenant, setIsVisibleDetailUserTenant] = useState(\r\n    false\r\n  );\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractStats = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractStats({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataStats(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAuditReferences = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAuditReferences({\r\n        idCustomer: null,\r\n        idCustomerTenant: null,\r\n        idContract: null,\r\n        idPersonalReference: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: -1,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataHistory(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetDetailCustomerTenant = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    const arrayResult = [];\r\n    try {\r\n      const response = await callGetDetailCustomerTenant({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false && isNil(response.response1) === false\r\n          ? response.response1\r\n          : [];\r\n      const responseResult2 =\r\n        isNil(response) === false && isNil(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      setDataDetailCustomerTenant(responseResult1);\r\n      setDataDetailReferences(responseResult2);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPolicyStatus = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllPolicyStatus({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataAllPolicyStatus(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllRelationshipTypes = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllRelationshipTypes({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataRelatioshipTypes(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPersonalReferencesStatus = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllPersonalReferencesStatus({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataReferenceStatus(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const callAsynApis = async () => {\r\n    await handlerCallGetContractStats();\r\n    await handlerCallGetContractCoincidences();\r\n  };\r\n\r\n  const handlerCallUpdateContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callUpdateContract(\r\n        {\r\n          idCustomer: data.idCustomer,\r\n          idCustomerTenant: data.idCustomerTenant,\r\n          idPolicyStatus: data.idPolicyStatus,\r\n          rating: isNil(data.rating) === false ? data.rating : null,\r\n          isApproved: isNil(data.isApproved) === false ? data.isApproved : null,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallUpdatePersonalReferences = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callUpdatePersonalReferences(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idPersonalReference\r\n      );\r\n      showMessageStatusApi(\r\n        \"La información se actualizo correctamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallSwitchCustomerContract = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callSwitchCustomerContract(\r\n        {\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n      handlerCallGetDetailCustomerTenant(id);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractDocumentById = async (data, name) => {\r\n    const { idSystemUser, idLoginHistory, token } = dataProfile;\r\n    try {\r\n      const responseInfo = await fetch(\r\n        `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT_DOCUMENT_BYID}`,\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            ...data,\r\n            idDigitalContract: null,\r\n            idSystemUser,\r\n            idLoginHistory,\r\n            download: false,\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      if (isNil(responseInfo.status) === false && responseInfo.status !== 200) {\r\n        throw isNil(responseInfo.statusText) === false\r\n          ? responseInfo.statusText\r\n          : \"\";\r\n      }\r\n      const resultInfo = await responseInfo.json();\r\n      const resultExtension = resultInfo.extension;\r\n\r\n      const responseDownload = await fetch(\r\n        `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT_DOCUMENT_BYID}`,\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            ...data,\r\n            idDigitalContract: null,\r\n            idSystemUser,\r\n            idLoginHistory,\r\n            download: true,\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (\r\n        isNil(responseDownload.status) === false &&\r\n        responseDownload.status !== 200\r\n      ) {\r\n        throw isNil(responseDownload.statusText) === false\r\n          ? responseDownload.statusText\r\n          : \"\";\r\n      }\r\n      const blob = await responseDownload.blob();\r\n      const link = document.createElement(\"a\");\r\n      link.className = \"download\";\r\n      link.download = `${name}.${resultExtension}`;\r\n      link.href = URL.createObjectURL(blob);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentElement.removeChild(link);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"No está disponible el documento\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    callAsynApis();\r\n    handlerCallGetAllRelationshipTypes();\r\n    handlerCallGetAllPersonalReferencesStatus();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <SectionDetailUserTenant\r\n        isDrawerVisible={isVisibleDetailUserTenant}\r\n        dataRelatioshipTypes={dataRelatioshipTypes}\r\n        dataReferenceStatus={dataReferenceStatus}\r\n        onClose={() => {\r\n          setIsVisibleDetailUserTenant(!isVisibleDetailUserTenant);\r\n          callAsynApis();\r\n        }}\r\n        dataDetailCustomerTenant={dataDetailCustomerTenant}\r\n        dataDetailReferences={dataDetailReferences}\r\n        dataHistory={dataHistory}\r\n        onSendRatingUser={async (data) => {\r\n          try {\r\n            await handlerCallUpdateContract(data);\r\n            await handlerCallGetDetailCustomerTenant(data.idContract);\r\n            callAsynApis();\r\n          } catch (error) {}\r\n        }}\r\n        changeRolesCustomers={(id) => {\r\n          handlerCallSwitchCustomerContract(id);\r\n        }}\r\n        onRedirectTo={async (key, idCustomer, idContract, idCustomerTenant) => {\r\n          await setDataUserProfile({\r\n            ...dataProfile,\r\n            idCustomerTenantTF: idCustomerTenant,\r\n            idCustomerTF: idCustomer,\r\n            idContract: idContract,\r\n          });\r\n          history.push(`/websystem/typeform-user/${key}`);\r\n        }}\r\n        onDownloadDocumentById={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContractDocumentById(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onSaveDataScore={async (data, id) => {\r\n          try {\r\n            await handlerCallUpdatePersonalReferences(data);\r\n            await handlerCallGetDetailCustomerTenant(id);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onCallHistoryData={(data) => {\r\n          handlerCallGetAuditReferences(data.idPersonalReference);\r\n        }}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataProfile.showName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataProfile.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"indicators-amount-renter\"\r\n          style={{ justifyContent: \"space-around\" }}\r\n        >\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={Agents} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalTenantToEvaluate}</h2>\r\n            <span>Inquilinos por evaluar</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#98FF98\" }}>\r\n              <img src={UserAccept} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalTenantApproved}</h2>\r\n            <span>Aceptados</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#FF6961\" }}>\r\n              <img src={UserMissed} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalTenantRejected}</h2>\r\n            <span>Rechazados</span>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"indicators-amount-renter\"\r\n          style={{ justifyContent: \"space-around\" }}\r\n        >\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={Agents} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalReferencePending}</h2>\r\n            <span>Referencias por evaluar</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user-admin\">\r\n          <SectionCardOwner\r\n            onOpenUploadDocument={(id) => {\r\n              setIsVisibleAddDocs(!isVisibleAddDocs);\r\n            }}\r\n            history={history}\r\n            dataAllPolicyStatus={dataAllPolicyStatus}\r\n            onOpenDetail={(type, id, data) => {\r\n              if (data.canViewDatail === true) {\r\n                if (id === 2) {\r\n                  handlerCallGetDetailCustomerTenant(type);\r\n                  setIsVisibleDetailUserTenant(!isVisibleDetailUserTenant);\r\n                }\r\n              }\r\n            }}\r\n            dataCoincidences={dataCoincidences}\r\n            finishCallApis\r\n            onClickSendInvitation={() => {}}\r\n            onGetPolicyStatus={(id) => {\r\n              handlerCallGetAllPolicyStatus(id);\r\n            }}\r\n            onClosePolicy={async (data) => {\r\n              await handlerCallUpdateContract(data);\r\n              callAsynApis();\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetContractStats: (data) => dispatch(callGetContractStats(data)),\r\n  callGetContractCoincidences: (data) =>\r\n    dispatch(callGetContractCoincidences(data)),\r\n  callUpdateContract: (data, id) => dispatch(callUpdateContract(data, id)),\r\n  callSwitchCustomerContract: (data, id) =>\r\n    dispatch(callSwitchCustomerContract(data, id)),\r\n  callGetAllPolicyStatus: (data) => dispatch(callGetAllPolicyStatus(data)),\r\n  callGetDetailCustomerTenant: (data) =>\r\n    dispatch(callGetDetailCustomerTenant(data)),\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callGetContractDocumentById: (data) =>\r\n    dispatch(callGetContractDocument(data)),\r\n  callGetAllRelationshipTypes: (data) =>\r\n    dispatch(callGetAllRelationshipTypes(data)),\r\n  callGetAllPersonalReferencesStatus: (data) =>\r\n    dispatch(callGetAllPersonalReferencesStatus(data)),\r\n  callUpdatePersonalReferences: (data, id) =>\r\n    dispatch(callUpdatePersonalReferences(data, id)),\r\n  callGetAuditReferences: (data, id) =>\r\n    dispatch(callGetAuditReferences(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ControlDesk);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwnerControl.jsx",["573","574","575","576","577","578"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenantControl.jsx",["579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608","609","610","611","612","613","614","615"],"import React, { useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Drawer,\r\n  Collapse,\r\n  Menu,\r\n  Dropdown,\r\n  Button,\r\n  Popover,\r\n  Modal,\r\n  Select,\r\n  Radio,\r\n  Timeline,\r\n} from \"antd\";\r\nimport {\r\n  SyncOutlined,\r\n  EditOutlined,\r\n  CloseOutlined,\r\n  CheckOutlined,\r\n  CloseCircleFilled,\r\n  CheckCircleFilled,\r\n} from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Panel } = Collapse;\r\nconst { Option } = Select;\r\n\r\nconst SectionDetailUserTenant = (props) => {\r\n  const {\r\n    isDrawerVisible,\r\n    onClose,\r\n    dataDetailCustomerTenant,\r\n    dataDetailReferences,\r\n    dataHistory,\r\n    changeRolesCustomers,\r\n    onSendRatingUser,\r\n    onRedirectTo,\r\n    onDownloadDocumentById,\r\n    dataRelatioshipTypes,\r\n    dataReferenceStatus,\r\n    onSaveDataScore,\r\n    onCallHistoryData,\r\n  } = props;\r\n\r\n  const initialDataForm = {\r\n    currentTime: null,\r\n    currentTimeRange: null,\r\n    detailReference: null,\r\n    detailTenant: null,\r\n    emailAddress: null,\r\n    fullName: null,\r\n    idPersonalReference: null,\r\n    isRecommended: null,\r\n    observations: null,\r\n    personalReferenceStatus: null,\r\n    phoneNumber: null,\r\n    rating: null,\r\n    referenceType: null,\r\n    relationshipType: null,\r\n  };\r\n  const [valueCalification, setValueCalification] = useState({});\r\n  const [openPopover, setOpenPopover] = useState({});\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div className=\"site-description-item-profile-wrapper\">\r\n      <strong className=\"site-description-item-profile-p-label\">\r\n        {title}:\r\n      </strong>\r\n      <br />\r\n      {isNil(content) === false ? content : \"-\"}\r\n    </div>\r\n  );\r\n\r\n  const replaceUrl = (address) => {\r\n    let domainPath = \"https://www.google.com/maps/search/\";\r\n\r\n    if (isNil(address) === false) {\r\n      const replaceString = address.replaceAll(\" \", \"+\");\r\n      domainPath = domainPath + replaceString;\r\n    }\r\n    return (\r\n      <a href={domainPath} target=\"_blank\">\r\n        {address}\r\n      </a>\r\n    );\r\n  };\r\n\r\n  const menu = (row) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item key=\"0\">\r\n          <a\r\n            href={\r\n              isNil(row.phoneNumber) === false\r\n                ? `https://api.whatsapp.com/send?phone=52${row.phoneNumber}`\r\n                : \"#\"\r\n            }\r\n            target=\"_blank\"\r\n          >\r\n            Whatsapp\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"1\">\r\n          <a>Notificación</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <a>Mensaje app</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\">\r\n          <a>Correo</a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      width={500}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={isDrawerVisible}\r\n    >\r\n      <Modal\r\n        visible={isModalVisible}\r\n        closable={false}\r\n        footer={false}\r\n        style={{ top: 20 }}\r\n        width={600}\r\n      >\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setDataForm(initialDataForm);\r\n                setIsModalVisible(false);\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Información de Referencia {dataForm.index}</h1>\r\n          </div>\r\n          <div\r\n            className=\"main-form-information\"\r\n            style={{ fontFamily: \"Poppins\" }}\r\n          >\r\n            <Row>\r\n              <Col span={10} xs={{ span: 24 }} md={{ span: 10 }}>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title=\"Tipo de referencia\"\r\n                      content={dataForm.referenceType}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title=\"Nombre de la referencia\"\r\n                      content={dataForm.fullName}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title=\"Correo\"\r\n                      content={dataForm.emailAddress}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title=\"Teléfono\"\r\n                      content={\r\n                        isNil(dataForm.phoneNumber) === false ? (\r\n                          <a\r\n                            href={\r\n                              isNil(dataForm.phoneNumber) === false\r\n                                ? `https://api.whatsapp.com/send?phone=52${dataForm.phoneNumber}`\r\n                                : \"#\"\r\n                            }\r\n                            target=\"_blank\"\r\n                          >\r\n                            {dataForm.phoneNumber}\r\n                          </a>\r\n                        ) : (\r\n                          \"N/A\"\r\n                        )\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title={dataForm.detailTenant}\r\n                      content={dataForm.detailReference}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col span={14} xs={{ span: 24 }} md={{ span: 14 }}>\r\n                <p style={{ textAlign: \"center\" }}>Historial de cambios</p>\r\n                <div style={{ height: 260, overflowY: \"scroll\" }}>\r\n                  {isEmpty(dataHistory) === false ? (\r\n                    <Timeline>\r\n                      {dataHistory.map((row) => {\r\n                        return (\r\n                          <Timeline.Item>\r\n                            <div>\r\n                              <p style={{ margin: \"0px\" }}>\r\n                                <strong>{row.createdByUser}</strong> |{\" \"}\r\n                                <strong>{row.createdAt} hrs</strong>\r\n                              </p>\r\n                              <div>\r\n                                <div\r\n                                  style={{ color: \"black !important\" }}\r\n                                  dangerouslySetInnerHTML={{\r\n                                    __html:\r\n                                      isNil(row.description) === false\r\n                                        ? row.description\r\n                                        : \"\",\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </Timeline.Item>\r\n                        );\r\n                      })}\r\n                    </Timeline>\r\n                  ) : (\r\n                    <strong\r\n                      style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                      Aún no hay un historial\r\n                    </strong>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <p>Ingresa la información de la referencia</p>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Select\r\n                  placeholder=\"Parentesco\"\r\n                  showSearch\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idRelationshipType: value,\r\n                      idRelationshipTypeText: option.children,\r\n                    });\r\n                  }}\r\n                  value={dataForm.idRelationshipType}\r\n                >\r\n                  {isEmpty(dataRelatioshipTypes) === false &&\r\n                    dataRelatioshipTypes.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idRelationshipType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={9} xs={{ span: 24 }} md={{ span: 9 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={\r\n                    isNil(dataForm.currentTime) === false\r\n                      ? dataForm.currentTime\r\n                      : \"\"\r\n                  }\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Tiempo de conocerlo\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      currentTime: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={5} xs={{ span: 24 }} md={{ span: 5 }}>\r\n                <Select\r\n                  placeholder=\"Periodo\"\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      currentTimeRange: value,\r\n                      currentTimeRangeText: option.children,\r\n                    });\r\n                  }}\r\n                  value={dataForm.currentTimeRange}\r\n                >\r\n                  <Option value={\"M\"} onClick={() => {}}>\r\n                    Meses\r\n                  </Option>\r\n                  <Option value={\"Y\"} onClick={() => {}}>\r\n                    Años\r\n                  </Option>\r\n                </Select>\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    ¿Lo recomendaría?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        isRecommended: e.target.value,\r\n                      });\r\n                    }}\r\n                    value={\r\n                      dataForm.isRecommended === 1 ||\r\n                      dataForm.isRecommended === true\r\n                        ? 1\r\n                        : isNil(dataForm.isRecommended) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                <Select\r\n                  placeholder=\"Estatus\"\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idPersonalReferenceStatus: value,\r\n                    });\r\n                  }}\r\n                  value={dataForm.idPersonalReferenceStatus}\r\n                >\r\n                  {isEmpty(dataReferenceStatus) === false &&\r\n                    dataReferenceStatus.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idPersonalReferenceStatus}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={\r\n                    isNil(dataForm.rating) === false ? dataForm.rating : \"\"\r\n                  }\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Score 0-5\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      rating: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <textarea\r\n                  className=\"textarea-form-modal ant-input\"\r\n                  placeholder=\"Observaciones\"\r\n                  value={\r\n                    isNil(dataForm.observations) === false\r\n                      ? dataForm.observations\r\n                      : \"\"\r\n                  }\r\n                  maxlength=\"1000\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      observations: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={async () => {\r\n                try {\r\n                  await onSaveDataScore(\r\n                    dataForm,\r\n                    dataDetailCustomerTenant[0].idContract\r\n                  );\r\n                  setIsModalVisible(false);\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <span>Guardar</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n      <div className=\"content-infomation-drawer\">\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n                setIsModalVisible(false);\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Detalle de Inquilino</h1>\r\n          </div>\r\n        </div>\r\n        <Collapse defaultActiveKey={[\"1\"]} ghost>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Información general</h3>}\r\n            key=\"1\"\r\n          >\r\n            {dataDetailCustomerTenant.length === 2 && (\r\n              <Row>\r\n                <Col span={20} xs={{ span: 24 }} md={{ span: 20 }}>\r\n                  <strong>Cambiar Roles Inquilino-Obligado Solidario</strong>\r\n                </Col>\r\n                <Col span={4} xs={{ span: 24 }} md={{ span: 4 }}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={<SyncOutlined />}\r\n                    onClick={() => {\r\n                      changeRolesCustomers(\r\n                        dataDetailCustomerTenant[0].idContract\r\n                      );\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <div\r\n              className=\"ant-divider ant-divider-horizontal\"\r\n              role=\"separator\"\r\n            />\r\n\r\n            {isEmpty(dataDetailCustomerTenant) === false &&\r\n              dataDetailCustomerTenant.map((row) => {\r\n                const catalogProperties =\r\n                  isNil(row.typeFormProperties) === false\r\n                    ? JSON.parse(row.typeFormProperties)\r\n                    : [];\r\n                return (\r\n                  <>\r\n                    <h3>\r\n                      {row.isMain === true ? \"Inquilino\" : \"Obligado Solidario\"}\r\n                    </h3>\r\n                    <Row>\r\n                      <Col span={13} xs={{ span: 24 }} md={{ span: 13 }}>\r\n                        <strong>Resultado de investigación</strong>\r\n                        <Popover\r\n                          content={\r\n                            <>\r\n                              <Row>\r\n                                <Col span={24}>\r\n                                  <NumberFormat\r\n                                    id={null}\r\n                                    customInput={Input}\r\n                                    thousandSeparator=\",\"\r\n                                    decimalSeparator=\".\"\r\n                                    decimalPrecision={2}\r\n                                    allowNegative={false}\r\n                                    prefix=\"\"\r\n                                    suffix=\"\"\r\n                                    value={\r\n                                      isNil(\r\n                                        valueCalification[row.idCustomerTenant]\r\n                                      ) === false\r\n                                        ? valueCalification[\r\n                                            row.idCustomerTenant\r\n                                          ]\r\n                                        : row.rating\r\n                                    }\r\n                                    className=\"inputLogin\"\r\n                                    floatingLabelText=\"\"\r\n                                    isVisible\r\n                                    toBlock={false}\r\n                                    disable={false}\r\n                                    placeholder=\"Calificación\"\r\n                                    onValueChange={(values) => {\r\n                                      const {\r\n                                        formattedValue,\r\n                                        value,\r\n                                        floatValue,\r\n                                      } = values;\r\n                                      setValueCalification({\r\n                                        ...valueCalification,\r\n                                        [row.idCustomerTenant]: floatValue,\r\n                                      });\r\n                                    }}\r\n                                    onClick={(event) => {}}\r\n                                    onFocus={(event) => {}}\r\n                                    onBlur={(event) => {}}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                              <div\r\n                                className=\"ant-divider ant-divider-horizontal\"\r\n                                role=\"separator\"\r\n                              />\r\n                              <Row>\r\n                                <Col span={11}>\r\n                                  <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    icon={<CloseOutlined />}\r\n                                    size=\"small\"\r\n                                    danger\r\n                                    onClick={() => {\r\n                                      onSendRatingUser({\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: null,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        idPolicyStatus: null,\r\n                                        rating:\r\n                                          isNil(\r\n                                            valueCalification[\r\n                                              row.idCustomerTenant\r\n                                            ]\r\n                                          ) === false\r\n                                            ? valueCalification[\r\n                                                row.idCustomerTenant\r\n                                              ]\r\n                                            : row.rating,\r\n                                        isApproved: false,\r\n                                      });\r\n                                      setOpenPopover({\r\n                                        [row.idCustomerTenant]:\r\n                                          isNil(\r\n                                            openPopover[row.idCustomerTenant]\r\n                                          ) === false\r\n                                            ? !openPopover[row.idCustomerTenant]\r\n                                            : false,\r\n                                      });\r\n                                    }}\r\n                                  >\r\n                                    Rechazada\r\n                                  </Button>\r\n                                </Col>\r\n                                <Col span={2} />\r\n                                <Col span={11}>\r\n                                  <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    icon={<CheckOutlined />}\r\n                                    size=\"small\"\r\n                                    className=\"color-green\"\r\n                                    onClick={() => {\r\n                                      onSendRatingUser({\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: null,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        idPolicyStatus: null,\r\n                                        rating:\r\n                                          isNil(\r\n                                            valueCalification[\r\n                                              row.idCustomerTenant\r\n                                            ]\r\n                                          ) === false\r\n                                            ? valueCalification[\r\n                                                row.idCustomerTenant\r\n                                              ]\r\n                                            : row.rating,\r\n                                        isApproved: true,\r\n                                      });\r\n                                      setOpenPopover({\r\n                                        [row.idCustomerTenant]:\r\n                                          isNil(\r\n                                            openPopover[row.idCustomerTenant]\r\n                                          ) === false\r\n                                            ? !openPopover[row.idCustomerTenant]\r\n                                            : false,\r\n                                      });\r\n                                    }}\r\n                                  >\r\n                                    Aprobada\r\n                                  </Button>\r\n                                </Col>\r\n                              </Row>\r\n                            </>\r\n                          }\r\n                          title={\r\n                            <div>\r\n                              <span>Resultado definitivo</span>\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                  setOpenPopover({\r\n                                    [row.idCustomerTenant]:\r\n                                      isNil(\r\n                                        openPopover[row.idCustomerTenant]\r\n                                      ) === false\r\n                                        ? !openPopover[row.idCustomerTenant]\r\n                                        : false,\r\n                                  });\r\n                                }}\r\n                                style={{\r\n                                  marginLeft: 5,\r\n                                  background: \"transparent\",\r\n                                  border: \"none\",\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\" />\r\n                              </button>\r\n                            </div>\r\n                          }\r\n                          trigger=\"click\"\r\n                          visible={\r\n                            isNil(openPopover[row.idCustomerTenant]) === false\r\n                              ? openPopover[row.idCustomerTenant]\r\n                              : false\r\n                          }\r\n                        >\r\n                          <Button\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            icon={<EditOutlined />}\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                              setOpenPopover({\r\n                                [row.idCustomerTenant]:\r\n                                  isNil(openPopover[row.idCustomerTenant]) ===\r\n                                  false\r\n                                    ? !openPopover[row.idCustomerTenant]\r\n                                    : true,\r\n                              });\r\n                            }}\r\n                          >\r\n                            Asignar\r\n                          </Button>\r\n                        </Popover>\r\n                      </Col>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <DescriptionItem\r\n                          title=\"Calificación 0-5\"\r\n                          content={\r\n                            isNil(row.rating) === false ? row.rating : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Nombre completo\"\r\n                          content={\r\n                            isNil(row.fullName) === false ? row.fullName : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={24}>\r\n                        <DescriptionItem\r\n                          title=\"Correo\"\r\n                          content={\r\n                            isNil(row.emailAddress) === false\r\n                              ? row.emailAddress\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Teléfono\"\r\n                          content={\r\n                            isNil(row.phoneNumber) === false\r\n                              ? row.phoneNumber\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Tipo de cliente\"\r\n                          content={\r\n                            isNil(row.customerType) === false\r\n                              ? row.customerType\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Ocupación\"\r\n                          content={\r\n                            isNil(row.occupationActivity) === false\r\n                              ? row.occupationActivity\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Salario mensual\"\r\n                          content={\r\n                            isNil(row.currentSalary) === false\r\n                              ? row.currentSalary\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"RFC\"\r\n                          content={isNil(row.taxId) === false ? row.taxId : \"-\"}\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"CURP\"\r\n                          content={\r\n                            isNil(row.citizenId) === false ? row.citizenId : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={24}>\r\n                        <DescriptionItem\r\n                          title=\"Dirección\"\r\n                          content={\r\n                            isNil(row.fullAddress) === false\r\n                              ? replaceUrl(row.fullAddress)\r\n                              : \"-\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Enviar mensaje\"\r\n                          content={\r\n                            <Dropdown overlay={menu(row)} trigger={[\"click\"]}>\r\n                              <a>Enviar</a>\r\n                            </Dropdown>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"TypeForm\"\r\n                          content={\r\n                            <Dropdown\r\n                              overlay={\r\n                                <Menu\r\n                                  onClick={(value) => {\r\n                                    onRedirectTo(\r\n                                      value.key,\r\n                                      row.idCustomer,\r\n                                      row.idContract,\r\n                                      row.idCustomerTenant\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  {isEmpty(catalogProperties) === false &&\r\n                                    catalogProperties.map((rowMap) => {\r\n                                      return (\r\n                                        <Menu.Item\r\n                                          key={`${rowMap.idStepIn}`}\r\n                                          style={{\r\n                                            display: \"flex\",\r\n                                            alignItems: \"center\",\r\n                                            justifyContent: \"space-between\",\r\n                                          }}\r\n                                        >\r\n                                          <a style={{ marginRight: 2 }}>\r\n                                            {rowMap.stepIn}\r\n                                          </a>\r\n                                          {rowMap.isCompleted === true ? (\r\n                                            <CheckCircleFilled\r\n                                              style={{ color: \"green\" }}\r\n                                            />\r\n                                          ) : (\r\n                                            <CloseCircleFilled\r\n                                              style={{ color: \"red\" }}\r\n                                            />\r\n                                          )}\r\n                                        </Menu.Item>\r\n                                      );\r\n                                    })}\r\n                                </Menu>\r\n                              }\r\n                              trigger={[\"click\"]}\r\n                            >\r\n                              <a>Ver</a>\r\n                            </Dropdown>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                    {isNil(row.hasEndorsement) === false &&\r\n                      row.hasEndorsement === true &&\r\n                      row.isMain === true && (\r\n                        <>\r\n                          <h3>Fiador</h3>\r\n                          <Row>\r\n                            <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                              <DescriptionItem\r\n                                title=\"Nombre completo\"\r\n                                content={row.endorsementFullName}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                              <DescriptionItem\r\n                                title=\"Correo\"\r\n                                content={row.endorsementEmailAddress}\r\n                              />\r\n                            </Col>\r\n                            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                              <DescriptionItem\r\n                                title=\"Teléfono\"\r\n                                content={\r\n                                  <a\r\n                                    href={\r\n                                      isNil(row.endorsementPhoneNumber) ===\r\n                                      false\r\n                                        ? `https://api.whatsapp.com/send?phone=52${row.endorsementPhoneNumber}`\r\n                                        : \"#\"\r\n                                    }\r\n                                    target=\"_blank\"\r\n                                  >\r\n                                    {row.endorsementPhoneNumber}\r\n                                  </a>\r\n                                }\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                        </>\r\n                      )}\r\n                  </>\r\n                );\r\n              })}\r\n          </Panel>\r\n          <Panel header={<h3 role=\"title-section\">Referencias</h3>} key=\"2\">\r\n            {isEmpty(dataDetailReferences) === false &&\r\n              dataDetailReferences.map((row, index) => {\r\n                return (\r\n                  <>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Nombre\"\r\n                          content={`${row.fullName} ${row.detailTenant}`}\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Tipo de referencia\"\r\n                          content={row.referenceType}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Correo\"\r\n                          content={row.emailAddress}\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Teléfono\"\r\n                          content={\r\n                            <a\r\n                              href={\r\n                                isNil(row.phoneNumber) === false\r\n                                  ? `https://api.whatsapp.com/send?phone=52${row.phoneNumber}`\r\n                                  : \"#\"\r\n                              }\r\n                              target=\"_blank\"\r\n                            >\r\n                              {row.phoneNumber}\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem title=\"Score\" content={row.rating} />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Formulario\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                if (row.canBeEvaluated === true) {\r\n                                  onCallHistoryData(row);\r\n                                  setDataForm({ ...row, index: index + 1 });\r\n                                  setIsModalVisible(true);\r\n                                }\r\n                              }}\r\n                            >\r\n                              {row.canBeEvaluated === true\r\n                                ? \"Asignar un score\"\r\n                                : \"No puede ser evaluado\"}\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n          </Panel>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Documentos personales</h3>}\r\n            key=\"3\"\r\n          >\r\n            {isEmpty(dataDetailCustomerTenant) === false &&\r\n              dataDetailCustomerTenant.map((row) => {\r\n                return (\r\n                  <>\r\n                    <h3>\r\n                      {row.isMain === true ? \"Inquilino\" : \"Obligado Solidario\"}\r\n                    </h3>\r\n                    <Row>\r\n                      <Col span={8}>\r\n                        <DescriptionItem\r\n                          title=\"Selfie\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 5,\r\n                                  },\r\n                                  `Selfie_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      {row.hasINECustomerTenant === 1 ||\r\n                      row.hasINECustomerTenant === true ? (\r\n                        <>\r\n                          <Col span={8}>\r\n                            <DescriptionItem\r\n                              title=\"Ine frontal\"\r\n                              content={\r\n                                <a\r\n                                  onClick={() => {\r\n                                    onDownloadDocumentById(\r\n                                      {\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: row.idCustomer,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        type: 6,\r\n                                      },\r\n                                      `Identificacion1_${row.idContract}`\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  Descargar\r\n                                </a>\r\n                              }\r\n                            />\r\n                          </Col>\r\n                          <Col span={8}>\r\n                            <DescriptionItem\r\n                              title=\"Ine vuelta\"\r\n                              content={\r\n                                <a\r\n                                  onClick={() => {\r\n                                    onDownloadDocumentById(\r\n                                      {\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: row.idCustomer,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        type: 7,\r\n                                      },\r\n                                      `Identificacion2_${row.idContract}`\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  Descargar\r\n                                </a>\r\n                              }\r\n                            />\r\n                          </Col>\r\n                        </>\r\n                      ) : (\r\n                        <Col span={16}>\r\n                          <DescriptionItem\r\n                            title=\"Identificación oficial\"\r\n                            content={\r\n                              <a\r\n                                onClick={() => {\r\n                                  onDownloadDocumentById(\r\n                                    {\r\n                                      idContract: row.idContract,\r\n                                      idCustomer: row.idCustomer,\r\n                                      idCustomerTenant: row.idCustomerTenant,\r\n                                      type: 6,\r\n                                    },\r\n                                    `Identificacion1_${row.idContract}`\r\n                                  );\r\n                                }}\r\n                              >\r\n                                Descargar\r\n                              </a>\r\n                            }\r\n                          />\r\n                        </Col>\r\n                      )}\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={8}>\r\n                        <DescriptionItem\r\n                          title=\"Carta laboral\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 8,\r\n                                  },\r\n                                  `Carta_Laboral_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12}>\r\n                        <DescriptionItem\r\n                          title=\"Comprobante de ingreso 1\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 9,\r\n                                  },\r\n                                  `Comprobante_1_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12}>\r\n                        <DescriptionItem\r\n                          title=\"Comprobante de ingreso 2\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 10,\r\n                                  },\r\n                                  `Comprobante_2_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12}>\r\n                        <DescriptionItem\r\n                          title=\"Comprobante de ingreso 3\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 11,\r\n                                  },\r\n                                  `Comprobante_3_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {isNil(row.hasEndorsement) === false &&\r\n                      row.hasEndorsement === true &&\r\n                      row.isMain === true && (\r\n                        <>\r\n                          <div\r\n                            className=\"ant-divider ant-divider-horizontal\"\r\n                            role=\"separator\"\r\n                          />\r\n                          <h3>Fiador</h3>\r\n                          <Row>\r\n                            <Col span={8}>\r\n                              <DescriptionItem\r\n                                title=\"Escrituras\"\r\n                                content={\r\n                                  <a\r\n                                    onClick={() => {\r\n                                      onDownloadDocumentById(\r\n                                        {\r\n                                          idContract: row.idContract,\r\n                                          idCustomer: row.idCustomer,\r\n                                          idCustomerTenant:\r\n                                            row.idCustomerTenant,\r\n                                          type: 12,\r\n                                        },\r\n                                        `Escrituras_${row.idContract}`\r\n                                      );\r\n                                    }}\r\n                                  >\r\n                                    Descargar\r\n                                  </a>\r\n                                }\r\n                              />\r\n                            </Col>\r\n                            {row.hasINEEndorsement === 1 ||\r\n                            row.hasINEEndorsement === true ? (\r\n                              <>\r\n                                <Col span={8}>\r\n                                  <DescriptionItem\r\n                                    title=\"Ine frontal\"\r\n                                    content={\r\n                                      <a\r\n                                        onClick={() => {\r\n                                          onDownloadDocumentById(\r\n                                            {\r\n                                              idContract: row.idContract,\r\n                                              idCustomer: row.idCustomer,\r\n                                              idCustomerTenant:\r\n                                                row.idCustomerTenant,\r\n                                              type: 13,\r\n                                            },\r\n                                            `Identificacion1_${row.idContract}`\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        Descargar\r\n                                      </a>\r\n                                    }\r\n                                  />\r\n                                </Col>\r\n                                <Col span={8}>\r\n                                  <DescriptionItem\r\n                                    title=\"Ine vuelta\"\r\n                                    content={\r\n                                      <a\r\n                                        onClick={() => {\r\n                                          onDownloadDocumentById(\r\n                                            {\r\n                                              idContract: row.idContract,\r\n                                              idCustomer: row.idCustomer,\r\n                                              idCustomerTenant:\r\n                                                row.idCustomerTenant,\r\n                                              type: 14,\r\n                                            },\r\n                                            `Identificacion1_${row.idContract}`\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        Descargar\r\n                                      </a>\r\n                                    }\r\n                                  />\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <Col span={16}>\r\n                                <DescriptionItem\r\n                                  title=\"Identificación oficial\"\r\n                                  content={\r\n                                    <a\r\n                                      onClick={() => {\r\n                                        onDownloadDocumentById(\r\n                                          {\r\n                                            idContract: row.idContract,\r\n                                            idCustomer: row.idCustomer,\r\n                                            idCustomerTenant:\r\n                                              row.idCustomerTenant,\r\n                                            type: 13,\r\n                                          },\r\n                                          `Identificacion1_${row.idContract}`\r\n                                        );\r\n                                      }}\r\n                                    >\r\n                                      Descargar\r\n                                    </a>\r\n                                  }\r\n                                />\r\n                              </Col>\r\n                            )}\r\n                          </Row>\r\n                        </>\r\n                      )}\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n          </Panel>\r\n        </Collapse>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SectionDetailUserTenant;\r\n",{"ruleId":"616","replacedBy":"617"},{"ruleId":"618","replacedBy":"619"},{"ruleId":"620","severity":1,"message":"621","line":11,"column":8,"nodeType":"622","messageId":"623","endLine":11,"endColumn":20},{"ruleId":"620","severity":1,"message":"624","line":45,"column":20,"nodeType":"622","messageId":"623","endLine":45,"endColumn":25},{"ruleId":"620","severity":1,"message":"625","line":4,"column":8,"nodeType":"622","messageId":"623","endLine":4,"endColumn":15},{"ruleId":"620","severity":1,"message":"626","line":4,"column":40,"nodeType":"622","messageId":"623","endLine":4,"endColumn":45},{"ruleId":"627","severity":1,"message":"628","line":13,"column":1,"nodeType":"629","endLine":22,"endColumn":3},{"ruleId":"620","severity":1,"message":"630","line":9,"column":3,"nodeType":"622","messageId":"623","endLine":9,"endColumn":8},{"ruleId":"631","severity":1,"message":"632","line":149,"column":35,"nodeType":"633","messageId":"634","endLine":149,"endColumn":37},{"ruleId":"635","severity":1,"message":"636","line":1097,"column":6,"nodeType":"637","endLine":1097,"endColumn":8,"suggestions":"638"},{"ruleId":"635","severity":1,"message":"639","line":87,"column":6,"nodeType":"637","endLine":87,"endColumn":8,"suggestions":"640"},{"ruleId":"620","severity":1,"message":"641","line":1,"column":27,"nodeType":"622","messageId":"623","endLine":1,"endColumn":36},{"ruleId":"620","severity":1,"message":"642","line":6,"column":10,"nodeType":"622","messageId":"623","endLine":6,"endColumn":15},{"ruleId":"620","severity":1,"message":"643","line":6,"column":38,"nodeType":"622","messageId":"623","endLine":6,"endColumn":46},{"ruleId":"620","severity":1,"message":"644","line":8,"column":3,"nodeType":"622","messageId":"623","endLine":8,"endColumn":15},{"ruleId":"620","severity":1,"message":"645","line":9,"column":3,"nodeType":"622","messageId":"623","endLine":9,"endColumn":16},{"ruleId":"620","severity":1,"message":"646","line":23,"column":9,"nodeType":"622","messageId":"623","endLine":23,"endColumn":15},{"ruleId":"647","severity":1,"message":"648","line":96,"column":9,"nodeType":"649","endLine":102,"endColumn":10},{"ruleId":"650","severity":1,"message":"651","line":183,"column":9,"nodeType":"649","endLine":188,"endColumn":11},{"ruleId":"635","severity":1,"message":"652","line":267,"column":6,"nodeType":"637","endLine":267,"endColumn":8,"suggestions":"653"},{"ruleId":"650","severity":1,"message":"651","line":311,"column":23,"nodeType":"649","endLine":315,"endColumn":25},{"ruleId":"650","severity":1,"message":"651","line":367,"column":23,"nodeType":"649","endLine":371,"endColumn":25},{"ruleId":"650","severity":1,"message":"651","line":408,"column":19,"nodeType":"649","endLine":408,"endColumn":75},{"ruleId":"650","severity":1,"message":"651","line":420,"column":23,"nodeType":"649","endLine":420,"endColumn":74},{"ruleId":"620","severity":1,"message":"641","line":1,"column":27,"nodeType":"622","messageId":"623","endLine":1,"endColumn":36},{"ruleId":"620","severity":1,"message":"625","line":4,"column":8,"nodeType":"622","messageId":"623","endLine":4,"endColumn":15},{"ruleId":"620","severity":1,"message":"654","line":5,"column":8,"nodeType":"622","messageId":"623","endLine":5,"endColumn":20},{"ruleId":"620","severity":1,"message":"655","line":7,"column":3,"nodeType":"622","messageId":"623","endLine":7,"endColumn":9},{"ruleId":"620","severity":1,"message":"656","line":8,"column":3,"nodeType":"622","messageId":"623","endLine":8,"endColumn":7},{"ruleId":"620","severity":1,"message":"630","line":10,"column":3,"nodeType":"622","messageId":"623","endLine":10,"endColumn":8},{"ruleId":"620","severity":1,"message":"657","line":11,"column":3,"nodeType":"622","messageId":"623","endLine":11,"endColumn":6},{"ruleId":"620","severity":1,"message":"658","line":12,"column":3,"nodeType":"622","messageId":"623","endLine":12,"endColumn":6},{"ruleId":"620","severity":1,"message":"659","line":14,"column":3,"nodeType":"622","messageId":"623","endLine":14,"endColumn":7},{"ruleId":"620","severity":1,"message":"660","line":15,"column":3,"nodeType":"622","messageId":"623","endLine":15,"endColumn":10},{"ruleId":"620","severity":1,"message":"661","line":18,"column":3,"nodeType":"622","messageId":"623","endLine":18,"endColumn":21},{"ruleId":"620","severity":1,"message":"644","line":19,"column":3,"nodeType":"622","messageId":"623","endLine":19,"endColumn":15},{"ruleId":"620","severity":1,"message":"662","line":20,"column":3,"nodeType":"622","messageId":"623","endLine":20,"endColumn":15},{"ruleId":"620","severity":1,"message":"663","line":21,"column":3,"nodeType":"622","messageId":"623","endLine":21,"endColumn":16},{"ruleId":"620","severity":1,"message":"646","line":25,"column":9,"nodeType":"622","messageId":"623","endLine":25,"endColumn":15},{"ruleId":"635","severity":1,"message":"664","line":709,"column":6,"nodeType":"637","endLine":709,"endColumn":8,"suggestions":"665"},{"ruleId":"635","severity":1,"message":"666","line":715,"column":6,"nodeType":"637","endLine":715,"endColumn":25,"suggestions":"667"},{"ruleId":"620","severity":1,"message":"668","line":763,"column":24,"nodeType":"622","messageId":"623","endLine":763,"endColumn":39},{"ruleId":"620","severity":1,"message":"669","line":21,"column":25,"nodeType":"622","messageId":"623","endLine":21,"endColumn":31},{"ruleId":"620","severity":1,"message":"670","line":54,"column":5,"nodeType":"622","messageId":"623","endLine":54,"endColumn":27},{"ruleId":"620","severity":1,"message":"671","line":125,"column":9,"nodeType":"622","messageId":"623","endLine":125,"endColumn":15},{"ruleId":"620","severity":1,"message":"672","line":197,"column":13,"nodeType":"622","messageId":"623","endLine":197,"endColumn":27},{"ruleId":"620","severity":1,"message":"673","line":237,"column":7,"nodeType":"622","messageId":"623","endLine":237,"endColumn":23},{"ruleId":"635","severity":1,"message":"674","line":469,"column":6,"nodeType":"637","endLine":469,"endColumn":8,"suggestions":"675"},{"ruleId":"620","severity":1,"message":"676","line":712,"column":27,"nodeType":"622","messageId":"623","endLine":712,"endColumn":39},{"ruleId":"620","severity":1,"message":"677","line":712,"column":41,"nodeType":"622","messageId":"623","endLine":712,"endColumn":59},{"ruleId":"620","severity":1,"message":"668","line":778,"column":24,"nodeType":"622","messageId":"623","endLine":778,"endColumn":39},{"ruleId":"635","severity":1,"message":"678","line":123,"column":6,"nodeType":"637","endLine":123,"endColumn":8,"suggestions":"679"},{"ruleId":"620","severity":1,"message":"668","line":178,"column":24,"nodeType":"622","messageId":"623","endLine":178,"endColumn":39},{"ruleId":"635","severity":1,"message":"664","line":536,"column":6,"nodeType":"637","endLine":536,"endColumn":8,"suggestions":"680"},{"ruleId":"635","severity":1,"message":"666","line":542,"column":6,"nodeType":"637","endLine":542,"endColumn":25,"suggestions":"681"},{"ruleId":"620","severity":1,"message":"668","line":589,"column":24,"nodeType":"622","messageId":"623","endLine":589,"endColumn":39},{"ruleId":"620","severity":1,"message":"682","line":60,"column":5,"nodeType":"622","messageId":"623","endLine":60,"endColumn":28},{"ruleId":"620","severity":1,"message":"683","line":222,"column":11,"nodeType":"622","messageId":"623","endLine":222,"endColumn":22},{"ruleId":"620","severity":1,"message":"684","line":394,"column":13,"nodeType":"622","messageId":"623","endLine":394,"endColumn":21},{"ruleId":"620","severity":1,"message":"684","line":476,"column":13,"nodeType":"622","messageId":"623","endLine":476,"endColumn":21},{"ruleId":"635","severity":1,"message":"678","line":595,"column":6,"nodeType":"637","endLine":595,"endColumn":8,"suggestions":"685"},{"ruleId":"620","severity":1,"message":"668","line":839,"column":24,"nodeType":"622","messageId":"623","endLine":839,"endColumn":39},{"ruleId":"620","severity":1,"message":"686","line":50,"column":9,"nodeType":"622","messageId":"623","endLine":50,"endColumn":18},{"ruleId":"620","severity":1,"message":"687","line":51,"column":9,"nodeType":"622","messageId":"623","endLine":51,"endColumn":21},{"ruleId":"620","severity":1,"message":"672","line":271,"column":13,"nodeType":"622","messageId":"623","endLine":271,"endColumn":27},{"ruleId":"635","severity":1,"message":"688","line":290,"column":6,"nodeType":"637","endLine":290,"endColumn":8,"suggestions":"689"},{"ruleId":"620","severity":1,"message":"668","line":361,"column":24,"nodeType":"622","messageId":"623","endLine":361,"endColumn":39},{"ruleId":"620","severity":1,"message":"669","line":32,"column":25,"nodeType":"622","messageId":"623","endLine":32,"endColumn":31},{"ruleId":"620","severity":1,"message":"670","line":63,"column":5,"nodeType":"622","messageId":"623","endLine":63,"endColumn":27},{"ruleId":"620","severity":1,"message":"672","line":277,"column":13,"nodeType":"622","messageId":"623","endLine":277,"endColumn":27},{"ruleId":"620","severity":1,"message":"672","line":303,"column":13,"nodeType":"622","messageId":"623","endLine":303,"endColumn":27},{"ruleId":"620","severity":1,"message":"672","line":377,"column":13,"nodeType":"622","messageId":"623","endLine":377,"endColumn":27},{"ruleId":"635","severity":1,"message":"690","line":612,"column":6,"nodeType":"637","endLine":612,"endColumn":8,"suggestions":"691"},{"ruleId":"620","severity":1,"message":"668","line":804,"column":24,"nodeType":"622","messageId":"623","endLine":804,"endColumn":39},{"ruleId":"620","severity":1,"message":"692","line":62,"column":9,"nodeType":"622","messageId":"623","endLine":62,"endColumn":20},{"ruleId":"635","severity":1,"message":"693","line":85,"column":6,"nodeType":"637","endLine":85,"endColumn":23,"suggestions":"694"},{"ruleId":"695","severity":1,"message":"696","line":118,"column":15,"nodeType":"649","endLine":121,"endColumn":16},{"ruleId":"620","severity":1,"message":"697","line":33,"column":10,"nodeType":"622","messageId":"623","endLine":33,"endColumn":18},{"ruleId":"620","severity":1,"message":"698","line":33,"column":20,"nodeType":"622","messageId":"623","endLine":33,"endColumn":31},{"ruleId":"620","severity":1,"message":"699","line":114,"column":31,"nodeType":"622","messageId":"623","endLine":114,"endColumn":45},{"ruleId":"620","severity":1,"message":"700","line":114,"column":47,"nodeType":"622","messageId":"623","endLine":114,"endColumn":52},{"ruleId":"635","severity":1,"message":"701","line":50,"column":6,"nodeType":"637","endLine":50,"endColumn":25,"suggestions":"702"},{"ruleId":"620","severity":1,"message":"699","line":328,"column":31,"nodeType":"622","messageId":"623","endLine":328,"endColumn":45},{"ruleId":"620","severity":1,"message":"700","line":329,"column":31,"nodeType":"622","messageId":"623","endLine":329,"endColumn":36},{"ruleId":"620","severity":1,"message":"699","line":491,"column":31,"nodeType":"622","messageId":"623","endLine":491,"endColumn":45},{"ruleId":"620","severity":1,"message":"700","line":492,"column":31,"nodeType":"622","messageId":"623","endLine":492,"endColumn":36},{"ruleId":"620","severity":1,"message":"699","line":528,"column":31,"nodeType":"622","messageId":"623","endLine":528,"endColumn":45},{"ruleId":"620","severity":1,"message":"700","line":529,"column":31,"nodeType":"622","messageId":"623","endLine":529,"endColumn":36},{"ruleId":"620","severity":1,"message":"703","line":10,"column":9,"nodeType":"622","messageId":"623","endLine":10,"endColumn":17},{"ruleId":"620","severity":1,"message":"699","line":122,"column":31,"nodeType":"622","messageId":"623","endLine":122,"endColumn":45},{"ruleId":"620","severity":1,"message":"700","line":122,"column":47,"nodeType":"622","messageId":"623","endLine":122,"endColumn":52},{"ruleId":"620","severity":1,"message":"704","line":125,"column":27,"nodeType":"622","messageId":"623","endLine":125,"endColumn":42},{"ruleId":"647","severity":1,"message":"705","line":23,"column":11,"nodeType":"649","endLine":30,"endColumn":12},{"ruleId":"706","severity":1,"message":"707","line":29,"column":13,"nodeType":"708","endLine":29,"endColumn":28},{"ruleId":"647","severity":1,"message":"648","line":83,"column":19,"nodeType":"649","endLine":83,"endColumn":22},{"ruleId":"706","severity":1,"message":"707","line":64,"column":28,"nodeType":"708","endLine":64,"endColumn":43},{"ruleId":"647","severity":1,"message":"705","line":74,"column":11,"nodeType":"649","endLine":81,"endColumn":12},{"ruleId":"706","severity":1,"message":"707","line":80,"column":13,"nodeType":"708","endLine":80,"endColumn":28},{"ruleId":"709","severity":1,"message":"710","line":132,"column":25,"nodeType":"708","endLine":132,"endColumn":45},{"ruleId":"620","severity":1,"message":"699","line":204,"column":41,"nodeType":"622","messageId":"623","endLine":204,"endColumn":55},{"ruleId":"620","severity":1,"message":"700","line":205,"column":41,"nodeType":"622","messageId":"623","endLine":205,"endColumn":46},{"ruleId":"647","severity":1,"message":"648","line":464,"column":31,"nodeType":"649","endLine":464,"endColumn":34},{"ruleId":"647","severity":1,"message":"648","line":496,"column":43,"nodeType":"649","endLine":496,"endColumn":73},{"ruleId":"647","severity":1,"message":"648","line":515,"column":31,"nodeType":"649","endLine":515,"endColumn":34},{"ruleId":"647","severity":1,"message":"705","line":549,"column":35,"nodeType":"649","endLine":557,"endColumn":36},{"ruleId":"706","severity":1,"message":"707","line":556,"column":37,"nodeType":"708","endLine":556,"endColumn":52},{"ruleId":"709","severity":1,"message":"710","line":570,"column":30,"nodeType":"708","endLine":570,"endColumn":50},{"ruleId":"647","severity":1,"message":"705","line":600,"column":29,"nodeType":"649","endLine":607,"endColumn":30},{"ruleId":"706","severity":1,"message":"707","line":606,"column":31,"nodeType":"708","endLine":606,"endColumn":46},{"ruleId":"709","severity":1,"message":"710","line":623,"column":25,"nodeType":"708","endLine":623,"endColumn":45},{"ruleId":"647","severity":1,"message":"648","line":659,"column":17,"nodeType":"649","endLine":673,"endColumn":18},{"ruleId":"647","severity":1,"message":"648","line":693,"column":17,"nodeType":"649","endLine":707,"endColumn":18},{"ruleId":"647","severity":1,"message":"648","line":721,"column":17,"nodeType":"649","endLine":735,"endColumn":18},{"ruleId":"709","severity":1,"message":"710","line":743,"column":25,"nodeType":"708","endLine":743,"endColumn":45},{"ruleId":"647","severity":1,"message":"648","line":758,"column":29,"nodeType":"649","endLine":770,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":783,"column":33,"nodeType":"649","endLine":795,"endColumn":34},{"ruleId":"647","severity":1,"message":"648","line":805,"column":33,"nodeType":"649","endLine":817,"endColumn":34},{"ruleId":"647","severity":1,"message":"648","line":829,"column":31,"nodeType":"649","endLine":841,"endColumn":32},{"ruleId":"647","severity":1,"message":"648","line":854,"column":29,"nodeType":"649","endLine":866,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":876,"column":29,"nodeType":"649","endLine":888,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":900,"column":29,"nodeType":"649","endLine":912,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":922,"column":29,"nodeType":"649","endLine":934,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":956,"column":35,"nodeType":"649","endLine":969,"endColumn":36},{"ruleId":"647","severity":1,"message":"648","line":982,"column":39,"nodeType":"649","endLine":995,"endColumn":40},{"ruleId":"647","severity":1,"message":"648","line":1005,"column":39,"nodeType":"649","endLine":1018,"endColumn":40},{"ruleId":"647","severity":1,"message":"648","line":1030,"column":37,"nodeType":"649","endLine":1043,"endColumn":38},{"ruleId":"709","severity":1,"message":"710","line":1062,"column":25,"nodeType":"708","endLine":1062,"endColumn":45},{"ruleId":"706","severity":1,"message":"707","line":39,"column":28,"nodeType":"708","endLine":39,"endColumn":43},{"ruleId":"647","severity":1,"message":"705","line":49,"column":11,"nodeType":"649","endLine":56,"endColumn":12},{"ruleId":"706","severity":1,"message":"707","line":55,"column":13,"nodeType":"708","endLine":55,"endColumn":28},{"ruleId":"709","severity":1,"message":"710","line":105,"column":25,"nodeType":"708","endLine":105,"endColumn":45},{"ruleId":"647","severity":1,"message":"648","line":169,"column":23,"nodeType":"649","endLine":169,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":200,"column":35,"nodeType":"649","endLine":200,"endColumn":65},{"ruleId":"647","severity":1,"message":"648","line":219,"column":23,"nodeType":"649","endLine":219,"endColumn":26},{"ruleId":"709","severity":1,"message":"710","line":226,"column":30,"nodeType":"708","endLine":226,"endColumn":50},{"ruleId":"647","severity":1,"message":"648","line":245,"column":28,"nodeType":"649","endLine":245,"endColumn":31},{"ruleId":"709","severity":1,"message":"710","line":251,"column":25,"nodeType":"708","endLine":251,"endColumn":45},{"ruleId":"647","severity":1,"message":"648","line":287,"column":17,"nodeType":"649","endLine":299,"endColumn":18},{"ruleId":"647","severity":1,"message":"648","line":327,"column":17,"nodeType":"649","endLine":339,"endColumn":18},{"ruleId":"709","severity":1,"message":"710","line":347,"column":25,"nodeType":"708","endLine":347,"endColumn":45},{"ruleId":"647","severity":1,"message":"648","line":358,"column":25,"nodeType":"649","endLine":370,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":380,"column":25,"nodeType":"649","endLine":392,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":404,"column":23,"nodeType":"649","endLine":416,"endColumn":24},{"ruleId":"709","severity":1,"message":"710","line":426,"column":25,"nodeType":"708","endLine":426,"endColumn":45},{"ruleId":"620","severity":1,"message":"654","line":4,"column":8,"nodeType":"622","messageId":"623","endLine":4,"endColumn":20},{"ruleId":"620","severity":1,"message":"655","line":6,"column":3,"nodeType":"622","messageId":"623","endLine":6,"endColumn":9},{"ruleId":"620","severity":1,"message":"711","line":7,"column":3,"nodeType":"622","messageId":"623","endLine":7,"endColumn":9},{"ruleId":"620","severity":1,"message":"656","line":8,"column":3,"nodeType":"622","messageId":"623","endLine":8,"endColumn":7},{"ruleId":"635","severity":1,"message":"701","line":76,"column":6,"nodeType":"637","endLine":76,"endColumn":23,"suggestions":"712"},{"ruleId":"635","severity":1,"message":"701","line":96,"column":6,"nodeType":"637","endLine":96,"endColumn":24,"suggestions":"713"},{"ruleId":"635","severity":1,"message":"701","line":116,"column":6,"nodeType":"637","endLine":116,"endColumn":24,"suggestions":"714"},{"ruleId":"635","severity":1,"message":"701","line":134,"column":6,"nodeType":"637","endLine":134,"endColumn":25,"suggestions":"715"},{"ruleId":"620","severity":1,"message":"716","line":45,"column":9,"nodeType":"622","messageId":"623","endLine":45,"endColumn":28},{"ruleId":"620","severity":1,"message":"717","line":47,"column":11,"nodeType":"622","messageId":"623","endLine":47,"endColumn":25},{"ruleId":"647","severity":1,"message":"648","line":188,"column":15,"nodeType":"649","endLine":193,"endColumn":16},{"ruleId":"647","severity":1,"message":"648","line":236,"column":15,"nodeType":"649","endLine":241,"endColumn":16},{"ruleId":"647","severity":1,"message":"648","line":280,"column":9,"nodeType":"649","endLine":287,"endColumn":10},{"ruleId":"620","severity":1,"message":"717","line":363,"column":15,"nodeType":"622","messageId":"623","endLine":363,"endColumn":29},{"ruleId":"620","severity":1,"message":"625","line":2,"column":8,"nodeType":"622","messageId":"623","endLine":2,"endColumn":15},{"ruleId":"718","severity":1,"message":"719","line":15,"column":5,"nodeType":"720","messageId":"721","endLine":34,"endColumn":6},{"ruleId":"718","severity":1,"message":"719","line":43,"column":5,"nodeType":"720","messageId":"721","endLine":84,"endColumn":6},{"ruleId":"718","severity":1,"message":"719","line":97,"column":5,"nodeType":"720","messageId":"721","endLine":117,"endColumn":6},{"ruleId":"631","severity":1,"message":"632","line":145,"column":18,"nodeType":"633","messageId":"634","endLine":145,"endColumn":20},{"ruleId":"631","severity":1,"message":"632","line":168,"column":29,"nodeType":"633","messageId":"634","endLine":168,"endColumn":31},{"ruleId":"631","severity":1,"message":"632","line":183,"column":22,"nodeType":"633","messageId":"634","endLine":183,"endColumn":24},{"ruleId":"631","severity":1,"message":"632","line":185,"column":22,"nodeType":"633","messageId":"634","endLine":185,"endColumn":24},{"ruleId":"620","severity":1,"message":"668","line":346,"column":24,"nodeType":"622","messageId":"623","endLine":346,"endColumn":39},{"ruleId":"635","severity":1,"message":"722","line":71,"column":6,"nodeType":"637","endLine":71,"endColumn":39,"suggestions":"723"},{"ruleId":"635","severity":1,"message":"701","line":81,"column":6,"nodeType":"637","endLine":81,"endColumn":25,"suggestions":"724"},{"ruleId":"620","severity":1,"message":"699","line":397,"column":29,"nodeType":"622","messageId":"623","endLine":397,"endColumn":43},{"ruleId":"620","severity":1,"message":"700","line":397,"column":45,"nodeType":"622","messageId":"623","endLine":397,"endColumn":50},{"ruleId":"620","severity":1,"message":"699","line":427,"column":29,"nodeType":"622","messageId":"623","endLine":427,"endColumn":43},{"ruleId":"620","severity":1,"message":"700","line":427,"column":45,"nodeType":"622","messageId":"623","endLine":427,"endColumn":50},{"ruleId":"620","severity":1,"message":"699","line":458,"column":29,"nodeType":"622","messageId":"623","endLine":458,"endColumn":43},{"ruleId":"620","severity":1,"message":"700","line":458,"column":45,"nodeType":"622","messageId":"623","endLine":458,"endColumn":50},{"ruleId":"635","severity":1,"message":"725","line":108,"column":6,"nodeType":"637","endLine":108,"endColumn":71,"suggestions":"726"},{"ruleId":"635","severity":1,"message":"701","line":118,"column":6,"nodeType":"637","endLine":118,"endColumn":25,"suggestions":"727"},{"ruleId":"635","severity":1,"message":"722","line":160,"column":6,"nodeType":"637","endLine":166,"endColumn":4,"suggestions":"728"},{"ruleId":"635","severity":1,"message":"701","line":176,"column":6,"nodeType":"637","endLine":176,"endColumn":25,"suggestions":"729"},{"ruleId":"635","severity":1,"message":"701","line":186,"column":6,"nodeType":"637","endLine":186,"endColumn":36,"suggestions":"730"},{"ruleId":"620","severity":1,"message":"699","line":1104,"column":35,"nodeType":"622","messageId":"623","endLine":1104,"endColumn":49},{"ruleId":"620","severity":1,"message":"700","line":1105,"column":35,"nodeType":"622","messageId":"623","endLine":1105,"endColumn":40},{"ruleId":"620","severity":1,"message":"731","line":27,"column":5,"nodeType":"622","messageId":"623","endLine":27,"endColumn":16},{"ruleId":"620","severity":1,"message":"732","line":32,"column":5,"nodeType":"622","messageId":"623","endLine":32,"endColumn":19},{"ruleId":"635","severity":1,"message":"733","line":75,"column":6,"nodeType":"637","endLine":75,"endColumn":37,"suggestions":"734"},{"ruleId":"620","severity":1,"message":"699","line":154,"column":29,"nodeType":"622","messageId":"623","endLine":154,"endColumn":43},{"ruleId":"620","severity":1,"message":"700","line":154,"column":45,"nodeType":"622","messageId":"623","endLine":154,"endColumn":50},{"ruleId":"620","severity":1,"message":"700","line":196,"column":45,"nodeType":"622","messageId":"623","endLine":196,"endColumn":50},{"ruleId":"620","severity":1,"message":"699","line":227,"column":29,"nodeType":"622","messageId":"623","endLine":227,"endColumn":43},{"ruleId":"620","severity":1,"message":"700","line":227,"column":45,"nodeType":"622","messageId":"623","endLine":227,"endColumn":50},{"ruleId":"620","severity":1,"message":"700","line":276,"column":45,"nodeType":"622","messageId":"623","endLine":276,"endColumn":50},{"ruleId":"635","severity":1,"message":"735","line":129,"column":6,"nodeType":"637","endLine":129,"endColumn":52,"suggestions":"736"},{"ruleId":"620","severity":1,"message":"737","line":686,"column":31,"nodeType":"622","messageId":"623","endLine":686,"endColumn":42},{"ruleId":"635","severity":1,"message":"722","line":64,"column":6,"nodeType":"637","endLine":64,"endColumn":20,"suggestions":"738"},{"ruleId":"635","severity":1,"message":"701","line":74,"column":6,"nodeType":"637","endLine":74,"endColumn":25,"suggestions":"739"},{"ruleId":"620","severity":1,"message":"699","line":306,"column":33,"nodeType":"622","messageId":"623","endLine":306,"endColumn":47},{"ruleId":"620","severity":1,"message":"700","line":306,"column":49,"nodeType":"622","messageId":"623","endLine":306,"endColumn":54},{"ruleId":"620","severity":1,"message":"740","line":90,"column":7,"nodeType":"622","messageId":"623","endLine":90,"endColumn":17},{"ruleId":"620","severity":1,"message":"668","line":336,"column":24,"nodeType":"622","messageId":"623","endLine":336,"endColumn":39},{"ruleId":"647","severity":1,"message":"648","line":249,"column":25,"nodeType":"649","endLine":249,"endColumn":28},{"ruleId":"635","severity":1,"message":"741","line":275,"column":6,"nodeType":"637","endLine":275,"endColumn":8,"suggestions":"742"},{"ruleId":"620","severity":1,"message":"668","line":353,"column":24,"nodeType":"622","messageId":"623","endLine":353,"endColumn":39},{"ruleId":"620","severity":1,"message":"743","line":5,"column":25,"nodeType":"622","messageId":"623","endLine":5,"endColumn":28},{"ruleId":"620","severity":1,"message":"744","line":5,"column":30,"nodeType":"622","messageId":"623","endLine":5,"endColumn":34},{"ruleId":"620","severity":1,"message":"745","line":5,"column":36,"nodeType":"622","messageId":"623","endLine":5,"endColumn":44},{"ruleId":"620","severity":1,"message":"746","line":5,"column":46,"nodeType":"622","messageId":"623","endLine":5,"endColumn":52},{"ruleId":"635","severity":1,"message":"747","line":119,"column":6,"nodeType":"637","endLine":119,"endColumn":8,"suggestions":"748"},{"ruleId":"620","severity":1,"message":"668","line":156,"column":24,"nodeType":"622","messageId":"623","endLine":156,"endColumn":39},{"ruleId":"620","severity":1,"message":"660","line":15,"column":3,"nodeType":"622","messageId":"623","endLine":15,"endColumn":10},{"ruleId":"620","severity":1,"message":"749","line":20,"column":3,"nodeType":"622","messageId":"623","endLine":20,"endColumn":19},{"ruleId":"620","severity":1,"message":"750","line":21,"column":3,"nodeType":"622","messageId":"623","endLine":21,"endColumn":21},{"ruleId":"620","severity":1,"message":"751","line":22,"column":3,"nodeType":"622","messageId":"623","endLine":22,"endColumn":14},{"ruleId":"620","severity":1,"message":"752","line":23,"column":3,"nodeType":"622","messageId":"623","endLine":23,"endColumn":25},{"ruleId":"647","severity":1,"message":"648","line":186,"column":23,"nodeType":"649","endLine":186,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":189,"column":23,"nodeType":"649","endLine":189,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":192,"column":23,"nodeType":"649","endLine":192,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":195,"column":23,"nodeType":"649","endLine":195,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":201,"column":17,"nodeType":"649","endLine":201,"endColumn":20},{"ruleId":"647","severity":1,"message":"648","line":228,"column":23,"nodeType":"649","endLine":228,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":231,"column":23,"nodeType":"649","endLine":231,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":234,"column":23,"nodeType":"649","endLine":234,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":237,"column":23,"nodeType":"649","endLine":237,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":240,"column":23,"nodeType":"649","endLine":240,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":243,"column":23,"nodeType":"649","endLine":243,"endColumn":26},{"ruleId":"647","severity":1,"message":"648","line":249,"column":17,"nodeType":"649","endLine":249,"endColumn":20},{"ruleId":"620","severity":1,"message":"717","line":402,"column":19,"nodeType":"622","messageId":"623","endLine":402,"endColumn":33},{"ruleId":"635","severity":1,"message":"753","line":625,"column":6,"nodeType":"637","endLine":625,"endColumn":8,"suggestions":"754"},{"ruleId":"695","severity":1,"message":"696","line":656,"column":17,"nodeType":"649","endLine":659,"endColumn":19},{"ruleId":"620","severity":1,"message":"668","line":746,"column":24,"nodeType":"622","messageId":"623","endLine":746,"endColumn":39},{"ruleId":"620","severity":1,"message":"683","line":126,"column":11,"nodeType":"622","messageId":"623","endLine":126,"endColumn":22},{"ruleId":"620","severity":1,"message":"684","line":244,"column":13,"nodeType":"622","messageId":"623","endLine":244,"endColumn":21},{"ruleId":"635","severity":1,"message":"755","line":391,"column":6,"nodeType":"637","endLine":391,"endColumn":8,"suggestions":"756"},{"ruleId":"620","severity":1,"message":"668","line":525,"column":24,"nodeType":"622","messageId":"623","endLine":525,"endColumn":39},{"ruleId":"620","severity":1,"message":"757","line":24,"column":8,"nodeType":"622","messageId":"623","endLine":24,"endColumn":20},{"ruleId":"620","severity":1,"message":"758","line":25,"column":8,"nodeType":"622","messageId":"623","endLine":25,"endColumn":12},{"ruleId":"620","severity":1,"message":"759","line":38,"column":5,"nodeType":"622","messageId":"623","endLine":38,"endColumn":25},{"ruleId":"620","severity":1,"message":"716","line":44,"column":9,"nodeType":"622","messageId":"623","endLine":44,"endColumn":28},{"ruleId":"620","severity":1,"message":"717","line":46,"column":11,"nodeType":"622","messageId":"623","endLine":46,"endColumn":25},{"ruleId":"647","severity":1,"message":"648","line":187,"column":15,"nodeType":"649","endLine":192,"endColumn":16},{"ruleId":"706","severity":1,"message":"707","line":89,"column":28,"nodeType":"708","endLine":89,"endColumn":43},{"ruleId":"647","severity":1,"message":"705","line":99,"column":11,"nodeType":"649","endLine":106,"endColumn":12},{"ruleId":"706","severity":1,"message":"707","line":105,"column":13,"nodeType":"708","endLine":105,"endColumn":28},{"ruleId":"647","severity":1,"message":"648","line":111,"column":11,"nodeType":"649","endLine":111,"endColumn":14},{"ruleId":"647","severity":1,"message":"648","line":114,"column":11,"nodeType":"649","endLine":114,"endColumn":14},{"ruleId":"647","severity":1,"message":"648","line":117,"column":11,"nodeType":"649","endLine":117,"endColumn":14},{"ruleId":"647","severity":1,"message":"705","line":188,"column":27,"nodeType":"649","endLine":195,"endColumn":28},{"ruleId":"706","severity":1,"message":"707","line":194,"column":29,"nodeType":"708","endLine":194,"endColumn":44},{"ruleId":"620","severity":1,"message":"699","line":312,"column":29,"nodeType":"622","messageId":"623","endLine":312,"endColumn":43},{"ruleId":"620","severity":1,"message":"700","line":312,"column":45,"nodeType":"622","messageId":"623","endLine":312,"endColumn":50},{"ruleId":"620","severity":1,"message":"699","line":425,"column":29,"nodeType":"622","messageId":"623","endLine":425,"endColumn":43},{"ruleId":"620","severity":1,"message":"700","line":425,"column":45,"nodeType":"622","messageId":"623","endLine":425,"endColumn":50},{"ruleId":"709","severity":1,"message":"710","line":494,"column":25,"nodeType":"708","endLine":494,"endColumn":45},{"ruleId":"620","severity":1,"message":"699","line":566,"column":41,"nodeType":"622","messageId":"623","endLine":566,"endColumn":55},{"ruleId":"620","severity":1,"message":"700","line":567,"column":41,"nodeType":"622","messageId":"623","endLine":567,"endColumn":46},{"ruleId":"647","severity":1,"message":"648","line":826,"column":31,"nodeType":"649","endLine":826,"endColumn":34},{"ruleId":"647","severity":1,"message":"648","line":858,"column":43,"nodeType":"649","endLine":858,"endColumn":73},{"ruleId":"647","severity":1,"message":"648","line":877,"column":31,"nodeType":"649","endLine":877,"endColumn":34},{"ruleId":"647","severity":1,"message":"705","line":911,"column":35,"nodeType":"649","endLine":919,"endColumn":36},{"ruleId":"706","severity":1,"message":"707","line":918,"column":37,"nodeType":"708","endLine":918,"endColumn":52},{"ruleId":"709","severity":1,"message":"710","line":932,"column":30,"nodeType":"708","endLine":932,"endColumn":50},{"ruleId":"647","severity":1,"message":"705","line":962,"column":29,"nodeType":"649","endLine":969,"endColumn":30},{"ruleId":"706","severity":1,"message":"707","line":968,"column":31,"nodeType":"708","endLine":968,"endColumn":46},{"ruleId":"647","severity":1,"message":"648","line":984,"column":29,"nodeType":"649","endLine":992,"endColumn":30},{"ruleId":"709","severity":1,"message":"710","line":1011,"column":25,"nodeType":"708","endLine":1011,"endColumn":45},{"ruleId":"647","severity":1,"message":"648","line":1026,"column":29,"nodeType":"649","endLine":1038,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":1051,"column":33,"nodeType":"649","endLine":1063,"endColumn":34},{"ruleId":"647","severity":1,"message":"648","line":1073,"column":33,"nodeType":"649","endLine":1085,"endColumn":34},{"ruleId":"647","severity":1,"message":"648","line":1097,"column":31,"nodeType":"649","endLine":1109,"endColumn":32},{"ruleId":"647","severity":1,"message":"648","line":1122,"column":29,"nodeType":"649","endLine":1134,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":1144,"column":29,"nodeType":"649","endLine":1156,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":1168,"column":29,"nodeType":"649","endLine":1180,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":1190,"column":29,"nodeType":"649","endLine":1202,"endColumn":30},{"ruleId":"647","severity":1,"message":"648","line":1224,"column":35,"nodeType":"649","endLine":1237,"endColumn":36},{"ruleId":"647","severity":1,"message":"648","line":1250,"column":39,"nodeType":"649","endLine":1263,"endColumn":40},{"ruleId":"647","severity":1,"message":"648","line":1273,"column":39,"nodeType":"649","endLine":1286,"endColumn":40},{"ruleId":"647","severity":1,"message":"648","line":1298,"column":37,"nodeType":"649","endLine":1311,"endColumn":38},"no-native-reassign",["760"],"no-negated-in-lhs",["761"],"no-unused-vars","'RecoveryPass' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","'isEmpty' is defined but never used.","'PURGE' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Input' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handlerAsyncCallAppis', 'handlerCallGetInvitationUser', and 'props'. Either include them or remove the dependency array.","ArrayExpression",["762"],"React Hook useEffect has missing dependencies: 'handlerAsyncCallApiis' and 'handlerFinishSession'. Either include them or remove the dependency array.",["763"],"'useEffect' is defined but never used.","'Radio' is defined but never used.","'Skeleton' is defined but never used.","'UserOutlined' is defined but never used.","'PhoneOutlined' is defined but never used.","'Option' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'dataProfile' and 'history'. Either include them or remove the dependency array.",["764"],"'NumberFormat' is defined but never used.","'Layout' is defined but never used.","'Rate' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Spin' is defined but never used.","'Tooltip' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'SyncOutlined' is defined but never used.","'CloseOutlined' is defined but never used.","React Hook useEffect has missing dependencies: 'handlerCallAsyncApis' and 'match'. Either include them or remove the dependency array.",["765"],"React Hook useEffect has a missing dependency: 'hanlderCallGetTypeFormProperties'. Either include it or remove the dependency array.",["766"],"'dataProfileMenu' is assigned a value but never used.","'HEADER' is defined but never used.","'callGetContractComment' is assigned a value but never used.","'argsv2' is assigned a value but never used.","'responseResult' is assigned a value but never used.","'idCustomerTenant' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetAllCustomerTenantById'. Either include it or remove the dependency array.",["767"],"'idCustomerTF' is assigned a value but never used.","'idCustomerTenantTF' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callAsynApis'. Either include it or remove the dependency array.",["768"],["769"],["770"],"'callAddDocumentContract' is assigned a value but never used.","'arrayResult' is assigned a value but never used.","'response' is assigned a value but never used.",["771"],"'dotChange' is assigned a value but never used.","'contentStyle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handlerCallGetAllCustomerTenantById' and 'handlerCallGetAllDocumentTypes'. Either include them or remove the dependency array.",["772"],"React Hook useEffect has a missing dependency: 'handlerCalllSyncApis'. Either include it or remove the dependency array.",["773"],"'LoadingSpin' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataProfile.idUserType' and 'openSection'. Either include them or remove the dependency array.",["774"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'property' is assigned a value but never used.","'setProperty' is assigned a value but never used.","'formattedValue' is assigned a value but never used.","'value' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dataForm'. Either include it or remove the dependency array. You can also do a functional update 'setDataForm(d => ...)' if you only need 'dataForm' in the 'setDataForm' call.",["775"],"'TextArea' is assigned a value but never used.","'configureOption' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","'Avatar' is defined but never used.",["776"],["777"],["778"],["779"],"'renderCardComponent' is assigned a value but never used.","'contractStatus' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'onChangeZipCode'. Either include it or remove the dependency array.",["780"],["781"],"React Hook useEffect has missing dependencies: 'dataForm.idCountryNationality', 'dataForm.idMaritalStatus', 'dataForm.idType', 'onChangeZipCode', and 'visibleComponents'. Either include them or remove the dependency array. You can also do a functional update 'setVisibleComponents(v => ...)' if you only need 'visibleComponents' in the 'setVisibleComponents' call.",["782"],["783"],["784"],["785"],["786"],"'onClickBack' is assigned a value but never used.","'dataProperties' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'frontFunctions'. Either include it or remove the dependency array.",["787"],"React Hook useEffect has missing dependencies: 'dataCommerceSociality', 'dataStates', and 'visibleComponents'. Either include them or remove the dependency array. You can also do a functional update 'setVisibleComponents(v => ...)' if you only need 'visibleComponents' in the 'setVisibleComponents' call.",["788"],"'valueSelect' is assigned a value but never used.",["789"],["790"],"'idCustomer' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handlerCallGetAllProspectStatus', 'handlerCallGetLandingProspectCoincidences', and 'handlerCallGetLandingProspectStats'. Either include them or remove the dependency array.",["791"],"'Tag' is defined but never used.","'Menu' is defined but never used.","'Dropdown' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetCustomerAgentCoincidences'. Either include it or remove the dependency array.",["792"],"'DownloadOutlined' is defined but never used.","'CheckCircleTwoTone' is defined but never used.","'EditTwoTone' is defined but never used.","'QuestionCircleOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetLegalContractCoincidences'. Either include it or remove the dependency array.",["793"],"React Hook useEffect has missing dependencies: 'callAsynApis', 'handlerCallGetAllPersonalReferencesStatus', and 'handlerCallGetAllRelationshipTypes'. Either include them or remove the dependency array.",["794"],"'DocumentIcon' is defined but never used.","'Lock' is defined but never used.","'onOpenUploadDocument' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"795","fix":"796"},{"desc":"797","fix":"798"},{"desc":"799","fix":"800"},{"desc":"801","fix":"802"},{"desc":"803","fix":"804"},{"desc":"805","fix":"806"},{"desc":"807","fix":"808"},{"desc":"801","fix":"809"},{"desc":"803","fix":"810"},{"desc":"807","fix":"811"},{"desc":"812","fix":"813"},{"desc":"814","fix":"815"},{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},{"desc":"820","fix":"821"},{"desc":"822","fix":"823"},{"desc":"824","fix":"825"},{"desc":"826","fix":"827"},{"desc":"828","fix":"829"},{"desc":"818","fix":"830"},{"desc":"831","fix":"832"},{"desc":"818","fix":"833"},{"desc":"834","fix":"835"},{"desc":"818","fix":"836"},{"desc":"837","fix":"838"},{"desc":"839","fix":"840"},{"desc":"841","fix":"842"},{"desc":"843","fix":"844"},{"desc":"818","fix":"845"},{"desc":"846","fix":"847"},{"desc":"848","fix":"849"},{"desc":"850","fix":"851"},{"desc":"852","fix":"853"},"Update the dependencies array to be: [handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",{"range":"854","text":"855"},"Update the dependencies array to be: [handlerAsyncCallApiis, handlerFinishSession]",{"range":"856","text":"857"},"Update the dependencies array to be: [dataProfile, history]",{"range":"858","text":"859"},"Update the dependencies array to be: [handlerCallAsyncApis, match]",{"range":"860","text":"861"},"Update the dependencies array to be: [current, dataForm, hanlderCallGetTypeFormProperties]",{"range":"862","text":"863"},"Update the dependencies array to be: [handlerCallGetAllCustomerTenantById]",{"range":"864","text":"865"},"Update the dependencies array to be: [callAsynApis]",{"range":"866","text":"867"},{"range":"868","text":"861"},{"range":"869","text":"863"},{"range":"870","text":"867"},"Update the dependencies array to be: [handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",{"range":"871","text":"872"},"Update the dependencies array to be: [handlerCalllSyncApis]",{"range":"873","text":"874"},"Update the dependencies array to be: [dataGetContract, dataProfile.idUserType, openSection]",{"range":"875","text":"876"},"Update the dependencies array to be: [dataForm, dataZipCodeAdress]",{"range":"877","text":"878"},"Update the dependencies array to be: [dataForm, dataOwnerSearch]",{"range":"879","text":"880"},"Update the dependencies array to be: [dataForm, dataTenantSearch]",{"range":"881","text":"882"},"Update the dependencies array to be: [dataForm, dataSecondTenant]",{"range":"883","text":"884"},"Update the dependencies array to be: [dataAdviserSearch, dataForm]",{"range":"885","text":"886"},"Update the dependencies array to be: [dataFormSave, dataPropertyTypes, onChangeZipCode]",{"range":"887","text":"888"},{"range":"889","text":"878"},"Update the dependencies array to be: [dataFormSave, dataNationalities, dataIdTypes, dataMaritalStatus, visibleComponents, onChangeZipCode, dataForm.idCountryNationality, dataForm.idType, dataForm.idMaritalStatus]",{"range":"890","text":"891"},{"range":"892","text":"878"},"Update the dependencies array to be: [dataNationalities, dataIdTypes, dataFormSave, dataMaritalStatus, dataMaritalRegime, onChangeZipCode]",{"range":"893","text":"894"},{"range":"895","text":"878"},"Update the dependencies array to be: [dataForm, dataZipCodeAdressEndorsement]",{"range":"896","text":"897"},"Update the dependencies array to be: [dataFormSave, dataOccupations, frontFunctions]",{"range":"898","text":"899"},"Update the dependencies array to be: [dataNationalities, dataIdTypes, dataFormSave, visibleComponents, dataCommerceSociality, dataStates]",{"range":"900","text":"901"},"Update the dependencies array to be: [dataFormSave, onChangeZipCode]",{"range":"902","text":"903"},{"range":"904","text":"878"},"Update the dependencies array to be: [handlerCallGetAllProspectStatus, handlerCallGetLandingProspectCoincidences, handlerCallGetLandingProspectStats]",{"range":"905","text":"906"},"Update the dependencies array to be: [handlerCallGetCustomerAgentCoincidences]",{"range":"907","text":"908"},"Update the dependencies array to be: [handlerCallGetLegalContractCoincidences]",{"range":"909","text":"910"},"Update the dependencies array to be: [callAsynApis, handlerCallGetAllPersonalReferencesStatus, handlerCallGetAllRelationshipTypes]",{"range":"911","text":"912"},[38171,38173],"[handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",[2574,2576],"[handlerAsyncCallApiis, handlerFinishSession]",[8387,8389],"[dataProfile, history]",[22397,22399],"[handlerCallAsyncApis, match]",[22549,22568],"[current, dataForm, hanlderCallGetTypeFormProperties]",[14972,14974],"[handlerCallGetAllCustomerTenantById]",[3791,3793],"[callAsynApis]",[16846,16848],[16998,17017],[19079,19081],[9118,9120],"[handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",[19219,19221],"[handlerCalllSyncApis]",[2747,2764],"[dataGetContract, dataProfile.idUserType, openSection]",[1433,1452],"[dataForm, dataZipCodeAdress]",[1836,1853],"[dataForm, dataOwnerSearch]",[2406,2424],"[dataForm, dataTenantSearch]",[2985,3003],"[dataForm, dataSecondTenant]",[3487,3506],"[dataAdviserSearch, dataForm]",[2048,2081],"[dataFormSave, dataPropertyTypes, onChangeZipCode]",[2311,2330],[3378,3443],"[dataFormSave, dataNationalities, dataIdTypes, dataMaritalStatus, visibleComponents, onChangeZipCode, dataForm.idCountryNationality, dataForm.idType, dataForm.idMaritalStatus]",[3673,3692],[5372,5487],"[dataNationalities, dataIdTypes, dataFormSave, dataMaritalStatus, dataMaritalRegime, onChangeZipCode]",[5753,5772],[6057,6087],"[dataForm, dataZipCodeAdressEndorsement]",[2239,2270],"[dataFormSave, dataOccupations, frontFunctions]",[4422,4468],"[dataNationalities, dataIdTypes, dataFormSave, visibleComponents, dataCommerceSociality, dataStates]",[1767,1781],"[dataFormSave, onChangeZipCode]",[2011,2030],[7746,7748],"[handlerCallGetAllProspectStatus, handlerCallGetLandingProspectCoincidences, handlerCallGetLandingProspectStats]",[3281,3283],"[handlerCallGetCustomerAgentCoincidences]",[20586,20588],"[handlerCallGetLegalContractCoincidences]",[12378,12380],"[callAsynApis, handlerCallGetAllPersonalReferencesStatus, handlerCallGetAllRelationshipTypes]"]