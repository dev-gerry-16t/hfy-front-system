[{"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js":"1","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js":"2","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js":"3","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx":"4","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js":"5","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js":"6","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js":"7","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js":"8","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js":"9","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js":"10","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js":"11","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js":"12","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js":"13","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx":"14","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx":"15","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Recovery\\RecoveryPass.jsx":"16","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx":"17","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js":"18","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js":"19","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js":"20","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomInput.jsx":"21","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\section\\sectionChangeImage.jsx":"22","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx":"23","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx":"24","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\adviser.jsx":"25","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormOwner.jsx":"26","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administrator.jsx":"27","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\MakeScreen\\makeScreen.jsx":"28","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx":"29","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx":"30","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailableOwner.jsx":"31","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx":"32","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx":"33","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx":"34","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx":"35","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx":"36","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx":"37","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx":"38","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx":"39","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx":"40","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUploadDocuments.jsx":"41","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUserDetailAdviser.jsx":"42","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenant.jsx":"43","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUser.jsx":"44","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionAddUsers.jsx":"45","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwner.jsx":"46","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChartPie.jsx":"47","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChart.jsx":"48","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js":"49","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx":"50","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx":"51","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx":"52","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx":"53","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\customFileUpload.jsx":"54","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx":"55","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx":"56","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx":"57","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx":"58","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx":"59","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx":"60","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx":"61","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx":"62","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx":"63","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx":"64","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionDepositGuarantee.jsx":"65","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionCardOwner.jsx":"66","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionStatsChart.jsx":"67","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx":"68","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customReference.jsx":"69","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Leads\\leads.jsx":"70","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\agents.jsx":"71","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Attorney\\attorney.jsx":"72","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administratorControlDesk.jsx":"73","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwnerControl.jsx":"74","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenantControl.jsx":"75"},{"size":1174,"mtime":1614705795061,"results":"76","hashOfConfig":"77"},{"size":3175,"mtime":1614705794933,"results":"78","hashOfConfig":"77"},{"size":362,"mtime":499162500000,"results":"79","hashOfConfig":"77"},{"size":7182,"mtime":1616468181054,"results":"80","hashOfConfig":"77"},{"size":103596,"mtime":1616632916372,"results":"81","hashOfConfig":"77"},{"size":6911,"mtime":1616632857309,"results":"82","hashOfConfig":"77"},{"size":1234,"mtime":1614705795080,"results":"83","hashOfConfig":"77"},{"size":1312,"mtime":1616212396048,"results":"84","hashOfConfig":"77"},{"size":250,"mtime":1616625987119,"results":"85","hashOfConfig":"77"},{"size":4811,"mtime":1614705795064,"results":"86","hashOfConfig":"77"},{"size":1673,"mtime":1608319107999,"results":"87","hashOfConfig":"77"},{"size":542,"mtime":1614705794935,"results":"88","hashOfConfig":"77"},{"size":106,"mtime":1608319107999,"results":"89","hashOfConfig":"77"},{"size":39043,"mtime":1616530164701,"results":"90","hashOfConfig":"77"},{"size":3195,"mtime":1614705795048,"results":"91","hashOfConfig":"77"},{"size":21204,"mtime":1616530164701,"results":"92","hashOfConfig":"77"},{"size":16110,"mtime":1616530083995,"results":"93","hashOfConfig":"77"},{"size":821,"mtime":1614705795078,"results":"94","hashOfConfig":"77"},{"size":3352,"mtime":1616114321213,"results":"95","hashOfConfig":"77"},{"size":261,"mtime":1614705795075,"results":"96","hashOfConfig":"77"},{"size":745,"mtime":1614705795046,"results":"97","hashOfConfig":"77"},{"size":2469,"mtime":1614961123422,"results":"98","hashOfConfig":"77"},{"size":25302,"mtime":1616638005466,"results":"99","hashOfConfig":"77"},{"size":27979,"mtime":1615494546755,"results":"100","hashOfConfig":"77"},{"size":6294,"mtime":1615493980547,"results":"101","hashOfConfig":"77"},{"size":17926,"mtime":1616607734201,"results":"102","hashOfConfig":"77"},{"size":29649,"mtime":1616468278422,"results":"103","hashOfConfig":"77"},{"size":440,"mtime":1614705795103,"results":"104","hashOfConfig":"77"},{"size":12636,"mtime":1615494585034,"results":"105","hashOfConfig":"77"},{"size":27632,"mtime":1615577037784,"results":"106","hashOfConfig":"77"},{"size":37242,"mtime":1616516598354,"results":"107","hashOfConfig":"77"},{"size":4933,"mtime":1615494040892,"results":"108","hashOfConfig":"77"},{"size":8638,"mtime":1615494059224,"results":"109","hashOfConfig":"77"},{"size":2502,"mtime":1615576221083,"results":"110","hashOfConfig":"77"},{"size":4953,"mtime":1615494084925,"results":"111","hashOfConfig":"77"},{"size":22882,"mtime":1616530083995,"results":"112","hashOfConfig":"77"},{"size":6375,"mtime":1615494331833,"results":"113","hashOfConfig":"77"},{"size":2667,"mtime":1615494294172,"results":"114","hashOfConfig":"77"},{"size":2841,"mtime":1614705795124,"results":"115","hashOfConfig":"77"},{"size":11893,"mtime":1615494264131,"results":"116","hashOfConfig":"77"},{"size":4257,"mtime":1615493605882,"results":"117","hashOfConfig":"77"},{"size":4198,"mtime":1616426742162,"results":"118","hashOfConfig":"77"},{"size":46236,"mtime":1616630414555,"results":"119","hashOfConfig":"77"},{"size":15172,"mtime":1616630791252,"results":"120","hashOfConfig":"77"},{"size":16255,"mtime":1616434686783,"results":"121","hashOfConfig":"77"},{"size":16754,"mtime":1616427176642,"results":"122","hashOfConfig":"77"},{"size":2348,"mtime":1616172228020,"results":"123","hashOfConfig":"77"},{"size":2994,"mtime":1615493533607,"results":"124","hashOfConfig":"77"},{"size":5753,"mtime":1614705795069,"results":"125","hashOfConfig":"77"},{"size":1427,"mtime":1615494339365,"results":"126","hashOfConfig":"77"},{"size":2318,"mtime":1614705795123,"results":"127","hashOfConfig":"77"},{"size":2776,"mtime":1616379391662,"results":"128","hashOfConfig":"77"},{"size":4643,"mtime":1614705795117,"results":"129","hashOfConfig":"77"},{"size":11724,"mtime":1615495567408,"results":"130","hashOfConfig":"77"},{"size":11493,"mtime":1616541178670,"results":"131","hashOfConfig":"77"},{"size":6934,"mtime":1615495114659,"results":"132","hashOfConfig":"77"},{"size":23712,"mtime":1616530083995,"results":"133","hashOfConfig":"77"},{"size":25016,"mtime":1616530083995,"results":"134","hashOfConfig":"77"},{"size":70728,"mtime":1616637837541,"results":"135","hashOfConfig":"77"},{"size":11532,"mtime":1616637745407,"results":"136","hashOfConfig":"77"},{"size":2630,"mtime":1616637781858,"results":"137","hashOfConfig":"77"},{"size":16757,"mtime":1616637479147,"results":"138","hashOfConfig":"77"},{"size":47133,"mtime":1616637373669,"results":"139","hashOfConfig":"77"},{"size":17968,"mtime":1616637208078,"results":"140","hashOfConfig":"77"},{"size":9787,"mtime":1615494505106,"results":"141","hashOfConfig":"77"},{"size":4108,"mtime":1615493823510,"results":"142","hashOfConfig":"77"},{"size":2993,"mtime":1615493951166,"results":"143","hashOfConfig":"77"},{"size":11210,"mtime":1616512092128,"results":"144","hashOfConfig":"77"},{"size":3403,"mtime":1616426742162,"results":"145","hashOfConfig":"77"},{"size":10871,"mtime":1616380565972,"results":"146","hashOfConfig":"77"},{"size":4788,"mtime":1616376964700,"results":"147","hashOfConfig":"77"},{"size":25397,"mtime":1616381721297,"results":"148","hashOfConfig":"77"},{"size":18619,"mtime":1616614282017,"results":"149","hashOfConfig":"77"},{"size":8715,"mtime":1616194035326,"results":"150","hashOfConfig":"77"},{"size":55597,"mtime":1616630445561,"results":"151","hashOfConfig":"77"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},"1vnvna8",{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"154"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"154"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"154"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"154"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"154"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"190","messages":"191","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"154"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"205","messages":"206","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"154"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"154"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"213","messages":"214","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"154"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"154"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"223","usedDeprecatedRules":"154"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"154"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"154"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"154"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"154"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"154"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"255","messages":"256","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"257","messages":"258","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"154"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"154"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"154"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"278","messages":"279","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"154"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"154"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"154"},{"filePath":"291","messages":"292","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"299","messages":"300","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"301","messages":"302","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"305","messages":"306","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"154"},{"filePath":"313","messages":"314","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"154"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"154"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"321","usedDeprecatedRules":"154"},{"filePath":"322","messages":"323","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"154"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js",[],["329","330"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js",["331","332"],"import React from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { connect } from \"react-redux\";\r\nimport { Router } from \"react-router\";\r\nimport Loadable from \"react-loadable\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport es_ES from \"antd/lib/locale-provider/es_ES\";\r\nimport \"./App.css\";\r\nimport RecoveryPass from \"./containers/Recovery/RecoveryPass\";\r\n\r\nconst loading = () => (\r\n  <div className=\"animated fadeIn pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\" />\r\n  </div>\r\n);\r\n\r\nconst Login = Loadable({\r\n  loader: () => import(\"./containers/Login/login\"),\r\n  loading,\r\n});\r\n\r\nconst Registro = Loadable({\r\n  loader: () => import(\"./containers/Register/Register\"),\r\n  loading,\r\n});\r\n\r\nconst RecoveryPassword = Loadable({\r\n  loader: () => import(\"./containers/Recovery/RecoveryPass\"),\r\n  loading,\r\n});\r\n\r\nconst Auth = Loadable({\r\n  loader: () => import(\"./containers/Auth/auth\"),\r\n  loading,\r\n});\r\n\r\nconst DefaultLayout = Loadable({\r\n  loader: () => import(\"./containers/Layout/layout\"),\r\n  loading,\r\n});\r\n\r\nconst App = (props) => {\r\n  const { history, token, dataProfile } = props;\r\n  const accessDev = false; //window.location.hostname === \"localhost\";\r\n  return (\r\n    <Router history={history}>\r\n      <ConfigProvider locale={es_ES}>\r\n        <Switch>\r\n          <Route exact path=\"/\" name=\"Login Page\" component={Login} />\r\n          <Route path=\"/login\" name=\"Login Page\" component={Login} />\r\n          <Route path=\"/index\" name=\"Login Page\" component={Login} />\r\n          <Route exact path=\"/registro\" name=\"Registro\" component={Registro} />\r\n          <Route\r\n            exact\r\n            path=\"/recoveryPass\"\r\n            name=\"Recuperar contraseña\"\r\n            component={RecoveryPassword}\r\n          />\r\n\r\n          <Route\r\n            exact\r\n            path=\"/registro/:idInvitation/:idCustomerType\"\r\n            name=\"Registro\"\r\n            component={Registro}\r\n          />\r\n          <Route path=\"/auth\" name=\"Autorizacion\" component={Auth} />\r\n          <Route path=\"/logout\" name=\"Clean App and Close\" component={Auth} />\r\n          <Route\r\n            history={history}\r\n            path=\"/websystem/\"\r\n            name=\"Home\"\r\n            render={(props) => (\r\n              <DefaultLayout\r\n                {...props}\r\n                authenticate={\r\n                  isNil(dataProfile.idSystemUser) === false &&\r\n                  isEmpty(dataProfile.idSystemUser) === false\r\n                }\r\n                authenticated={\r\n                  (isNil(dataProfile.dataProfile) === false &&\r\n                    isNil(dataProfile.dataProfile.idSystemUser) === false &&\r\n                    isEmpty(dataProfile.dataProfile.idSystemUser) === false) ||\r\n                  accessDev\r\n                }\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </ConfigProvider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile } = state;\r\n  return { dataProfile };\r\n};\r\n\r\nconst mapDispatchToProps = null;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js",["333"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js",["334"],"import { applyMiddleware, compose, createStore } from 'redux';\r\nimport storageSession from 'redux-persist/lib/storage/session';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer, PURGE } from 'redux-persist';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createBrowserHistory } from 'history';\r\nimport { routerMiddleware } from 'react-router-redux';\r\n// TO DO: import immutableTransform from 'redux-persist-transform-immutable';\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './RootSaga';\r\n\r\nexport const history = createBrowserHistory();\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default function configureStore(preloadedState) {\r\n  /* eslint-disable no-underscore-dangle */\r\n  const composeEnhancers =\r\n    process.env.NODE_ENV !== 'production' &&\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      : compose;\r\n  /* eslint-enable */\r\n\r\n  const persistConfig = {\r\n    // TO DO:\r\n    // transforms: [immutableTransform()],\r\n    key: 'root',\r\n    storage: storageSession,\r\n    blacklist: [],\r\n  };\r\n\r\n  const rootReducerMiddleware = (state, action) =>\r\n    rootReducer(state, action, persistConfig);\r\n\r\n  const persistedReducer = persistReducer(persistConfig, rootReducerMiddleware);\r\n\r\n  const store = createStore(\r\n    persistedReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(sagaMiddleware, routerMiddleware(history), thunk),\r\n    ),\r\n  );\r\n\r\n  store.runSaga = sagaMiddleware.run(rootSaga);\r\n\r\n  const persistor = persistStore(store, {});\r\n\r\n  return { store, persistor };\r\n}\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js",["335"],"import { combineReducers } from \"redux\";\r\nimport { purgeStoredState } from \"redux-persist\";\r\nimport {\r\n  dataProfile,\r\n  dataProfileMenu,\r\n} from \"../utils/reducers/dataProfileReducer\";\r\n\r\nconst appReducers = combineReducers({\r\n  dataProfile,\r\n  dataProfileMenu,\r\n});\r\n\r\nexport default (state, action, persistConfig) => {\r\n  // Reset to initialState\r\n  if (action.type === \"PURGE\") {\r\n    purgeStoredState(persistConfig);\r\n    // Default or Current State\r\n    return appReducers({}, action);\r\n  }\r\n\r\n  return appReducers(state, action);\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx",["336","337","338"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport \"antd/dist/antd.css\";\r\nimport {\r\n  Radio,\r\n  Select,\r\n  Input,\r\n  Spin,\r\n  Skeleton,\r\n  Alert,\r\n  Progress,\r\n  Checkbox,\r\n} from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  LockOutlined,\r\n  SyncOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetAllRegisterUser,\r\n  callGetAllVerifyCode,\r\n  callGetInvitationUser,\r\n} from \"../../utils/actions/actions\";\r\nimport logo from \"../../assets/img/logo.png\";\r\nimport admiration from \"../../assets/icons/exclaim.svg\";\r\nimport Arrow from \"../../assets/icons/Arrow.svg\";\r\nimport CustomInput from \"../../components/CustomInput\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Register = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomers,\r\n    callGetAllPersons,\r\n    callGetAllEndorsement,\r\n    callGetAllRegisterUser,\r\n    callGetAllVerifyCode,\r\n    callGetInvitationUser,\r\n  } = props;\r\n  const [userType, setUserType] = useState(null);\r\n  const [aceptTerms, setAceptTerms] = useState(false);\r\n  const [userCustomer, setUserCustomer] = useState([]);\r\n  const [securePass, setSecurePass] = useState({\r\n    lengthCharacter: false,\r\n    upperLowerword: false,\r\n    numbers: false,\r\n    specialCharacters: false,\r\n    percentStatus: 0,\r\n  });\r\n  const [selectuserCustomer, setSelectUserCustomer] = useState(1);\r\n  const [userPerson, setUserPerson] = useState([]);\r\n  const [userEndorsement, setUserEndorsement] = useState([]);\r\n  const [configComponents, setConfigComponents] = useState({});\r\n  const [verifyPassword, setVerifyPassword] = useState(null);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [dataForm, setDataForm] = useState({\r\n    idPersonType: null,\r\n    idEndorsement: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    username: null,\r\n    password: null,\r\n    idInvitation: null,\r\n  });\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  const copyErrors = {\r\n    errorPass: {\r\n      error: false,\r\n      message: \"Las contraseñas no coinciden\",\r\n      errorEmpty: false,\r\n      messageEmpty: \"La contraseña es requerida\",\r\n    },\r\n    errorPassSecure: {\r\n      error: false,\r\n      message: \"Tu contraseña no es segura\",\r\n      errorEmpty: false,\r\n      messageEmpty: \"Tu contraseña no es segura\",\r\n    },\r\n    errorGivenName: {\r\n      error: false,\r\n      message: \"El Nombre o Razón social es requerido\",\r\n    },\r\n    errorUserName: {\r\n      error: false,\r\n      message: \"El correo electrónico es requerido\",\r\n      errorFormat: false,\r\n      messageFormatError: \"El correo electronico no es valido\",\r\n    },\r\n    errorPersonType: {\r\n      error: false,\r\n      message: \"El tipo de persona es requerido\",\r\n    },\r\n    errorCodeVerify: {\r\n      error: false,\r\n      message: \"El código de verificación ingresado es invalido\",\r\n    },\r\n  };\r\n  const [errorsRegister, setErrorsRegister] = useState(copyErrors);\r\n  const [errorFormulary, setErrorFormulary] = useState(false);\r\n  const [idRequestSignUp, setIdRequestSignUp] = useState(null);\r\n  const [codeVerify, setCodeVerify] = useState({\r\n    value1: \"\",\r\n    value2: \"\",\r\n    value3: \"\",\r\n    value4: \"\",\r\n    value5: \"\",\r\n    value6: \"\",\r\n  });\r\n  const errorCatchBase = {\r\n    error: false,\r\n    message: \"\",\r\n  };\r\n  const [errorBase, setErrorBase] = useState(errorCatchBase);\r\n\r\n  const handlerCallApiCustomer = async (data) => {\r\n    try {\r\n      const response = await callGetAllCustomers(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserCustomer(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiPersonTypes = async (data, person) => {\r\n    const { match } = props;\r\n    const params = isEmpty(match.params) === false ? match.params : {};\r\n    try {\r\n      const response = await callGetAllPersons(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      if (isEmpty(params) === false && isEmpty(responseResult) === false) {\r\n        const filterCondition = responseResult.find((row) => {\r\n          return row.idPersonType == person;\r\n        });\r\n        const parseResult = JSON.parse(filterCondition.jsonProperties);\r\n        setConfigComponents(parseResult);\r\n      }\r\n      setUserPerson(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiEndorsement = async (data) => {\r\n    try {\r\n      const response = await callGetAllEndorsement(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserEndorsement(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetInvitationUser = async (id) => {\r\n    try {\r\n      const response = await callGetInvitationUser(id);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      await handlerCallApiPersonTypes(\r\n        {\r\n          idType: 1,\r\n          idCustomerType: responseResult.idCustomerType,\r\n        },\r\n        responseResult.idPersonType\r\n      );\r\n      await handlerCallApiEndorsement({\r\n        idType: 1,\r\n      });\r\n      setSelectUserCustomer(responseResult.idCustomerType);\r\n      setDataForm({\r\n        ...dataForm,\r\n        idPersonType: responseResult.idPersonType,\r\n        givenName: responseResult.givenName,\r\n        lastName:\r\n          isNil(responseResult.lastName) === false\r\n            ? responseResult.lastName\r\n            : null,\r\n        mothersMaidenName:\r\n          isNil(responseResult.mothersMaidenName) === false\r\n            ? responseResult.mothersMaidenName\r\n            : null,\r\n        username: responseResult.usernameRequested,\r\n        idInvitation: responseResult.idInvitation,\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiRegister = async (data) => {\r\n    try {\r\n      const response = await callGetAllRegisterUser(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : \"\";\r\n      setIdRequestSignUp(\r\n        isEmpty(responseResult) === false ? responseResult.idRequestSignUp : \"\"\r\n      );\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallVerifyCode = async (data) => {\r\n    try {\r\n      await callGetAllVerifyCode(data);\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerVerifyInformation = async (data) => {\r\n    const emailRegex = /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i;\r\n    let objectErrors = errorsRegister;\r\n    let validatePass = true;\r\n    let validatePassSecure = true;\r\n    let validateIdPerson = true;\r\n    let validateGivenName = true;\r\n    let validateUserName = true;\r\n    const validateTypeEmail =\r\n      isNil(data.username) === false ? emailRegex.test(data.username) : false;\r\n\r\n    if (\r\n      isEmpty(data.password) === false &&\r\n      isEmpty(data.verifyPassword) === false &&\r\n      data.password === data.verifyPassword\r\n    ) {\r\n      validatePass = true;\r\n    } else if (isEmpty(data.password) || isEmpty(data.verifyPassword)) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, errorEmpty: true },\r\n      };\r\n      validatePass = false;\r\n    } else if (data.password !== data.verifyPassword) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, error: true },\r\n      };\r\n      validatePass = false;\r\n    }\r\n\r\n    if (securePass.percentStatus < 100) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPassSecure: { ...objectErrors.errorPassSecure, error: true },\r\n      };\r\n      validatePassSecure = false;\r\n    }\r\n\r\n    if (isNil(data.idPersonType) === false || selectuserCustomer === 3) {\r\n      validateIdPerson = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPersonType: { ...objectErrors.errorPersonType, error: true },\r\n      };\r\n      validateIdPerson = false;\r\n    }\r\n\r\n    if (isNil(data.givenName) === false && isEmpty(data.givenName) === false) {\r\n      validateGivenName = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorGivenName: { ...objectErrors.errorGivenName, error: true },\r\n      };\r\n      validateGivenName = false;\r\n    }\r\n\r\n    if (\r\n      isNil(data.username) === false &&\r\n      isEmpty(data.username) === false &&\r\n      validateTypeEmail === true\r\n    ) {\r\n      validateUserName = true;\r\n    } else {\r\n      if (isEmpty(data.username) || isEmpty(data.username)) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, error: true },\r\n        };\r\n      } else if (validateTypeEmail === false) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, errorFormat: true },\r\n        };\r\n      }\r\n      validateUserName = false;\r\n    }\r\n\r\n    setErrorsRegister(objectErrors);\r\n\r\n    return (\r\n      validatePass &&\r\n      validateIdPerson &&\r\n      validateGivenName &&\r\n      validateUserName &&\r\n      validatePassSecure\r\n    );\r\n  };\r\n\r\n  const handlerEvalutePassword = (pass) => {\r\n    const size = /^(?=.{8,}).*$/;\r\n    const lowerInPass = /^(?=\\w*[a-z])/;\r\n    const upperInPass = /^(?=\\w*[A-Z])/;\r\n    const numberInPass = /^(?=.*\\d)/;\r\n    const specialCharacter = /^(?=.*[$@$!%*?&])/;\r\n\r\n    let lengthCharacter = false;\r\n    let upperLowerword = false;\r\n    let numbers = false;\r\n    let specialCharacters = false;\r\n    let lengthCharacterPercent = 0;\r\n    let upperLowerwordPercent = 0;\r\n    let numbersPercent = 0;\r\n    let specialCharactersPercent = 0;\r\n\r\n    if (size.test(pass) === true) {\r\n      lengthCharacter = true;\r\n      lengthCharacterPercent = 25;\r\n    }\r\n    if (lowerInPass.test(pass) === true && upperInPass.test(pass) === true) {\r\n      upperLowerword = true;\r\n      upperLowerwordPercent = 25;\r\n    }\r\n    if (numberInPass.test(pass) === true) {\r\n      numbers = true;\r\n      numbersPercent = 25;\r\n    }\r\n    if (specialCharacter.test(pass) === true) {\r\n      specialCharacters = true;\r\n      specialCharactersPercent = 25;\r\n    }\r\n    setSecurePass({\r\n      lengthCharacter,\r\n      upperLowerword,\r\n      numbers,\r\n      specialCharacters,\r\n      percentStatus:\r\n        lengthCharacterPercent +\r\n        upperLowerwordPercent +\r\n        numbersPercent +\r\n        specialCharactersPercent,\r\n    });\r\n  };\r\n\r\n  const selectPerson = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1>\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            ¿Qué te trae por aquí?{\" \"}\r\n          </h1>\r\n          <div className=\"login_inputs_form\">\r\n            <Skeleton loading={isEmpty(userCustomer) === true} active />\r\n            {isEmpty(userCustomer) === false && (\r\n              <Radio.Group\r\n                name=\"radiogroup\"\r\n                value={selectuserCustomer}\r\n                defaultValue={1}\r\n                onChange={(e) => {\r\n                  setSelectUserCustomer(e.target.value);\r\n                }}\r\n              >\r\n                {userCustomer.map((row) => {\r\n                  return (\r\n                    <p className=\"visible\" style={{ marginBottom: \"32px\" }}>\r\n                      <Radio value={row.id}> {row.text} </Radio>\r\n                    </p>\r\n                  );\r\n                })}\r\n              </Radio.Group>\r\n            )}\r\n\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  await handlerCallApiPersonTypes(\r\n                    {\r\n                      idType: 1,\r\n                      idCustomerType: selectuserCustomer,\r\n                    },\r\n                    dataForm.idPersonType\r\n                  );\r\n                  await handlerCallApiEndorsement({\r\n                    idType: 1,\r\n                  });\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const selectForm = (\r\n    <div className=\"login_main\" style={{ height: \"150%\" }}>\r\n      <div className=\"login_card_form large\">\r\n        <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n          <div className=\"register_holder\">\r\n            <div className=\"login_top_form\">\r\n              <h1>\r\n                <button\r\n                  className=\"arrow-back-to\"\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    const { match } = props;\r\n                    const params =\r\n                      isEmpty(match.params) === false ? match.params : {};\r\n                    if (isEmpty(params) === false) {\r\n                      history.push(\"/login\");\r\n                    } else {\r\n                      setUserType(1);\r\n                    }\r\n                  }}\r\n                >\r\n                  <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                </button>\r\n                Completa tu perfil{\" \"}\r\n              </h1>\r\n              <div\r\n                className={`error_login_incorrect_data ${\r\n                  errorFormulary === false ? \"hide\" : \"visible\"\r\n                }`}\r\n                style={{ display: \"flex\", flexDirection: \"column\" }}\r\n              >\r\n                {errorBase.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorBase.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorGivenName.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorGivenName.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPass.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPass.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPassSecure.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPassSecure.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPass.errorEmpty && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPass.messageEmpty}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPersonType.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPersonType.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorUserName.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorUserName.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorUserName.errorFormat && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>\r\n                      {errorsRegister.errorUserName.messageFormatError}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <label className=\"fieldset_title\">Información personal</label>\r\n              {selectuserCustomer !== 3 && (\r\n                <div className=\"register_row half\">\r\n                  <Select\r\n                    placeholder=\"Tipo de Persona\"\r\n                    value={dataForm.idPersonType}\r\n                    onChange={(value, option) => {\r\n                      const configureOption = option.onClick();\r\n                      setConfigComponents(configureOption);\r\n                      setErrorsRegister(copyErrors);\r\n                      setErrorFormulary(false);\r\n                      setDataForm({ ...dataForm, idPersonType: value });\r\n                    }}\r\n                  >\r\n                    {isEmpty(userPerson) === false &&\r\n                      userPerson.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.id}\r\n                            onClick={() => {\r\n                              return isNil(row) === false &&\r\n                                isNil(row.jsonProperties) === false\r\n                                ? JSON.parse(row.jsonProperties)\r\n                                : {};\r\n                            }}\r\n                          >\r\n                            {row.text}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                  {isEmpty(configComponents) === false &&\r\n                    configComponents.idEndorsement && (\r\n                      <Select\r\n                        placeholder=\"Aval\"\r\n                        onChange={(value) => {\r\n                          setDataForm({ ...dataForm, idEndorsement: value });\r\n                        }}\r\n                      >\r\n                        {isEmpty(userEndorsement) === false &&\r\n                          userEndorsement.map((row) => {\r\n                            return <Option value={row.id}>{row.text}</Option>;\r\n                          })}\r\n                      </Select>\r\n                    )}\r\n                </div>\r\n              )}{\" \"}\r\n              <div className=\"register_row\">\r\n                <CustomInput\r\n                  value={dataForm.givenName}\r\n                  suffix={<UserOutlined />}\r\n                  placeholder={\r\n                    configComponents.lastName || selectuserCustomer === 3\r\n                      ? \"Nombre(s):\"\r\n                      : \"Razón Social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, givenName: e });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"register_row half\">\r\n                {isEmpty(configComponents) === false &&\r\n                  selectuserCustomer !== 3 &&\r\n                  configComponents.lastName && (\r\n                    <CustomInput\r\n                      value={dataForm.lastName}\r\n                      suffix={<UserOutlined />}\r\n                      placeholder=\"Primer Apellido\"\r\n                      onChange={(e) => {\r\n                        setDataForm({ ...dataForm, lastName: e });\r\n                      }}\r\n                    />\r\n                  )}\r\n                {selectuserCustomer === 3 && (\r\n                  <CustomInput\r\n                    value={dataForm.lastName}\r\n                    suffix={<UserOutlined />}\r\n                    placeholder=\"Primer Apellido\"\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, lastName: e });\r\n                    }}\r\n                  />\r\n                )}\r\n                {isEmpty(configComponents) === false &&\r\n                  selectuserCustomer !== 3 &&\r\n                  configComponents.mothersMaidenName && (\r\n                    <CustomInput\r\n                      value={dataForm.mothersMaidenName}\r\n                      suffix={<UserOutlined />}\r\n                      placeholder=\"Segundo Apellido\"\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          mothersMaidenName: e,\r\n                        });\r\n                      }}\r\n                    />\r\n                  )}\r\n                {selectuserCustomer === 3 && (\r\n                  <CustomInput\r\n                    value={dataForm.mothersMaidenName}\r\n                    suffix={<UserOutlined />}\r\n                    placeholder=\"Segundo Apellido\"\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        mothersMaidenName: e,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </div>\r\n              <label className=\"fieldset_title\">\r\n                {\" \"}\r\n                Información de contacto{\" \"}\r\n              </label>\r\n              <div className=\"register_row half\">\r\n                <CustomInput\r\n                  value={dataForm.phoneNumber}\r\n                  suffix={<PhoneOutlined />}\r\n                  placeholder=\"Teléfono celular\"\r\n                  onChange={(e) => {\r\n                    const regexp = /^([0-9])*$/;\r\n                    if (regexp.test(e) === true) {\r\n                      setDataForm({ ...dataForm, phoneNumber: e });\r\n                    }\r\n                  }}\r\n                />\r\n                <CustomInput\r\n                  value={dataForm.username}\r\n                  suffix={<MailOutlined />}\r\n                  placeholder=\"Correo electrónico\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      username: e,\r\n                    });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <label className=\"fieldset_title\"> Contraseña </label>\r\n              <div className=\"register_row half\">\r\n                <CustomInput\r\n                  value={dataForm.password}\r\n                  suffix={<LockOutlined />}\r\n                  placeholder=\"Contraseña\"\r\n                  type=\"password\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      password: e,\r\n                    });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                    handlerEvalutePassword(e);\r\n                  }}\r\n                />\r\n                <CustomInput\r\n                  value={verifyPassword}\r\n                  suffix={<LockOutlined />}\r\n                  placeholder=\"Confirmar Contraseña\"\r\n                  type=\"password\"\r\n                  onChange={(e) => {\r\n                    setVerifyPassword(e);\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div>\r\n                <Progress\r\n                  percent={securePass.percentStatus}\r\n                  status={\r\n                    securePass.percentStatus === 100 ? \"success\" : \"exception\"\r\n                  }\r\n                />\r\n                <p className=\"fieldset_title\">\r\n                  {securePass.percentStatus === 100\r\n                    ? \"Tu contraseña es segura\"\r\n                    : \"La contraseña debe contener\"}\r\n                </p>\r\n                {securePass.lengthCharacter === false && (\r\n                  <Alert\r\n                    message=\"Al menos 8 caracteres\"\r\n                    type=\"warning\"\r\n                    showIcon\r\n                  />\r\n                )}\r\n                {securePass.upperLowerword === false && (\r\n                  <Alert\r\n                    message=\"Letras mayusculas y minusculas (AaBbCc)\"\r\n                    type=\"warning\"\r\n                    showIcon\r\n                  />\r\n                )}\r\n                {securePass.numbers === false && (\r\n                  <Alert message=\"Números\" type=\"warning\" showIcon />\r\n                )}\r\n                {securePass.specialCharacters === false && (\r\n                  <Alert\r\n                    message=\"Caracteres especiales (@$&!%*?)\"\r\n                    type=\"warning\"\r\n                    showIcon\r\n                  />\r\n                )}\r\n              </div>\r\n              <div>\r\n                <Checkbox\r\n                  checked={aceptTerms}\r\n                  onChange={(e) => {\r\n                    setAceptTerms(e.target.checked);\r\n                  }}\r\n                ></Checkbox>\r\n                <span\r\n                  style={{\r\n                    marginLeft: 5,\r\n                    textAlign: \"center\",\r\n                    fontSize: 10,\r\n                    color: \"gray\",\r\n                  }}\r\n                >\r\n                  Acepto el{\" \"}\r\n                  <a href=\"https://segurent.mx/aviso-de-privacidad/\">\r\n                    Aviso de privacidad\r\n                  </a>\r\n                </span>\r\n              </div>\r\n              <div\r\n                className={\r\n                  aceptTerms === true\r\n                    ? \"button_init_primary\"\r\n                    : \"button_init_primary_disabled\"\r\n                }\r\n                style={{ margin: \"16px 0 0\" }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={async () => {\r\n                    try {\r\n                      const verifyData = await handlerVerifyInformation({\r\n                        ...dataForm,\r\n                        verifyPassword,\r\n                      });\r\n                      setErrorFormulary(!verifyData);\r\n                      if (verifyData === true) {\r\n                        setSpinVisible(true);\r\n                        await handlerCallApiRegister({\r\n                          ...dataForm,\r\n                          idCustomerType: selectuserCustomer,\r\n                        });\r\n                        setUserType(3);\r\n                        setSpinVisible(false);\r\n                      }\r\n                    } catch (error) {\r\n                      setSpinVisible(false);\r\n                      setErrorFormulary(true);\r\n                      setErrorBase({\r\n                        ...errorBase,\r\n                        error: true,\r\n                        message: error,\r\n                      });\r\n                      setTimeout(() => {\r\n                        setErrorFormulary(false);\r\n                        setErrorBase(errorCatchBase);\r\n                      }, 3000);\r\n                    }\r\n                  }}\r\n                >\r\n                  <span> Registrarme </span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const insterCodeCompoent = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n          <div className=\"login_top_form\">\r\n            <h1>\r\n              <button\r\n                className=\"arrow-back-to\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n              </button>\r\n              Ingresa tu código{\" \"}\r\n            </h1>\r\n            <div\r\n              className={`error_login_incorrect_data ${\r\n                errorsRegister.errorCodeVerify.error === false\r\n                  ? \"hide\"\r\n                  : \"visible\"\r\n              }`}\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              {errorsRegister.errorCodeVerify.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorCodeVerify.message}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <p className=\"recoverInstructions\">\r\n              Enviamos un código de confirmación al correo{\" \"}\r\n              <strong>{dataForm.username}</strong>\r\n            </p>\r\n            <div className=\"codeForm\">\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-0\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value1}\r\n                  maxLength={1}\r\n                  minLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-1\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value1: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-1\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value2}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-0\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-2\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value2: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-2\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value3}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-1\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-3\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value3: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-3\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value4}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-2\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-4\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value4: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-4\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value5}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-3\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-5\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value5: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <CustomInput\r\n                  id=\"input-code-validate-5\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value6}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event === \"\") {\r\n                      document.getElementById(\"input-code-validate-4\").focus();\r\n                    } else {\r\n                      document.getElementById(\"button-send-code\").focus();\r\n                    }\r\n                    if (event.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value6: event,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"button_init_primary\" style={{ margin: \"60px 0 0\" }}>\r\n              <button\r\n                type=\"button\"\r\n                id=\"button-send-code\"\r\n                onClick={async () => {\r\n                  setSpinVisible(true);\r\n                  try {\r\n                    let numberResult = \"\";\r\n                    for (const property in codeVerify) {\r\n                      numberResult += codeVerify[property];\r\n                    }\r\n                    await handlerCallVerifyCode({\r\n                      code: numberResult,\r\n                      idRequestSignUp,\r\n                      idInvitation: dataForm.idInvitation,\r\n                    });\r\n                    setUserType(4);\r\n                  } catch (error) {\r\n                    const objectErrors = {\r\n                      ...errorsRegister,\r\n                      errorCodeVerify: {\r\n                        ...errorsRegister.errorCodeVerify,\r\n                        error: true,\r\n                        message: error,\r\n                      },\r\n                    };\r\n                    setErrorsRegister(objectErrors);\r\n                    setSpinVisible(false);\r\n                  }\r\n                }}\r\n              >\r\n                <span> Validar </span>\r\n              </button>\r\n            </div>\r\n            <div\r\n              className=\"login-recover-pass\"\r\n              style={{ marginTop: \"15px\", cursor: \"pointer\" }}\r\n            >\r\n              <p\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  setErrorsRegister(copyErrors);\r\n                  try {\r\n                    const verifyData = await handlerVerifyInformation({\r\n                      ...dataForm,\r\n                      verifyPassword,\r\n                    });\r\n                    setErrorFormulary(!verifyData);\r\n                    if (verifyData === true) {\r\n                      await handlerCallApiRegister({\r\n                        ...dataForm,\r\n                        idCustomerType: selectuserCustomer,\r\n                      });\r\n                    }\r\n                  } catch (error) {\r\n                    setErrorFormulary(true);\r\n                    setErrorBase({ ...errorBase, error: true, message: error });\r\n                    setTimeout(() => {\r\n                      setErrorFormulary(false);\r\n                      setErrorBase(errorCatchBase);\r\n                    }, 3000);\r\n                  }\r\n                }}\r\n              >\r\n                Reenviar código\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const successRegister = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> Registro completo </h1>\r\n          <p className=\"recoverInstructions\">\r\n            Bienvenido(a) <strong>{dataForm.givenName}</strong>. Estamos muy\r\n            emocionados de tenerte a bordo. Ingresa a tu cuenta y que comience\r\n            la aventura.\r\n          </p>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <span>Ir al Login</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderTypeComponent = (type) => {\r\n    let component = <div />;\r\n    switch (type) {\r\n      case 1:\r\n        component = selectPerson;\r\n        break;\r\n      case 2:\r\n        component = selectForm;\r\n        break;\r\n      case 3:\r\n        component = insterCodeCompoent;\r\n        break;\r\n      case 4:\r\n        component = successRegister;\r\n        break;\r\n      default:\r\n        component = <div />;\r\n        break;\r\n    }\r\n    return component;\r\n  };\r\n\r\n  const handlerAsyncCallAppis = async () => {\r\n    await handlerCallApiCustomer({ idType: 1 });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { match } = props;\r\n    const params = isEmpty(match.params) === false ? match.params : {};\r\n    if (isEmpty(params) === false) {\r\n      setUserType(2);\r\n      handlerCallGetInvitationUser(params.idInvitation, params);\r\n    } else {\r\n      setUserType(1);\r\n      handlerAsyncCallAppis();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"login_head_logo\">\r\n        <img src={logo} alt=\"Homify Logo\" className=\"login_logo\" />\r\n      </div>\r\n      {renderTypeComponent(userType)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomers: (data) => dispatch(callGetAllCustomers(data)),\r\n  callGetAllPersons: (data) => dispatch(callGetAllPersons(data)),\r\n  callGetAllEndorsement: (data) => dispatch(callGetAllEndorsement(data)),\r\n  callGetAllRegisterUser: (data) => dispatch(callGetAllRegisterUser(data)),\r\n  callGetAllVerifyCode: (data) => dispatch(callGetAllVerifyCode(data)),\r\n  callGetInvitationUser: (paramId) => dispatch(callGetInvitationUser(paramId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx",["339"],"import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { notification } from \"antd\";\r\nimport {\r\n  callGetAllUserProfile,\r\n  callGetAllMenuProfile,\r\n} from \"../../utils/actions/actions\";\r\nimport {\r\n  setDataUserProfile,\r\n  setDataUserMenu,\r\n} from \"../../utils/dispatchs/userProfileDispatch\";\r\n\r\nconst Auth = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllUserProfile,\r\n    dataProfile,\r\n    setDataUserProfile,\r\n    setDataUserMenu,\r\n    callGetAllMenuProfile,\r\n    purgeStore,\r\n  } = props;\r\n\r\n  const handlerCallGetAllUserProfile = async () => {\r\n    try {\r\n      const response = await callGetAllUserProfile(dataProfile.dataProfile);\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      const idSystemUser =\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.idSystemUser) === false\r\n          ? responseResult.idSystemUser\r\n          : null;\r\n      const idLoginHistory =\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.idLoginHistory) === false\r\n          ? responseResult.idLoginHistory\r\n          : null;\r\n      const responseMenu = await callGetAllMenuProfile({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResultMenu =\r\n        isNil(responseMenu) === false &&\r\n        isNil(responseMenu.response) === false &&\r\n        isEmpty(responseMenu.response) === false\r\n          ? responseMenu.response\r\n          : [];\r\n      await setDataUserMenu(responseResultMenu);\r\n      await setDataUserProfile({\r\n        ...dataProfile.dataProfile,\r\n        ...responseResult,\r\n      });\r\n      history.push(\r\n        isEmpty(responseResult) === false &&\r\n          isNil(responseResult.path) === false\r\n          ? responseResult.path\r\n          : \"/websystem\"\r\n      );\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerAsyncCallApiis = async () => {\r\n    await handlerCallGetAllUserProfile();\r\n  };\r\n\r\n  const handlerFinishSession = async () => {\r\n    await purgeStore();\r\n    await sessionStorage.clear();\r\n    await localStorage.clear();\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (window.location.pathname === \"/auth\") {\r\n      handlerAsyncCallApiis();\r\n    } else if (window.location.pathname === \"/logout\") {\r\n      notification.destroy();\r\n      handlerFinishSession();\r\n    }\r\n  }, []);\r\n\r\n  return <div className=\"loader-auth-spiner\" />;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile } = state;\r\n  return { dataProfile };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  setDataUserMenu: (data) => dispatch(setDataUserMenu(data)),\r\n  callGetAllUserProfile: (data) => dispatch(callGetAllUserProfile(data)),\r\n  callGetAllMenuProfile: (data) => dispatch(callGetAllMenuProfile(data)),\r\n  purgeStore: () => dispatch({ type: \"PURGE\" }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Recovery\\RecoveryPass.jsx",["340","341","342","343","344","345"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx",["346","347","348","349","350","351","352"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomInput.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\section\\sectionChangeImage.jsx",["353","354","355","356","357","358","359","360","361","362","363","364","365","366","367"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport Avatar from \"react-avatar-edit\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n} from \"antd\";\r\nimport {\r\n  InfoCircleOutlined,\r\n  UserOutlined,\r\n  SyncOutlined,\r\n  CloseOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionChangeImage = (props) => {\r\n  const { isModalVisible, onClose, onSelectImage } = props;\r\n  const [preview, setPreview] = useState(null);\r\n\r\n  const refAvatar = useRef(null);\r\n\r\n  const onCrop = (view) => {\r\n    setPreview(view);\r\n  };\r\n\r\n  const onCloseView = () => {\r\n    setPreview(null);\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n    >\r\n      <div className=\"form-modal\">\r\n        <div className=\"title-head-modal\">\r\n          <button\r\n            className=\"arrow-back-to\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setPreview(null);\r\n              onClose();\r\n            }}\r\n          >\r\n            <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n          <h1>Imagen de perfil</h1>\r\n          {isNil(preview) === false && (\r\n            <img\r\n              src={preview}\r\n              alt=\"Preview\"\r\n              width={50}\r\n              height={50}\r\n              className=\"image-avatar-little\"\r\n            />\r\n          )}\r\n        </div>\r\n        <div className=\"avatar-image\">\r\n          <Avatar\r\n            width={320}\r\n            height={295}\r\n            label=\"Haz click para seleccionar imagen\"\r\n            onCrop={onCrop}\r\n            onClose={onCloseView}\r\n            src={null}\r\n            ref={refAvatar}\r\n            cropRadius={50}\r\n            maxCropRadius={60}\r\n          />\r\n        </div>\r\n        <div className=\"button_init_primary\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onSelectImage(preview);\r\n              setPreview(null);\r\n              onClose();\r\n              refAvatar.current.onCloseClick();\r\n            }}\r\n          >\r\n            <span>Guardar</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionChangeImage;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx",["368","369","370"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx",["371","372","373","374","375","376","377","378","379"],"import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, notification, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport IconCalendar from \"../../assets/icons/Calendar.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconDanger from \"../../assets/icons/Danger.svg\";\r\nimport FileReport from \"../../assets/icons/FileReport.svg\";\r\nimport MessagesIcon from \"../../assets/icons/MessagesIcon.svg\";\r\nimport DocumentsIcon from \"../../assets/icons/DocumentsIcon.svg\";\r\nimport Arrow from \"../../assets/icons/Arrow.svg\";\r\nimport Tools from \"../../assets/icons/Tools.svg\";\r\nimport Transport from \"../../assets/icons/Transport.svg\";\r\nimport SectionContractAvailable from \"./sections/sectionContractAvailableOwner\";\r\nimport SectionDepositGuarantee from \"./sections/sectionDepositGuarantee\";\r\nimport FrontFunctions from \"../../utils/actions/frontFunctions\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport { API_CONSTANTS, HEADER } from \"../../utils/constants/apiConstants\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\nimport {\r\n  callGetAllCustomerTenantDashboardById,\r\n  callSetContract,\r\n  callAddDocument,\r\n  callAddCommentContract,\r\n  callGetContract,\r\n  callGetContractComment,\r\n  callGetCustomerMessage,\r\n  callAddCustomerMessage,\r\n  callAddDocumentContractId,\r\n  callGetPaymentContract,\r\n  callGetPaymentTypes,\r\n} from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport SectionMessages from \"./sectionDocuments/sectionMessages\";\r\nimport SectionRegisterPayment from \"./sectionDocuments/sectionRegisterPayment\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Tenant = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomerTenantById,\r\n    dataProfile,\r\n    callAddDocument,\r\n    callGetPaymentTypes,\r\n    callGetPaymentContract,\r\n    setDataUserProfile,\r\n    callSetContract,\r\n    callAddCommentContract,\r\n    callGetContract,\r\n    callGetContractComment,\r\n    callGetCustomerMessage,\r\n    callAddCustomerMessage,\r\n    callAddDocumentContractId,\r\n  } = props;\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [dataPayments, setDataPayments] = useState([]);\r\n  const [isVisibleMessages, setIsVisibleMessages] = useState(false);\r\n  const [isVisiblePaymentRent, setIsVisiblePaymentRent] = useState(false);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [dataGetContract, setDataGetContract] = useState([]);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [isModalVisiblePolicy, setIsModalVisiblePolicy] = useState(false);\r\n  const frontFunctions = new FrontFunctions();\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const args = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Antes de iniciar el formulario debes tener lista una identificación\r\n          oficial, tus últimos 3 comprobantes de ingresos y una carta de la\r\n          empresa donde trabajas que acredite desde cuando estás laborando en la\r\n          empresa. Adicional, necesitaras la escritura del inmueble que quedara\r\n          como garantía y los datos e identificación del Aval.\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            notification.destroy();\r\n            history.push(\"/websystem/typeform-user\");\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Ir al formulario</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{\r\n          fontFamily: \"Poppins\",\r\n          fontSize: \"12px\",\r\n          color: \"var(--color-primary)\",\r\n        }}\r\n      >\r\n        Solicitud de Investigación Persona Física con o sin Aval\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const argsv2 = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Buen dia <strong>Sebastian</strong>, estamos en espera del pago de tu{\" \"}\r\n          <strong>depósito en ganarantía</strong>.<br /> <br />\r\n          Si no puedes pagar el\r\n          <strong> depósito en ganarantía</strong> tenemos estas opciones para\r\n          ti\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setIsModalVisiblePolicy(!isModalVisiblePolicy);\r\n            notification.destroy();\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Revisar opciones</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{\r\n          fontFamily: \"Poppins\",\r\n          fontSize: \"12px\",\r\n          color: \"var(--color-primary)\",\r\n        }}\r\n      >\r\n        Depósito en Garantia\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCustomerMessage = async (data, data2) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddCustomerMessage({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data2,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      handlerCallGetCustomerMessage(data2);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentTypes = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPayments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCustomerTenantById = async () => {\r\n    const {\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idCustomerTenant,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerTenantById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenant(responseResult);\r\n      handlerCallGetCustomerMessage({\r\n        idContract: responseResult.idContract,\r\n        idCustomerTenant: responseResult.idCustomerTenant,\r\n        idCustomer: responseResult.idCustomer,\r\n      });\r\n      handlerCallGetAllPaymentTypes({\r\n        type: 1,\r\n        idContract: responseResult.idContract,\r\n        idCustomerTenant: responseResult.idCustomerTenant,\r\n      });\r\n      if (\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.isTypeFormCompleted) === false &&\r\n        responseResult.isTypeFormCompleted === false\r\n      ) {\r\n        setDataUserProfile({\r\n          ...dataProfile,\r\n          idCustomerTenantTF: responseResult.idCustomerTenant,\r\n          idCustomerTF: responseResult.idCustomer,\r\n          idContract: responseResult.idContract,\r\n        });\r\n        notification.open(args);\r\n        //notification.open(argsv2);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentContract = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callGetPaymentContract({\r\n        ...data,\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      handlerCallGetAllCustomerTenantById();\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddDocumentContractId = async (data, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddDocumentContractId(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContract = async (data, name) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      if (data.download === false) {\r\n        const response = await callGetContract({\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        });\r\n        const responseResult =\r\n          isNil(response) === false &&\r\n          isNil(response.response) === false &&\r\n          isNil(response.response[0]) === false\r\n            ? response.response[0]\r\n            : {};\r\n        setDataGetContract(responseResult);\r\n        if (isEmpty(responseResult) === false && data.process === true) {\r\n          handlerCallAddDocumentContractId(\r\n            {\r\n              type: data.type,\r\n              idContract: responseResult.idContract,\r\n            },\r\n            responseResult.idDocument\r\n          );\r\n        }\r\n      } else {\r\n        const { token } = dataProfile;\r\n        const response = await fetch(\r\n          `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT}`,\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              ...data,\r\n              idSystemUser,\r\n              idLoginHistory,\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"Access-Control-Allow-Origin\": \"*\",\r\n              Authorization: `Bearer ${token}`,\r\n              \"Access-Control-Allow-Credentials\": true,\r\n            },\r\n          }\r\n        );\r\n        if (isNil(response.status) === false && response.status !== 200) {\r\n          throw isNil(response.statusText) === false ? response.statusText : \"\";\r\n        }\r\n        const label = `${name}_${moment().format(\"YYYYMMDD-HHmm\")}`;\r\n        const blob = await response.blob();\r\n        const link = document.createElement(\"a\");\r\n        link.className = \"download\";\r\n        link.download = `${label}.${\"docx\"}`;\r\n        link.href = URL.createObjectURL(blob);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.parentElement.removeChild(link);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, type) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: type.idPaymentType,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(data.originFileObj, dataDocument);\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      return Promise.resolve(documentId);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCommentContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddCommentContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu comentario se envio correctamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallSetContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callSetContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu solicitud se procesó exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllCustomerTenantById();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <SectionContractAvailable\r\n        dataProfile={dataProfile}\r\n        isModalVisible={isModalVisible}\r\n        onClose={() => {\r\n          setIsModalVisible(!isModalVisible);\r\n        }}\r\n        dataGetContract={dataGetContract}\r\n        onAddCommentContract={(data) => {\r\n          handlerCallAddCommentContract(data);\r\n        }}\r\n        onVisualiceDocument={async (data) => {\r\n          try {\r\n            await handlerCallGetContract(data);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onDownloadDocument={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContract(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onAcceptContract={async (data) => {\r\n          try {\r\n            await handlerCallSetContract(data);\r\n          } catch (error) {}\r\n        }}\r\n        onFinishContractFlow={() => {\r\n          handlerCallGetAllCustomerTenantById();\r\n        }}\r\n      />\r\n      <SectionDepositGuarantee\r\n        isModalVisible={isModalVisiblePolicy}\r\n        onClose={() => {\r\n          setIsModalVisiblePolicy(!isModalVisiblePolicy);\r\n        }}\r\n        frontFunctions={frontFunctions}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataTenant.shortNameTenant}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataTenant.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"action-buttons-top\">\r\n            <div className=\"button_init_primary\"></div>\r\n            {dataTenant.canSignContract === true && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    handlerCallGetContract({\r\n                      process: false,\r\n                      url: null,\r\n                      download: false,\r\n                      idContract: dataTenant.idContract,\r\n                      idCustomerTenant: dataTenant.idCustomerTenant,\r\n                      idCustomer: dataTenant.idCustomer,\r\n                      type: 1,\r\n                    });\r\n                    setIsModalVisible(!isModalVisible);\r\n                  }}\r\n                >\r\n                  <span>¡Contrato Disponible!</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n            {dataTenant.canDeal === 1 && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setIsVisiblePaymentRent(!isVisiblePaymentRent);\r\n                    setIsVisibleMessages(false);\r\n                  }}\r\n                >\r\n                  <span>Pagar renta</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconCalendar} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.nextPaymentAt}</h2>\r\n            <span>Fecha de próximo pago</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.currentRent}</h2>\r\n            <span>Monto de renta</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconDanger} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.interestAmount}</h2>\r\n            <span>Moratorios</span>\r\n          </div>\r\n        </div>\r\n        {dataTenant.canDeal !== 0 && (\r\n          <div className=\"main-information-owner\">\r\n            <div className=\"title-cards\">\r\n              <span>Acciones</span>\r\n            </div>\r\n            <div className=\"section-information-actions\">\r\n              <div className=\"section-information-buttons\">\r\n                <div className=\"section-information-button-2\">\r\n                  <img src={Tools} height={62} alt=\"Reportar incidencia\" />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {}}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Cotizar incidencia</span>\r\n                  </button>\r\n                </div>\r\n                <div className=\"section-information-button-3\">\r\n                  <img src={Transport} alt=\"Reportar incidencia\" height={62} />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {}}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Solicitar mudanza</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {isVisibleMessages === false && isVisiblePaymentRent === false && (\r\n          <div className=\"main-information-owner\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Propietario</span>\r\n              <div className=\"button_init_secondary\">\r\n                <button type=\"button\" onClick={() => {}}>\r\n                  <span>Reportar Propietario</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"section-information-actions\">\r\n              <div className=\"section-information-info\">\r\n                <div className=\"section-information-data\">\r\n                  {isNil(dataTenant.profileThumbnail) === false ? (\r\n                    <Avatar size={50} src={dataTenant.profileThumbnail} />\r\n                  ) : (\r\n                    <Avatar size={50} icon={<UserOutlined />} />\r\n                  )}\r\n                  <div className=\"info-user\">\r\n                    <strong>{dataTenant.fullName}</strong>\r\n                    <Rate\r\n                      style={{\r\n                        fontSize: \"15px\",\r\n                        position: \"relative\",\r\n                        bottom: \"5px\",\r\n                      }}\r\n                      tooltips={[]}\r\n                      onChange={() => {}}\r\n                      value={dataTenant.ratingRate}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"section-information-button-1\">\r\n                  <img src={FileReport} height={62} alt=\"Reportar incidencia\" />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {}}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Reportar incidencia</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=\"section-information-buttons\">\r\n                <div className=\"section-information-button-2\">\r\n                  <img\r\n                    src={MessagesIcon}\r\n                    height={62}\r\n                    alt=\"Reportar incidencia\"\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setIsVisibleMessages(!isVisibleMessages);\r\n                    }}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Enviar mensaje</span>\r\n                  </button>\r\n                </div>\r\n                <div className=\"section-information-button-3\">\r\n                  <img\r\n                    src={DocumentsIcon}\r\n                    alt=\"Reportar incidencia\"\r\n                    height={62}\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {}}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Ver documentos</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {isVisibleMessages === true && (\r\n          <div className=\"actions-information-tenant\">\r\n            <div className=\"tabs-tenant-information\">\r\n              <div className=\"form-modal\">\r\n                <div className=\"title-head-modal\">\r\n                  <button\r\n                    className=\"arrow-back-to\"\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setIsVisibleMessages(!isVisibleMessages);\r\n                    }}\r\n                  >\r\n                    <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                  </button>\r\n                  <h1>Mensajes</h1>\r\n                </div>\r\n              </div>\r\n              <SectionMessages\r\n                dataMessages={dataMessages}\r\n                getMoreCoincidences={() => {\r\n                  const { idCustomerTF, idCustomerTenantTF } = dataProfile;\r\n                  handlerCallGetCustomerMessage({\r\n                    idContract: dataTenant.idContract,\r\n                    idCustomerTenant: dataTenant.idCustomerTenant,\r\n                    idCustomer: dataTenant.idCustomer,\r\n                  });\r\n                }}\r\n                onSendMessages={(data) => {\r\n                  handlerCallAddCustomerMessage(data, {\r\n                    idContract: dataTenant.idContract,\r\n                    idCustomerTenant: dataTenant.idCustomerTenant,\r\n                    idCustomer: dataTenant.idCustomer,\r\n                  });\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n        {isVisiblePaymentRent === true && (\r\n          <div className=\"actions-information-tenant\">\r\n            <div className=\"tabs-tenant-information\">\r\n              <div className=\"form-modal\">\r\n                <div className=\"title-head-modal\">\r\n                  <button\r\n                    className=\"arrow-back-to\"\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setIsVisiblePaymentRent(!isVisiblePaymentRent);\r\n                    }}\r\n                  >\r\n                    <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                  </button>\r\n                  <h1>Pagar renta</h1>\r\n                </div>\r\n              </div>\r\n              <SectionRegisterPayment\r\n                dataPayments={dataPayments}\r\n                spinVisible={spinVisible}\r\n                onGetDocuments={async (arrayDocument, data) => {\r\n                  setSpinVisible(true);\r\n                  const dataDocuments = await Promise.all(\r\n                    arrayDocument.map((row) => {\r\n                      const item = handlerAddDocument(row, data);\r\n                      return item;\r\n                    })\r\n                  );\r\n                  const parseDocument = dataDocuments.join();\r\n                  const dataSend = {\r\n                    ...data,\r\n                    idContract: dataTenant.idContract,\r\n                    idCustomerTenant: dataTenant.idCustomerTenant,\r\n                    documents: parseDocument,\r\n                  };\r\n                  handlerCallGetAllPaymentContract(dataSend);\r\n                }}\r\n                onRegisterPayment={(data) => {}}\r\n              />\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callAddDocument: (file, data) => dispatch(callAddDocument(file, data)),\r\n  callGetPaymentContract: (data) => dispatch(callGetPaymentContract(data)),\r\n  callGetPaymentTypes: (data) => dispatch(callGetPaymentTypes(data)),\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callSetContract: (data, id) => dispatch(callSetContract(data, id)),\r\n  callAddCommentContract: (data, id) =>\r\n    dispatch(callAddCommentContract(data, id)),\r\n  callGetContract: (data) => dispatch(callGetContract(data)),\r\n  callGetContractComment: (data) => dispatch(callGetContractComment(data)),\r\n  callGetAllCustomerTenantById: (data) =>\r\n    dispatch(callGetAllCustomerTenantDashboardById(data)),\r\n  callAddCustomerMessage: (data) => dispatch(callAddCustomerMessage(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n  callAddDocumentContractId: (data, id) =>\r\n    dispatch(callAddDocumentContractId(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tenant);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\adviser.jsx",["380","381"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, message } from \"antd\";\r\nimport isNil from \"lodash/isNil\";\r\nimport \"moment/locale/es\";\r\nimport IconPolicy from \"../../assets/icons/Policy.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../assets/icons/activity.svg\";\r\nimport {\r\n  callGetAgentIndicators,\r\n  callGetAgentContractCoincidences,\r\n  callGetAgentCommissionChart,\r\n} from \"../../utils/actions/actions\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport SectionStatsChart from \"./sections/sectionStatsChart\";\r\nimport SectionCardOwner from \"./sections/sectionCardOwner\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Adviser = (props) => {\r\n  const {\r\n    dataProfile,\r\n    history,\r\n    callGetAgentIndicators,\r\n    callGetAgentContractCoincidences,\r\n    callGetAgentCommissionChart,\r\n  } = props;\r\n\r\n  const [dataStats, setDataStats] = useState({});\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataChartBar, setDataChartBar] = useState([]);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAgentIndicators = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAgentIndicators({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataStats(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAgentContractCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAgentContractCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: null,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAgentCommissionChart = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAgentCommissionChart({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResultBar =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].dataBar) === false\r\n          ? JSON.parse(response.response[0].dataBar)\r\n          : [];\r\n      setDataChartBar(responseResultBar);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const callAsynApis = async () => {\r\n    await handlerCallGetAgentIndicators();\r\n    await handlerCallGetAgentContractCoincidences();\r\n    await handlerCallGetAgentCommissionChart();\r\n  };\r\n\r\n  useEffect(() => {\r\n    callAsynApis();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataProfile.showName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataProfile.lastSessionStarted}</strong>\r\n            </span>\r\n            <span>\r\n              Número de Asesor: <strong>{dataProfile.agentNo}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalCommissionAmount}</h2>\r\n            <span>Total Comisiones</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconPolicy} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalPolicies}</h2>\r\n            <span>Pólizas</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconActivity} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalRenewals}</h2>\r\n            <span>Renovaciones</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user\">\r\n          <SectionStatsChart dataStatsChart={dataChartBar} finishCallApis />\r\n          <SectionCardOwner\r\n            history={history}\r\n            tenantCoincidences={dataCoincidences}\r\n            finishCallApis\r\n            onClickSendInvitation={() => {}}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAgentIndicators: (data) => dispatch(callGetAgentIndicators(data)),\r\n  callGetAgentContractCoincidences: (data) =>\r\n    dispatch(callGetAgentContractCoincidences(data)),\r\n  callGetAgentCommissionChart: (data) =>\r\n    dispatch(callGetAgentCommissionChart(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Adviser);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormOwner.jsx",["382","383"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administrator.jsx",["384","385","386","387","388","389"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport \"moment/locale/es\";\r\nimport IconDanger from \"../../assets/icons/Danger.svg\";\r\nimport Tickets from \"../../assets/icons/tickets.svg\";\r\nimport Payments from \"../../assets/icons/payments.svg\";\r\nimport Balance from \"../../assets/icons/balance.svg\";\r\nimport Agents from \"../../assets/icons/agent.svg\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetContractStats,\r\n  callGetContractCoincidences,\r\n  callGetContractChart,\r\n  callGetSearchProspect,\r\n  callGetAddProspect,\r\n  callUpdateContract,\r\n  callGetAllPolicyStatus,\r\n  callGetDetailCustomer,\r\n  callGetDetailCustomerTenant,\r\n  callGetDetailCustomerAgent,\r\n  callSwitchCustomerContract,\r\n  callGetContractComment,\r\n  callAddDocumentContract,\r\n  callGetContractDocument,\r\n} from \"../../utils/actions/actions\";\r\nimport { API_CONSTANTS } from \"../../utils/constants/apiConstants\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport SectionStatsChart from \"./sections/sectionStatsChart\";\r\nimport SectionStatsChartPie from \"./sections/sectionStatsChartPie\";\r\nimport SectionCardOwner from \"./sections/sectionCardOwner\";\r\nimport SectionAddUsers from \"./sections/sectionAddUsers\";\r\nimport SectionDetailUser from \"./sections/sectionDetailUser\";\r\nimport SectionDetailUserTenant from \"./sections/sectionDetailUserTenant\";\r\nimport SectionDetailUserAdviser from \"./sections/sectionUserDetailAdviser\";\r\nimport SectionUploadDocument from \"./sections/sectionUploadDocuments\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Administrator = (props) => {\r\n  const {\r\n    dataProfile,\r\n    history,\r\n    callGetContractStats,\r\n    callGetContractCoincidences,\r\n    callGetContractChart,\r\n    callGetSearchProspect,\r\n    callGetAddProspect,\r\n    callUpdateContract,\r\n    callGetAllPolicyStatus,\r\n    callGetDetailCustomer,\r\n    callGetDetailCustomerTenant,\r\n    callGetDetailCustomerAgent,\r\n    callSwitchCustomerContract,\r\n    setDataUserProfile,\r\n    callGetContractComment,\r\n    callAddDocumentContract,\r\n    callGetContractDocument,\r\n  } = props;\r\n  const [isVisibleAddUser, setIsVisibleAddUser] = useState(false);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [isVisibleDetailUser, setIsVisibleDetailUser] = useState(false);\r\n  const [isVisibleAddDocs, setIsVisibleAddDocs] = useState(false);\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataDocuments, setDataDocuments] = useState([]);\r\n  const [dataStats, setDataStats] = useState({});\r\n  const [dataDetailCustomer, setDataDetailCustomer] = useState({});\r\n  const [dataDetailCustomerTenant, setDataDetailCustomerTenant] = useState([]);\r\n  const [dataDetailReferences, setDataDetailReferences] = useState([]);\r\n  const [dataDetailAgent, setDataDetailAgent] = useState({});\r\n  const [dataChartBar, setDataChartBar] = useState([]);\r\n  const [dataChartPie, setDataChartPie] = useState([]);\r\n  const [dataAllPolicyStatus, setDataAllPolicyStatus] = useState([]);\r\n  const [dataOwnerSearch, setDataOwnerSearch] = useState({\r\n    idPersonType: 1,\r\n    idCustomer: null,\r\n  });\r\n  const [dataTenantSearch, setDataTenantSearch] = useState({\r\n    idCustomerTenant: null,\r\n    idCustomerType: null,\r\n    idPersonType: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    emailAddress: null,\r\n    phoneNumber: null,\r\n  });\r\n  const [dataSecondTenant, setDataSecondTenant] = useState({\r\n    idCustomerTenant: null,\r\n    idCustomerType: null,\r\n    idPersonType: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    emailAddress: null,\r\n    phoneNumber: null,\r\n  });\r\n  const [dataAdviserSearch, setDataAdviserSearch] = useState({\r\n    idCustomerAgent: null,\r\n  });\r\n  const [isVisibleDetailUserTenant, setIsVisibleDetailUserTenant] = useState(\r\n    false\r\n  );\r\n  const [isVisibleDetailUserAdviser, setIsVisibleDetailUserAdviser] = useState(\r\n    false\r\n  );\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractStats = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractStats({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataStats(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallContractComment = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractComment({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallContractDocument = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractDocument({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: null,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocuments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetDetailCustomer = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetDetailCustomer({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataDetailCustomer(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetDetailCustomerTenant = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    const arrayResult = [];\r\n    try {\r\n      const response = await callGetDetailCustomerTenant({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false && isNil(response.response1) === false\r\n          ? response.response1\r\n          : [];\r\n      const responseResult2 =\r\n        isNil(response) === false && isNil(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      setDataDetailCustomerTenant(responseResult1);\r\n      setDataDetailReferences(responseResult2);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetDetailCustomerAgent = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetDetailCustomerAgent({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataDetailAgent(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetSearchProspect = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetSearchProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        dataFiltered: data,\r\n        idCustomer: null,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataOwnerSearch(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetSearchProspectTenant = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetSearchProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        dataFiltered: data,\r\n        idCustomer: null,\r\n        type: 2,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenantSearch(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetSearchSecondTenant = async (data, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetSearchProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        dataFiltered: data,\r\n        idCustomer: id,\r\n        type: 2,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataSecondTenant(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetSearchProspectAdviser = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetSearchProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        dataFiltered: data,\r\n        idCustomer: null,\r\n        type: 3,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataAdviserSearch(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAddProspect = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAddProspect({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      showMessageStatusApi(\r\n        \"La solicitud se procesó exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractChart = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractChart({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResultBar =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].dataBar) === false\r\n          ? JSON.parse(response.response[0].dataBar)\r\n          : [];\r\n      const responseResultPie =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false &&\r\n        isNil(response.response[0].dataPAI) === false\r\n          ? JSON.parse(response.response[0].dataPAI)\r\n          : [];\r\n      setDataChartBar(responseResultBar);\r\n      setDataChartPie(responseResultPie);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPolicyStatus = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllPolicyStatus({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataAllPolicyStatus(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const callAsynApis = async () => {\r\n    await handlerCallGetContractStats();\r\n    await handlerCallGetContractCoincidences();\r\n    await handlerCallGetContractChart();\r\n  };\r\n\r\n  const handlerCallUpdateContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callUpdateContract(\r\n        {\r\n          idCustomer: data.idCustomer,\r\n          idCustomerTenant: data.idCustomerTenant,\r\n          idPolicyStatus: data.idPolicyStatus,\r\n          rating: isNil(data.rating) === false ? data.rating : null,\r\n          isApproved: isNil(data.isApproved) === false ? data.isApproved : null,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallSwitchCustomerContract = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callSwitchCustomerContract(\r\n        {\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n      handlerCallGetDetailCustomerTenant(id);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContractDocumentById = async (data, name) => {\r\n    const { idSystemUser, idLoginHistory, token } = dataProfile;\r\n    try {\r\n      const responseInfo = await fetch(\r\n        `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT_DOCUMENT_BYID}`,\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            ...data,\r\n            idDigitalContract: null,\r\n            idSystemUser,\r\n            idLoginHistory,\r\n            download: false,\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      if (isNil(responseInfo.status) === false && responseInfo.status !== 200) {\r\n        throw isNil(responseInfo.statusText) === false\r\n          ? responseInfo.statusText\r\n          : \"\";\r\n      }\r\n      const resultInfo = await responseInfo.json();\r\n      const resultExtension = resultInfo.extension;\r\n\r\n      const responseDownload = await fetch(\r\n        `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT_DOCUMENT_BYID}`,\r\n        {\r\n          method: \"POST\",\r\n          body: JSON.stringify({\r\n            ...data,\r\n            idDigitalContract: null,\r\n            idSystemUser,\r\n            idLoginHistory,\r\n            download: true,\r\n          }),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Access-Control-Allow-Origin\": \"*\",\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n\r\n      if (\r\n        isNil(responseDownload.status) === false &&\r\n        responseDownload.status !== 200\r\n      ) {\r\n        throw isNil(responseDownload.statusText) === false\r\n          ? responseDownload.statusText\r\n          : \"\";\r\n      }\r\n      const blob = await responseDownload.blob();\r\n      const link = document.createElement(\"a\");\r\n      link.className = \"download\";\r\n      link.download = `${name}.${resultExtension}`;\r\n      link.href = URL.createObjectURL(blob);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      link.parentElement.removeChild(link);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"No está disponible el documento\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    callAsynApis();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <SectionUploadDocument\r\n        dataDocuments={dataDocuments}\r\n        isModalVisible={isVisibleAddDocs}\r\n        onClose={() => {\r\n          setIsVisibleAddDocs(!isVisibleAddDocs);\r\n        }}\r\n      />\r\n      <SectionAddUsers\r\n        isModalVisible={isVisibleAddUser}\r\n        dataOwnerSearch={dataOwnerSearch}\r\n        dataTenantSearch={dataTenantSearch}\r\n        dataAdviserSearch={dataAdviserSearch}\r\n        dataSecondTenant={dataSecondTenant}\r\n        onClose={() => {\r\n          setIsVisibleAddUser(!isVisibleAddUser);\r\n        }}\r\n        spinVisible={false}\r\n        onSearchOwner={(data) => {\r\n          handlerCallGetSearchProspect(data);\r\n        }}\r\n        onSearchTenant={(data) => {\r\n          handlerCallGetSearchProspectTenant(data);\r\n        }}\r\n        onSearchSecondTenant={(data, id) => {\r\n          handlerCallGetSearchSecondTenant(data, id);\r\n        }}\r\n        onSearchAdviser={(data) => {\r\n          handlerCallGetSearchProspectAdviser(data);\r\n        }}\r\n        onSendInformation={async (data) => {\r\n          try {\r\n            await handlerCallGetAddProspect(data);\r\n            callAsynApis();\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n      />\r\n      <SectionDetailUser\r\n        isDrawerVisible={isVisibleDetailUser}\r\n        onClose={() => {\r\n          setIsVisibleDetailUser(!isVisibleDetailUser);\r\n        }}\r\n        dataDetailCustomer={dataDetailCustomer}\r\n        onRedirectTo={async (key, idCustomer, idContract) => {\r\n          await setDataUserProfile({\r\n            ...dataProfile,\r\n            idCustomerTenant: null,\r\n            idCustomerTF: idCustomer,\r\n            idCustomer: idCustomer,\r\n            idContract: idContract,\r\n          });\r\n          history.push(`/websystem/typeform-owner/${key}`);\r\n        }}\r\n        dataMessages={dataMessages}\r\n        onDownloadDocumentById={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContractDocumentById(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n      />\r\n      <SectionDetailUserTenant\r\n        isDrawerVisible={isVisibleDetailUserTenant}\r\n        onClose={() => {\r\n          setIsVisibleDetailUserTenant(!isVisibleDetailUserTenant);\r\n          callAsynApis();\r\n        }}\r\n        dataDetailCustomerTenant={dataDetailCustomerTenant}\r\n        dataDetailReferences={dataDetailReferences}\r\n        onSendRatingUser={async (data) => {\r\n          try {\r\n            await handlerCallUpdateContract(data);\r\n            await handlerCallGetDetailCustomerTenant(data.idContract);\r\n            callAsynApis();\r\n          } catch (error) {}\r\n        }}\r\n        changeRolesCustomers={(id) => {\r\n          handlerCallSwitchCustomerContract(id);\r\n        }}\r\n        onRedirectTo={async (key, idCustomer, idContract, idCustomerTenant) => {\r\n          await setDataUserProfile({\r\n            ...dataProfile,\r\n            idCustomerTenantTF: idCustomerTenant,\r\n            idCustomerTF: idCustomer,\r\n            idContract: idContract,\r\n          });\r\n          history.push(`/websystem/typeform-user/${key}`);\r\n        }}\r\n        dataMessages={dataMessages}\r\n        onDownloadDocumentById={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContractDocumentById(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n      />\r\n      <SectionDetailUserAdviser\r\n        isDrawerVisible={isVisibleDetailUserAdviser}\r\n        onClose={() => {\r\n          setIsVisibleDetailUserAdviser(!isVisibleDetailUserAdviser);\r\n        }}\r\n        dataDetailAgent={dataDetailAgent}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataProfile.showName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataProfile.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n          <div\r\n            className=\"action-buttons-top\"\r\n            style={{ justifyContent: \"flex-end\" }}\r\n          >\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  history.push(`/websystem/leads-landingpage`);\r\n                }}\r\n              >\r\n                <span>Leads ({dataStats.totalLeads})</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={Tickets} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.grandTotalSale}</h2>\r\n            <span>\r\n              Cierres <strong>({dataStats.totalClosings})</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#FF6961\" }}>\r\n              <img src={Payments} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalCommissionAmount}</h2>\r\n            <span>\r\n              Comisiones pagadas <strong>({dataStats.totalCommissions})</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#98FF98\" }}>\r\n              <img src={Balance} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalBalance}</h2>\r\n            <span>Balance</span>\r\n          </div>\r\n        </div>\r\n        <div\r\n          className=\"indicators-amount-renter\"\r\n          style={{ justifyContent: \"space-around\" }}\r\n        >\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconDanger} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalForClosing}</h2>\r\n            <span>Por cerrar</span>\r\n          </div>\r\n          <div\r\n            className=\"cards-amount-renter\"\r\n            style={{ cursor: \"pointer\" }}\r\n            onClick={() => {\r\n              history.push(`/websystem/dashboard-agents`);\r\n            }}\r\n          >\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffa420\" }}>\r\n              <img src={Agents} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataStats.totalAgent}</h2>\r\n            <span>Asesores</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user-admin\">\r\n          <SectionStatsChart dataStatsChart={dataChartBar} finishCallApis />\r\n          <SectionStatsChartPie dataStatsChart={dataChartPie} finishCallApis />\r\n          <SectionCardOwner\r\n            onOpenUploadDocument={(id) => {\r\n              handlerCallContractDocument(id);\r\n              setIsVisibleAddDocs(!isVisibleAddDocs);\r\n            }}\r\n            history={history}\r\n            dataAllPolicyStatus={dataAllPolicyStatus}\r\n            onAddUser={() => {\r\n              setIsVisibleAddUser(!isVisibleAddUser);\r\n            }}\r\n            onOpenDetail={(type, id, data) => {\r\n              if (data.canViewDatail === true) {\r\n                if (id === 1) {\r\n                  handlerCallGetDetailCustomer(type);\r\n                  handlerCallContractComment({\r\n                    idCustomer: data.idCustomer,\r\n                    idCustomerTenant: null,\r\n                    idContract: data.idContract,\r\n                    idDigitalContract: data.idDigitalContract,\r\n                  });\r\n                  setIsVisibleDetailUser(!isVisibleDetailUser);\r\n                } else if (id === 2) {\r\n                  handlerCallGetDetailCustomerTenant(type);\r\n                  handlerCallContractComment({\r\n                    idCustomer: data.idCustomer,\r\n                    idCustomerTenant: data.idCustomerTenant,\r\n                    idContract: data.idContract,\r\n                    idDigitalContract: data.idDigitalContract,\r\n                  });\r\n                  setIsVisibleDetailUserTenant(!isVisibleDetailUserTenant);\r\n                } else if (id === 3) {\r\n                  handlerCallGetDetailCustomerAgent(type);\r\n                  setIsVisibleDetailUserAdviser(!isVisibleDetailUserAdviser);\r\n                }\r\n              }\r\n            }}\r\n            dataCoincidences={dataCoincidences}\r\n            finishCallApis\r\n            onClickSendInvitation={() => {}}\r\n            onGetPolicyStatus={(id) => {\r\n              handlerCallGetAllPolicyStatus(id);\r\n            }}\r\n            onClosePolicy={async (data) => {\r\n              await handlerCallUpdateContract(data);\r\n              callAsynApis();\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetContractStats: (data) => dispatch(callGetContractStats(data)),\r\n  callGetContractCoincidences: (data) =>\r\n    dispatch(callGetContractCoincidences(data)),\r\n  callGetContractChart: (data) => dispatch(callGetContractChart(data)),\r\n  callGetSearchProspect: (data) => dispatch(callGetSearchProspect(data)),\r\n  callGetAddProspect: (data) => dispatch(callGetAddProspect(data)),\r\n  callUpdateContract: (data, id) => dispatch(callUpdateContract(data, id)),\r\n  callSwitchCustomerContract: (data, id) =>\r\n    dispatch(callSwitchCustomerContract(data, id)),\r\n  callGetAllPolicyStatus: (data) => dispatch(callGetAllPolicyStatus(data)),\r\n  callGetDetailCustomer: (data) => dispatch(callGetDetailCustomer(data)),\r\n  callGetDetailCustomerTenant: (data) =>\r\n    dispatch(callGetDetailCustomerTenant(data)),\r\n  callGetDetailCustomerAgent: (data) =>\r\n    dispatch(callGetDetailCustomerAgent(data)),\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callGetContractComment: (data) => dispatch(callGetContractComment(data)),\r\n  callAddDocumentContract: (data, id) =>\r\n    dispatch(callAddDocumentContract(data, id)),\r\n  callGetContractDocument: (data) => dispatch(callGetContractDocument(data)),\r\n  callGetContractDocumentById: (data) =>\r\n    dispatch(callGetContractDocument(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Administrator);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\MakeScreen\\makeScreen.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx",["390","391","392","393","394"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Tabs, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport SectionDocuments from \"./sectionDocuments/sectionDocuments\";\r\nimport SectionInfoTenant from \"./sectionDocuments/sectionCardInformation\";\r\nimport SectionMessages from \"./sectionDocuments/sectionMessages\";\r\nimport SectionRegisterPayment from \"./sectionDocuments/sectionRegisterPayment\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetAllCustomerTenantById,\r\n  callGetPaymentTypes,\r\n  callGetPaymentContract,\r\n  callAddDocument,\r\n  callGetAllDocumentTypes,\r\n  callGetPaymentContractDocument,\r\n  callAddCustomerMessage,\r\n  callGetCustomerMessage,\r\n} from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\nconst { TabPane } = Tabs;\r\n\r\nconst TenantFromOwner = (props) => {\r\n  const {\r\n    dataProfile,\r\n    match,\r\n    callGetAllCustomerTenantById,\r\n    callGetPaymentTypes,\r\n    callGetPaymentContract,\r\n    callAddDocument,\r\n    callGetAllDocumentTypes,\r\n    callGetPaymentContractDocument,\r\n    callAddCustomerMessage,\r\n    callGetCustomerMessage,\r\n  } = props;\r\n  const { params } = match;\r\n  const idCustomerTenant = params.idCustomerTenant;\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataPayments, setDataPayments] = useState([]);\r\n  const [dataDocumentTypes, setDataDocumentTypes] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [dataDocumentsRepository, setDataDocumentsRepository] = useState([]);\r\n  const [idContractData, setIdContractData] = useState(null);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [idTopIndexDocuments, setIdTopIndexDocuments] = useState(-1);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n\r\n  const dotChange = useRef(null);\r\n  const contentStyle = {\r\n    height: \"160px\",\r\n    color: \"#fff\",\r\n    lineHeight: \"160px\",\r\n    textAlign: \"center\",\r\n    background: \"#364d79\",\r\n  };\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentTypes = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPayments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllDocumentTypes = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllDocumentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentTypes(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetPaymentContractDocument = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentContractDocument({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        topIndex: idTopIndexDocuments,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentsRepository(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexDocuments(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCustomerTenantById = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerTenantById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenant(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdContractData(responseResult.idContract);\r\n        handlerCallGetAllPaymentTypes({\r\n          type: 1,\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n        handlerCallGetCustomerMessage({\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentContract = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callGetPaymentContract({\r\n        ...data,\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      handlerCallGetAllCustomerTenantById();\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, type) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: type.idPaymentType,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(data.originFileObj, dataDocument);\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      return Promise.resolve(documentId);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      handlerCallGetCustomerMessage({\r\n        idContract: idContractData,\r\n        idCustomerTenant,\r\n      });\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllCustomerTenantById();\r\n    handlerCallGetAllDocumentTypes();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <SectionInfoTenant dataTenant={dataTenant} />\r\n        <div className=\"actions-information-tenant\">\r\n          <div className=\"tabs-tenant-information\">\r\n            <Tabs\r\n              defaultActiveKey=\"1\"\r\n              onChange={() => {}}\r\n              tabBarStyle={{ color: \"#A0A3BD\" }}\r\n              tabPosition=\"top\"\r\n            >\r\n              <TabPane tab=\"Registrar pago\" key=\"1\">\r\n                <SectionRegisterPayment\r\n                  dataPayments={dataPayments}\r\n                  spinVisible={spinVisible}\r\n                  onGetDocuments={async (arrayDocument, data) => {\r\n                    setSpinVisible(true);\r\n                    const dataDocuments = await Promise.all(\r\n                      arrayDocument.map((row) => {\r\n                        const item = handlerAddDocument(row, data);\r\n                        return item;\r\n                      })\r\n                    );\r\n                    const parseDocument = dataDocuments.join();\r\n                    const dataSend = {\r\n                      ...data,\r\n                      idCustomerTenant,\r\n                      idContract: idContractData,\r\n                      documents: parseDocument,\r\n                    };\r\n                    handlerCallGetAllPaymentContract(dataSend);\r\n                  }}\r\n                  onRegisterPayment={(data) => {}}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Documentos\" key=\"2\">\r\n                <SectionDocuments\r\n                  dataDocumentTypes={dataDocumentTypes}\r\n                  dataDocumentsRepository={dataDocumentsRepository}\r\n                  onSearchDocument={(data) => {\r\n                    handlerCallGetPaymentContractDocument(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Mensajes\" key=\"3\">\r\n                <SectionMessages\r\n                  dataMessages={dataMessages}\r\n                  getMoreCoincidences={() => {\r\n                    handlerCallGetCustomerMessage({\r\n                      idContract: idContractData,\r\n                      idCustomerTenant,\r\n                    });\r\n                  }}\r\n                  onSendMessages={(data) => {\r\n                    handlerCallAddCustomerMessage(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Cotizar incidencia\" key=\"4\" />\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomerTenantById: (data) =>\r\n    dispatch(callGetAllCustomerTenantById(data)),\r\n  callGetPaymentTypes: (data) => dispatch(callGetPaymentTypes(data)),\r\n  callGetPaymentContract: (data) => dispatch(callGetPaymentContract(data)),\r\n  callAddDocument: (file, data) => dispatch(callAddDocument(file, data)),\r\n  callGetAllDocumentTypes: (data) => dispatch(callGetAllDocumentTypes(data)),\r\n  callGetPaymentContractDocument: (data) =>\r\n    dispatch(callGetPaymentContractDocument(data)),\r\n  callAddCustomerMessage: (data) => dispatch(callAddCustomerMessage(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TenantFromOwner);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx",["395","396","397","398","399","400","401"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport moment from \"moment\";\r\nimport { Layout, notification, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport IconOwner from \"../../assets/icons/iconHomeIndicator.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../assets/icons/activity.svg\";\r\nimport {\r\n  callGetAllCustomerById,\r\n  callGetAllCustomerCoincidences,\r\n  callGetStatsChart,\r\n  callAddProperty,\r\n  callGetAllPersons,\r\n  callGetProperties,\r\n  callGetDepartments,\r\n  callAddTenant,\r\n  callGetZipCodeAdress,\r\n  callGetAllTenantsCatalog,\r\n  callGetAllBankCatalog,\r\n  callRequestAdvancement,\r\n  callSetContract,\r\n  callAddCommentContract,\r\n  callGetContract,\r\n  callGetContractComment,\r\n  callAddDocumentContractId,\r\n  callGetPropertyTypes,\r\n} from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport { API_CONSTANTS, HEADER } from \"../../utils/constants/apiConstants\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\nimport SectionCardTenant from \"./sections/sectionCardTenants\";\r\nimport SectionStatsChart from \"./sections/sectionStatsChart\";\r\nimport SectionAddProperty from \"./sections/sectionAddProperty\";\r\nimport SectionAddTenant from \"./sections/sectionAddTenant\";\r\nimport SectionAdvancement from \"./sections/sectionAdvancement\";\r\nimport SectionContractAvailable from \"../Tenant/sections/sectionContractAvailableOwner\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Owner = (props) => {\r\n  const {\r\n    dataProfile,\r\n    setDataUserProfile,\r\n    callGetAllCustomerById,\r\n    history,\r\n    callGetTenantCoincidences,\r\n    callGetStatsChart,\r\n    callAddProperty,\r\n    callGetAllPersons,\r\n    callGetProperties,\r\n    callGetDepartments,\r\n    callAddTenant,\r\n    callGetZipCodeAdress,\r\n    callGetAllTenantsCatalog,\r\n    callGetAllBankCatalog,\r\n    callRequestAdvancement,\r\n    callSetContract,\r\n    callAddCommentContract,\r\n    callGetContract,\r\n    callGetContractComment,\r\n    callAddDocumentContractId,\r\n    callGetPropertyTypes,\r\n  } = props;\r\n  const [dataCustomer, setDataCustomer] = useState({});\r\n  const [dataStatsChart, setDataStatsChart] = useState([]);\r\n  const [dataCatalogProperty, setDataCatalogProperty] = useState([]);\r\n  const [dataPersonType, setDataPersonType] = useState([]);\r\n  const [dataDepartment, setDataDepartment] = useState([]);\r\n  const [dataZipCodeAdress, setDataZipCodeAdress] = useState({});\r\n  const [dataZipCatalog, setDataZipCatalog] = useState([]);\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataBank, setDataBank] = useState([]);\r\n  const [dataPropertyTypes, setDataPropertyTypes] = useState([]);\r\n  const [dataGetContract, setDataGetContract] = useState([]);\r\n  const [tenantCoincidences, setTenantCoincidences] = useState([]);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isModalVisibleTenant, setIsModalVisibleTenant] = useState(false);\r\n  const [isVisibleContract, setIsVisibleContract] = useState(false);\r\n  const [isModalVisibleAdvancement, setIsModalVisibleAdvancement] = useState(\r\n    false\r\n  );\r\n  const [finishCallApis, setFinishCallApis] = useState(false);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const args = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Necesitamos que nos ayudes a ingresar tu información personal, la cual\r\n          sera utilizada para la elaboración del contrato y póliza.\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            notification.destroy();\r\n            history.push(\"/websystem/typeform-owner\");\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Ir al formulario</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{\r\n          fontFamily: \"Poppins\",\r\n          fontSize: \"12px\",\r\n          color: \"var(--color-primary)\",\r\n        }}\r\n      >\r\n        Solicitud Póliza Homify Propietario\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const handlerCallApiPersonTypes = async (data) => {\r\n    try {\r\n      const response = await callGetAllPersons(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setDataPersonType(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCustomerById = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataCustomer(responseResult);\r\n      if (\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.isTypeFormCompleted) === false &&\r\n        responseResult.isTypeFormCompleted === false\r\n      ) {\r\n        setDataUserProfile({\r\n          ...dataProfile,\r\n          idContract: responseResult.idContract,\r\n          idCustomerTF: responseResult.idCustomer,\r\n          idCustomerTenantTF: null,\r\n        });\r\n        notification.open(args);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetTenantCoincidences = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetTenantCoincidences({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setTenantCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetCallGetStatsChart = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetStatsChart({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        jsonConditions: [],\r\n      });\r\n\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataStatsChart(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const hanlderCallGetZipCodeAdress = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetZipCodeAdress({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false &&\r\n        isNil(response.response1) === false &&\r\n        isNil(response.response1[0]) === false\r\n          ? response.response1[0]\r\n          : {};\r\n      const responseResult2 =\r\n        isNil(response) === false && isNil(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      setDataZipCodeAdress(responseResult1);\r\n      setDataZipCatalog(responseResult2);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n  const handlerCallAddProperty = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddProperty({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setSpinVisible(false);\r\n      setIsModalVisible(!isModalVisible);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallRequestAdvancement = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callRequestAdvancement({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setSpinVisible(false);\r\n      setIsModalVisibleAdvancement(!isModalVisibleAdvancement);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetProperties = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetProperties({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataCatalogProperty(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetDepartments = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetDepartments({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataDepartment(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddTenant = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddTenant({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setSpinVisible(false);\r\n      setIsModalVisibleTenant(!isModalVisibleTenant);\r\n      handlerCallGetTenantCoincidences();\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(error, GLOBAL_CONSTANTS.STATUS_API.ERROR);\r\n    }\r\n  };\r\n\r\n  const handlerCallTenantCatalog = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllTenantsCatalog({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataTenant(responseResult);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallBankCatalog = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllBankCatalog({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataBank(responseResult);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddDocumentContractId = async (data, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddDocumentContractId(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContract = async (data, name) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      if (data.download === false) {\r\n        const response = await callGetContract({\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        });\r\n        const responseResult =\r\n          isNil(response) === false &&\r\n          isNil(response.response) === false &&\r\n          isNil(response.response[0]) === false\r\n            ? response.response[0]\r\n            : {};\r\n        setDataGetContract(responseResult);\r\n        if (isEmpty(responseResult) === false && data.process === true) {\r\n          handlerCallAddDocumentContractId(\r\n            {\r\n              type: data.type,\r\n              idContract: responseResult.idContract,\r\n            },\r\n            responseResult.idDocument\r\n          );\r\n        }\r\n      } else {\r\n        const { token } = dataProfile;\r\n        const response = await fetch(\r\n          `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT}`,\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              ...data,\r\n              idSystemUser,\r\n              idLoginHistory,\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${token}`,\r\n              \"Access-Control-Allow-Origin\": \"*\",\r\n            },\r\n          }\r\n        );\r\n        if (isNil(response.status) === false && response.status !== 200) {\r\n          const responseResult = await response.json();\r\n          const responseText =\r\n            isNil(responseResult) === false &&\r\n            isNil(responseResult.response) === false &&\r\n            isNil(responseResult.response.statusText) === false\r\n              ? responseResult.response.statusText\r\n              : \"\";\r\n          throw responseText;\r\n        }\r\n        const label = `${name}_${moment().format(\"YYYYMMDD-HHmm\")}`;\r\n        const blob = await response.blob();\r\n        const link = document.createElement(\"a\");\r\n        link.className = \"download\";\r\n        link.download = `${label}.${\"docx\"}`;\r\n        link.href = URL.createObjectURL(blob);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.parentElement.removeChild(link);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false && isEmpty(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCommentContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddCommentContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu comentario se envió correctamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallSetContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callSetContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu solicitud se procesó exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetPropertyTypes = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPropertyTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPropertyTypes(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCalllSyncApis = async () => {\r\n    await handlerCallGetAllCustomerById();\r\n    await handlerCallGetTenantCoincidences();\r\n    await handlerCallGetCallGetStatsChart();\r\n    setFinishCallApis(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCalllSyncApis();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <SectionContractAvailable\r\n        dataProfile={dataProfile}\r\n        isModalVisible={isVisibleContract}\r\n        onClose={() => {\r\n          setIsVisibleContract(!isVisibleContract);\r\n        }}\r\n        dataGetContract={dataGetContract}\r\n        onAddCommentContract={(data) => {\r\n          handlerCallAddCommentContract(data);\r\n        }}\r\n        onVisualiceDocument={async (data) => {\r\n          try {\r\n            await handlerCallGetContract(data);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onDownloadDocument={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContract(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onAcceptContract={async (data) => {\r\n          try {\r\n            await handlerCallSetContract(data);\r\n          } catch (error) {}\r\n        }}\r\n        onFinishContractFlow={() => {\r\n          handlerCalllSyncApis();\r\n        }}\r\n      />\r\n      <SectionAddProperty\r\n        dataPropertyTypes={dataPropertyTypes}\r\n        spinVisible={spinVisible}\r\n        isModalVisible={isModalVisible}\r\n        onClose={() => {\r\n          setIsModalVisible(!isModalVisible);\r\n        }}\r\n        onClickAddProperty={async (data) => {\r\n          setSpinVisible(true);\r\n          await handlerCallAddProperty(data);\r\n          await handlerCallGetAllCustomerById();\r\n        }}\r\n        dataZipCodeAdress={dataZipCodeAdress}\r\n        dataZipCatalog={dataZipCatalog}\r\n        onChangeZipCode={(zipCode) => {\r\n          hanlderCallGetZipCodeAdress({ type: 1, zipCode });\r\n        }}\r\n      />\r\n      <SectionAddTenant\r\n        dataPersonType={dataPersonType}\r\n        dataCatalogProperty={dataCatalogProperty}\r\n        dataDepartment={dataDepartment}\r\n        spinVisible={spinVisible}\r\n        isModalVisible={isModalVisibleTenant}\r\n        onClose={() => {\r\n          setIsModalVisibleTenant(!isModalVisibleTenant);\r\n        }}\r\n        onClickAddProperty={(data) => {\r\n          setSpinVisible(true);\r\n          handlerCallAddTenant(data);\r\n        }}\r\n        onChangeSelectProperty={(value) => {\r\n          handlerCallGetDepartments({\r\n            idProperty: value,\r\n            type: 1,\r\n          });\r\n        }}\r\n      />\r\n      <SectionAdvancement\r\n        isModalVisible={isModalVisibleAdvancement}\r\n        onClose={() => {\r\n          setIsModalVisibleAdvancement(!isModalVisibleAdvancement);\r\n        }}\r\n        onClickAdvancement={(data) => {\r\n          setSpinVisible(true);\r\n          handlerCallRequestAdvancement(data);\r\n        }}\r\n        spinVisible={spinVisible}\r\n        dataTenant={dataTenant}\r\n        dataBank={dataBank}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataCustomer.shortName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataCustomer.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"action-buttons-top\">\r\n            {(dataCustomer.canRequestProperty === 1 ||\r\n              dataCustomer.canRequestProperty === true) && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    handlerCallGetPropertyTypes();\r\n                    setIsModalVisible(!isModalVisible);\r\n                  }}\r\n                >\r\n                  <span>Registrar Propiedad</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n            {(dataCustomer.canRequestAdvanceRent === 1 ||\r\n              dataCustomer.canRequestAdvanceRent === true) && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={async () => {\r\n                    setIsModalVisibleAdvancement(!isModalVisibleAdvancement);\r\n                    await handlerCallTenantCatalog();\r\n                    await handlerCallBankCatalog();\r\n                  }}\r\n                >\r\n                  <span>Adelanto de renta</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconOwner} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataCustomer.totalCumulativeRentAmount}</h2>\r\n            <span>\r\n              Total Rentas Acumuladas ({dataCustomer.totalCumulativeRents})\r\n            </span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataCustomer.totalExpensiveAmount}</h2>\r\n            <span>Total Gastos Acumulados</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconActivity} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataCustomer.totalCumulativeBalance}</h2>\r\n            <span>Balance Acumulado</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user\">\r\n          <SectionStatsChart\r\n            dataStatsChart={dataStatsChart}\r\n            finishCallApis={finishCallApis}\r\n          />\r\n          <SectionCardTenant\r\n            dataCustomer={dataCustomer}\r\n            history={history}\r\n            tenantCoincidences={tenantCoincidences}\r\n            finishCallApis={finishCallApis}\r\n            onClickSendInvitation={async () => {\r\n              setIsModalVisibleTenant(!isModalVisibleTenant);\r\n              await handlerCallApiPersonTypes({\r\n                idType: 2,\r\n                idCustomerType: null,\r\n              });\r\n              await handlerCallGetProperties();\r\n            }}\r\n            onOpenContract={(data) => {\r\n              handlerCallGetContract({\r\n                download: false,\r\n                process: false,\r\n                url: null,\r\n                idCustomer: data.idCustomer,\r\n                idCustomerTenant: data.idCustomerTenant,\r\n                idContract: data.idContract,\r\n                type: 1,\r\n              });\r\n              setIsVisibleContract(!isVisibleContract);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callGetAllCustomerById: (data) => dispatch(callGetAllCustomerById(data)),\r\n  callGetStatsChart: (data) => dispatch(callGetStatsChart(data)),\r\n  callGetTenantCoincidences: (data) =>\r\n    dispatch(callGetAllCustomerCoincidences(data)),\r\n  callAddProperty: (data) => dispatch(callAddProperty(data)),\r\n  callGetAllPersons: (data) => dispatch(callGetAllPersons(data)),\r\n  callGetProperties: (data) => dispatch(callGetProperties(data)),\r\n  callGetDepartments: (data) => dispatch(callGetDepartments(data)),\r\n  callAddTenant: (data) => dispatch(callAddTenant(data)),\r\n  callGetZipCodeAdress: (data) => dispatch(callGetZipCodeAdress(data)),\r\n  callGetAllTenantsCatalog: (data) => dispatch(callGetAllTenantsCatalog(data)),\r\n  callGetAllBankCatalog: (data) => dispatch(callGetAllBankCatalog(data)),\r\n  callRequestAdvancement: (data) => dispatch(callRequestAdvancement(data)),\r\n  callSetContract: (data, id) => dispatch(callSetContract(data, id)),\r\n  callAddCommentContract: (data, id) =>\r\n    dispatch(callAddCommentContract(data, id)),\r\n  callGetContract: (data) => dispatch(callGetContract(data)),\r\n  callGetContractComment: (data) => dispatch(callGetContractComment(data)),\r\n  callAddDocumentContractId: (data, id) =>\r\n    dispatch(callAddDocumentContractId(data, id)),\r\n  callGetPropertyTypes: (data) => dispatch(callGetPropertyTypes(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Owner);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailableOwner.jsx",["402","403","404"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx",["405","406","407","408"],"import React, { useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Modal, Input, Row, Col, Select, Spin } from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport FrontFunctions from \"../../../utils/actions/frontFunctions\";\r\nimport SubSectionSummary from \"./subSectionSummary\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAdvancement = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onClickAdvancement,\r\n    spinVisible,\r\n    dataTenant,\r\n    dataBank,\r\n  } = props;\r\n  const frontFunctions = new FrontFunctions();\r\n  const initialDataForm = {\r\n    text: null,\r\n    currentRentFormat: \"\",\r\n    advanceRents: null,\r\n    accountHolder: null,\r\n    accountNumber: null,\r\n    clabeNumber: null,\r\n    idContract: null,\r\n    idBank: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [property, setProperty] = useState(null);\r\n  const [viewSummary, setViewSummary] = useState(false);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  return (\r\n    <Modal\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      style={{ top: 20 }}\r\n      width={600}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Adelanto de renta</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>\r\n              Llena la siguiente información para solicitar un adelanto de renta\r\n            </p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Row>\r\n                  <Select\r\n                    placeholder=\"Inquilino\"\r\n                    value={dataForm.text}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        text: value,\r\n                        currentRentFormat: dataSelect.currentRentAmount,\r\n                        idContract: dataSelect.idContract,\r\n                      });\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataTenant) === false &&\r\n                      dataTenant.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.id}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.fullName}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Row>\r\n                <Row>\r\n                  <NumberFormat\r\n                    id={null}\r\n                    customInput={Input}\r\n                    thousandSeparator=\",\"\r\n                    decimalSeparator=\".\"\r\n                    decimalPrecision={2}\r\n                    allowNegative={false}\r\n                    prefix=\"$\"\r\n                    suffix=\"\"\r\n                    disabled\r\n                    value={dataForm.currentRentFormat}\r\n                    className=\"inputLogin\"\r\n                    floatingLabelText=\"\"\r\n                    isVisible\r\n                    toBlock={false}\r\n                    disable={false}\r\n                    placeholder=\"Monto de renta\"\r\n                    onValueChange={(values) => {\r\n                      const { formattedValue, value, floatValue } = values;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        currentRentFormat: floatValue,\r\n                      });\r\n                    }}\r\n                    onClick={(event) => {}}\r\n                    onFocus={(event) => {}}\r\n                    onBlur={(event) => {}}\r\n                  />\r\n                </Row>\r\n                <Row>\r\n                  <Select\r\n                    placeholder=\"Rentas adelantadas\"\r\n                    value={dataForm.advanceRents}\r\n                    onChange={(value, option) => {\r\n                      setDataForm({ ...dataForm, advanceRents: value });\r\n                    }}\r\n                  >\r\n                    <Option value={1}>1</Option>\r\n                    <Option value={2}>2</Option>\r\n                    <Option value={3}>3</Option>\r\n                  </Select>\r\n                </Row>\r\n              </Col>\r\n              <Col\r\n                span={13}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 13 }}\r\n                className=\"total-advancement-amount\"\r\n              >\r\n                <SubSectionSummary\r\n                  viewSummary={viewSummary}\r\n                  onClickViewSummary={() => {\r\n                    setViewSummary(!viewSummary);\r\n                  }}\r\n                  dataForm={dataForm}\r\n                  frontFunctions={frontFunctions}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Información bancaria</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Mis cuentas guardadas\"\r\n                  value={dataForm.accountSave}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, accountSave: value });\r\n                  }}\r\n                >\r\n                  <Option value={1}>cuenta 1</Option>\r\n                  <Option value={2}>cuenta 2</Option>\r\n                  <Option value={3}>cuenta 3</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <p>Nueva cuenta</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.accountHolder}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      accountHolder: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.clabeNumber}\r\n                  placeholder={\"CLABE\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      clabeNumber: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.accountNumber}\r\n                  placeholder={\"Número de cuenta\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      accountNumber: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Select\r\n                  placeholder=\"Banco\"\r\n                  showSearch\r\n                  value={dataForm.idBank}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, idBank: value });\r\n                  }}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {isEmpty(dataBank) === false &&\r\n                    dataBank.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClickAdvancement(dataForm);\r\n                setDataForm(initialDataForm);\r\n              }}\r\n            >\r\n              <span>Solicitar adelanto</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAdvancement;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx",["409","410","411","412","413","414","415"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Modal, Input, Row, Col, Select, Spin, Tooltip, Radio } from \"antd\";\r\nimport { SyncOutlined, CloseOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAddProperty = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onClickAddProperty,\r\n    spinVisible,\r\n    onChangeZipCode,\r\n    dataZipCodeAdress,\r\n    dataZipCatalog,\r\n    dataPropertyTypes,\r\n  } = props;\r\n  const initialDataForm = {\r\n    street: null,\r\n    suite: null,\r\n    streetNumber: null,\r\n    neighborhood: null,\r\n    city: null,\r\n    state: null,\r\n    zipCode: null,\r\n    idZipCode: null,\r\n    firstStreetReference: null,\r\n    secondStreetReference: null,\r\n    totalSuites: [],\r\n    departament: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [statesDynamic, setStateDynamic] = useState({});\r\n  const [totalDepartment, setTotalDepartment] = useState([]);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        state: dataZipCodeAdress.state,\r\n        city: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Registrar Propiedad</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>Datos de localización</p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.street}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, street: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.streetNumber}\r\n                  placeholder={\"Numero\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, streetNumber: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.zipCode}\r\n                  placeholder={\"Código postal\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    if (value.length >= 5) {\r\n                      setDataForm({ ...dataForm, zipCode: value });\r\n                      onChangeZipCode(e.target.value);\r\n                    } else {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: null,\r\n                        idZipCode: null,\r\n                        zipCode: value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.state}\r\n                  placeholder={\"Estado\"}\r\n                  disabled\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, state: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.city}\r\n                  disabled\r\n                  placeholder={\"Municipio/Delegacion\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, city: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                {isOpenInput === false ? (\r\n                  <Select\r\n                    placeholder=\"Colonia\"\r\n                    value={dataForm.idZipCode}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setIsOpenInput(dataSelect.isOpen);\r\n                      if (dataSelect.isOpen === true) {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: null,\r\n                          idZipCode: value,\r\n                        });\r\n                      } else {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: option.children,\r\n                          idZipCode: value,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataZipCatalog) === false &&\r\n                      dataZipCatalog.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idZipCode}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.neighborhood}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                ) : (\r\n                  <Input\r\n                    value={dataForm.neighborhood}\r\n                    placeholder={\"Indicar Colonia\"}\r\n                    suffix={\r\n                      <Tooltip title=\"Cerrar\">\r\n                        <CloseOutlined\r\n                          style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                          onClick={() => {\r\n                            setIsOpenInput(false);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idZipCode: null,\r\n                              neighborhood: null,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                    }\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <p>Entre Calles</p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.firstStreetReference}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      firstStreetReference: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.secondStreetReference}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      secondStreetReference: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Agrega departamentos</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Número de departamentos\"\r\n                  value={dataForm.totalSuites}\r\n                  onChange={(value, option) => {\r\n                    let array = [];\r\n                    let statesObject = {};\r\n                    for (let index = 0; index < value; index++) {\r\n                      array.push({\r\n                        id: `suite-${index + 1}`,\r\n                      });\r\n                      statesObject[`suite-${index + 1}`] = {\r\n                        suite: null,\r\n                        currentRent: null,\r\n                      };\r\n                    }\r\n                    setStateDynamic({ ...statesObject, ...statesDynamic });\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      totalSuites: value,\r\n                    });\r\n                    setTotalDepartment(array);\r\n                  }}\r\n                >\r\n                  <Option value={1}>1 Departamento</Option>\r\n                  <Option value={2}>2 Departamentos</Option>\r\n                  <Option value={3}>3 Departamentos</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            {isEmpty(totalDepartment) === false &&\r\n              totalDepartment.map((row, indx) => {\r\n                return (\r\n                  <>\r\n                    <p>Propiedad {indx + 1}</p>\r\n                    <Row>\r\n                      <Col span={11}>\r\n                        <Input\r\n                          value={statesDynamic[row.id].suite}\r\n                          placeholder={\"Número interior\"}\r\n                          onChange={(e) => {\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                suite: e.target.value,\r\n                              },\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} />\r\n                      <Col span={11}>\r\n                        <NumberFormat\r\n                          id={null}\r\n                          customInput={Input}\r\n                          thousandSeparator=\",\"\r\n                          decimalSeparator=\".\"\r\n                          decimalPrecision={2}\r\n                          allowNegative={false}\r\n                          prefix=\"$\"\r\n                          suffix=\"\"\r\n                          value={statesDynamic[row.id].currentRent}\r\n                          className=\"inputLogin\"\r\n                          floatingLabelText=\"\"\r\n                          isVisible\r\n                          toBlock={false}\r\n                          disable={false}\r\n                          placeholder=\"Monto de renta\"\r\n                          onValueChange={(values) => {\r\n                            const {\r\n                              formattedValue,\r\n                              value,\r\n                              floatValue,\r\n                            } = values;\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                currentRent: floatValue,\r\n                              },\r\n                            });\r\n                          }}\r\n                          onClick={(event) => {}}\r\n                          onFocus={(event) => {}}\r\n                          onBlur={(event) => {}}\r\n                        />\r\n                      </Col>\r\n                      <Col span={1} />\r\n                      <Col\r\n                        span={2}\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          margin: \"auto\",\r\n                        }}\r\n                      ></Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11}>\r\n                        <div className=\"option-select-radio\">\r\n                          <span\r\n                            style={{\r\n                              color: \"var(--color-primary)\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            ¿Eres el propietario?\r\n                          </span>\r\n                          <Radio.Group\r\n                            onChange={(e) => {\r\n                              const value = e.target.value;\r\n                              setStateDynamic({\r\n                                ...statesDynamic,\r\n                                [row.id]: {\r\n                                  ...statesDynamic[row.id],\r\n                                  isOwner: value,\r\n                                },\r\n                              });\r\n                            }}\r\n                            value={statesDynamic[row.id].isOwner}\r\n                          >\r\n                            <Radio value={1}>Si</Radio>\r\n                            <Radio value={0}>No, lo represento</Radio>\r\n                          </Radio.Group>\r\n                        </div>\r\n                      </Col>\r\n                      <Col span={2} />\r\n                      <Col span={11}>\r\n                        <div className=\"option-select-radio\">\r\n                          <span\r\n                            style={{\r\n                              color: \"var(--color-primary)\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            ¿Está amueblado?\r\n                          </span>\r\n                          <Radio.Group\r\n                            onChange={(e) => {\r\n                              setStateDynamic({\r\n                                ...statesDynamic,\r\n                                [row.id]: {\r\n                                  ...statesDynamic[row.id],\r\n                                  isFurnished: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                            value={statesDynamic[row.id].isFurnished}\r\n                          >\r\n                            <Radio value={1}>Si</Radio>\r\n                            <Radio value={0}>No</Radio>\r\n                          </Radio.Group>\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11}>\r\n                        <div className=\"option-select-radio\">\r\n                          <span\r\n                            style={{\r\n                              color: \"var(--color-primary)\",\r\n                              fontWeight: \"bold\",\r\n                            }}\r\n                          >\r\n                            ¿Está Asegurada?\r\n                          </span>\r\n                          <Radio.Group\r\n                            onChange={(e) => {\r\n                              setStateDynamic({\r\n                                ...statesDynamic,\r\n                                [row.id]: {\r\n                                  ...statesDynamic[row.id],\r\n                                  hasInsurance: e.target.value,\r\n                                },\r\n                              });\r\n                            }}\r\n                            value={statesDynamic[row.id].hasInsurance}\r\n                          >\r\n                            <Radio value={1}>Si</Radio>\r\n                            <Radio value={0}>No</Radio>\r\n                          </Radio.Group>\r\n                        </div>\r\n                      </Col>\r\n                      <Col span={2} />\r\n                      <Col span={11}>\r\n                        <Select\r\n                          placeholder=\"Tipo de inmueble\"\r\n                          value={statesDynamic[row.id].idPropertyType}\r\n                          onChange={(value, option) => {\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                idPropertyType: value,\r\n                              },\r\n                            });\r\n                          }}\r\n                        >\r\n                          {isEmpty(dataPropertyTypes) === false &&\r\n                            dataPropertyTypes.map((row) => {\r\n                              return (\r\n                                <Option\r\n                                  value={row.idPropertyType}\r\n                                  onClick={() => {\r\n                                    return row;\r\n                                  }}\r\n                                >\r\n                                  {row.text}\r\n                                </Option>\r\n                              );\r\n                            })}\r\n                        </Select>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={11}>\r\n                        <NumberFormat\r\n                          id={null}\r\n                          customInput={Input}\r\n                          thousandSeparator=\",\"\r\n                          decimalSeparator=\".\"\r\n                          decimalPrecision={2}\r\n                          allowNegative={false}\r\n                          prefix=\"$\"\r\n                          suffix=\"\"\r\n                          value={statesDynamic[row.id].maintenanceAmount}\r\n                          className=\"inputLogin\"\r\n                          floatingLabelText=\"\"\r\n                          isVisible\r\n                          toBlock={false}\r\n                          disable={false}\r\n                          placeholder=\"Monto de mantenimiento\"\r\n                          onValueChange={(values) => {\r\n                            const {\r\n                              formattedValue,\r\n                              value,\r\n                              floatValue,\r\n                            } = values;\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                maintenanceAmount: floatValue,\r\n                              },\r\n                            });\r\n                          }}\r\n                          onClick={(event) => {}}\r\n                          onFocus={(event) => {}}\r\n                          onBlur={(event) => {}}\r\n                        />\r\n                      </Col>\r\n                      <Col span={2} />\r\n                      <Col span={11}>\r\n                        <NumberFormat\r\n                          id={null}\r\n                          customInput={Input}\r\n                          thousandSeparator=\",\"\r\n                          decimalSeparator=\".\"\r\n                          decimalPrecision={2}\r\n                          allowNegative={false}\r\n                          prefix=\"\"\r\n                          suffix=\"\"\r\n                          value={statesDynamic[row.id].totalParkingSpots}\r\n                          className=\"inputLogin\"\r\n                          floatingLabelText=\"\"\r\n                          isVisible\r\n                          toBlock={false}\r\n                          disable={false}\r\n                          placeholder=\"Número de estacionamientos\"\r\n                          onValueChange={(values) => {\r\n                            const {\r\n                              formattedValue,\r\n                              value,\r\n                              floatValue,\r\n                            } = values;\r\n                            setStateDynamic({\r\n                              ...statesDynamic,\r\n                              [row.id]: {\r\n                                ...statesDynamic[row.id],\r\n                                totalParkingSpots: floatValue,\r\n                              },\r\n                            });\r\n                          }}\r\n                          onClick={(event) => {}}\r\n                          onFocus={(event) => {}}\r\n                          onBlur={(event) => {}}\r\n                        />\r\n                      </Col>\r\n                      <Col span={1} />\r\n                      <Col\r\n                        span={2}\r\n                        style={{\r\n                          textAlign: \"center\",\r\n                          margin: \"auto\",\r\n                        }}\r\n                      ></Col>\r\n                    </Row>\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                const arrayDepartment = [];\r\n                const objentSend = dataForm;\r\n                const statesDepartment = statesDynamic;\r\n                for (const key in statesDepartment) {\r\n                  arrayDepartment.push(statesDepartment[key]);\r\n                }\r\n                objentSend.departament = arrayDepartment;\r\n                onClickAddProperty(objentSend);\r\n                setDataForm(initialDataForm);\r\n                setStateDynamic({});\r\n                setTotalDepartment([]);\r\n              }}\r\n            >\r\n              <span>Registrar Propiedad</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAddProperty;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx",["416","417","418"],"import React, { useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Input, Row, Col, Select, Spin } from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport PicturesWall from \"./customUploadFile\";\r\nimport SubSectionSummary from \"./subSectionSummary\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst SectionRegisterPayment = (props) => {\r\n  const { dataPayments, spinVisible, onGetDocuments } = props;\r\n  const initialDataForm = {\r\n    idIncidence: null,\r\n    idPaymentType: null,\r\n    paymentDate: null,\r\n    amount: \"\",\r\n    advancingRents: null,\r\n    documents: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [dataSummary, setDataSummary] = useState({});\r\n  const [fileList, setFileList] = useState([]);\r\n  const [fileList1, setFileList1] = useState([]);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  const handlerSelectAmont = (data) => {\r\n    const { isForAdavancingRent, isForCurrentRent, currentRent, amount } = data;\r\n    let amoutData = \"\";\r\n    if (isForAdavancingRent === false && isForCurrentRent === false) {\r\n      amoutData = \"\";\r\n    } else if (isForAdavancingRent === false && isForCurrentRent === true) {\r\n      amoutData = amount;\r\n    } else if (isForAdavancingRent === true && isForCurrentRent === false) {\r\n      amoutData = currentRent;\r\n    }\r\n    return amoutData;\r\n  };\r\n\r\n  const handleChange = ({ fileList }) => {\r\n    setFileList(fileList);\r\n  };\r\n\r\n  const handleChange1 = ({ fileList }) => {\r\n    setFileList1(fileList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-content-tabs button-middle\">\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"content-messages-sections\">\r\n          <div className=\"section-history-messages\">\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Tipo de pago\"\r\n                  style={{ width: \"100%\" }}\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    const informationSummary =\r\n                      isNil(configureOption.interestArrearsDescription) ===\r\n                      false\r\n                        ? JSON.parse(\r\n                            configureOption.interestArrearsDescription\r\n                          )[0]\r\n                        : {};\r\n                    const amountPayable = handlerSelectAmont(configureOption);\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idPaymentType: value,\r\n                      amount: amountPayable,\r\n                    });\r\n                    setDataSummary(informationSummary);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataPayments) === false &&\r\n                    dataPayments.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idPaymentType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.paymentType}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col span={24}>\r\n                {isEmpty(dataSummary) === false ? (\r\n                  <div className=\"total-advancement-amount\">\r\n                    <p>Monto</p>\r\n                    <div>\r\n                      <h2>{dataSummary.totalAmountFormat}</h2>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <NumberFormat\r\n                    id={null}\r\n                    style={{ borderRadius: \"8px\" }}\r\n                    customInput={Input}\r\n                    thousandSeparator=\",\"\r\n                    decimalSeparator=\".\"\r\n                    decimalPrecision={2}\r\n                    allowNegative={false}\r\n                    prefix=\"$\"\r\n                    suffix=\"\"\r\n                    value={dataForm.amount}\r\n                    className=\"inputLogin\"\r\n                    floatingLabelText=\"\"\r\n                    isVisible\r\n                    toBlock={false}\r\n                    placeholder=\"Monto\"\r\n                    onValueChange={(values) => {\r\n                      const { formattedValue, value, floatValue } = values;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        amount: floatValue,\r\n                      });\r\n                    }}\r\n                    onClick={(event) => {}}\r\n                    onFocus={(event) => {}}\r\n                    onBlur={(event) => {}}\r\n                  />\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <SubSectionSummary dataSummary={dataSummary} />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"section-type-messages\" style={{ width: \"50%\" }}>\r\n            <div className=\"text-header\">Evidencia</div>\r\n            <div className=\"section-upload-files\">\r\n              <div className=\"section-upload-file\">\r\n                <PicturesWall fileList={fileList} handleChange={handleChange} />\r\n              </div>\r\n              <div className=\"section-upload-file\">\r\n                <PicturesWall\r\n                  handleChange={handleChange1}\r\n                  fileList={fileList1}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"button-action-payment\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              const documents = [...fileList, ...fileList1];\r\n              onGetDocuments(documents, dataForm);\r\n              setDataForm(initialDataForm);\r\n              setFileList([]);\r\n              setFileList1([]);\r\n              // onRegisterPayment(dataForm);\r\n            }}\r\n          >\r\n            <span>Registrar pago</span>\r\n          </button>\r\n        </div>\r\n      </Spin>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionRegisterPayment;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx",["419"],"import React, { useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport moment from \"moment\";\r\nimport { Select, Row, Col, DatePicker, Image, Button } from \"antd\";\r\nimport Search from \"../../../assets/icons/Search.svg\";\r\nimport EmptyDocument from \"../../../assets/icons/EmptyDocument.svg\";\r\nimport ENVIROMENT from \"../../../utils/constants/enviroments\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionDocuments = (props) => {\r\n  const {\r\n    dataDocumentTypes,\r\n    onSearchDocument,\r\n    dataDocumentsRepository,\r\n  } = props;\r\n  const [selectDateFilter, setSelectDateFilter] = useState(null);\r\n  const [selectDocumentType, setSelectDocumentType] = useState(null);\r\n  const [statesDates, setStatesDates] = useState({\r\n    now: `${moment().format(\"YYYY-MM-DD\")},${moment().format(\"YYYY-MM-DD\")}`,\r\n    month: `${moment().startOf(\"month\").format(\"YYYY-MM-DD\")},${moment()\r\n      .endOf(\"month\")\r\n      .format(\"YYYY-MM-DD\")}`,\r\n    startDate: moment().format(\"YYYY-MM-DD\"),\r\n    endDate: moment().format(\"YYYY-MM-DD\"),\r\n  });\r\n\r\n  const handlerToRenderPickerType = (type) => {\r\n    let component = null;\r\n    switch (type) {\r\n      case \"1\":\r\n        component = null;\r\n        break;\r\n      case \"2\":\r\n        component = (\r\n          <Col\r\n            span={4}\r\n            xs={{ span: 24 }}\r\n            md={{ span: 4 }}\r\n            style={{ marginBottom: \"10px\" }}\r\n          >\r\n            <DatePicker\r\n              placeholder=\"Seleccionar Mes\"\r\n              onChange={(momentFormat, date) => {\r\n                const initDay = moment(momentFormat)\r\n                  .startOf(\"month\")\r\n                  .format(\"YYYY-MM-DD\");\r\n                const endDate = moment(momentFormat)\r\n                  .endOf(\"month\")\r\n                  .format(\"YYYY-MM-DD\");\r\n                setStatesDates({\r\n                  ...statesDates,\r\n                  month: `${initDay},${endDate}`,\r\n                });\r\n              }}\r\n              picker=\"month\"\r\n              format=\"MMMM YYYY\"\r\n            />\r\n          </Col>\r\n        );\r\n        break;\r\n      case \"3\":\r\n        component = (\r\n          <>\r\n            <Col\r\n              span={4}\r\n              xs={{ span: 24 }}\r\n              md={{ span: 4 }}\r\n              style={{ marginBottom: \"10px\" }}\r\n            >\r\n              <DatePicker\r\n                placeholder=\"Fecha inicial\"\r\n                onChange={(momentFormat, date) => {\r\n                  setStatesDates({\r\n                    ...statesDates,\r\n                    startDate: moment(momentFormat).format(\"YYYY-MM-DD\"),\r\n                  });\r\n                }}\r\n                format=\"DD MMMM YYYY\"\r\n              />\r\n            </Col>\r\n            <Col span={1} />\r\n            <Col\r\n              span={4}\r\n              xs={{ span: 24 }}\r\n              md={{ span: 4 }}\r\n              style={{ marginBottom: \"10px\" }}\r\n            >\r\n              <DatePicker\r\n                placeholder=\"Fecha final\"\r\n                onChange={(momentFormat, date) => {\r\n                  setStatesDates({\r\n                    ...statesDates,\r\n                    endDate: moment(momentFormat).format(\"YYYY-MM-DD\"),\r\n                  });\r\n                }}\r\n                format=\"DD MMMM YYYY\"\r\n              />\r\n            </Col>\r\n          </>\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return component;\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-content-tabs\">\r\n      <div className=\"content-documents\">\r\n        <div className=\"content-history\">\r\n          <div className=\"select-file\">\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col\r\n                span={7}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 7 }}\r\n                style={{ marginBottom: \"10px\" }}\r\n              >\r\n                <Select\r\n                  placeholder=\"Tipo de documento\"\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    setSelectDocumentType(value);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataDocumentTypes) === false &&\r\n                    dataDocumentTypes.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idDocumentType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.documentType}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} />\r\n              <Col\r\n                span={4}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 4 }}\r\n                style={{ marginBottom: \"10px\" }}\r\n              >\r\n                <Select\r\n                  placeholder=\"Filtrar por\"\r\n                  onChange={(value, option) => {\r\n                    setSelectDateFilter(value);\r\n                    if (value === \"1\") {\r\n                      const toDay = moment().format(\"YYYY-MM-DD\");\r\n                      setStatesDates({\r\n                        ...statesDates,\r\n                        now: `${toDay},${toDay}`,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  <Option value=\"1\" onClick={() => {}}>\r\n                    Hoy\r\n                  </Option>\r\n                  <Option value=\"2\" onClick={() => {}}>\r\n                    Mes\r\n                  </Option>\r\n                  <Option value=\"3\" onClick={() => {}}>\r\n                    Rango de fecha\r\n                  </Option>\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} />\r\n              {handlerToRenderPickerType(selectDateFilter)}\r\n              <Col span={1} />\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }}>\r\n                <button\r\n                  type=\"button\"\r\n                  style={{ backgroundColor: \"transparent\", border: \"none\" }}\r\n                  onClick={() => {\r\n                    let sendDateFormat = \"\";\r\n                    if (selectDateFilter === \"1\") {\r\n                      sendDateFormat = statesDates.now;\r\n                    } else if (selectDateFilter === \"2\") {\r\n                      sendDateFormat = statesDates.month;\r\n                    } else if (selectDateFilter === \"3\") {\r\n                      sendDateFormat = `${statesDates.startDate},${statesDates.endDate}`;\r\n                    } else {\r\n                      sendDateFormat = `${moment().format(\r\n                        \"YYYY-MM-DD\"\r\n                      )},${moment().format(\"YYYY-MM-DD\")}`;\r\n                    }\r\n                    onSearchDocument({\r\n                      filterDate: sendDateFormat,\r\n                      idDocumentType: selectDocumentType,\r\n                    });\r\n                  }}\r\n                >\r\n                  <img src={Search} alt=\"search\" />\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"content-files\">\r\n            {isEmpty(dataDocumentsRepository) === false &&\r\n              dataDocumentsRepository.map((row) => {\r\n                return (\r\n                  <div className=\"card-file-information\">\r\n                    <div className=\"box-preview\">\r\n                      <Image\r\n                        width={100}\r\n                        height={120}\r\n                        src={`${ENVIROMENT}/api/viewFile/${row.idDocument}/${row.bucketSoruce}`}\r\n                      />\r\n                    </div>\r\n                    <div className=\"box-information\">\r\n                      <strong>{row.documentType}</strong>\r\n                      <div className=\"data-image\">\r\n                        <div>\r\n                          <span>Subido por:</span>\r\n                          <span>Fecha de pago:</span>\r\n                        </div>\r\n                        <div>\r\n                          <strong>{row.uploadedByUser}</strong>\r\n                          <strong>{row.uploadedAt}</strong>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}{\" \"}\r\n            {isEmpty(dataDocumentsRepository) === true && (\r\n              <div className=\"empty-data-document\">\r\n                <img\r\n                  src={EmptyDocument}\r\n                  alt=\"make-page\"\r\n                  width={50}\r\n                  height={40}\r\n                />\r\n                <label>\r\n                  No hay documentos en este periodo de tiempo, prueba buscando\r\n                  en otro periodo o tipo de documento\r\n                </label>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"content-upload\">\r\n          <div className=\"button_init_primary\">\r\n            <label type=\"button\" for=\"file-input\" onClick={() => {}}>\r\n              <span>Subir documentos</span>\r\n            </label>\r\n            <input\r\n              id=\"file-input\"\r\n              type=\"file\"\r\n              accept=\"image/png, image/jpeg, image/jpg , image/gif\"\r\n              onChange={(e) => {}}\r\n            />\r\n          </div>\r\n          <div className=\"section-container-action-up\">\r\n            <div className=\"container-carousel\">\r\n              <Carousel afterChange={() => {}} ref={dotChange} dots={false}>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n              </Carousel>\r\n            </div>\r\n            <Pagination\r\n              pageSize={1}\r\n              size=\"small\"\r\n              total={3}\r\n              onChange={(event) => {\r\n                dotChange.current.goTo(event - 1);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n       */}\r\n      </div>\r\n      {isEmpty(dataDocumentsRepository) === false && (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          <Button\r\n            type=\"link\"\r\n            onClick={() => {\r\n              let sendDateFormat = \"\";\r\n              if (selectDateFilter === \"1\") {\r\n                sendDateFormat = statesDates.now;\r\n              } else if (selectDateFilter === \"2\") {\r\n                sendDateFormat = statesDates.month;\r\n              } else if (selectDateFilter === \"3\") {\r\n                sendDateFormat = `${statesDates.startDate},${statesDates.endDate}`;\r\n              } else {\r\n                sendDateFormat = `${moment().format(\r\n                  \"YYYY-MM-DD\"\r\n                )},${moment().format(\"YYYY-MM-DD\")}`;\r\n              }\r\n              onSearchDocument({\r\n                filterDate: sendDateFormat,\r\n                idDocumentType: selectDocumentType,\r\n              });\r\n            }}\r\n          >\r\n            Mostrar mas\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionDocuments;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUploadDocuments.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUserDetailAdviser.jsx",["420","421","422"],"import React from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Row, Col, Drawer, Menu, Dropdown } from \"antd\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst SectionDetailUserAdviser = (props) => {\r\n  const { isDrawerVisible, onClose, dataDetailAgent } = props;\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div className=\"site-description-item-profile-wrapper\">\r\n      <strong className=\"site-description-item-profile-p-label\">\r\n        {title}:\r\n      </strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  const menu = (row) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item key=\"0\">\r\n          <a\r\n            href={\r\n              isNil(row.phoneNumber) === false\r\n                ? `https://api.whatsapp.com/send?phone=52${row.phoneNumber}`\r\n                : \"#\"\r\n            }\r\n            target=\"_blank\"\r\n          >\r\n            Whatsapp\r\n          </a>\r\n        </Menu.Item>\r\n        {/* <Menu.Item key=\"1\">\r\n          <a>Notificación</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <a>Mensaje app</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\">\r\n          <a>Correo</a>\r\n        </Menu.Item> */}\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      width={500}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={isDrawerVisible}\r\n    >\r\n      <div className=\"content-infomation-drawer\">\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Detalle de Asesor</h1>\r\n          </div>\r\n        </div>\r\n        <h3>Información general</h3>\r\n        <Row>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Nombre completo\"\r\n              content={dataDetailAgent.fullName}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Enviar mensaje\"\r\n              content={\r\n                <Dropdown overlay={menu(dataDetailAgent)} trigger={[\"click\"]}>\r\n                  <a>Enviar</a>\r\n                </Dropdown>\r\n              }\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={24}>\r\n            <DescriptionItem\r\n              title=\"Correo\"\r\n              content={dataDetailAgent.emailAddress}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Teléfono\"\r\n              content={dataDetailAgent.phoneNumber}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Pólizas Totales\"\r\n              content={dataDetailAgent.totalCommissions}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Renovaciones\"\r\n              content={\r\n                isNil(dataDetailAgent.totalRenewals) === false &&\r\n                isNil(dataDetailAgent.totalRenewals[0]) === false\r\n                  ? dataDetailAgent.totalRenewals[0]\r\n                  : \"-\"\r\n              }\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Comisiones totales\"\r\n              content={dataDetailAgent.totalCommissionsAmount}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <h3>Información de póliza actual</h3>\r\n        <Row>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Comisión por\"\r\n              content={dataDetailAgent.commissionType}\r\n            />\r\n          </Col>\r\n          <Col span={12}>\r\n            <DescriptionItem\r\n              title=\"Comisión póliza Actual\"\r\n              content={dataDetailAgent.totalCommissionAmount}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row></Row>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SectionDetailUserAdviser;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenant.jsx",["423","424","425","426","427","428","429","430","431","432","433","434","435","436","437","438","439","440","441","442","443","444","445","446","447","448","449","450","451","452","453","454"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUser.jsx",["455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionAddUsers.jsx",["472","473","474","475","476","477","478","479"],"import React, { useEffect, useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n} from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAddUsers = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    spinVisible,\r\n    dataTenantSearch,\r\n    dataSecondTenant,\r\n    dataAdviserSearch,\r\n    dataOwnerSearch,\r\n    onSearchTenant,\r\n    onSearchSecondTenant,\r\n    onSearchAdviser,\r\n    onSearchOwner,\r\n    onSendInformation,\r\n  } = props;\r\n  const initialDataForm = {\r\n    emailOwner: null,\r\n    emailAdviser: null,\r\n    emailTenant: null,\r\n    emailTenant2: null,\r\n    nameOwner: null,\r\n    lastNameOwner: null,\r\n    mothersLastNameOwner: null,\r\n    nameTenant: null,\r\n    lastNameTenant: null,\r\n    mothersLastNameTenant: null,\r\n    personType: null,\r\n    nameTenant2: null,\r\n    lastNameTenant2: null,\r\n    mothersLastNameTenant2: null,\r\n    personType2: null,\r\n    nameAdviser: null,\r\n    lastNameAdviser: null,\r\n    mothersLastNameAdviser: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataOwnerSearch) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameOwner: dataOwnerSearch.givenName,\r\n        lastNameOwner: dataOwnerSearch.lastName,\r\n        mothersLastNameOwner: dataOwnerSearch.mothersMaidenName,\r\n      });\r\n    } else {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameOwner: null,\r\n        lastNameOwner: null,\r\n        mothersLastNameOwner: null,\r\n      });\r\n    }\r\n  }, [dataOwnerSearch]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataTenantSearch) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameTenant: dataTenantSearch.givenName,\r\n        lastNameTenant: dataTenantSearch.lastName,\r\n        mothersLastNameTenant: dataTenantSearch.mothersMaidenName,\r\n        personType: dataTenantSearch.idPersonType,\r\n      });\r\n    } else {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameTenant: null,\r\n        lastNameTenant: null,\r\n        mothersLastNameTenant: null,\r\n        personType: null,\r\n      });\r\n    }\r\n  }, [dataTenantSearch]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataSecondTenant) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameTenant2: dataSecondTenant.givenName,\r\n        lastNameTenant2: dataSecondTenant.lastName,\r\n        mothersLastNameTenant2: dataSecondTenant.mothersMaidenName,\r\n        personType2: dataSecondTenant.idPersonType,\r\n      });\r\n    } else {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameTenant2: null,\r\n        lastNameTenant2: null,\r\n        mothersLastNameTenant2: null,\r\n        personType2: null,\r\n      });\r\n    }\r\n  }, [dataSecondTenant]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataAdviserSearch) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameAdviser: dataAdviserSearch.givenName,\r\n        lastNameAdviser: dataAdviserSearch.lastName,\r\n        mothersLastNameAdviser: dataAdviserSearch.mothersMaidenName,\r\n      });\r\n    } else {\r\n      setDataForm({\r\n        ...dataForm,\r\n        nameAdviser: null,\r\n        lastNameAdviser: null,\r\n        mothersLastNameAdviser: null,\r\n      });\r\n    }\r\n  }, [dataAdviserSearch]);\r\n\r\n  return (\r\n    <Modal\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      style={{ top: 20 }}\r\n      width={600}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Agregar Prospectos</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>Ingresa la información del Propietario</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailOwner}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                  onBlur={() => {\r\n                    onSearchOwner(dataForm.emailOwner);\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.nameOwner}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.lastNameOwner}\r\n                  placeholder={\"Apellido paterno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      lastNameOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.mothersLastNameOwner}\r\n                  placeholder={\"Apellido materno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      mothersLastNameOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Ingresa la información del Inquilino</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailTenant}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailTenant: e.target.value,\r\n                    });\r\n                  }}\r\n                  onBlur={() => {\r\n                    onSearchTenant(dataForm.emailTenant);\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Select\r\n                  placeholder=\"Tipo de persona\"\r\n                  value={dataForm.personType}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, personType: value });\r\n                  }}\r\n                >\r\n                  <Option value={1}>Fisica</Option>\r\n                  <Option value={2}>Moral</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.nameTenant}\r\n                  placeholder={\r\n                    dataForm.personType !== 2 ? \"Nombre\" : \"Razon social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameTenant: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {dataForm.personType !== 2 && (\r\n              <Row>\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.lastNameTenant}\r\n                    placeholder={\"Apellido paterno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        lastNameTenant: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} />\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.mothersLastNameTenant}\r\n                    placeholder={\"Apellido materno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        mothersLastNameTenant: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <p>Ingresa la información del segundo inquilino (Opcional)</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailTenant2}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailTenant2: e.target.value,\r\n                    });\r\n                  }}\r\n                  onBlur={() => {\r\n                    onSearchSecondTenant(\r\n                      dataForm.emailTenant2,\r\n                      dataTenantSearch.idCustomerTenant\r\n                    );\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Select\r\n                  placeholder=\"Tipo de persona\"\r\n                  value={dataForm.personType2}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, personType2: value });\r\n                  }}\r\n                >\r\n                  <Option value={1}>Fisica</Option>\r\n                  <Option value={2}>Moral</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.nameTenant2}\r\n                  placeholder={\r\n                    dataForm.personType !== 2 ? \"Nombre\" : \"Razon social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameTenant2: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {dataForm.personType2 !== 2 && (\r\n              <Row>\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.lastNameTenant2}\r\n                    placeholder={\"Apellido paterno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        lastNameTenant2: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} />\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.mothersLastNameTenant2}\r\n                    placeholder={\"Apellido materno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        mothersLastNameTenant2: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <p>Ingresa la información del Asesor</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailAdviser}\r\n                  placeholder={\"Correo/No Asesor\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                  onBlur={() => {\r\n                    onSearchAdviser(dataForm.emailAdviser);\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.nameAdviser}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.lastNameAdviser}\r\n                  placeholder={\"Apellido paterno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      lastNameAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.mothersLastNameAdviser}\r\n                  placeholder={\"Apellido materno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      mothersLastNameAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={async () => {\r\n                const arrayTenants = [];\r\n\r\n                if (\r\n                  isNil(dataForm.emailTenant) === false &&\r\n                  isNil(dataForm.nameTenant) === false\r\n                ) {\r\n                  const object = {\r\n                    ...dataTenantSearch,\r\n                    id: 1,\r\n                    idPersonType: dataForm.personType,\r\n                    givenName: dataForm.nameTenant,\r\n                    lastName: dataForm.lastNameTenant,\r\n                    mothersMaidenName: dataForm.mothersLastNameTenant,\r\n                    emailAddress: dataForm.emailTenant,\r\n                    phoneNumber: null,\r\n                  };\r\n\r\n                  arrayTenants.push(object);\r\n                }\r\n\r\n                if (\r\n                  isNil(dataForm.emailTenant2) === false &&\r\n                  isNil(dataForm.nameTenant2) === false\r\n                ) {\r\n                  const object1 = {\r\n                    ...dataSecondTenant,\r\n                    id: 2,\r\n                    idPersonType: dataForm.personType2,\r\n                    givenName: dataForm.nameTenant2,\r\n                    lastName: dataForm.lastNameTenant2,\r\n                    mothersMaidenName: dataForm.mothersLastNameTenant2,\r\n                    emailAddress: dataForm.emailTenant2,\r\n                    phoneNumber: null,\r\n                  };\r\n                  arrayTenants.push(object1);\r\n                }\r\n                const dataResult = {\r\n                  idCustomer: dataOwnerSearch.idCustomer,\r\n                  idPersonType: 1,\r\n                  givenName: dataForm.nameOwner,\r\n                  lastName: dataForm.lastNameOwner,\r\n                  mothersMaidenName: dataForm.mothersLastNameOwner,\r\n                  emailAddress: dataForm.emailOwner,\r\n                  customerTenant: arrayTenants,\r\n                  idCustomerAgent: dataAdviserSearch.idCustomerAgent,\r\n                  CAGivenName: dataForm.nameAdviser,\r\n                  CALastName: dataForm.lastNameAdviser,\r\n                  CAMothersMaidenName: dataForm.mothersLastNameAdviser,\r\n                  CAEmailAddress: dataForm.emailAdviser,\r\n                };\r\n                try {\r\n                  await onSendInformation(dataResult);\r\n                  onClose();\r\n                  setDataForm(initialDataForm);\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <span>Enviar Prospectos</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAddUsers;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwner.jsx",["480","481","482","483","484","485"],"import React, { useState } from \"react\";\r\nimport {\r\n  Skeleton,\r\n  Table,\r\n  Tag,\r\n  Button,\r\n  Popover,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Progress,\r\n} from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport {\r\n  CheckSquareOutlined,\r\n  CheckOutlined,\r\n  CheckCircleTwoTone,\r\n  EditTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport EmptyTenant from \"../../../assets/icons/tenantEmpty.svg\";\r\nimport DocumentIcon from \"../../../assets/icons/DocumentsIcon.svg\";\r\nimport Lock from \"../../../assets/icons/Lock.svg\";\r\n\r\nmoment.locale(\"es\");\r\nconst { Option } = Select;\r\n\r\nconst SectionCardOwner = (props) => {\r\n  const {\r\n    dataCoincidences,\r\n    finishCallApis,\r\n    onAddUser,\r\n    onOpenDetail,\r\n    onGetPolicyStatus,\r\n    dataAllPolicyStatus,\r\n    onClosePolicy,\r\n    onOpenUploadDocument,\r\n  } = props;\r\n\r\n  const [openPopover, setOpenPopover] = useState({});\r\n  const [selectPolicy, setSelectPolicy] = useState(null);\r\n\r\n  const renderCardComponent = (status, record) => {\r\n    let component = <div />;\r\n    const contractStatus = record.contractStatus;\r\n    if (status === 1) {\r\n      component = (\r\n        <Popover\r\n          visible={\r\n            isNil(openPopover[`popover1-${record.idContract}`]) === false\r\n              ? openPopover[`popover1-${record.idContract}`]\r\n              : false\r\n          }\r\n          content={\r\n            <>\r\n              <Row style={{ marginBottom: 10 }}>\r\n                <Col span={24}>\r\n                  <Select\r\n                    placeholder=\"Póliza por\"\r\n                    onChange={(value, option) => {\r\n                      setSelectPolicy(value);\r\n                    }}\r\n                    style={{ width: \"100%\" }}\r\n                  >\r\n                    {isEmpty(dataAllPolicyStatus) === false &&\r\n                      dataAllPolicyStatus.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idPolicyStatus}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.text}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={6} />\r\n                <Col span={12}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={<CheckOutlined />}\r\n                    size=\"small\"\r\n                    className=\"color-green\"\r\n                    onClick={() => {\r\n                      onClosePolicy({\r\n                        ...record,\r\n                        idPolicyStatus: selectPolicy,\r\n                      });\r\n                      setOpenPopover({\r\n                        [`popover1-${record.idContract}`]: false,\r\n                      });\r\n                    }}\r\n                  >\r\n                    Aceptar\r\n                  </Button>\r\n                </Col>\r\n                <Col span={6} />\r\n              </Row>\r\n            </>\r\n          }\r\n          title={\r\n            <div>\r\n              <span>Asignar cierre de Póliza</span>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setOpenPopover({\r\n                    [`popover1-${record.idContract}`]: false,\r\n                  });\r\n                }}\r\n                style={{\r\n                  marginLeft: 5,\r\n                  background: \"transparent\",\r\n                  border: \"none\",\r\n                }}\r\n              >\r\n                <i className=\"fa fa-times\" />\r\n              </button>\r\n            </div>\r\n          }\r\n          trigger=\"click\"\r\n        >\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            icon={<CheckSquareOutlined />}\r\n            size=\"small\"\r\n            onClick={() => {\r\n              setOpenPopover({\r\n                [`popover1-${record.idContract}`]: true,\r\n              });\r\n              onGetPolicyStatus(record.idContract);\r\n            }}\r\n          >\r\n            {record.policyStatus}\r\n          </Button>\r\n        </Popover>\r\n      );\r\n    } else if (status === 2 || status === 3) {\r\n      component = (\r\n        <Tag\r\n          icon={\r\n            <span className=\"anticon\">\r\n              <i className=\"fa fa-handshake-o\" aria-hidden=\"true\" />\r\n            </span>\r\n          }\r\n          color=\"#00bb2d\"\r\n        >\r\n          {record.policyStatus}\r\n        </Tag>\r\n      );\r\n    } else if (status === 4) {\r\n      component = (\r\n        <Tag\r\n          icon={\r\n            <span className=\"anticon\">\r\n              <i className=\"fa fa-ban\" aria-hidden=\"true\" />\r\n            </span>\r\n          }\r\n          color=\"#ff0000\"\r\n        >\r\n          {record.policyStatus}\r\n        </Tag>\r\n      );\r\n    }\r\n    return component;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Propietario\",\r\n      children: [\r\n        {\r\n          title: \"Nombre\",\r\n          dataIndex: \"customerFullName\",\r\n          key: \"customerFullName\",\r\n          width: 230,\r\n          render: (text, record) => (\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <a\r\n                onClick={() => {\r\n                  onOpenDetail(record.idContract, 1, record);\r\n                }}\r\n                style={{ marginRight: \"5PX\" }}\r\n              >\r\n                {text}\r\n              </a>\r\n              {record.hasCustomerFinishedTF === true ? (\r\n                <CheckCircleTwoTone twoToneColor=\"#32cd32\" />\r\n              ) : (\r\n                <EditTwoTone twoToneColor=\"#4169e1\" />\r\n              )}\r\n            </div>\r\n          ),\r\n        },\r\n        {\r\n          title: \"Inicio TypeForm\",\r\n          dataIndex: \"customerStartedAt\",\r\n          key: \"customerStartedAt\",\r\n        },\r\n        {\r\n          title: \"Avance formulario\",\r\n          dataIndex: \"customerPercentCompleted\",\r\n          key: \"customerPercentCompleted\",\r\n          width: 200,\r\n          render: (percent, record) => (\r\n            <div style={{ padding: \"0px 15px 0px 0px\" }}>\r\n              <Progress percent={percent} size=\"small\" status=\"succes\" />\r\n            </div>\r\n          ),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Inquilino\",\r\n      children: [\r\n        {\r\n          title: \"Nombre\",\r\n          width: 230,\r\n          dataIndex: \"customerTenantFullName\",\r\n          key: \"customerTenantFullName\",\r\n          render: (text, record) => (\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <a\r\n                onClick={() => {\r\n                  onOpenDetail(record.idContract, 2, record);\r\n                }}\r\n                style={{ color: \"gray\", marginRight: \"5PX\" }}\r\n              >\r\n                {text}\r\n              </a>\r\n              {record.hasCustomerTenantFinishedTF === true ? (\r\n                <CheckCircleTwoTone twoToneColor=\"#32cd32\" />\r\n              ) : (\r\n                <EditTwoTone twoToneColor=\"#4169e1\" />\r\n              )}\r\n            </div>\r\n          ),\r\n        },\r\n        {\r\n          title: \"Inicio TypeForm\",\r\n          dataIndex: \"tenantStartedAt\",\r\n          key: \"tenantStartedAt\",\r\n        },\r\n        {\r\n          title: \"Avance formulario\",\r\n          dataIndex: \"tenantPercentCompleted\",\r\n          key: \"tenantPercentCompleted\",\r\n          width: 200,\r\n          render: (percent, record) => (\r\n            <div style={{ padding: \"0px 15px 0px 0px\" }}>\r\n              <Progress percent={percent} size=\"small\" status=\"succes\" />\r\n            </div>\r\n          ),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Asesor\",\r\n      width: 200,\r\n      dataIndex: \"customerAgentFullName\",\r\n      key: \"customerAgentFullName\",\r\n      render: (text, record) => (\r\n        <a\r\n          onClick={() => {\r\n            if (isNil(text) === false) {\r\n              onOpenDetail(record.idContract, 3, record);\r\n            }\r\n          }}\r\n          style={{ color: \"brown\" }}\r\n        >\r\n          {isNil(text) === false ? text : \"N/A\"}\r\n        </a>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Contrato\",\r\n      dataIndex: \"contractStatus\",\r\n      key: \"contractStatus\",\r\n      align: \"center\",\r\n      render: (status, record) => {\r\n        return (\r\n          <span>\r\n            <Tag color={record.contractStatusStyle} key=\"1\">\r\n              {status}\r\n            </Tag>\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Folio\",\r\n      dataIndex: \"hfInvoice\",\r\n      key: \"hfInvoice\",\r\n      render: (label, record) => {\r\n        const recorsStyle =\r\n          isNil(record.hfInvoiceStyle) === false &&\r\n          isEmpty(record.hfInvoiceStyle) === false\r\n            ? JSON.parse(record.hfInvoiceStyle)\r\n            : {};\r\n        return <span style={recorsStyle}>{label}</span>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Monto Renta\",\r\n      dataIndex: \"currentRent\",\r\n      key: \"currentRent\",\r\n      width: 150,\r\n    },\r\n    {\r\n      title: \"Monto total de contrato\",\r\n      dataIndex: \"totalContractAmount\",\r\n      key: \"totalContractAmount\",\r\n      width: 150,\r\n    },\r\n    {\r\n      title: \"Póliza\",\r\n      dataIndex: \"policy\",\r\n      key: \"policy\",\r\n    },\r\n    {\r\n      title: \"Valor de la póliza\",\r\n      dataIndex: \"totalPolicyAmount\",\r\n      key: \"totalPolicyAmount\",\r\n      width: 150,\r\n    },\r\n    {\r\n      title: \"Comisión asesor\",\r\n      dataIndex: \"commissionDescription\",\r\n      key: \"commissionDescription\",\r\n      width: 250,\r\n    },\r\n    {\r\n      title: \"Vencimiento de contrato\",\r\n      dataIndex: \"expireAt\",\r\n      key: \"expireAt\",\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Estatus de póliza\",\r\n      dataIndex: \"idPolicyStatus\",\r\n      key: \"idPolicyStatus\",\r\n      fixed: \"right\",\r\n      align: \"center\",\r\n      render: (status, record) => {\r\n        let component = <div />;\r\n        const contractStatus = record.contractStatus;\r\n        if (status === 1) {\r\n          component = (\r\n            <div>\r\n              <Popover\r\n                visible={\r\n                  isNil(openPopover[`popover-${record.idContract}`]) === false\r\n                    ? openPopover[`popover-${record.idContract}`]\r\n                    : false\r\n                }\r\n                content={\r\n                  <>\r\n                    <Row style={{ marginBottom: 10 }}>\r\n                      <Col span={24}>\r\n                        <Select\r\n                          placeholder=\"Póliza por\"\r\n                          onChange={(value, option) => {\r\n                            setSelectPolicy(value);\r\n                          }}\r\n                          style={{ width: \"100%\" }}\r\n                        >\r\n                          {isEmpty(dataAllPolicyStatus) === false &&\r\n                            dataAllPolicyStatus.map((row) => {\r\n                              return (\r\n                                <Option\r\n                                  value={row.idPolicyStatus}\r\n                                  onClick={() => {\r\n                                    return row;\r\n                                  }}\r\n                                >\r\n                                  {row.text}\r\n                                </Option>\r\n                              );\r\n                            })}\r\n                        </Select>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={6} />\r\n                      <Col span={12}>\r\n                        <Button\r\n                          type=\"primary\"\r\n                          shape=\"round\"\r\n                          icon={<CheckOutlined />}\r\n                          size=\"small\"\r\n                          className=\"color-green\"\r\n                          onClick={() => {\r\n                            onClosePolicy({\r\n                              ...record,\r\n                              idPolicyStatus: selectPolicy,\r\n                            });\r\n                            setOpenPopover({\r\n                              [`popover-${record.idContract}`]: false,\r\n                            });\r\n                          }}\r\n                        >\r\n                          Aceptar\r\n                        </Button>\r\n                      </Col>\r\n                      <Col span={6} />\r\n                    </Row>\r\n                  </>\r\n                }\r\n                title={\r\n                  <div>\r\n                    <span>Asignar cierre de Póliza</span>\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        setOpenPopover({\r\n                          [`popover-${record.idContract}`]: false,\r\n                        });\r\n                      }}\r\n                      style={{\r\n                        marginLeft: 5,\r\n                        background: \"transparent\",\r\n                        border: \"none\",\r\n                      }}\r\n                    >\r\n                      <i className=\"fa fa-times\" />\r\n                    </button>\r\n                  </div>\r\n                }\r\n                trigger=\"click\"\r\n              >\r\n                <Button\r\n                  type=\"primary\"\r\n                  shape=\"round\"\r\n                  icon={<CheckSquareOutlined />}\r\n                  size=\"small\"\r\n                  onClick={() => {\r\n                    setOpenPopover({\r\n                      [`popover-${record.idContract}`]: true,\r\n                    });\r\n                    onGetPolicyStatus(record.idContract);\r\n                  }}\r\n                >\r\n                  {record.policyStatus}\r\n                </Button>\r\n              </Popover>\r\n            </div>\r\n          );\r\n        } else if (status === 2 || status === 3) {\r\n          component = (\r\n            <Tag\r\n              icon={\r\n                <span className=\"anticon\">\r\n                  <i className=\"fa fa-handshake-o\" aria-hidden=\"true\" />\r\n                </span>\r\n              }\r\n              color=\"#00bb2d\"\r\n            >\r\n              {record.policyStatus}\r\n            </Tag>\r\n          );\r\n        } else if (status === 4) {\r\n          component = (\r\n            <Tag\r\n              icon={\r\n                <span className=\"anticon\">\r\n                  <i className=\"fa fa-ban\" aria-hidden=\"true\" />\r\n                </span>\r\n              }\r\n              color=\"#ff0000\"\r\n            >\r\n              {record.policyStatus}\r\n            </Tag>\r\n          );\r\n        }\r\n        return component;\r\n      },\r\n    },\r\n    {\r\n      title: \"Documentos\",\r\n      dataIndex: \"hasAllDocumentation\",\r\n      key: \"hasAllDocumentation\",\r\n      align: \"center\",\r\n      fixed: \"right\",\r\n      render: (documents, record) => {\r\n        return (\r\n          <div>\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              style={{ border: \"none\", background: \"transparent\" }}\r\n              onClick={() => {\r\n                if (documents === false) {\r\n                  onOpenUploadDocument(record.idContract);\r\n                }\r\n              }}\r\n            >\r\n              {documents === false ? (\r\n                <img src={DocumentIcon} alt=\"backTo\" width=\"20\" />\r\n              ) : (\r\n                <img src={Lock} alt=\"backTo\" width=\"20\" />\r\n              )}\r\n            </button>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"renter-card-information total-width\">\r\n      <div className=\"title-cards flex-title-card\">\r\n        <span>Usuarios</span>\r\n        <div className=\"button_init_primary\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onAddUser();\r\n            }}\r\n          >\r\n            <span>Agregar</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"section-information-renters\">\r\n        {isEmpty(dataCoincidences) === false && finishCallApis === true && (\r\n          <Table\r\n            columns={columns}\r\n            dataSource={dataCoincidences}\r\n            className=\"table-users-hfy\"\r\n            size=\"small\"\r\n            bordered\r\n            scroll={{ x: 3000 }}\r\n          />\r\n        )}\r\n        {finishCallApis === false && <Skeleton loading active />}\r\n      </div>\r\n      {isEmpty(dataCoincidences) === true && finishCallApis === true && (\r\n        <div className=\"empty-tenants\">\r\n          <img src={EmptyTenant} alt=\"\" />\r\n          <span>Aun no tienes propietarios</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionCardOwner;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChartPie.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChart.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js",["486","487","488","489","490","491","492","493"],"import isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nclass FrontFunctions {\r\n  constructor() {\r\n    this.currency = {\r\n      plural: \"PESOS\",\r\n      singular: \"PESO\",\r\n      centPlural: \"CENTAVOS\",\r\n      centSingular: \"CENTAVO\",\r\n    };\r\n  }\r\n\r\n  Unidades(num) {\r\n    switch (num) {\r\n      case 1:\r\n        return \"UN\";\r\n      case 2:\r\n        return \"DOS\";\r\n      case 3:\r\n        return \"TRES\";\r\n      case 4:\r\n        return \"CUATRO\";\r\n      case 5:\r\n        return \"CINCO\";\r\n      case 6:\r\n        return \"SEIS\";\r\n      case 7:\r\n        return \"SIETE\";\r\n      case 8:\r\n        return \"OCHO\";\r\n      case 9:\r\n        return \"NUEVE\";\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  Decenas(num) {\r\n    let decena = Math.floor(num / 10);\r\n    let unidad = num - decena * 10;\r\n\r\n    switch (decena) {\r\n      case 1:\r\n        switch (unidad) {\r\n          case 0:\r\n            return \"DIEZ\";\r\n          case 1:\r\n            return \"ONCE\";\r\n          case 2:\r\n            return \"DOCE\";\r\n          case 3:\r\n            return \"TRECE\";\r\n          case 4:\r\n            return \"CATORCE\";\r\n          case 5:\r\n            return \"QUINCE\";\r\n          default:\r\n            return \"DIECI\" + this.Unidades(unidad);\r\n        }\r\n      case 2:\r\n        switch (unidad) {\r\n          case 0:\r\n            return \"VEINTE\";\r\n          default:\r\n            return \"VEINTI\" + this.Unidades(unidad);\r\n        }\r\n      case 3:\r\n        return this.DecenasY(\"TREINTA\", unidad);\r\n      case 4:\r\n        return this.DecenasY(\"CUARENTA\", unidad);\r\n      case 5:\r\n        return this.DecenasY(\"CINCUENTA\", unidad);\r\n      case 6:\r\n        return this.DecenasY(\"SESENTA\", unidad);\r\n      case 7:\r\n        return this.DecenasY(\"SETENTA\", unidad);\r\n      case 8:\r\n        return this.DecenasY(\"OCHENTA\", unidad);\r\n      case 9:\r\n        return this.DecenasY(\"NOVENTA\", unidad);\r\n      case 0:\r\n        return this.Unidades(unidad);\r\n    }\r\n  }\r\n\r\n  DecenasY(strSin, numUnidades) {\r\n    if (numUnidades > 0) return strSin + \" Y \" + this.Unidades(numUnidades);\r\n\r\n    return strSin;\r\n  }\r\n\r\n  Centenas(num) {\r\n    let centenas = Math.floor(num / 100);\r\n    let decenas = num - centenas * 100;\r\n\r\n    switch (centenas) {\r\n      case 1:\r\n        if (decenas > 0) return \"CIENTO \" + this.Decenas(decenas);\r\n        return \"CIEN\";\r\n      case 2:\r\n        return \"DOSCIENTOS \" + this.Decenas(decenas);\r\n      case 3:\r\n        return \"TRESCIENTOS \" + this.Decenas(decenas);\r\n      case 4:\r\n        return \"CUATROCIENTOS \" + this.Decenas(decenas);\r\n      case 5:\r\n        return \"QUINIENTOS \" + this.Decenas(decenas);\r\n      case 6:\r\n        return \"SEISCIENTOS \" + this.Decenas(decenas);\r\n      case 7:\r\n        return \"SETECIENTOS \" + this.Decenas(decenas);\r\n      case 8:\r\n        return \"OCHOCIENTOS \" + this.Decenas(decenas);\r\n      case 9:\r\n        return \"NOVECIENTOS \" + this.Decenas(decenas);\r\n    }\r\n\r\n    return this.Decenas(decenas);\r\n  }\r\n\r\n  Seccion(num, divisor, strSingular, strPlural) {\r\n    let cientos = Math.floor(num / divisor);\r\n    let resto = num - cientos * divisor;\r\n\r\n    let letras = \"\";\r\n\r\n    if (cientos > 0)\r\n      if (cientos > 1) letras = this.Centenas(cientos) + \" \" + strPlural;\r\n      else letras = strSingular;\r\n\r\n    if (resto > 0) letras += \"\";\r\n\r\n    return letras;\r\n  }\r\n\r\n  Miles(num) {\r\n    let divisor = 1000;\r\n    let cientos = Math.floor(num / divisor);\r\n    let resto = num - cientos * divisor;\r\n\r\n    let strMiles = this.Seccion(num, divisor, \"UN MIL\", \"MIL\");\r\n    let strCentenas = this.Centenas(resto);\r\n\r\n    if (strMiles == \"\") return strCentenas;\r\n\r\n    return strMiles + \" \" + strCentenas;\r\n  }\r\n\r\n  parseNumberToLetter(num) {\r\n    const currency = this.currency || {};\r\n    let data = {\r\n      numero: num,\r\n      enteros: Math.floor(num),\r\n      centavos: Math.round(num * 100) - Math.floor(num) * 100,\r\n      letrasCentavos: \"\",\r\n      letrasMonedaPlural: currency.plural || \"PESOS CHILENOS\", //'PESOS', 'Dólares', 'Bolívares', 'etcs'\r\n      letrasMonedaSingular: currency.singular || \"PESO CHILENO\", //'PESO', 'Dólar', 'Bolivar', 'etc'\r\n      letrasMonedaCentavoPlural: currency.centPlural || \"CHIQUI PESOS CHILENOS\",\r\n      letrasMonedaCentavoSingular:\r\n        currency.centSingular || \"CHIQUI PESO CHILENO\",\r\n    };\r\n\r\n    if (data.centavos > 0) {\r\n      data.letrasCentavos =\r\n        \"CON \" +\r\n        (function () {\r\n          if (data.centavos == 1)\r\n            return (\r\n              this.Millones(data.centavos) +\r\n              \" \" +\r\n              data.letrasMonedaCentavoSingular\r\n            );\r\n          else\r\n            return (\r\n              this.Millones(data.centavos) +\r\n              \" \" +\r\n              data.letrasMonedaCentavoPlural\r\n            );\r\n        })();\r\n    }\r\n\r\n    if (data.enteros == 0)\r\n      return \"CERO \" + data.letrasMonedaPlural + \" \" + data.letrasCentavos;\r\n    if (data.enteros == 1)\r\n      return (\r\n        this.Millones(data.enteros) +\r\n        \" \" +\r\n        data.letrasMonedaSingular +\r\n        \" \" +\r\n        data.letrasCentavos\r\n      );\r\n    else\r\n      return (\r\n        this.Millones(data.enteros) +\r\n        \" \" +\r\n        data.letrasMonedaPlural +\r\n        \" \" +\r\n        data.letrasCentavos\r\n      );\r\n  }\r\n\r\n  parseFormatCurrency = (money, fraction, maxFraction) => {\r\n    let resultNumber = \"\";\r\n    if (isNil(money) === false) {\r\n      const formatMoneyJson = {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n        minimumFractionDigits: fraction,\r\n        maximumFractionDigits: maxFraction || 20,\r\n      };\r\n      const locale = \"en-US\";\r\n      const moneyFormat = new Intl.NumberFormat(locale, formatMoneyJson);\r\n      resultNumber = moneyFormat.format(money);\r\n    }\r\n    return resultNumber;\r\n  };\r\n}\r\n\r\nexport default FrontFunctions;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\customFileUpload.jsx",["494"],"import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport Magnifier from \"react-magnifier\";\r\nimport { Modal, Spin, Upload, message, Progress, Switch } from \"antd\";\r\nimport { FileUnknownOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport Show from \"../../../assets/icons/Show.svg\";\r\nimport Delete from \"../../../assets/icons/Delete.svg\";\r\nimport {\r\n  callAddDocument,\r\n  callAddDocumentContract,\r\n} from \"../../../utils/actions/actions\";\r\nimport ENVIROMENT from \"../../../utils/constants/enviroments\";\r\nimport GLOBAL_CONSTANTS from \"../../../utils/constants/globalConstants\";\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst CustomFileUpload = (props) => {\r\n  const {\r\n    acceptFile,\r\n    dataDocument,\r\n    callAddDocument,\r\n    callAddDocumentContract,\r\n    dataProfile,\r\n  } = props;\r\n  const [fileList, setFileList] = useState({});\r\n  const [requestSignature, setRequestSignature] = useState(false);\r\n  const [preview, setPreview] = useState(null);\r\n  const [fileName, setFileName] = useState(null);\r\n  const [timeUpload, setTimeUpload] = useState(0);\r\n  const [previewVisible, setPreviewVisible] = useState(false);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [spinVisibleUpload, setSpinVisibleUpload] = useState(true);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const LoadingSpin = (\r\n    <div\r\n      style={{\r\n        top: \"20px\",\r\n        position: \"absolute\",\r\n        left: \"50px\",\r\n      }}\r\n    >\r\n      <Progress type=\"circle\" percent={timeUpload} />\r\n    </div>\r\n  );\r\n\r\n  const beforeUpload = (file) => {\r\n    const isLt2M = file.size / 1024 / 1024 < 5;\r\n    if (!isLt2M) {\r\n      message.error(\"¡El archivo que intentas subir debe ser menor que 5MB!\");\r\n    }\r\n    return isLt2M;\r\n  };\r\n\r\n  const handlerAddTypeFormDocument = async (data, id) => {\r\n    try {\r\n      await callAddDocumentContract(data, id);\r\n      setSpinVisibleUpload(false);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"No se pudo asociar el documento al contrato indicado\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, infoDoc) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: infoDoc.idDocumentType,\r\n      idCustomer: infoDoc.idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(\r\n        data.originFileObj,\r\n        dataDocument,\r\n        (percent) => {\r\n          setTimeUpload(percent);\r\n        }\r\n      );\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      await handlerAddTypeFormDocument(\r\n        {\r\n          idDigitalContract: infoDoc.idDigitalContract,\r\n          idDocument: documentId,\r\n          requiresDigitalSignature: requestSignature === true ? 1 : 0,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n          type: null,\r\n        },\r\n        infoDoc.idContract\r\n      );\r\n      setTimeout(() => {\r\n        setSpinVisible(false);\r\n      }, 3000);\r\n      showMessageStatusApi(\r\n        \"Documento subido exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"No se logro subir el archivo, intenta nuevamente o mas tarde\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const onChange = (checked) => {\r\n    setRequestSignature(checked);\r\n  };\r\n\r\n  return (\r\n    <Spin indicator={LoadingSpin} spinning={spinVisible}>\r\n      <div\r\n        style={{\r\n          display: isNil(dataDocument.idDocument) === true ? \"block\" : \"none\",\r\n        }}\r\n      >\r\n        <Switch value={requestSignature} onChange={onChange} />\r\n        {requestSignature === true ? (\r\n          <span style={{ marginLeft: 5 }}>Requiere firma electrónica</span>\r\n        ) : (\r\n          <span style={{ marginLeft: 5 }}>Con firma ológrafa</span>\r\n        )}\r\n      </div>\r\n      <div\r\n        className={`section-drop-document ${\r\n          (isNil(preview) === false ||\r\n            (isEmpty(dataDocument) === false &&\r\n              isNil(dataDocument.idDocument) === false)) &&\r\n          \"border-dashed-none\"\r\n        }`}\r\n      >\r\n        {isNil(preview) === true &&\r\n          isEmpty(dataDocument) === false &&\r\n          isNil(dataDocument.idDocument) === true && (\r\n            <Dragger\r\n              action=\"/\"\r\n              onChange={({ file }) => {\r\n                if (isNil(file.originFileObj) === false) {\r\n                  const reader = new FileReader();\r\n                  reader.readAsDataURL(file.originFileObj);\r\n                  reader.onload = (event) => {\r\n                    if (file.type !== \"application/pdf\" && file.type !== \"\") {\r\n                      setPreview(event.target.result);\r\n                    } else {\r\n                      setPreview(\"\");\r\n                    }\r\n                  };\r\n                  setFileList(file);\r\n                  setFileName(file.name);\r\n                }\r\n              }}\r\n              method=\"get\"\r\n              showUploadList={false}\r\n              accept={acceptFile}\r\n              beforeUpload={beforeUpload}\r\n            >\r\n              <span>\r\n                Arrastra tu documento\r\n                <br /> aqui o haz Clic\r\n              </span>\r\n            </Dragger>\r\n          )}\r\n        {isNil(preview) === false &&\r\n          isEmpty(dataDocument) === false &&\r\n          isNil(dataDocument.idDocument) === true && (\r\n            <div className=\"content-preview-document\">\r\n              <div className=\"screen-hover-action\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setPreviewVisible(!previewVisible);\r\n                  }}\r\n                >\r\n                  <img src={Show} alt=\"preview\" />\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setFileList({});\r\n                    setPreview(null);\r\n                    setFileName(null);\r\n                  }}\r\n                >\r\n                  <img src={Delete} alt=\"eliminar\" />\r\n                </button>\r\n              </div>\r\n              {isEmpty(preview) === true ? (\r\n                <FileUnknownOutlined style={{ fontSize: 100, color: \"grey\" }} />\r\n              ) : (\r\n                <img src={preview} alt=\"Preview\" />\r\n              )}\r\n            </div>\r\n          )}\r\n        {isEmpty(dataDocument) === false &&\r\n          isNil(dataDocument.idDocument) === false && (\r\n            <div className=\"content-preview-document\">\r\n              <div className=\"screen-hover-action\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setPreviewVisible(!previewVisible);\r\n                  }}\r\n                >\r\n                  <img src={Show} alt=\"preview\" />\r\n                </button>\r\n              </div>\r\n              {isNil(dataDocument.extension) === true ||\r\n              dataDocument.extension === \"docx\" ||\r\n              dataDocument.extension === \"pdf\" ? (\r\n                <FileUnknownOutlined style={{ fontSize: 100, color: \"grey\" }} />\r\n              ) : (\r\n                <img\r\n                  src={`${ENVIROMENT}/api/viewFile/${dataDocument.idDocument}/${dataDocument.bucketSource}`}\r\n                  alt=\"Preview\"\r\n                />\r\n              )}\r\n            </div>\r\n          )}\r\n        <Modal\r\n          visible={previewVisible}\r\n          title={\r\n            <div className=\"form-modal\">\r\n              <div className=\"title-head-modal\">\r\n                <button\r\n                  className=\"arrow-back-to\"\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setPreviewVisible(!previewVisible);\r\n                  }}\r\n                >\r\n                  <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                </button>\r\n                <h1>\r\n                  {isEmpty(dataDocument) === false &&\r\n                  isNil(dataDocument.idDocument) === false\r\n                    ? dataDocument.documentType\r\n                    : fileName}\r\n                </h1>\r\n              </div>\r\n            </div>\r\n          }\r\n          closable={false}\r\n          footer={null}\r\n          style={{ top: \"20px\" }}\r\n        >\r\n          {isNil(preview) === false &&\r\n            isEmpty(dataDocument) === false &&\r\n            isNil(dataDocument.idDocument) === true && (\r\n              <>\r\n                {isEmpty(preview) === true ? (\r\n                  <div style={{ textAlign: \"center\" }}>\r\n                    <FileUnknownOutlined\r\n                      style={{ fontSize: 100, color: \"grey\" }}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <Magnifier src={preview} />\r\n                )}\r\n              </>\r\n            )}\r\n\r\n          {isEmpty(dataDocument) === false &&\r\n            isNil(dataDocument.idDocument) === false && (\r\n              <>\r\n                {isNil(dataDocument.extension) === true ||\r\n                dataDocument.extension === \"docx\" ||\r\n                dataDocument.extension === \"pdf\" ? (\r\n                  <div style={{ textAlign: \"center\" }}>\r\n                    <FileUnknownOutlined\r\n                      style={{ fontSize: 100, color: \"grey\" }}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <Magnifier\r\n                    src={`${ENVIROMENT}/api/viewFile/${dataDocument.idDocument}/${dataDocument.bucketSource}`}\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n        </Modal>\r\n      </div>\r\n      {isNil(preview) === false &&\r\n        isEmpty(dataDocument) === false &&\r\n        isNil(dataDocument.idDocument) === true &&\r\n        spinVisibleUpload === true && (\r\n          <div className=\"confirm-upload-document button_actions\">\r\n            <button\r\n              className=\"button_primary\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                if (\r\n                  isEmpty(dataDocument) === false &&\r\n                  isEmpty(fileList) === false\r\n                ) {\r\n                  setSpinVisible(true);\r\n                  handlerAddDocument(fileList, dataDocument);\r\n                }\r\n              }}\r\n            >\r\n              <span>\r\n                <i className=\"fa fa-upload\" /> Subir\r\n              </span>\r\n            </button>\r\n          </div>\r\n        )}\r\n    </Spin>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callAddDocument: (file, data, callback) =>\r\n    dispatch(callAddDocument(file, data, callback)),\r\n  callAddDocumentContract: (data, id) =>\r\n    dispatch(callAddDocumentContract(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomFileUpload);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx",["495","496","497","498","499","500","501","502"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Input, Row, Col, Select, Tooltip, Radio } from \"antd\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst CurrentAddressRenter = (props) => {\r\n  const {\r\n    onClickNext,\r\n    dataFormSave,\r\n    frontFunctions,\r\n    dataZipCatalog,\r\n    onChangeZipCode,\r\n    dataZipCodeAdress,\r\n    dataPropertyTypes,\r\n  } = props;\r\n  const initialForm = {\r\n    isOwner: null,\r\n    streetProperty: null,\r\n    suiteProperty: null,\r\n    streetNumberProperty: null,\r\n    idZipCodeProperty: null,\r\n    zipCodeProperty: null,\r\n    city: null,\r\n    state: null,\r\n    neighborhoodProperty: null,\r\n    idPropertyType: null,\r\n    idPropertyTypeText: null,\r\n    isFurnished: null,\r\n    currentRent: null,\r\n    maintenanceAmount: null,\r\n    totalParkingSpots: null,\r\n    hasInsurance: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isEmpty(dataFormSave) === false &&\r\n      isEmpty(dataPropertyTypes) === false\r\n    ) {\r\n      const selectDefaulPropertyType = dataPropertyTypes.find((row) => {\r\n        return dataFormSave.idPropertyType === row.idPropertyType;\r\n      });\r\n      setDataForm({\r\n        ...dataFormSave,\r\n        idPropertyTypeText:\r\n          isNil(selectDefaulPropertyType) === false\r\n            ? selectDefaulPropertyType.text\r\n            : \"\",\r\n      });\r\n      onChangeZipCode(dataFormSave.zipCodeProperty);\r\n    }\r\n  }, [dataFormSave, dataPropertyTypes]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        state: dataZipCodeAdress.state,\r\n        city: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Datos del Inmueble a rentar\"\r\n          : \"Confirmar datos del Inmueble a rentar\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    ¿Eres el propietario?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        isOwner: value,\r\n                      });\r\n                    }}\r\n                    value={\r\n                      dataForm.isOwner === true || dataForm.isOwner === 1\r\n                        ? 1\r\n                        : isNil(dataForm.isOwner) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No, lo estoy representando</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Input\r\n                  value={dataForm.streetProperty}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      streetProperty: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.suiteProperty}\r\n                  placeholder={\"Numero interior\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, suiteProperty: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.streetNumberProperty}\r\n                  placeholder={\"Numero exterior\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      streetNumberProperty: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <Input\r\n                  value={dataForm.zipCodeProperty}\r\n                  placeholder={\"Código postal\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    if (value.length >= 5) {\r\n                      setDataForm({ ...dataForm, zipCodeProperty: value });\r\n                      onChangeZipCode(e.target.value);\r\n                    } else {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhoodProperty: null,\r\n                        idZipCodeProperty: null,\r\n                        zipCodeProperty: value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.state}\r\n                  placeholder={\"Estado\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.city}\r\n                  placeholder={\"Municipio/Delegación\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                {isOpenInput === false ? (\r\n                  <Select\r\n                    placeholder=\"Colonia\"\r\n                    value={dataForm.idZipCodeProperty}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setIsOpenInput(dataSelect.isOpen);\r\n                      if (dataSelect.isOpen === true) {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhoodProperty: null,\r\n                          idZipCodeProperty: value,\r\n                        });\r\n                      } else {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhoodProperty: option.children,\r\n                          idZipCodeProperty: value,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataZipCatalog) === false &&\r\n                      dataZipCatalog.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idZipCode}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.neighborhood}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                ) : (\r\n                  <Input\r\n                    value={dataForm.neighborhoodProperty}\r\n                    placeholder={\"Indicar Colonia\"}\r\n                    suffix={\r\n                      <Tooltip title=\"Cerrar\">\r\n                        <CloseOutlined\r\n                          style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                          onClick={() => {\r\n                            setIsOpenInput(false);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idZipCodeProperty: null,\r\n                              neighborhoodProperty: null,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                    }\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhoodProperty: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Select\r\n                  value={dataForm.idPropertyType}\r\n                  placeholder=\"Tipo de inmueble\"\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idPropertyType: value,\r\n                      idPropertyTypeText: option.children,\r\n                    });\r\n                  }}\r\n                >\r\n                  {isEmpty(dataPropertyTypes) === false &&\r\n                    dataPropertyTypes.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idPropertyType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    ¿El inmueble está asegurado?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        hasInsurance: e.target.value,\r\n                      });\r\n                    }}\r\n                    value={\r\n                      dataForm.hasInsurance === true ||\r\n                      dataForm.hasInsurance === 1\r\n                        ? 1\r\n                        : isNil(dataForm.hasInsurance) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    ¿El inmueble está amueblado?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, isFurnished: e.target.value });\r\n                    }}\r\n                    value={\r\n                      dataForm.isFurnished === true ||\r\n                      dataForm.isFurnished === 1\r\n                        ? 1\r\n                        : isNil(dataForm.isFurnished) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"$\"\r\n                  suffix=\"\"\r\n                  value={dataForm.currentRent}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Monto de renta\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      currentRent: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"$\"\r\n                  suffix=\"\"\r\n                  value={dataForm.maintenanceAmount}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder={\"Monto de mandetimiento\"}\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      maintenanceAmount: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={dataForm.totalParkingSpots}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder={\"Lugares de estacionamiento\"}\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      totalParkingSpots: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              {/* <button\r\n                type=\"button\"\r\n                onClick={onClickBack}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Regresar</span>\r\n              </button> */}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <p>\r\n              Verifica que tu información sea correcta, de lo contrario no\r\n              podras hacer modificaciones.\r\n            </p>\r\n            <Row>\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }} />\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"¿Eres el propietario?\"\r\n                  content={\r\n                    dataForm.isOwner === true || dataForm.isOwner === 1\r\n                      ? \"Si\"\r\n                      : isNil(dataForm.isOwner) === false\r\n                      ? \"No, lo estoy representando\"\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }} />\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Calle\"\r\n                  content={dataForm.streetProperty}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Numero exterior\"\r\n                  content={dataForm.streetNumberProperty}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Numero interior\"\r\n                  content={dataForm.suiteProperty}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Colonia\"\r\n                  content={dataForm.neighborhoodProperty}\r\n                />\r\n              </Col>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Municipio/Delegación\"\r\n                  content={dataForm.city}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem title=\"Estado\" content={dataForm.state} />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <DescriptionItem\r\n                  title=\"Código postal\"\r\n                  content={dataForm.zipCodeProperty}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"Tipo de inmueble\"\r\n                  content={dataForm.idPropertyTypeText}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <DescriptionItem\r\n                  title=\"¿Está amueblado?\"\r\n                  content={\r\n                    dataForm.isFurnished === true || dataForm.isFurnished === 1\r\n                      ? \"Si\"\r\n                      : isNil(dataForm.isFurnished) === false\r\n                      ? \"No\"\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                <DescriptionItem\r\n                  title=\"¿Está asegurado?\"\r\n                  content={\r\n                    dataForm.hasInsurance === true ||\r\n                    dataForm.hasInsurance === 1\r\n                      ? \"Si\"\r\n                      : isNil(dataForm.hasInsurance) === false\r\n                      ? \"No\"\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Monto de renta\"\r\n                  content={\r\n                    isNil(dataForm.currentRent) === false\r\n                      ? frontFunctions.parseFormatCurrency(\r\n                          dataForm.currentRent,\r\n                          2,\r\n                          2\r\n                        )\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Monto de mantenimiento\"\r\n                  content={\r\n                    isNil(dataForm.maintenanceAmount) === false\r\n                      ? frontFunctions.parseFormatCurrency(\r\n                          dataForm.maintenanceAmount,\r\n                          2,\r\n                          2\r\n                        )\r\n                      : null\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Estacionamiento\"\r\n                  content={dataForm.totalParkingSpots}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentAddressRenter;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx",["503","504"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Input, Row, Col, Select, Tooltip } from \"antd\";\r\nimport { CloseOutlined } from \"@ant-design/icons\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionInfoOwner = (props) => {\r\n  const {\r\n    onClickNext,\r\n    dataFormSave,\r\n    dataMaritalStatus,\r\n    onChangeZipCode,\r\n    dataZipCodeAdress,\r\n    dataZipCatalog,\r\n    dataNationalities,\r\n    dataIdTypes,\r\n  } = props;\r\n  const initialForm = {\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    emailAddress: null,\r\n    taxId: null,\r\n    citizenId: null,\r\n    idMaritalStatus: null,\r\n    idMaritalStatusText: null,\r\n    street: null,\r\n    suite: null,\r\n    streetNumber: null,\r\n    zipCode: null,\r\n    idZipCode: null,\r\n    state: null,\r\n    municipality: null,\r\n    neighborhood: null,\r\n    idCountryNationality: null,\r\n    idCountryNationalityText: null,\r\n    idType: null,\r\n    idTypeText: null,\r\n    idTypeNumber: null,\r\n    placeOfIssue: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n  const [visibleComponents, setVisibleComponents] = useState({\r\n    givenName: true,\r\n    lastName: true,\r\n    mothersMaidenName: true,\r\n    idEndorsement: true,\r\n  });\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isEmpty(dataFormSave) === false &&\r\n      isEmpty(dataNationalities) === false &&\r\n      isEmpty(dataIdTypes) === false &&\r\n      isEmpty(dataMaritalStatus) === false\r\n    ) {\r\n      const visibleField =\r\n        isNil(dataFormSave.jsonProperties) === false\r\n          ? JSON.parse(dataFormSave.jsonProperties)\r\n          : {};\r\n      const selectDefaultNationality = dataNationalities.find((row) => {\r\n        return dataForm.idCountryNationality === row.idCountryNationality;\r\n      });\r\n      const selectDefaultIdType = dataIdTypes.find((row) => {\r\n        return dataForm.idType === row.idType;\r\n      });\r\n      const selectDefaultMaritalStatus = dataMaritalStatus.find((row) => {\r\n        return dataForm.idMaritalStatus === row.idMaritalStatus;\r\n      });\r\n      setDataForm({\r\n        ...dataFormSave,\r\n        idCountryNationalityText:\r\n          isNil(selectDefaultNationality) === false\r\n            ? selectDefaultNationality.text\r\n            : \"\",\r\n        idTypeText:\r\n          isNil(selectDefaultIdType) === false ? selectDefaultIdType.text : \"\",\r\n        idMaritalStatusText:\r\n          isNil(selectDefaultMaritalStatus) === false\r\n            ? selectDefaultMaritalStatus.text\r\n            : \"\",\r\n        isRequiresPlaceOfIssue:\r\n          isNil(selectDefaultIdType) === false\r\n            ? selectDefaultIdType.requiresPlaceOfIssue\r\n            : null,\r\n      });\r\n      setVisibleComponents({ ...visibleComponents, ...visibleField });\r\n      onChangeZipCode(dataFormSave.zipCode);\r\n    }\r\n  }, [dataFormSave, dataNationalities, dataIdTypes, dataMaritalStatus]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        state: dataZipCodeAdress.state,\r\n        city: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Información personal\"\r\n          : \"Confirmar Información Personal\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <Input\r\n                  value={dataForm.givenName}\r\n                  placeholder={\r\n                    visibleComponents.lastName === true\r\n                      ? \"Nombres\"\r\n                      : \"Razón social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, givenName: value });\r\n                  }}\r\n                  suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              {visibleComponents.lastName === true && (\r\n                <>\r\n                  {\" \"}\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <Input\r\n                      value={dataForm.lastName}\r\n                      placeholder={\"Apellido paterno\"}\r\n                      onChange={(e) => {\r\n                        // const value = e.target.value;\r\n                        // setDataForm({ ...dataForm, lastName: value });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <Input\r\n                      value={dataForm.mothersMaidenName}\r\n                      placeholder={\"Apellido materno\"}\r\n                      onChange={(e) => {\r\n                        // const value = e.target.value;\r\n                        // setDataForm({ ...dataForm, mothersMaidenName: value });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </>\r\n              )}\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.phoneNumber}\r\n                  placeholder={\"Telefono\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, phoneNumber: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.emailAddress}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, emailAddress: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.taxId}\r\n                  placeholder={\"RFC con Homoclave\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, taxId: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.citizenId}\r\n                  placeholder={\"CURP\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, citizenId: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                <Select\r\n                  placeholder=\"Nacionalidad\"\r\n                  showSearch\r\n                  value={dataForm.idCountryNationality}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idCountryNationality: value,\r\n                      idCountryNationalityText: option.children,\r\n                    });\r\n                  }}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {isEmpty(dataNationalities) === false &&\r\n                    dataNationalities.map((row) => {\r\n                      return (\r\n                        <Option value={row.idCountryNationality}>\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                <Select\r\n                  placeholder=\"Identificación oficial\"\r\n                  showSearch\r\n                  value={dataForm.idType}\r\n                  onChange={(value, option) => {\r\n                    const valueSelect = option.onClick();\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idType: value,\r\n                      idTypeText: option.children,\r\n                      isRequiresPlaceOfIssue: valueSelect.requiresPlaceOfIssue,\r\n                    });\r\n                  }}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {isEmpty(dataIdTypes) === false &&\r\n                    dataIdTypes.map((row) => {\r\n                      return (\r\n                        <Option value={row.idType} onClick={() => row}>\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              {isNil(dataForm.idType) === false && (\r\n                <Col span={10} xs={{ span: 24 }} md={{ span: 10 }}>\r\n                  <Input\r\n                    value={dataForm.idTypeNumber}\r\n                    placeholder={`Numero de ${dataForm.idTypeText}`}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, idTypeNumber: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              )}\r\n            </Row>\r\n            {dataForm.isRequiresPlaceOfIssue === true && (\r\n              <Row>\r\n                <Col span={13} xs={{ span: 24 }} md={{ span: 13 }}>\r\n                  <Input\r\n                    value={dataForm.placeOfIssue}\r\n                    placeholder={\"Lugar de expedición de la identificación\"}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, placeOfIssue: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Select\r\n                  placeholder=\"Estado Civil\"\r\n                  value={dataForm.idMaritalStatus}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idMaritalStatus: value,\r\n                      idMaritalStatusText: option.children,\r\n                    });\r\n                  }}\r\n                >\r\n                  {isEmpty(dataMaritalStatus) === false &&\r\n                    dataMaritalStatus.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idMaritalStatus}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <p>Domicilio Actual</p>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Input\r\n                  value={dataForm.street}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, street: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.suite}\r\n                  placeholder={\"Numero interior\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, suite: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.streetNumber}\r\n                  placeholder={\"Numero exterior\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, streetNumber: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <Input\r\n                  value={dataForm.zipCode}\r\n                  placeholder={\"Código postal\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    if (value.length >= 5) {\r\n                      setDataForm({ ...dataForm, zipCode: value });\r\n                      onChangeZipCode(e.target.value);\r\n                    } else {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: null,\r\n                        idZipCode: null,\r\n                        zipCode: value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.state}\r\n                  placeholder={\"Estado\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.city}\r\n                  placeholder={\"Municipio/Delegación\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                {isOpenInput === false ? (\r\n                  <Select\r\n                    placeholder=\"Colonia\"\r\n                    value={dataForm.idZipCode}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setIsOpenInput(dataSelect.isOpen);\r\n                      if (dataSelect.isOpen === true) {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: null,\r\n                          idZipCode: value,\r\n                        });\r\n                      } else {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: option.children,\r\n                          idZipCode: value,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataZipCatalog) === false &&\r\n                      dataZipCatalog.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idZipCode}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.neighborhood}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                ) : (\r\n                  <Input\r\n                    value={dataForm.neighborhood}\r\n                    placeholder={\"Indicar Colonia\"}\r\n                    suffix={\r\n                      <Tooltip title=\"Cerrar\">\r\n                        <CloseOutlined\r\n                          style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                          onClick={() => {\r\n                            setIsOpenInput(false);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idZipCode: null,\r\n                              neighborhood: null,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                    }\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <p>\r\n              Verifica que tu información sea correcta, de lo contrario no\r\n              podras hacer modificaciones.\r\n            </p>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title={\r\n                    visibleComponents.lastName === true\r\n                      ? \"Nombre completo\"\r\n                      : \"Razón social\"\r\n                  }\r\n                  content={`${dataForm.givenName} ${\r\n                    visibleComponents.lastName === true ? dataForm.lastName : \"\"\r\n                  } ${\r\n                    visibleComponents.lastName === true\r\n                      ? dataForm.mothersMaidenName\r\n                      : \"\"\r\n                  }`}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Telefono\"\r\n                  content={dataForm.phoneNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Correo\"\r\n                  content={dataForm.emailAddress}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"RFC con Homoclave\"\r\n                  content={dataForm.taxId}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem title=\"CURP\" content={dataForm.citizenId} />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Nacionalidad\"\r\n                  content={dataForm.idCountryNationalityText}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Identificación oficial\"\r\n                  content={dataForm.idTypeText}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title={`Numero de ${dataForm.idTypeText}`}\r\n                  content={dataForm.idTypeNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Estado civil\"\r\n                  content={dataForm.idMaritalStatusText}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {dataForm.isRequiresPlaceOfIssue === true && (\r\n              <Row>\r\n                <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n                <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n                  <DescriptionItem\r\n                    title={`Lugar de expedición de identificación`}\r\n                    content={dataForm.placeOfIssue}\r\n                  />\r\n                </Col>\r\n                <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n              </Row>\r\n            )}\r\n            <p>Domicilio Actual</p>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem title=\"Calle\" content={dataForm.street} />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Numero exterior\"\r\n                  content={dataForm.streetNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Numero interior\"\r\n                  content={dataForm.suite}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Colonia\"\r\n                  content={dataForm.neighborhood}\r\n                />\r\n              </Col>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Municipio/Delegación\"\r\n                  content={dataForm.city}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem title=\"Estado\" content={dataForm.state} />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Código postal\"\r\n                  content={dataForm.zipCode}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionInfoOwner;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx",["505","506","507","508","509"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx",["510","511"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx",["512","513","514","515","516","517","518"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx",["519","520"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx",["521","522","523","524"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionDepositGuarantee.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionCardOwner.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionStatsChart.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx",["525","526"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customReference.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Leads\\leads.jsx",["527","528","529"],"import React, { useEffect, useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Table, Tag, Menu, Dropdown, Button, message } from \"antd\";\r\nimport Tickets from \"../../assets/icons/tickets.svg\";\r\nimport Calling from \"../../assets/icons/Calling.svg\";\r\nimport CallMissed from \"../../assets/icons/CallMissed.svg\";\r\nimport Register from \"../../assets/icons/Register.svg\";\r\nimport UserAccept from \"../../assets/icons/UserAccept.svg\";\r\nimport IconDanger from \"../../assets/icons/Danger.svg\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetLandingProspectStats,\r\n  callGetLandingProspectCoincidences,\r\n  callGetAllProspectStatus,\r\n  callUpdateLandingProspectStatus,\r\n} from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst LeadsLandingPage = (props) => {\r\n  const {\r\n    dataProfile,\r\n    callGetLandingProspectStats,\r\n    callGetLandingProspectCoincidences,\r\n    callGetAllProspectStatus,\r\n    callUpdateLandingProspectStatus,\r\n  } = props;\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataStats, setDataStats] = useState({});\r\n  const [dataProspectStatus, setDataProspectStatus] = useState([]);\r\n\r\n  const arrayIconst = {\r\n    Tickets,\r\n    Calling,\r\n    CallMissed,\r\n    Register,\r\n    UserAccept,\r\n    IconDanger,\r\n  };\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetLandingProspectCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetLandingProspectCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetLandingProspectStats = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetLandingProspectStats({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataStats(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllProspectStatus = async (id = null) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllProspectStatus({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idLandingProspect: id,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataProspectStatus(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallUpdateLandingProspectStatus = async (idStatus, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callUpdateLandingProspectStatus(\r\n        {\r\n          idProspectStatus: idStatus,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n      await handlerCallGetLandingProspectCoincidences();\r\n      handlerCallGetLandingProspectStats();\r\n      showMessageStatusApi(\r\n        \"Se actualizó correctamente el estatus\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Nombre\",\r\n      dataIndex: \"fullName\",\r\n      key: \"fullName\",\r\n      width: 200,\r\n    },\r\n    {\r\n      title: \"Teléfono\",\r\n      dataIndex: \"phoneNumber\",\r\n      key: \"phoneNumber\",\r\n    },\r\n    {\r\n      title: \"Correo\",\r\n      dataIndex: \"emailAddress\",\r\n      key: \"emailAddress\",\r\n    },\r\n    {\r\n      title: \"Fecha de pre-registro\",\r\n      dataIndex: \"requestedAt\",\r\n      key: \"requestedAt\",\r\n      width: 200,\r\n    },\r\n    {\r\n      title: \"Prospecto a\",\r\n      dataIndex: \"prospectType\",\r\n      key: \"prospectType\",\r\n    },\r\n    {\r\n      title: \"Póliza\",\r\n      dataIndex: \"policy\",\r\n      key: \"policy\",\r\n    },\r\n    {\r\n      title: \"Renta\",\r\n      dataIndex: \"budgeAmount\",\r\n      key: \"budgeAmount\",\r\n    },\r\n    {\r\n      title: \"Cotización\",\r\n      dataIndex: \"policyAmount\",\r\n      key: \"policyAmount\",\r\n    },\r\n    {\r\n      title: \"Atendido por\",\r\n      dataIndex: \"lastUpdatedBy\",\r\n      key: \"lastUpdatedBy\",\r\n    },\r\n    {\r\n      title: \"Estatus\",\r\n      dataIndex: \"prospectStatus\",\r\n      key: \"prospectStatus\",\r\n      fixed: \"right\",\r\n      render: (status, record) => {\r\n        const style = record.prospectStatusStyle;\r\n        const parseStyle =\r\n          isNil(style) === false && isEmpty(style) === false\r\n            ? JSON.parse(style)\r\n            : {};\r\n        return (\r\n          <span>\r\n            <Tag\r\n              color={\r\n                isEmpty(parseStyle) === false &&\r\n                isNil(parseStyle.color) === false\r\n                  ? parseStyle.color\r\n                  : \"gray\"\r\n              }\r\n            >\r\n              {status}\r\n            </Tag>\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Asignar\",\r\n      dataIndex: \"idLandingProspect\",\r\n      key: \"idLandingProspect\",\r\n      fixed: \"right\",\r\n      render: (asign, record) => {\r\n        return (\r\n          <Dropdown\r\n            overlay={\r\n              <Menu onClick={(value, option) => {}}>\r\n                {isEmpty(dataProspectStatus) === false &&\r\n                  dataProspectStatus.map((row) => {\r\n                    return (\r\n                      <Menu.Item\r\n                        key={row.idProspectStatus}\r\n                        onClick={() => {\r\n                          handlerCallUpdateLandingProspectStatus(\r\n                            row.idProspectStatus,\r\n                            record.idLandingProspect\r\n                          );\r\n                        }}\r\n                      >\r\n                        <a>{row.prospectStatus}</a>\r\n                      </Menu.Item>\r\n                    );\r\n                  })}\r\n              </Menu>\r\n            }\r\n            trigger={[\"click\"]}\r\n          >\r\n            <Button\r\n              type=\"primary\"\r\n              shape=\"round\"\r\n              size=\"small\"\r\n              onClick={() => {}}\r\n            >\r\n              Asignar\r\n            </Button>\r\n          </Dropdown>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    handlerCallGetLandingProspectCoincidences();\r\n    handlerCallGetLandingProspectStats();\r\n    handlerCallGetAllProspectStatus();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div\r\n          className=\"indicators-amount-renter\"\r\n          style={{\r\n            justifyContent: \"space-around\",\r\n            flexWrap: \"wrap\",\r\n          }}\r\n        >\r\n          {isEmpty(dataStats) === false &&\r\n            dataStats.map((row) => {\r\n              const style = row.style;\r\n              const parseStyle =\r\n                isNil(style) === false && isEmpty(style) === false\r\n                  ? JSON.parse(style)\r\n                  : {};\r\n              const color =\r\n                isEmpty(parseStyle) === false &&\r\n                isNil(parseStyle.color) === false\r\n                  ? parseStyle.color\r\n                  : \"gray\";\r\n              const icon =\r\n                isEmpty(parseStyle) === false &&\r\n                isNil(parseStyle.icon) === false\r\n                  ? parseStyle.icon\r\n                  : \"IconDanger\";\r\n              return (\r\n                <div\r\n                  className=\"cards-amount-renter\"\r\n                  style={{ marginBottom: 15 }}\r\n                >\r\n                  <div\r\n                    className=\"elipse-icon\"\r\n                    style={{\r\n                      background: color,\r\n                      opacity: \"1\",\r\n                      zIndex: \"0\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      src={arrayIconst[icon]}\r\n                      alt=\"icon\"\r\n                      width=\"20px\"\r\n                      style={{ opacity: \"1\", zIndex: \"1\" }}\r\n                    ></img>\r\n                  </div>\r\n                  <h2>{row.stat}</h2>\r\n                  <span>{row.prospectStatus}</span>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n        <div className=\"main-information-user-admin\">\r\n          <div className=\"renter-card-information total-width\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Leads</span>\r\n            </div>\r\n            <div className=\"section-information-renters\">\r\n              <Table\r\n                columns={columns}\r\n                dataSource={dataCoincidences}\r\n                className=\"table-users-hfy\"\r\n                size=\"small\"\r\n                bordered\r\n                scroll={{ x: 2000 }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetLandingProspectStats: (data) =>\r\n    dispatch(callGetLandingProspectStats(data)),\r\n  callGetLandingProspectCoincidences: (data) =>\r\n    dispatch(callGetLandingProspectCoincidences(data)),\r\n  callGetAllProspectStatus: (data) => dispatch(callGetAllProspectStatus(data)),\r\n  callUpdateLandingProspectStatus: (data, id) =>\r\n    dispatch(callUpdateLandingProspectStatus(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LeadsLandingPage);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\agents.jsx",["530","531","532","533","534","535"],"import React, { useEffect, useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Table, Tag, Menu, Dropdown, Button, message } from \"antd\";\r\nimport Agents from \"../../assets/icons/agent.svg\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport { callGetCustomerAgentCoincidences } from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst AgentsSystem = (props) => {\r\n  const { callGetCustomerAgentCoincidences, dataProfile } = props;\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataTotalAgents, setDataTotalAgents] = useState(0);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Número de asesor\",\r\n      dataIndex: \"agentNo\",\r\n      key: \"agentNo\",\r\n      fixed: \"left\",\r\n    },\r\n    {\r\n      title: \"Nombre\",\r\n      dataIndex: \"fullName\",\r\n      key: \"fullName\",\r\n      width: 200,\r\n    },\r\n    {\r\n      title: \"Teléfono\",\r\n      dataIndex: \"phoneNumber\",\r\n      key: \"phoneNumber\",\r\n    },\r\n    {\r\n      title: \"Correo\",\r\n      dataIndex: \"emailAddress\",\r\n      key: \"emailAddress\",\r\n    },\r\n    {\r\n      title: \"Inmobiliaria\",\r\n      dataIndex: \"realState\",\r\n      key: \"realState\",\r\n      width: 200,\r\n    },\r\n    {\r\n      title: \"Efectividad\",\r\n      dataIndex: \"percentCompleted\",\r\n      key: \"percentCompleted\",\r\n    },\r\n    {\r\n      title: \"Comisiones Primera vez\",\r\n      dataIndex: \"totalCommissionsAmount\",\r\n      key: \"totalCommissionsAmount\",\r\n    },\r\n    {\r\n      title: \"Comisión por renovación\",\r\n      dataIndex: \"totalRenewalsAmount\",\r\n      key: \"totalRenewalsAmount\",\r\n    },\r\n    {\r\n      title: \"Comisión global\",\r\n      dataIndex: \"grandTotalCommissionsAmount\",\r\n      key: \"grandTotalCommissionsAmount\",\r\n    },\r\n    {\r\n      title: \"Última comisión\",\r\n      dataIndex: \"lastCommissionAt\",\r\n      key: \"lastCommissionAt\",\r\n    },\r\n  ];\r\n\r\n  const handlerCallGetCustomerAgentCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerAgentCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      const totalAgents =\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult[0]) === false &&\r\n        isNil(responseResult[0].totalAgents) === false\r\n          ? responseResult[0].totalAgents\r\n          : 0;\r\n      setDataTotalAgents(totalAgents);\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetCustomerAgentCoincidences();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={Agents} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTotalAgents}</h2>\r\n            <span>Total de asesores</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user-admin\">\r\n          <div className=\"renter-card-information total-width\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Asesores</span>\r\n            </div>\r\n            <div className=\"section-information-renters\">\r\n              <Table\r\n                columns={columns}\r\n                dataSource={dataCoincidences}\r\n                className=\"table-users-hfy\"\r\n                size=\"small\"\r\n                bordered\r\n                scroll={{ x: 1500 }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetCustomerAgentCoincidences: (data) =>\r\n    dispatch(callGetCustomerAgentCoincidences(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AgentsSystem);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Attorney\\attorney.jsx",["536","537","538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555","556"],"import React, { useState, useEffect } from \"react\";\r\nimport Magnifier from \"react-magnifier\";\r\nimport { connect } from \"react-redux\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  Layout,\r\n  Table,\r\n  Tag,\r\n  Menu,\r\n  Dropdown,\r\n  Modal,\r\n  Button,\r\n  message,\r\n  Tooltip,\r\n  Timeline,\r\n} from \"antd\";\r\nimport {\r\n  CheckSquareOutlined,\r\n  DownloadOutlined,\r\n  CheckCircleTwoTone,\r\n  EditTwoTone,\r\n  QuestionCircleOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  callGetLegalContractCoincidences,\r\n  callGetContractDocument,\r\n  callGetCustomerMessage,\r\n} from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport DocumentIcon from \"../../assets/icons/DocumentsIcon.svg\";\r\nimport Lock from \"../../assets/icons/Lock.svg\";\r\nimport Arrow from \"../../assets/icons/Arrow.svg\";\r\nimport SectionUploadDocument from \"../Admin/sections/sectionUploadDocuments\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Attorney = (props) => {\r\n  const {\r\n    history,\r\n    dataProfile,\r\n    callGetLegalContractCoincidences,\r\n    callGetContractDocument,\r\n    callGetCustomerMessage,\r\n    setDataUserProfile,\r\n  } = props;\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [isVisibleAddDocs, setIsVisibleAddDocs] = useState(false);\r\n  const [isVisibleViewImage, setIsVisibleViewImage] = useState(false);\r\n  const [isVisibleMeessages, setIsVisibleMeessages] = useState(false);\r\n  const [dataDocuments, setDataDocuments] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [documentUrl, setDocumentUrl] = useState({});\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallContractDocument = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetContractDocument({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: null,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocuments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idCustomer: data.idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        idContract: data.idContract,\r\n        idCustomerTenant: data.idCustomerTenant,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetLegalContractCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetLegalContractCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Folio\",\r\n      dataIndex: \"hfInvoice\",\r\n      key: \"hfInvoice\",\r\n      fixed: \"left\",\r\n      render: (label, record) => {\r\n        const recorsStyle =\r\n          isNil(record.hfInvoiceStyle) === false &&\r\n          isEmpty(record.hfInvoiceStyle) === false\r\n            ? JSON.parse(record.hfInvoiceStyle)\r\n            : {};\r\n        return <span style={recorsStyle}>{label}</span>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Partes involucradas\",\r\n      fixed: \"left\",\r\n      children: [\r\n        {\r\n          title: \"Arrendador\",\r\n          dataIndex: \"customerFullName\",\r\n          key: \"customerFullName\",\r\n          width: 200,\r\n          fixed: \"left\",\r\n          render: (name, record) => {\r\n            return (\r\n              <Dropdown\r\n                overlay={\r\n                  <Menu\r\n                    onClick={async (value) => {\r\n                      await setDataUserProfile({\r\n                        ...dataProfile,\r\n                        idCustomerTenant: null,\r\n                        idCustomerTF: record.idCustomer,\r\n                        idCustomer: record.idCustomer,\r\n                        idContract: record.idContract,\r\n                      });\r\n                      history.push(`/websystem/typeform-owner/${value.key}`);\r\n                    }}\r\n                  >\r\n                    <Menu.Item key=\"0\">\r\n                      <a>Información personal</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"1\">\r\n                      <a>Inmueble a rentar</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\">\r\n                      <a>Póliza</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"3\">\r\n                      <a>Datos bancarios</a>\r\n                    </Menu.Item>\r\n                  </Menu>\r\n                }\r\n                trigger={[\"click\"]}\r\n              >\r\n                <a>{name}</a>\r\n              </Dropdown>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          title: \"Arrendatario\",\r\n          dataIndex: \"customerTenantFullName\",\r\n          key: \"customerTenantFullName\",\r\n          width: 200,\r\n          fixed: \"left\",\r\n          render: (name, record) => {\r\n            return (\r\n              <Dropdown\r\n                overlay={\r\n                  <Menu\r\n                    onClick={async (value) => {\r\n                      await setDataUserProfile({\r\n                        ...dataProfile,\r\n                        idCustomerTenantTF: record.idCustomerTenant,\r\n                        idCustomerTF: record.idCustomer,\r\n                        idContract: record.idContract,\r\n                      });\r\n                      history.push(`/websystem/typeform-user/${value.key}`);\r\n                    }}\r\n                  >\r\n                    <Menu.Item key=\"0\">\r\n                      <a>Información personal</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"1\">\r\n                      <a>Dirección actual</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"2\">\r\n                      <a>Información laboral</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"3\">\r\n                      <a>Referencias</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"4\">\r\n                      <a>Documentación</a>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"5\">\r\n                      <a>Información aval</a>\r\n                    </Menu.Item>\r\n                  </Menu>\r\n                }\r\n                trigger={[\"click\"]}\r\n              >\r\n                <a>{name}</a>\r\n              </Dropdown>\r\n            );\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Conversaciones\",\r\n      dataIndex: \"messages\",\r\n      key: \"messages\",\r\n      align: \"center\",\r\n      render: (status, record) => {\r\n        return (\r\n          <div>\r\n            <Button\r\n              type=\"link\"\r\n              size=\"small\"\r\n              onClick={() => {\r\n                setIsVisibleMeessages(true);\r\n                setIsVisibleViewImage(true);\r\n                handlerCallGetCustomerMessage(record);\r\n              }}\r\n            >\r\n              Ver\r\n            </Button>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n          Tipo de contrato\r\n          <br />\r\n          Estado / Propietario - Inquilino / Obligado S. / Aval\r\n        </div>\r\n      ),\r\n      dataIndex: \"digitalContractTemplate\",\r\n      key: \"digitalContractTemplate\",\r\n      width: 350,\r\n      align: \"center\",\r\n    },\r\n    {\r\n      title: \"Contrato\",\r\n      children: [\r\n        {\r\n          title: \"Estatus\",\r\n          dataIndex: \"contractStatus\",\r\n          key: \"contractStatus\",\r\n          align: \"center\",\r\n          render: (status, record) => {\r\n            return (\r\n              <span>\r\n                <Tag color={record.contractStatusStyle} key=\"1\">\r\n                  {status}\r\n                </Tag>\r\n              </span>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          title: \"Documento\",\r\n          dataIndex: \"infoContractDocument\",\r\n          key: \"infoContractDocument\",\r\n          align: \"center\",\r\n          render: (doc, record) => {\r\n            const dataDocument =\r\n              isNil(doc) === false && isEmpty(doc) === false\r\n                ? JSON.parse(doc)\r\n                : [];\r\n            const dataObjectDocument =\r\n              isEmpty(dataDocument) === false &&\r\n              isNil(dataDocument[0]) === false\r\n                ? dataDocument[0]\r\n                : {};\r\n            const documentId =\r\n              isEmpty(dataObjectDocument.idDocument) === false &&\r\n              isNil(dataObjectDocument.idDocument) === false\r\n                ? dataObjectDocument.idDocument\r\n                : \"\";\r\n            const bucketSource =\r\n              isEmpty(dataObjectDocument.bucketSource) === false &&\r\n              isNil(dataObjectDocument.bucketSource) === false\r\n                ? dataObjectDocument.bucketSource\r\n                : \"\";\r\n            const extension =\r\n              isEmpty(dataObjectDocument.extension) === false &&\r\n              isNil(dataObjectDocument.extension) === false\r\n                ? dataObjectDocument.extension\r\n                : \"\";\r\n            let url = \"\";\r\n\r\n            if (extension === \"docx\" || extension === \"pdf\") {\r\n              url = `/api/viewFilesDocx/${documentId}/${bucketSource}`;\r\n            } else {\r\n              url = `${ENVIROMENT}/api/viewFile/${documentId}/${bucketSource}`;\r\n            }\r\n\r\n            return (\r\n              <div>\r\n                {isEmpty(documentId) === false &&\r\n                isEmpty(bucketSource) === false &&\r\n                isEmpty(extension) === false ? (\r\n                  <>\r\n                    <Button\r\n                      type=\"link\"\r\n                      size=\"small\"\r\n                      onClick={() => {\r\n                        setDocumentUrl({ url, extension });\r\n                        setIsVisibleViewImage(!isVisibleViewImage);\r\n                      }}\r\n                    >\r\n                      Ver\r\n                    </Button>\r\n                    <a\r\n                      href={`${ENVIROMENT}/api/downloadFile/${documentId}/${bucketSource}/Contrato_${record.idContract}/${extension}`}\r\n                      className=\"download\"\r\n                      download\r\n                      style={{ fontSize: 14 }}\r\n                    >\r\n                      Descargar\r\n                    </a>\r\n                  </>\r\n                ) : (\r\n                  \"No disponible\"\r\n                )}\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          title: \"Fecha de inicio\",\r\n          dataIndex: \"startedAt\",\r\n          key: \"startedAt\",\r\n        },\r\n        {\r\n          title: \"Fecha de vencimiento\",\r\n          dataIndex: \"expireAt\",\r\n          key: \"expireAt\",\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Póliza\",\r\n      children: [\r\n        {\r\n          title: \"Estatus \",\r\n          dataIndex: \"idPolicyStatus\",\r\n          key: \"idPolicyStatus\",\r\n          align: \"center\",\r\n          render: (status, record) => {\r\n            let component = <div />;\r\n            const contractStatus = record.contractStatus;\r\n            if (status === 1) {\r\n              component = (\r\n                <Tag icon={<CheckSquareOutlined />} color=\"#1890ff\">\r\n                  {record.policyStatus}\r\n                </Tag>\r\n              );\r\n            } else if (status === 2 || status === 3) {\r\n              component = (\r\n                <Tag\r\n                  icon={\r\n                    <span className=\"anticon\">\r\n                      <i className=\"fa fa-handshake-o\" aria-hidden=\"true\" />\r\n                    </span>\r\n                  }\r\n                  color=\"#00bb2d\"\r\n                >\r\n                  {record.policyStatus}\r\n                </Tag>\r\n              );\r\n            } else if (status === 4) {\r\n              component = (\r\n                <Tag\r\n                  icon={\r\n                    <span className=\"anticon\">\r\n                      <i className=\"fa fa-ban\" aria-hidden=\"true\" />\r\n                    </span>\r\n                  }\r\n                  color=\"#ff0000\"\r\n                >\r\n                  {record.policyStatus}\r\n                </Tag>\r\n              );\r\n            }\r\n            return component;\r\n          },\r\n        },\r\n        {\r\n          title: \"Tipo de póliza\",\r\n          dataIndex: \"policy\",\r\n          key: \"policy\",\r\n        },\r\n        {\r\n          title: \"Documento\",\r\n          dataIndex: \"infoPolicyDocument\",\r\n          key: \"infoPolicyDocument\",\r\n          align: \"center\",\r\n          render: (doc, record) => {\r\n            const dataDocument =\r\n              isNil(doc) === false && isEmpty(doc) === false\r\n                ? JSON.parse(doc)\r\n                : [];\r\n            const dataObjectDocument =\r\n              isEmpty(dataDocument) === false &&\r\n              isNil(dataDocument[0]) === false\r\n                ? dataDocument[0]\r\n                : {};\r\n            const documentId =\r\n              isEmpty(dataObjectDocument.idDocument) === false &&\r\n              isNil(dataObjectDocument.idDocument) === false\r\n                ? dataObjectDocument.idDocument\r\n                : \"\";\r\n            const bucketSource =\r\n              isEmpty(dataObjectDocument.bucketSource) === false &&\r\n              isNil(dataObjectDocument.bucketSource) === false\r\n                ? dataObjectDocument.bucketSource\r\n                : \"\";\r\n            const extension =\r\n              isEmpty(dataObjectDocument.extension) === false &&\r\n              isNil(dataObjectDocument.extension) === false\r\n                ? dataObjectDocument.extension\r\n                : \"\";\r\n            let url = \"\";\r\n\r\n            if (extension === \"docx\" || extension === \"pdf\") {\r\n              url = `/api/viewFilesDocx/${documentId}/${bucketSource}`;\r\n            } else {\r\n              url = `${ENVIROMENT}/api/viewFile/${documentId}/${bucketSource}`;\r\n            }\r\n\r\n            return (\r\n              <div>\r\n                {isEmpty(documentId) === false &&\r\n                isEmpty(bucketSource) === false &&\r\n                isEmpty(extension) === false ? (\r\n                  <>\r\n                    <Button\r\n                      type=\"link\"\r\n                      size=\"small\"\r\n                      onClick={() => {\r\n                        setDocumentUrl({ url, extension });\r\n                        setIsVisibleViewImage(!isVisibleViewImage);\r\n                      }}\r\n                    >\r\n                      Ver\r\n                    </Button>\r\n                    <a\r\n                      href={`${ENVIROMENT}/api/downloadFile/${documentId}/${bucketSource}/Poliza_${record.idContract}/${extension}`}\r\n                      className=\"download\"\r\n                      download\r\n                      style={{ fontSize: 14 }}\r\n                    >\r\n                      Descargar\r\n                    </a>\r\n                  </>\r\n                ) : (\r\n                  \"No disponible\"\r\n                )}\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Pagarés\",\r\n      children: [\r\n        {\r\n          title: \"Documento\",\r\n          dataIndex: \"infoPaymentDocument\",\r\n          key: \"infoPaymentDocument\",\r\n          align: \"center\",\r\n          render: (doc, record) => {\r\n            const dataDocument =\r\n              isNil(doc) === false && isEmpty(doc) === false\r\n                ? JSON.parse(doc)\r\n                : [];\r\n            const dataObjectDocument =\r\n              isEmpty(dataDocument) === false &&\r\n              isNil(dataDocument[0]) === false\r\n                ? dataDocument[0]\r\n                : {};\r\n            const documentId =\r\n              isEmpty(dataObjectDocument.idDocument) === false &&\r\n              isNil(dataObjectDocument.idDocument) === false\r\n                ? dataObjectDocument.idDocument\r\n                : \"\";\r\n            const bucketSource =\r\n              isEmpty(dataObjectDocument.bucketSource) === false &&\r\n              isNil(dataObjectDocument.bucketSource) === false\r\n                ? dataObjectDocument.bucketSource\r\n                : \"\";\r\n            const extension =\r\n              isEmpty(dataObjectDocument.extension) === false &&\r\n              isNil(dataObjectDocument.extension) === false\r\n                ? dataObjectDocument.extension\r\n                : \"\";\r\n            let url = \"\";\r\n\r\n            if (extension === \"docx\" || extension === \"pdf\") {\r\n              url = `/api/viewFilesDocx/${documentId}/${bucketSource}`;\r\n            } else {\r\n              url = `${ENVIROMENT}/api/viewFile/${documentId}/${bucketSource}`;\r\n            }\r\n\r\n            return (\r\n              <div>\r\n                {isEmpty(documentId) === false &&\r\n                isEmpty(bucketSource) === false &&\r\n                isEmpty(extension) === false ? (\r\n                  <>\r\n                    <Button\r\n                      type=\"link\"\r\n                      size=\"small\"\r\n                      onClick={() => {\r\n                        setDocumentUrl({ url, extension });\r\n                        setIsVisibleViewImage(!isVisibleViewImage);\r\n                      }}\r\n                    >\r\n                      Ver\r\n                    </Button>\r\n                    <a\r\n                      href={`${ENVIROMENT}/api/downloadFile/${documentId}/${bucketSource}/Pagare_${record.idContract}/${extension}`}\r\n                      className=\"download\"\r\n                      download\r\n                      style={{ fontSize: 14 }}\r\n                    >\r\n                      Descargar\r\n                    </a>\r\n                  </>\r\n                ) : (\r\n                  \"No disponible\"\r\n                )}\r\n              </div>\r\n            );\r\n          },\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Modificación documentos legales\",\r\n      dataIndex: \"hasAllDocumentation\",\r\n      key: \"hasAllDocumentationPayment\",\r\n      align: \"center\",\r\n      render: (documents, record) => {\r\n        return (\r\n          <div>\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              style={{ border: \"none\", background: \"transparent\" }}\r\n              onClick={() => {\r\n                if (documents === false) {\r\n                  handlerCallContractDocument(record.idContract);\r\n                  setIsVisibleAddDocs(!isVisibleAddDocs);\r\n                }\r\n              }}\r\n            >\r\n              {documents === false ? (\r\n                <img src={DocumentIcon} alt=\"backTo\" width=\"20\" />\r\n              ) : (\r\n                <img src={Lock} alt=\"backTo\" width=\"20\" />\r\n              )}\r\n            </button>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    { title: \"Incidencias\", dataIndex: \"incidents\", key: \"incidents\" },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    handlerCallGetLegalContractCoincidences();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <Modal\r\n        style={{ top: 20 }}\r\n        visible={isVisibleViewImage}\r\n        closable={false}\r\n        footer={false}\r\n        className=\"modal-signature-contract\"\r\n      >\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setIsVisibleViewImage(!isVisibleViewImage);\r\n                setIsVisibleMeessages(false);\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>\r\n              {isVisibleMeessages === false ? \"Documento\" : \"Conversación\"}\r\n            </h1>\r\n          </div>\r\n          {isVisibleMeessages === false ? (\r\n            <div className=\"contract-children-information\">\r\n              {documentUrl.extension === \"docx\" ||\r\n              documentUrl.extension === \"pdf\" ? (\r\n                <iframe\r\n                  className=\"iframe-docx-hfy\"\r\n                  src={`https://docs.google.com/gview?url=${ENVIROMENT}${documentUrl.url}&embedded=true`}\r\n                />\r\n              ) : (\r\n                <Magnifier src={documentUrl.url} />\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {isEmpty(dataMessages) === false ? (\r\n                <Timeline>\r\n                  {dataMessages.map((row) => {\r\n                    return (\r\n                      <Timeline.Item>\r\n                        <div style={{ marginBottom: \"15px\" }}>\r\n                          <p style={{ margin: \"0px\" }}>\r\n                            <strong>\r\n                              {row.sentByUser} | {row.sentAt}\r\n                            </strong>\r\n                          </p>\r\n                          {row.customerMessage}\r\n                        </div>\r\n                        {isNil(row.sentAtParent) === false && (\r\n                          <Timeline>\r\n                            <Timeline.Item>\r\n                              <div>\r\n                                <p style={{ margin: \"0px\" }}>\r\n                                  <strong>\r\n                                    {row.sentByUserParent} | {row.sentAtParent}\r\n                                  </strong>\r\n                                </p>\r\n                                {row.customerMessageParent}\r\n                              </div>\r\n                            </Timeline.Item>\r\n                          </Timeline>\r\n                        )}\r\n                      </Timeline.Item>\r\n                    );\r\n                  })}\r\n                </Timeline>\r\n              ) : (\r\n                <strong style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                  Aún no hay una Conversación\r\n                </strong>\r\n              )}\r\n            </>\r\n          )}\r\n        </div>\r\n      </Modal>\r\n      <SectionUploadDocument\r\n        dataDocuments={dataDocuments}\r\n        isModalVisible={isVisibleAddDocs}\r\n        onClose={() => {\r\n          setIsVisibleAddDocs(!isVisibleAddDocs);\r\n        }}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataProfile.showName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataProfile.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user-admin\">\r\n          <div className=\"renter-card-information total-width\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Información legal</span>\r\n            </div>\r\n            <div className=\"section-information-renters\">\r\n              <Table\r\n                columns={columns}\r\n                dataSource={dataCoincidences}\r\n                className=\"table-users-hfy\"\r\n                size=\"small\"\r\n                bordered\r\n                scroll={{ x: 3500 }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callGetLegalContractCoincidences: (data) =>\r\n    dispatch(callGetLegalContractCoincidences(data)),\r\n  callGetContractDocument: (data) => dispatch(callGetContractDocument(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Attorney);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administratorControlDesk.jsx",["557","558","559","560"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwnerControl.jsx",["561","562","563","564","565","566"],"import React, { useState } from \"react\";\r\nimport {\r\n  Skeleton,\r\n  Table,\r\n  Tag,\r\n  Button,\r\n  Popover,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Progress,\r\n} from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport {\r\n  CheckSquareOutlined,\r\n  CheckOutlined,\r\n  CheckCircleTwoTone,\r\n  EditTwoTone,\r\n} from \"@ant-design/icons\";\r\nimport EmptyTenant from \"../../../assets/icons/tenantEmpty.svg\";\r\nimport DocumentIcon from \"../../../assets/icons/DocumentsIcon.svg\";\r\nimport Lock from \"../../../assets/icons/Lock.svg\";\r\n\r\nmoment.locale(\"es\");\r\nconst { Option } = Select;\r\n\r\nconst SectionCardOwner = (props) => {\r\n  const {\r\n    dataCoincidences,\r\n    finishCallApis,\r\n    onOpenDetail,\r\n    onGetPolicyStatus,\r\n    dataAllPolicyStatus,\r\n    onClosePolicy,\r\n    onOpenUploadDocument,\r\n  } = props;\r\n\r\n  const [openPopover, setOpenPopover] = useState({});\r\n  const [selectPolicy, setSelectPolicy] = useState(null);\r\n\r\n  const renderCardComponent = (status, record) => {\r\n    let component = <div />;\r\n    const contractStatus = record.contractStatus;\r\n    if (status === 1) {\r\n      component = (\r\n        <Popover\r\n          visible={\r\n            isNil(openPopover[`popover1-${record.idContract}`]) === false\r\n              ? openPopover[`popover1-${record.idContract}`]\r\n              : false\r\n          }\r\n          content={\r\n            <>\r\n              <Row style={{ marginBottom: 10 }}>\r\n                <Col span={24}>\r\n                  <Select\r\n                    placeholder=\"Póliza por\"\r\n                    onChange={(value, option) => {\r\n                      setSelectPolicy(value);\r\n                    }}\r\n                    style={{ width: \"100%\" }}\r\n                  >\r\n                    {isEmpty(dataAllPolicyStatus) === false &&\r\n                      dataAllPolicyStatus.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idPolicyStatus}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.text}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={6} />\r\n                <Col span={12}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={<CheckOutlined />}\r\n                    size=\"small\"\r\n                    className=\"color-green\"\r\n                    onClick={() => {\r\n                      onClosePolicy({\r\n                        ...record,\r\n                        idPolicyStatus: selectPolicy,\r\n                      });\r\n                      setOpenPopover({\r\n                        [`popover1-${record.idContract}`]: false,\r\n                      });\r\n                    }}\r\n                  >\r\n                    Aceptar\r\n                  </Button>\r\n                </Col>\r\n                <Col span={6} />\r\n              </Row>\r\n            </>\r\n          }\r\n          title={\r\n            <div>\r\n              <span>Asignar cierre de Póliza</span>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setOpenPopover({\r\n                    [`popover1-${record.idContract}`]: false,\r\n                  });\r\n                }}\r\n                style={{\r\n                  marginLeft: 5,\r\n                  background: \"transparent\",\r\n                  border: \"none\",\r\n                }}\r\n              >\r\n                <i className=\"fa fa-times\" />\r\n              </button>\r\n            </div>\r\n          }\r\n          trigger=\"click\"\r\n        >\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            icon={<CheckSquareOutlined />}\r\n            size=\"small\"\r\n            onClick={() => {\r\n              setOpenPopover({\r\n                [`popover1-${record.idContract}`]: true,\r\n              });\r\n              onGetPolicyStatus(record.idContract);\r\n            }}\r\n          >\r\n            {record.policyStatus}\r\n          </Button>\r\n        </Popover>\r\n      );\r\n    } else if (status === 2 || status === 3) {\r\n      component = (\r\n        <Tag\r\n          icon={\r\n            <span className=\"anticon\">\r\n              <i className=\"fa fa-handshake-o\" aria-hidden=\"true\" />\r\n            </span>\r\n          }\r\n          color=\"#00bb2d\"\r\n        >\r\n          {record.policyStatus}\r\n        </Tag>\r\n      );\r\n    } else if (status === 4) {\r\n      component = (\r\n        <Tag\r\n          icon={\r\n            <span className=\"anticon\">\r\n              <i className=\"fa fa-ban\" aria-hidden=\"true\" />\r\n            </span>\r\n          }\r\n          color=\"#ff0000\"\r\n        >\r\n          {record.policyStatus}\r\n        </Tag>\r\n      );\r\n    }\r\n    return component;\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Inquilino\",\r\n      children: [\r\n        {\r\n          title: \"Nombre\",\r\n          width: 230,\r\n          dataIndex: \"customerTenantFullName\",\r\n          key: \"customerTenantFullName\",\r\n          render: (text, record) => (\r\n            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n              <a\r\n                onClick={() => {\r\n                  onOpenDetail(record.idContract, 2, record);\r\n                }}\r\n                style={{ color: \"gray\", marginRight: \"5PX\" }}\r\n              >\r\n                {text}\r\n              </a>\r\n              {record.hasCustomerTenantFinishedTF === true ? (\r\n                <CheckCircleTwoTone twoToneColor=\"#32cd32\" />\r\n              ) : (\r\n                <EditTwoTone twoToneColor=\"#4169e1\" />\r\n              )}\r\n            </div>\r\n          ),\r\n        },\r\n        {\r\n          title: \"Fecha inicial\",\r\n          dataIndex: \"tenantStartedAt\",\r\n          key: \"tenantStartedAt\",\r\n        },\r\n        {\r\n          title: \"Avance formulario\",\r\n          dataIndex: \"tenantPercentCompleted\",\r\n          key: \"tenantPercentCompleted\",\r\n          width: 230,\r\n          render: (percent, record) => (\r\n            <div style={{ padding: \"0px 15px 0px 0px\" }}>\r\n              <Progress percent={percent} size=\"small\" status=\"succes\" />\r\n            </div>\r\n          ),\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      title: \"Evaluación inquilino disponible\",\r\n      dataIndex: \"canTenantBeEvaluated\",\r\n      key: \"canTenantBeEvaluated\",\r\n      render: (status, record) => {\r\n        return <span>{status === true ? \"Si\" : \"No\"}</span>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Referencias por evaluar\",\r\n      dataIndex: \"hasPendingReferences\",\r\n      key: \"hasPendingReferences\",\r\n      render: (status, record) => {\r\n        return <span>{status === true ? \"Si\" : \"No\"}</span>;\r\n      },\r\n    },\r\n    {\r\n      title: \"Contrato\",\r\n      dataIndex: \"contractStatus\",\r\n      key: \"contractStatus\",\r\n      align: \"center\",\r\n      render: (status, record) => {\r\n        return (\r\n          <span>\r\n            <Tag color={record.contractStatusStyle} key=\"1\">\r\n              {status}\r\n            </Tag>\r\n          </span>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: \"Monto Renta\",\r\n      dataIndex: \"currentRent\",\r\n      key: \"currentRent\",\r\n      width: 150,\r\n    },\r\n    {\r\n      title: \"Folio\",\r\n      dataIndex: \"hfInvoice\",\r\n      key: \"hfInvoice\",\r\n      render: (label, record) => {\r\n        const recorsStyle =\r\n          isNil(record.hfInvoiceStyle) === false &&\r\n          isEmpty(record.hfInvoiceStyle) === false\r\n            ? JSON.parse(record.hfInvoiceStyle)\r\n            : {};\r\n        return <span style={recorsStyle}>{label}</span>;\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"renter-card-information total-width\">\r\n      <div className=\"title-cards flex-title-card\">\r\n        <span>Usuarios</span>\r\n      </div>\r\n      <div className=\"section-information-renters\">\r\n        {isEmpty(dataCoincidences) === false && finishCallApis === true && (\r\n          <Table\r\n            columns={columns}\r\n            dataSource={dataCoincidences}\r\n            className=\"table-users-hfy\"\r\n            size=\"small\"\r\n            bordered\r\n            scroll={{ x: 1500 }}\r\n          />\r\n        )}\r\n        {finishCallApis === false && <Skeleton loading active />}\r\n      </div>\r\n      {isEmpty(dataCoincidences) === true && finishCallApis === true && (\r\n        <div className=\"empty-tenants\">\r\n          <img src={EmptyTenant} alt=\"\" />\r\n          <span>Aun no tienes propietarios</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionCardOwner;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenantControl.jsx",["567","568","569","570","571","572","573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603"],{"ruleId":"604","replacedBy":"605"},{"ruleId":"606","replacedBy":"607"},{"ruleId":"608","severity":1,"message":"609","line":11,"column":8,"nodeType":"610","messageId":"611","endLine":11,"endColumn":20},{"ruleId":"608","severity":1,"message":"612","line":45,"column":20,"nodeType":"610","messageId":"611","endLine":45,"endColumn":25},{"ruleId":"608","severity":1,"message":"613","line":4,"column":8,"nodeType":"610","messageId":"611","endLine":4,"endColumn":15},{"ruleId":"608","severity":1,"message":"614","line":4,"column":40,"nodeType":"610","messageId":"611","endLine":4,"endColumn":45},{"ruleId":"615","severity":1,"message":"616","line":13,"column":1,"nodeType":"617","endLine":22,"endColumn":3},{"ruleId":"608","severity":1,"message":"618","line":9,"column":3,"nodeType":"610","messageId":"611","endLine":9,"endColumn":8},{"ruleId":"619","severity":1,"message":"620","line":149,"column":35,"nodeType":"621","messageId":"622","endLine":149,"endColumn":37},{"ruleId":"623","severity":1,"message":"624","line":1097,"column":6,"nodeType":"625","endLine":1097,"endColumn":8,"suggestions":"626"},{"ruleId":"623","severity":1,"message":"627","line":87,"column":6,"nodeType":"625","endLine":87,"endColumn":8,"suggestions":"628"},{"ruleId":"608","severity":1,"message":"629","line":1,"column":27,"nodeType":"610","messageId":"611","endLine":1,"endColumn":36},{"ruleId":"608","severity":1,"message":"630","line":6,"column":10,"nodeType":"610","messageId":"611","endLine":6,"endColumn":15},{"ruleId":"608","severity":1,"message":"631","line":6,"column":38,"nodeType":"610","messageId":"611","endLine":6,"endColumn":46},{"ruleId":"608","severity":1,"message":"632","line":8,"column":3,"nodeType":"610","messageId":"611","endLine":8,"endColumn":15},{"ruleId":"608","severity":1,"message":"633","line":9,"column":3,"nodeType":"610","messageId":"611","endLine":9,"endColumn":16},{"ruleId":"608","severity":1,"message":"634","line":23,"column":9,"nodeType":"610","messageId":"611","endLine":23,"endColumn":15},{"ruleId":"635","severity":1,"message":"636","line":96,"column":9,"nodeType":"637","endLine":102,"endColumn":10},{"ruleId":"638","severity":1,"message":"639","line":183,"column":9,"nodeType":"637","endLine":188,"endColumn":11},{"ruleId":"623","severity":1,"message":"640","line":267,"column":6,"nodeType":"625","endLine":267,"endColumn":8,"suggestions":"641"},{"ruleId":"638","severity":1,"message":"639","line":311,"column":23,"nodeType":"637","endLine":315,"endColumn":25},{"ruleId":"638","severity":1,"message":"639","line":367,"column":23,"nodeType":"637","endLine":371,"endColumn":25},{"ruleId":"638","severity":1,"message":"639","line":408,"column":19,"nodeType":"637","endLine":408,"endColumn":75},{"ruleId":"638","severity":1,"message":"639","line":420,"column":23,"nodeType":"637","endLine":420,"endColumn":74},{"ruleId":"608","severity":1,"message":"629","line":1,"column":27,"nodeType":"610","messageId":"611","endLine":1,"endColumn":36},{"ruleId":"608","severity":1,"message":"613","line":4,"column":8,"nodeType":"610","messageId":"611","endLine":4,"endColumn":15},{"ruleId":"608","severity":1,"message":"642","line":5,"column":8,"nodeType":"610","messageId":"611","endLine":5,"endColumn":20},{"ruleId":"608","severity":1,"message":"643","line":7,"column":3,"nodeType":"610","messageId":"611","endLine":7,"endColumn":9},{"ruleId":"608","severity":1,"message":"644","line":8,"column":3,"nodeType":"610","messageId":"611","endLine":8,"endColumn":7},{"ruleId":"608","severity":1,"message":"618","line":10,"column":3,"nodeType":"610","messageId":"611","endLine":10,"endColumn":8},{"ruleId":"608","severity":1,"message":"645","line":11,"column":3,"nodeType":"610","messageId":"611","endLine":11,"endColumn":6},{"ruleId":"608","severity":1,"message":"646","line":12,"column":3,"nodeType":"610","messageId":"611","endLine":12,"endColumn":6},{"ruleId":"608","severity":1,"message":"647","line":14,"column":3,"nodeType":"610","messageId":"611","endLine":14,"endColumn":7},{"ruleId":"608","severity":1,"message":"648","line":15,"column":3,"nodeType":"610","messageId":"611","endLine":15,"endColumn":10},{"ruleId":"608","severity":1,"message":"649","line":18,"column":3,"nodeType":"610","messageId":"611","endLine":18,"endColumn":21},{"ruleId":"608","severity":1,"message":"632","line":19,"column":3,"nodeType":"610","messageId":"611","endLine":19,"endColumn":15},{"ruleId":"608","severity":1,"message":"650","line":20,"column":3,"nodeType":"610","messageId":"611","endLine":20,"endColumn":15},{"ruleId":"608","severity":1,"message":"651","line":21,"column":3,"nodeType":"610","messageId":"611","endLine":21,"endColumn":16},{"ruleId":"608","severity":1,"message":"634","line":25,"column":9,"nodeType":"610","messageId":"611","endLine":25,"endColumn":15},{"ruleId":"623","severity":1,"message":"652","line":709,"column":6,"nodeType":"625","endLine":709,"endColumn":8,"suggestions":"653"},{"ruleId":"623","severity":1,"message":"654","line":715,"column":6,"nodeType":"625","endLine":715,"endColumn":25,"suggestions":"655"},{"ruleId":"608","severity":1,"message":"656","line":763,"column":24,"nodeType":"610","messageId":"611","endLine":763,"endColumn":39},{"ruleId":"608","severity":1,"message":"657","line":21,"column":25,"nodeType":"610","messageId":"611","endLine":21,"endColumn":31},{"ruleId":"608","severity":1,"message":"658","line":54,"column":5,"nodeType":"610","messageId":"611","endLine":54,"endColumn":27},{"ruleId":"608","severity":1,"message":"659","line":125,"column":9,"nodeType":"610","messageId":"611","endLine":125,"endColumn":15},{"ruleId":"608","severity":1,"message":"660","line":197,"column":13,"nodeType":"610","messageId":"611","endLine":197,"endColumn":27},{"ruleId":"608","severity":1,"message":"661","line":237,"column":7,"nodeType":"610","messageId":"611","endLine":237,"endColumn":23},{"ruleId":"623","severity":1,"message":"662","line":469,"column":6,"nodeType":"625","endLine":469,"endColumn":8,"suggestions":"663"},{"ruleId":"608","severity":1,"message":"664","line":712,"column":27,"nodeType":"610","messageId":"611","endLine":712,"endColumn":39},{"ruleId":"608","severity":1,"message":"665","line":712,"column":41,"nodeType":"610","messageId":"611","endLine":712,"endColumn":59},{"ruleId":"608","severity":1,"message":"656","line":778,"column":24,"nodeType":"610","messageId":"611","endLine":778,"endColumn":39},{"ruleId":"623","severity":1,"message":"666","line":123,"column":6,"nodeType":"625","endLine":123,"endColumn":8,"suggestions":"667"},{"ruleId":"608","severity":1,"message":"656","line":178,"column":24,"nodeType":"610","messageId":"611","endLine":178,"endColumn":39},{"ruleId":"623","severity":1,"message":"652","line":495,"column":6,"nodeType":"625","endLine":495,"endColumn":8,"suggestions":"668"},{"ruleId":"608","severity":1,"message":"656","line":542,"column":24,"nodeType":"610","messageId":"611","endLine":542,"endColumn":39},{"ruleId":"608","severity":1,"message":"669","line":60,"column":5,"nodeType":"610","messageId":"611","endLine":60,"endColumn":28},{"ruleId":"608","severity":1,"message":"670","line":222,"column":11,"nodeType":"610","messageId":"611","endLine":222,"endColumn":22},{"ruleId":"608","severity":1,"message":"671","line":394,"column":13,"nodeType":"610","messageId":"611","endLine":394,"endColumn":21},{"ruleId":"608","severity":1,"message":"671","line":476,"column":13,"nodeType":"610","messageId":"611","endLine":476,"endColumn":21},{"ruleId":"623","severity":1,"message":"666","line":595,"column":6,"nodeType":"625","endLine":595,"endColumn":8,"suggestions":"672"},{"ruleId":"608","severity":1,"message":"656","line":839,"column":24,"nodeType":"610","messageId":"611","endLine":839,"endColumn":39},{"ruleId":"608","severity":1,"message":"673","line":50,"column":9,"nodeType":"610","messageId":"611","endLine":50,"endColumn":18},{"ruleId":"608","severity":1,"message":"674","line":51,"column":9,"nodeType":"610","messageId":"611","endLine":51,"endColumn":21},{"ruleId":"608","severity":1,"message":"660","line":271,"column":13,"nodeType":"610","messageId":"611","endLine":271,"endColumn":27},{"ruleId":"623","severity":1,"message":"675","line":290,"column":6,"nodeType":"625","endLine":290,"endColumn":8,"suggestions":"676"},{"ruleId":"608","severity":1,"message":"656","line":361,"column":24,"nodeType":"610","messageId":"611","endLine":361,"endColumn":39},{"ruleId":"608","severity":1,"message":"657","line":32,"column":25,"nodeType":"610","messageId":"611","endLine":32,"endColumn":31},{"ruleId":"608","severity":1,"message":"658","line":63,"column":5,"nodeType":"610","messageId":"611","endLine":63,"endColumn":27},{"ruleId":"608","severity":1,"message":"660","line":277,"column":13,"nodeType":"610","messageId":"611","endLine":277,"endColumn":27},{"ruleId":"608","severity":1,"message":"660","line":303,"column":13,"nodeType":"610","messageId":"611","endLine":303,"endColumn":27},{"ruleId":"608","severity":1,"message":"660","line":377,"column":13,"nodeType":"610","messageId":"611","endLine":377,"endColumn":27},{"ruleId":"623","severity":1,"message":"677","line":612,"column":6,"nodeType":"625","endLine":612,"endColumn":8,"suggestions":"678"},{"ruleId":"608","severity":1,"message":"656","line":804,"column":24,"nodeType":"610","messageId":"611","endLine":804,"endColumn":39},{"ruleId":"608","severity":1,"message":"679","line":62,"column":9,"nodeType":"610","messageId":"611","endLine":62,"endColumn":20},{"ruleId":"623","severity":1,"message":"680","line":85,"column":6,"nodeType":"625","endLine":85,"endColumn":23,"suggestions":"681"},{"ruleId":"682","severity":1,"message":"683","line":118,"column":15,"nodeType":"637","endLine":121,"endColumn":16},{"ruleId":"608","severity":1,"message":"684","line":33,"column":10,"nodeType":"610","messageId":"611","endLine":33,"endColumn":18},{"ruleId":"608","severity":1,"message":"685","line":33,"column":20,"nodeType":"610","messageId":"611","endLine":33,"endColumn":31},{"ruleId":"608","severity":1,"message":"686","line":114,"column":31,"nodeType":"610","messageId":"611","endLine":114,"endColumn":45},{"ruleId":"608","severity":1,"message":"687","line":114,"column":47,"nodeType":"610","messageId":"611","endLine":114,"endColumn":52},{"ruleId":"623","severity":1,"message":"688","line":50,"column":6,"nodeType":"625","endLine":50,"endColumn":25,"suggestions":"689"},{"ruleId":"608","severity":1,"message":"686","line":328,"column":31,"nodeType":"610","messageId":"611","endLine":328,"endColumn":45},{"ruleId":"608","severity":1,"message":"687","line":329,"column":31,"nodeType":"610","messageId":"611","endLine":329,"endColumn":36},{"ruleId":"608","severity":1,"message":"686","line":491,"column":31,"nodeType":"610","messageId":"611","endLine":491,"endColumn":45},{"ruleId":"608","severity":1,"message":"687","line":492,"column":31,"nodeType":"610","messageId":"611","endLine":492,"endColumn":36},{"ruleId":"608","severity":1,"message":"686","line":528,"column":31,"nodeType":"610","messageId":"611","endLine":528,"endColumn":45},{"ruleId":"608","severity":1,"message":"687","line":529,"column":31,"nodeType":"610","messageId":"611","endLine":529,"endColumn":36},{"ruleId":"608","severity":1,"message":"690","line":10,"column":9,"nodeType":"610","messageId":"611","endLine":10,"endColumn":17},{"ruleId":"608","severity":1,"message":"686","line":122,"column":31,"nodeType":"610","messageId":"611","endLine":122,"endColumn":45},{"ruleId":"608","severity":1,"message":"687","line":122,"column":47,"nodeType":"610","messageId":"611","endLine":122,"endColumn":52},{"ruleId":"608","severity":1,"message":"691","line":125,"column":27,"nodeType":"610","messageId":"611","endLine":125,"endColumn":42},{"ruleId":"635","severity":1,"message":"692","line":23,"column":11,"nodeType":"637","endLine":30,"endColumn":12},{"ruleId":"693","severity":1,"message":"694","line":29,"column":13,"nodeType":"695","endLine":29,"endColumn":28},{"ruleId":"635","severity":1,"message":"636","line":83,"column":19,"nodeType":"637","endLine":83,"endColumn":22},{"ruleId":"693","severity":1,"message":"694","line":64,"column":28,"nodeType":"695","endLine":64,"endColumn":43},{"ruleId":"635","severity":1,"message":"692","line":74,"column":11,"nodeType":"637","endLine":81,"endColumn":12},{"ruleId":"693","severity":1,"message":"694","line":80,"column":13,"nodeType":"695","endLine":80,"endColumn":28},{"ruleId":"696","severity":1,"message":"697","line":132,"column":25,"nodeType":"695","endLine":132,"endColumn":45},{"ruleId":"608","severity":1,"message":"686","line":204,"column":41,"nodeType":"610","messageId":"611","endLine":204,"endColumn":55},{"ruleId":"608","severity":1,"message":"687","line":205,"column":41,"nodeType":"610","messageId":"611","endLine":205,"endColumn":46},{"ruleId":"635","severity":1,"message":"636","line":464,"column":31,"nodeType":"637","endLine":464,"endColumn":34},{"ruleId":"635","severity":1,"message":"636","line":496,"column":43,"nodeType":"637","endLine":496,"endColumn":73},{"ruleId":"635","severity":1,"message":"636","line":515,"column":31,"nodeType":"637","endLine":515,"endColumn":34},{"ruleId":"635","severity":1,"message":"692","line":549,"column":35,"nodeType":"637","endLine":557,"endColumn":36},{"ruleId":"693","severity":1,"message":"694","line":556,"column":37,"nodeType":"695","endLine":556,"endColumn":52},{"ruleId":"696","severity":1,"message":"697","line":570,"column":30,"nodeType":"695","endLine":570,"endColumn":50},{"ruleId":"635","severity":1,"message":"692","line":600,"column":29,"nodeType":"637","endLine":607,"endColumn":30},{"ruleId":"693","severity":1,"message":"694","line":606,"column":31,"nodeType":"695","endLine":606,"endColumn":46},{"ruleId":"696","severity":1,"message":"697","line":623,"column":25,"nodeType":"695","endLine":623,"endColumn":45},{"ruleId":"635","severity":1,"message":"636","line":659,"column":17,"nodeType":"637","endLine":673,"endColumn":18},{"ruleId":"635","severity":1,"message":"636","line":693,"column":17,"nodeType":"637","endLine":707,"endColumn":18},{"ruleId":"635","severity":1,"message":"636","line":721,"column":17,"nodeType":"637","endLine":735,"endColumn":18},{"ruleId":"696","severity":1,"message":"697","line":743,"column":25,"nodeType":"695","endLine":743,"endColumn":45},{"ruleId":"635","severity":1,"message":"636","line":758,"column":29,"nodeType":"637","endLine":770,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":783,"column":33,"nodeType":"637","endLine":795,"endColumn":34},{"ruleId":"635","severity":1,"message":"636","line":805,"column":33,"nodeType":"637","endLine":817,"endColumn":34},{"ruleId":"635","severity":1,"message":"636","line":829,"column":31,"nodeType":"637","endLine":841,"endColumn":32},{"ruleId":"635","severity":1,"message":"636","line":854,"column":29,"nodeType":"637","endLine":866,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":876,"column":29,"nodeType":"637","endLine":888,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":900,"column":29,"nodeType":"637","endLine":912,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":922,"column":29,"nodeType":"637","endLine":934,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":956,"column":35,"nodeType":"637","endLine":969,"endColumn":36},{"ruleId":"635","severity":1,"message":"636","line":982,"column":39,"nodeType":"637","endLine":995,"endColumn":40},{"ruleId":"635","severity":1,"message":"636","line":1005,"column":39,"nodeType":"637","endLine":1018,"endColumn":40},{"ruleId":"635","severity":1,"message":"636","line":1030,"column":37,"nodeType":"637","endLine":1043,"endColumn":38},{"ruleId":"696","severity":1,"message":"697","line":1062,"column":25,"nodeType":"695","endLine":1062,"endColumn":45},{"ruleId":"693","severity":1,"message":"694","line":39,"column":28,"nodeType":"695","endLine":39,"endColumn":43},{"ruleId":"635","severity":1,"message":"692","line":49,"column":11,"nodeType":"637","endLine":56,"endColumn":12},{"ruleId":"693","severity":1,"message":"694","line":55,"column":13,"nodeType":"695","endLine":55,"endColumn":28},{"ruleId":"696","severity":1,"message":"697","line":105,"column":25,"nodeType":"695","endLine":105,"endColumn":45},{"ruleId":"635","severity":1,"message":"636","line":169,"column":23,"nodeType":"637","endLine":169,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":200,"column":35,"nodeType":"637","endLine":200,"endColumn":65},{"ruleId":"635","severity":1,"message":"636","line":219,"column":23,"nodeType":"637","endLine":219,"endColumn":26},{"ruleId":"696","severity":1,"message":"697","line":226,"column":30,"nodeType":"695","endLine":226,"endColumn":50},{"ruleId":"635","severity":1,"message":"636","line":245,"column":28,"nodeType":"637","endLine":245,"endColumn":31},{"ruleId":"696","severity":1,"message":"697","line":251,"column":25,"nodeType":"695","endLine":251,"endColumn":45},{"ruleId":"635","severity":1,"message":"636","line":287,"column":17,"nodeType":"637","endLine":299,"endColumn":18},{"ruleId":"635","severity":1,"message":"636","line":327,"column":17,"nodeType":"637","endLine":339,"endColumn":18},{"ruleId":"696","severity":1,"message":"697","line":347,"column":25,"nodeType":"695","endLine":347,"endColumn":45},{"ruleId":"635","severity":1,"message":"636","line":358,"column":25,"nodeType":"637","endLine":370,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":380,"column":25,"nodeType":"637","endLine":392,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":404,"column":23,"nodeType":"637","endLine":416,"endColumn":24},{"ruleId":"696","severity":1,"message":"697","line":426,"column":25,"nodeType":"695","endLine":426,"endColumn":45},{"ruleId":"608","severity":1,"message":"642","line":4,"column":8,"nodeType":"610","messageId":"611","endLine":4,"endColumn":20},{"ruleId":"608","severity":1,"message":"643","line":6,"column":3,"nodeType":"610","messageId":"611","endLine":6,"endColumn":9},{"ruleId":"608","severity":1,"message":"698","line":7,"column":3,"nodeType":"610","messageId":"611","endLine":7,"endColumn":9},{"ruleId":"608","severity":1,"message":"644","line":8,"column":3,"nodeType":"610","messageId":"611","endLine":8,"endColumn":7},{"ruleId":"623","severity":1,"message":"688","line":76,"column":6,"nodeType":"625","endLine":76,"endColumn":23,"suggestions":"699"},{"ruleId":"623","severity":1,"message":"688","line":96,"column":6,"nodeType":"625","endLine":96,"endColumn":24,"suggestions":"700"},{"ruleId":"623","severity":1,"message":"688","line":116,"column":6,"nodeType":"625","endLine":116,"endColumn":24,"suggestions":"701"},{"ruleId":"623","severity":1,"message":"688","line":134,"column":6,"nodeType":"625","endLine":134,"endColumn":25,"suggestions":"702"},{"ruleId":"608","severity":1,"message":"703","line":45,"column":9,"nodeType":"610","messageId":"611","endLine":45,"endColumn":28},{"ruleId":"608","severity":1,"message":"704","line":47,"column":11,"nodeType":"610","messageId":"611","endLine":47,"endColumn":25},{"ruleId":"635","severity":1,"message":"636","line":188,"column":15,"nodeType":"637","endLine":193,"endColumn":16},{"ruleId":"635","severity":1,"message":"636","line":232,"column":15,"nodeType":"637","endLine":237,"endColumn":16},{"ruleId":"635","severity":1,"message":"636","line":272,"column":9,"nodeType":"637","endLine":279,"endColumn":10},{"ruleId":"608","severity":1,"message":"704","line":355,"column":15,"nodeType":"610","messageId":"611","endLine":355,"endColumn":29},{"ruleId":"608","severity":1,"message":"613","line":2,"column":8,"nodeType":"610","messageId":"611","endLine":2,"endColumn":15},{"ruleId":"705","severity":1,"message":"706","line":15,"column":5,"nodeType":"707","messageId":"708","endLine":34,"endColumn":6},{"ruleId":"705","severity":1,"message":"706","line":43,"column":5,"nodeType":"707","messageId":"708","endLine":84,"endColumn":6},{"ruleId":"705","severity":1,"message":"706","line":97,"column":5,"nodeType":"707","messageId":"708","endLine":117,"endColumn":6},{"ruleId":"619","severity":1,"message":"620","line":145,"column":18,"nodeType":"621","messageId":"622","endLine":145,"endColumn":20},{"ruleId":"619","severity":1,"message":"620","line":168,"column":29,"nodeType":"621","messageId":"622","endLine":168,"endColumn":31},{"ruleId":"619","severity":1,"message":"620","line":183,"column":22,"nodeType":"621","messageId":"622","endLine":183,"endColumn":24},{"ruleId":"619","severity":1,"message":"620","line":185,"column":22,"nodeType":"621","messageId":"622","endLine":185,"endColumn":24},{"ruleId":"608","severity":1,"message":"656","line":343,"column":24,"nodeType":"610","messageId":"611","endLine":343,"endColumn":39},{"ruleId":"623","severity":1,"message":"709","line":70,"column":6,"nodeType":"625","endLine":70,"endColumn":39,"suggestions":"710"},{"ruleId":"623","severity":1,"message":"688","line":80,"column":6,"nodeType":"625","endLine":80,"endColumn":25,"suggestions":"711"},{"ruleId":"608","severity":1,"message":"686","line":378,"column":29,"nodeType":"610","messageId":"611","endLine":378,"endColumn":43},{"ruleId":"608","severity":1,"message":"687","line":378,"column":45,"nodeType":"610","messageId":"611","endLine":378,"endColumn":50},{"ruleId":"608","severity":1,"message":"686","line":408,"column":29,"nodeType":"610","messageId":"611","endLine":408,"endColumn":43},{"ruleId":"608","severity":1,"message":"687","line":408,"column":45,"nodeType":"610","messageId":"611","endLine":408,"endColumn":50},{"ruleId":"608","severity":1,"message":"686","line":439,"column":29,"nodeType":"610","messageId":"611","endLine":439,"endColumn":43},{"ruleId":"608","severity":1,"message":"687","line":439,"column":45,"nodeType":"610","messageId":"611","endLine":439,"endColumn":50},{"ruleId":"623","severity":1,"message":"712","line":107,"column":6,"nodeType":"625","endLine":107,"endColumn":71,"suggestions":"713"},{"ruleId":"623","severity":1,"message":"688","line":117,"column":6,"nodeType":"625","endLine":117,"endColumn":25,"suggestions":"714"},{"ruleId":"623","severity":1,"message":"709","line":160,"column":6,"nodeType":"625","endLine":166,"endColumn":4,"suggestions":"715"},{"ruleId":"623","severity":1,"message":"688","line":176,"column":6,"nodeType":"625","endLine":176,"endColumn":25,"suggestions":"716"},{"ruleId":"623","severity":1,"message":"688","line":186,"column":6,"nodeType":"625","endLine":186,"endColumn":36,"suggestions":"717"},{"ruleId":"608","severity":1,"message":"686","line":1104,"column":35,"nodeType":"610","messageId":"611","endLine":1104,"endColumn":49},{"ruleId":"608","severity":1,"message":"687","line":1105,"column":35,"nodeType":"610","messageId":"611","endLine":1105,"endColumn":40},{"ruleId":"608","severity":1,"message":"718","line":27,"column":5,"nodeType":"610","messageId":"611","endLine":27,"endColumn":16},{"ruleId":"608","severity":1,"message":"719","line":32,"column":5,"nodeType":"610","messageId":"611","endLine":32,"endColumn":19},{"ruleId":"623","severity":1,"message":"720","line":75,"column":6,"nodeType":"625","endLine":75,"endColumn":37,"suggestions":"721"},{"ruleId":"608","severity":1,"message":"686","line":154,"column":29,"nodeType":"610","messageId":"611","endLine":154,"endColumn":43},{"ruleId":"608","severity":1,"message":"687","line":154,"column":45,"nodeType":"610","messageId":"611","endLine":154,"endColumn":50},{"ruleId":"608","severity":1,"message":"687","line":196,"column":45,"nodeType":"610","messageId":"611","endLine":196,"endColumn":50},{"ruleId":"608","severity":1,"message":"686","line":227,"column":29,"nodeType":"610","messageId":"611","endLine":227,"endColumn":43},{"ruleId":"608","severity":1,"message":"687","line":227,"column":45,"nodeType":"610","messageId":"611","endLine":227,"endColumn":50},{"ruleId":"608","severity":1,"message":"687","line":276,"column":45,"nodeType":"610","messageId":"611","endLine":276,"endColumn":50},{"ruleId":"623","severity":1,"message":"722","line":129,"column":6,"nodeType":"625","endLine":129,"endColumn":52,"suggestions":"723"},{"ruleId":"608","severity":1,"message":"724","line":686,"column":31,"nodeType":"610","messageId":"611","endLine":686,"endColumn":42},{"ruleId":"623","severity":1,"message":"709","line":64,"column":6,"nodeType":"625","endLine":64,"endColumn":20,"suggestions":"725"},{"ruleId":"623","severity":1,"message":"688","line":74,"column":6,"nodeType":"625","endLine":74,"endColumn":25,"suggestions":"726"},{"ruleId":"608","severity":1,"message":"686","line":306,"column":33,"nodeType":"610","messageId":"611","endLine":306,"endColumn":47},{"ruleId":"608","severity":1,"message":"687","line":306,"column":49,"nodeType":"610","messageId":"611","endLine":306,"endColumn":54},{"ruleId":"608","severity":1,"message":"727","line":87,"column":7,"nodeType":"610","messageId":"611","endLine":87,"endColumn":17},{"ruleId":"608","severity":1,"message":"656","line":333,"column":24,"nodeType":"610","messageId":"611","endLine":333,"endColumn":39},{"ruleId":"635","severity":1,"message":"636","line":249,"column":25,"nodeType":"637","endLine":249,"endColumn":28},{"ruleId":"623","severity":1,"message":"728","line":275,"column":6,"nodeType":"625","endLine":275,"endColumn":8,"suggestions":"729"},{"ruleId":"608","severity":1,"message":"656","line":353,"column":24,"nodeType":"610","messageId":"611","endLine":353,"endColumn":39},{"ruleId":"608","severity":1,"message":"730","line":5,"column":25,"nodeType":"610","messageId":"611","endLine":5,"endColumn":28},{"ruleId":"608","severity":1,"message":"731","line":5,"column":30,"nodeType":"610","messageId":"611","endLine":5,"endColumn":34},{"ruleId":"608","severity":1,"message":"732","line":5,"column":36,"nodeType":"610","messageId":"611","endLine":5,"endColumn":44},{"ruleId":"608","severity":1,"message":"733","line":5,"column":46,"nodeType":"610","messageId":"611","endLine":5,"endColumn":52},{"ruleId":"623","severity":1,"message":"734","line":119,"column":6,"nodeType":"625","endLine":119,"endColumn":8,"suggestions":"735"},{"ruleId":"608","severity":1,"message":"656","line":156,"column":24,"nodeType":"610","messageId":"611","endLine":156,"endColumn":39},{"ruleId":"608","severity":1,"message":"648","line":15,"column":3,"nodeType":"610","messageId":"611","endLine":15,"endColumn":10},{"ruleId":"608","severity":1,"message":"736","line":20,"column":3,"nodeType":"610","messageId":"611","endLine":20,"endColumn":19},{"ruleId":"608","severity":1,"message":"737","line":21,"column":3,"nodeType":"610","messageId":"611","endLine":21,"endColumn":21},{"ruleId":"608","severity":1,"message":"738","line":22,"column":3,"nodeType":"610","messageId":"611","endLine":22,"endColumn":14},{"ruleId":"608","severity":1,"message":"739","line":23,"column":3,"nodeType":"610","messageId":"611","endLine":23,"endColumn":25},{"ruleId":"635","severity":1,"message":"636","line":186,"column":23,"nodeType":"637","endLine":186,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":189,"column":23,"nodeType":"637","endLine":189,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":192,"column":23,"nodeType":"637","endLine":192,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":195,"column":23,"nodeType":"637","endLine":195,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":201,"column":17,"nodeType":"637","endLine":201,"endColumn":20},{"ruleId":"635","severity":1,"message":"636","line":228,"column":23,"nodeType":"637","endLine":228,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":231,"column":23,"nodeType":"637","endLine":231,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":234,"column":23,"nodeType":"637","endLine":234,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":237,"column":23,"nodeType":"637","endLine":237,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":240,"column":23,"nodeType":"637","endLine":240,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":243,"column":23,"nodeType":"637","endLine":243,"endColumn":26},{"ruleId":"635","severity":1,"message":"636","line":249,"column":17,"nodeType":"637","endLine":249,"endColumn":20},{"ruleId":"608","severity":1,"message":"704","line":402,"column":19,"nodeType":"610","messageId":"611","endLine":402,"endColumn":33},{"ruleId":"623","severity":1,"message":"740","line":625,"column":6,"nodeType":"625","endLine":625,"endColumn":8,"suggestions":"741"},{"ruleId":"682","severity":1,"message":"683","line":656,"column":17,"nodeType":"637","endLine":659,"endColumn":19},{"ruleId":"608","severity":1,"message":"656","line":746,"column":24,"nodeType":"610","messageId":"611","endLine":746,"endColumn":39},{"ruleId":"608","severity":1,"message":"670","line":126,"column":11,"nodeType":"610","messageId":"611","endLine":126,"endColumn":22},{"ruleId":"608","severity":1,"message":"671","line":244,"column":13,"nodeType":"610","messageId":"611","endLine":244,"endColumn":21},{"ruleId":"623","severity":1,"message":"742","line":391,"column":6,"nodeType":"625","endLine":391,"endColumn":8,"suggestions":"743"},{"ruleId":"608","severity":1,"message":"656","line":525,"column":24,"nodeType":"610","messageId":"611","endLine":525,"endColumn":39},{"ruleId":"608","severity":1,"message":"744","line":24,"column":8,"nodeType":"610","messageId":"611","endLine":24,"endColumn":20},{"ruleId":"608","severity":1,"message":"745","line":25,"column":8,"nodeType":"610","messageId":"611","endLine":25,"endColumn":12},{"ruleId":"608","severity":1,"message":"746","line":38,"column":5,"nodeType":"610","messageId":"611","endLine":38,"endColumn":25},{"ruleId":"608","severity":1,"message":"703","line":44,"column":9,"nodeType":"610","messageId":"611","endLine":44,"endColumn":28},{"ruleId":"608","severity":1,"message":"704","line":46,"column":11,"nodeType":"610","messageId":"611","endLine":46,"endColumn":25},{"ruleId":"635","severity":1,"message":"636","line":187,"column":15,"nodeType":"637","endLine":192,"endColumn":16},{"ruleId":"693","severity":1,"message":"694","line":89,"column":28,"nodeType":"695","endLine":89,"endColumn":43},{"ruleId":"635","severity":1,"message":"692","line":99,"column":11,"nodeType":"637","endLine":106,"endColumn":12},{"ruleId":"693","severity":1,"message":"694","line":105,"column":13,"nodeType":"695","endLine":105,"endColumn":28},{"ruleId":"635","severity":1,"message":"636","line":111,"column":11,"nodeType":"637","endLine":111,"endColumn":14},{"ruleId":"635","severity":1,"message":"636","line":114,"column":11,"nodeType":"637","endLine":114,"endColumn":14},{"ruleId":"635","severity":1,"message":"636","line":117,"column":11,"nodeType":"637","endLine":117,"endColumn":14},{"ruleId":"635","severity":1,"message":"692","line":188,"column":27,"nodeType":"637","endLine":195,"endColumn":28},{"ruleId":"693","severity":1,"message":"694","line":194,"column":29,"nodeType":"695","endLine":194,"endColumn":44},{"ruleId":"608","severity":1,"message":"686","line":312,"column":29,"nodeType":"610","messageId":"611","endLine":312,"endColumn":43},{"ruleId":"608","severity":1,"message":"687","line":312,"column":45,"nodeType":"610","messageId":"611","endLine":312,"endColumn":50},{"ruleId":"608","severity":1,"message":"686","line":425,"column":29,"nodeType":"610","messageId":"611","endLine":425,"endColumn":43},{"ruleId":"608","severity":1,"message":"687","line":425,"column":45,"nodeType":"610","messageId":"611","endLine":425,"endColumn":50},{"ruleId":"696","severity":1,"message":"697","line":494,"column":25,"nodeType":"695","endLine":494,"endColumn":45},{"ruleId":"608","severity":1,"message":"686","line":566,"column":41,"nodeType":"610","messageId":"611","endLine":566,"endColumn":55},{"ruleId":"608","severity":1,"message":"687","line":567,"column":41,"nodeType":"610","messageId":"611","endLine":567,"endColumn":46},{"ruleId":"635","severity":1,"message":"636","line":826,"column":31,"nodeType":"637","endLine":826,"endColumn":34},{"ruleId":"635","severity":1,"message":"636","line":858,"column":43,"nodeType":"637","endLine":858,"endColumn":73},{"ruleId":"635","severity":1,"message":"636","line":877,"column":31,"nodeType":"637","endLine":877,"endColumn":34},{"ruleId":"635","severity":1,"message":"692","line":911,"column":35,"nodeType":"637","endLine":919,"endColumn":36},{"ruleId":"693","severity":1,"message":"694","line":918,"column":37,"nodeType":"695","endLine":918,"endColumn":52},{"ruleId":"696","severity":1,"message":"697","line":932,"column":30,"nodeType":"695","endLine":932,"endColumn":50},{"ruleId":"635","severity":1,"message":"692","line":962,"column":29,"nodeType":"637","endLine":969,"endColumn":30},{"ruleId":"693","severity":1,"message":"694","line":968,"column":31,"nodeType":"695","endLine":968,"endColumn":46},{"ruleId":"635","severity":1,"message":"636","line":984,"column":29,"nodeType":"637","endLine":992,"endColumn":30},{"ruleId":"696","severity":1,"message":"697","line":1011,"column":25,"nodeType":"695","endLine":1011,"endColumn":45},{"ruleId":"635","severity":1,"message":"636","line":1026,"column":29,"nodeType":"637","endLine":1038,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":1051,"column":33,"nodeType":"637","endLine":1063,"endColumn":34},{"ruleId":"635","severity":1,"message":"636","line":1073,"column":33,"nodeType":"637","endLine":1085,"endColumn":34},{"ruleId":"635","severity":1,"message":"636","line":1097,"column":31,"nodeType":"637","endLine":1109,"endColumn":32},{"ruleId":"635","severity":1,"message":"636","line":1122,"column":29,"nodeType":"637","endLine":1134,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":1144,"column":29,"nodeType":"637","endLine":1156,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":1168,"column":29,"nodeType":"637","endLine":1180,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":1190,"column":29,"nodeType":"637","endLine":1202,"endColumn":30},{"ruleId":"635","severity":1,"message":"636","line":1224,"column":35,"nodeType":"637","endLine":1237,"endColumn":36},{"ruleId":"635","severity":1,"message":"636","line":1250,"column":39,"nodeType":"637","endLine":1263,"endColumn":40},{"ruleId":"635","severity":1,"message":"636","line":1273,"column":39,"nodeType":"637","endLine":1286,"endColumn":40},{"ruleId":"635","severity":1,"message":"636","line":1298,"column":37,"nodeType":"637","endLine":1311,"endColumn":38},"no-native-reassign",["747"],"no-negated-in-lhs",["748"],"no-unused-vars","'RecoveryPass' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","'isEmpty' is defined but never used.","'PURGE' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Input' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handlerAsyncCallAppis', 'handlerCallGetInvitationUser', and 'props'. Either include them or remove the dependency array.","ArrayExpression",["749"],"React Hook useEffect has missing dependencies: 'handlerAsyncCallApiis' and 'handlerFinishSession'. Either include them or remove the dependency array.",["750"],"'useEffect' is defined but never used.","'Radio' is defined but never used.","'Skeleton' is defined but never used.","'UserOutlined' is defined but never used.","'PhoneOutlined' is defined but never used.","'Option' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'dataProfile' and 'history'. Either include them or remove the dependency array.",["751"],"'NumberFormat' is defined but never used.","'Layout' is defined but never used.","'Rate' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Spin' is defined but never used.","'Tooltip' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'SyncOutlined' is defined but never used.","'CloseOutlined' is defined but never used.","React Hook useEffect has missing dependencies: 'handlerCallAsyncApis' and 'match'. Either include them or remove the dependency array.",["752"],"React Hook useEffect has a missing dependency: 'hanlderCallGetTypeFormProperties'. Either include it or remove the dependency array.",["753"],"'dataProfileMenu' is assigned a value but never used.","'HEADER' is defined but never used.","'callGetContractComment' is assigned a value but never used.","'argsv2' is assigned a value but never used.","'responseResult' is assigned a value but never used.","'idCustomerTenant' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetAllCustomerTenantById'. Either include it or remove the dependency array.",["754"],"'idCustomerTF' is assigned a value but never used.","'idCustomerTenantTF' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callAsynApis'. Either include it or remove the dependency array.",["755"],["756"],"'callAddDocumentContract' is assigned a value but never used.","'arrayResult' is assigned a value but never used.","'response' is assigned a value but never used.",["757"],"'dotChange' is assigned a value but never used.","'contentStyle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handlerCallGetAllCustomerTenantById' and 'handlerCallGetAllDocumentTypes'. Either include them or remove the dependency array.",["758"],"React Hook useEffect has a missing dependency: 'handlerCalllSyncApis'. Either include it or remove the dependency array.",["759"],"'LoadingSpin' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataProfile.idUserType' and 'openSection'. Either include them or remove the dependency array.",["760"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'property' is assigned a value but never used.","'setProperty' is assigned a value but never used.","'formattedValue' is assigned a value but never used.","'value' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dataForm'. Either include it or remove the dependency array. You can also do a functional update 'setDataForm(d => ...)' if you only need 'dataForm' in the 'setDataForm' call.",["761"],"'TextArea' is assigned a value but never used.","'configureOption' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","'Avatar' is defined but never used.",["762"],["763"],["764"],["765"],"'renderCardComponent' is assigned a value but never used.","'contractStatus' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'onChangeZipCode'. Either include it or remove the dependency array.",["766"],["767"],"React Hook useEffect has missing dependencies: 'dataForm.idCountryNationality', 'dataForm.idMaritalStatus', 'dataForm.idType', 'onChangeZipCode', and 'visibleComponents'. Either include them or remove the dependency array. You can also do a functional update 'setVisibleComponents(v => ...)' if you only need 'visibleComponents' in the 'setVisibleComponents' call.",["768"],["769"],["770"],["771"],["772"],"'onClickBack' is assigned a value but never used.","'dataProperties' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'frontFunctions'. Either include it or remove the dependency array.",["773"],"React Hook useEffect has missing dependencies: 'dataCommerceSociality', 'dataStates', and 'visibleComponents'. Either include them or remove the dependency array. You can also do a functional update 'setVisibleComponents(v => ...)' if you only need 'visibleComponents' in the 'setVisibleComponents' call.",["774"],"'valueSelect' is assigned a value but never used.",["775"],["776"],"'idCustomer' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handlerCallGetAllProspectStatus', 'handlerCallGetLandingProspectCoincidences', and 'handlerCallGetLandingProspectStats'. Either include them or remove the dependency array.",["777"],"'Tag' is defined but never used.","'Menu' is defined but never used.","'Dropdown' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetCustomerAgentCoincidences'. Either include it or remove the dependency array.",["778"],"'DownloadOutlined' is defined but never used.","'CheckCircleTwoTone' is defined but never used.","'EditTwoTone' is defined but never used.","'QuestionCircleOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetLegalContractCoincidences'. Either include it or remove the dependency array.",["779"],"React Hook useEffect has missing dependencies: 'callAsynApis', 'handlerCallGetAllPersonalReferencesStatus', and 'handlerCallGetAllRelationshipTypes'. Either include them or remove the dependency array.",["780"],"'DocumentIcon' is defined but never used.","'Lock' is defined but never used.","'onOpenUploadDocument' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"781","fix":"782"},{"desc":"783","fix":"784"},{"desc":"785","fix":"786"},{"desc":"787","fix":"788"},{"desc":"789","fix":"790"},{"desc":"791","fix":"792"},{"desc":"793","fix":"794"},{"desc":"787","fix":"795"},{"desc":"793","fix":"796"},{"desc":"797","fix":"798"},{"desc":"799","fix":"800"},{"desc":"801","fix":"802"},{"desc":"803","fix":"804"},{"desc":"805","fix":"806"},{"desc":"807","fix":"808"},{"desc":"809","fix":"810"},{"desc":"811","fix":"812"},{"desc":"813","fix":"814"},{"desc":"803","fix":"815"},{"desc":"816","fix":"817"},{"desc":"803","fix":"818"},{"desc":"819","fix":"820"},{"desc":"803","fix":"821"},{"desc":"822","fix":"823"},{"desc":"824","fix":"825"},{"desc":"826","fix":"827"},{"desc":"828","fix":"829"},{"desc":"803","fix":"830"},{"desc":"831","fix":"832"},{"desc":"833","fix":"834"},{"desc":"835","fix":"836"},{"desc":"837","fix":"838"},"Update the dependencies array to be: [handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",{"range":"839","text":"840"},"Update the dependencies array to be: [handlerAsyncCallApiis, handlerFinishSession]",{"range":"841","text":"842"},"Update the dependencies array to be: [dataProfile, history]",{"range":"843","text":"844"},"Update the dependencies array to be: [handlerCallAsyncApis, match]",{"range":"845","text":"846"},"Update the dependencies array to be: [current, dataForm, hanlderCallGetTypeFormProperties]",{"range":"847","text":"848"},"Update the dependencies array to be: [handlerCallGetAllCustomerTenantById]",{"range":"849","text":"850"},"Update the dependencies array to be: [callAsynApis]",{"range":"851","text":"852"},{"range":"853","text":"846"},{"range":"854","text":"852"},"Update the dependencies array to be: [handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",{"range":"855","text":"856"},"Update the dependencies array to be: [handlerCalllSyncApis]",{"range":"857","text":"858"},"Update the dependencies array to be: [dataGetContract, dataProfile.idUserType, openSection]",{"range":"859","text":"860"},"Update the dependencies array to be: [dataForm, dataZipCodeAdress]",{"range":"861","text":"862"},"Update the dependencies array to be: [dataForm, dataOwnerSearch]",{"range":"863","text":"864"},"Update the dependencies array to be: [dataForm, dataTenantSearch]",{"range":"865","text":"866"},"Update the dependencies array to be: [dataForm, dataSecondTenant]",{"range":"867","text":"868"},"Update the dependencies array to be: [dataAdviserSearch, dataForm]",{"range":"869","text":"870"},"Update the dependencies array to be: [dataFormSave, dataPropertyTypes, onChangeZipCode]",{"range":"871","text":"872"},{"range":"873","text":"862"},"Update the dependencies array to be: [dataFormSave, dataNationalities, dataIdTypes, dataMaritalStatus, visibleComponents, onChangeZipCode, dataForm.idCountryNationality, dataForm.idType, dataForm.idMaritalStatus]",{"range":"874","text":"875"},{"range":"876","text":"862"},"Update the dependencies array to be: [dataNationalities, dataIdTypes, dataFormSave, dataMaritalStatus, dataMaritalRegime, onChangeZipCode]",{"range":"877","text":"878"},{"range":"879","text":"862"},"Update the dependencies array to be: [dataForm, dataZipCodeAdressEndorsement]",{"range":"880","text":"881"},"Update the dependencies array to be: [dataFormSave, dataOccupations, frontFunctions]",{"range":"882","text":"883"},"Update the dependencies array to be: [dataNationalities, dataIdTypes, dataFormSave, visibleComponents, dataCommerceSociality, dataStates]",{"range":"884","text":"885"},"Update the dependencies array to be: [dataFormSave, onChangeZipCode]",{"range":"886","text":"887"},{"range":"888","text":"862"},"Update the dependencies array to be: [handlerCallGetAllProspectStatus, handlerCallGetLandingProspectCoincidences, handlerCallGetLandingProspectStats]",{"range":"889","text":"890"},"Update the dependencies array to be: [handlerCallGetCustomerAgentCoincidences]",{"range":"891","text":"892"},"Update the dependencies array to be: [handlerCallGetLegalContractCoincidences]",{"range":"893","text":"894"},"Update the dependencies array to be: [callAsynApis, handlerCallGetAllPersonalReferencesStatus, handlerCallGetAllRelationshipTypes]",{"range":"895","text":"896"},[38171,38173],"[handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",[2574,2576],"[handlerAsyncCallApiis, handlerFinishSession]",[8387,8389],"[dataProfile, history]",[22397,22399],"[handlerCallAsyncApis, match]",[22549,22568],"[current, dataForm, hanlderCallGetTypeFormProperties]",[14972,14974],"[handlerCallGetAllCustomerTenantById]",[3791,3793],"[callAsynApis]",[15520,15522],[19079,19081],[9118,9120],"[handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",[19219,19221],"[handlerCalllSyncApis]",[2747,2764],"[dataGetContract, dataProfile.idUserType, openSection]",[1433,1452],"[dataForm, dataZipCodeAdress]",[1836,1853],"[dataForm, dataOwnerSearch]",[2406,2424],"[dataForm, dataTenantSearch]",[2985,3003],"[dataForm, dataSecondTenant]",[3487,3506],"[dataAdviserSearch, dataForm]",[2020,2053],"[dataFormSave, dataPropertyTypes, onChangeZipCode]",[2283,2302],[3350,3415],"[dataFormSave, dataNationalities, dataIdTypes, dataMaritalStatus, visibleComponents, onChangeZipCode, dataForm.idCountryNationality, dataForm.idType, dataForm.idMaritalStatus]",[3645,3664],[5372,5487],"[dataNationalities, dataIdTypes, dataFormSave, dataMaritalStatus, dataMaritalRegime, onChangeZipCode]",[5753,5772],[6057,6087],"[dataForm, dataZipCodeAdressEndorsement]",[2239,2270],"[dataFormSave, dataOccupations, frontFunctions]",[4422,4468],"[dataNationalities, dataIdTypes, dataFormSave, visibleComponents, dataCommerceSociality, dataStates]",[1767,1781],"[dataFormSave, onChangeZipCode]",[2011,2030],[7746,7748],"[handlerCallGetAllProspectStatus, handlerCallGetLandingProspectCoincidences, handlerCallGetLandingProspectStats]",[3281,3283],"[handlerCallGetCustomerAgentCoincidences]",[20586,20588],"[handlerCallGetLegalContractCoincidences]",[12378,12380],"[callAsynApis, handlerCallGetAllPersonalReferencesStatus, handlerCallGetAllRelationshipTypes]"]