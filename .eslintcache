[{"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js":"1","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js":"2","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js":"3","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx":"4","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js":"5","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js":"6","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js":"7","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js":"8","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js":"9","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js":"10","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js":"11","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js":"12","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js":"13","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx":"14","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx":"15","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx":"16","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js":"17","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Content\\content.jsx":"18"},{"size":1126,"mtime":1608319108000,"results":"19","hashOfConfig":"20"},{"size":1805,"mtime":1608758609387,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":6079,"mtime":1608697364517,"results":"23","hashOfConfig":"20"},{"size":6972,"mtime":1608694190665,"results":"24","hashOfConfig":"20"},{"size":684,"mtime":1608669352967,"results":"25","hashOfConfig":"20"},{"size":1163,"mtime":1608218738959,"results":"26","hashOfConfig":"20"},{"size":1200,"mtime":1608739402995,"results":"27","hashOfConfig":"20"},{"size":163,"mtime":1608697386191,"results":"28","hashOfConfig":"20"},{"size":4811,"mtime":1608413936882,"results":"29","hashOfConfig":"20"},{"size":1673,"mtime":1608319107999,"results":"30","hashOfConfig":"20"},{"size":410,"mtime":1608319108000,"results":"31","hashOfConfig":"20"},{"size":106,"mtime":1608319107999,"results":"32","hashOfConfig":"20"},{"size":25758,"mtime":1608697183610,"results":"33","hashOfConfig":"20"},{"size":507,"mtime":1608744926568,"results":"34","hashOfConfig":"20"},{"size":5121,"mtime":1608758687186,"results":"35","hashOfConfig":"20"},{"size":279,"mtime":1608757476588,"results":"36","hashOfConfig":"20"},{"size":622,"mtime":1608757621376,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1vnvna8",{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js",[],["81","82"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js",["83"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx",["84","85","86","87","88"],"import React, { useState } from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { connect } from \"react-redux\";\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport {\r\n  EyeInvisibleOutlined,\r\n  EyeTwoTone,\r\n  UserOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { callApiLogin } from \"../../utils/actions/actions\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport logo from \"../../assets/img/logo.png\";\r\nimport admiration from \"../../assets/icons/exclaim.svg\";\r\nimport saqareX from \"../../assets/icons/saqareX.svg\";\r\nimport { isNil } from \"lodash\";\r\n\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: {\r\n    offset: 8,\r\n    span: 16,\r\n  },\r\n};\r\n\r\nconst Login = (props) => {\r\n  const { history, callApiLogin } = props;\r\n  const [dataLogin, setDataLogin] = useState({ email: \"\", password: \"\" });\r\n  const [errorsLogin, setErrorsLogin] = useState({\r\n    error: false,\r\n    message: \"\",\r\n    errorEmail: false,\r\n    errorPass: false,\r\n  });\r\n\r\n  const handlerCallApiLogin = async (data) => {\r\n    try {\r\n      if (isEmpty(data.password) === false && isEmpty(data.email) === false) {\r\n        const response = await callApiLogin(data);\r\n        const idSystemUser =\r\n          isNil(response) === false &&\r\n          isNil(response.response) === false &&\r\n          isNil(response.response.isSystemUser) === false\r\n            ? response.response.isSystemUser\r\n            : null;\r\n        console.log(\"idSystemUser\", idSystemUser);\r\n        history.push(\"/auth\");\r\n      } else {\r\n        if (isEmpty(data.password) || isEmpty(data.email)) {\r\n          setErrorsLogin({\r\n            ...errorsLogin,\r\n            errorPass: isEmpty(data.password),\r\n            errorEmail: isEmpty(data.email),\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      setErrorsLogin({ ...errorsLogin, error: true, message: error });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"login_head_logo\">\r\n        <img src={logo} alt=\"Girl in a jacket\" className=\"login_logo\" />\r\n      </div>\r\n      <div className=\"login_main\">\r\n        <div className=\"login_card_form\">\r\n          <div className=\"login_top_form\">\r\n            <h1>Inicia sesión</h1>\r\n            <div\r\n              className={`error_login_incorrect_data ${\r\n                errorsLogin.error === false ? \"hide\" : \"visible\"\r\n              }`}\r\n            >\r\n              <div>\r\n                <img src={admiration} alt=\"exclaim\" />\r\n                <span>{errorsLogin.message}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"login_inputs_form\">\r\n              <div className=\"login-ant-input\">\r\n                <label className=\"login-label-placeholder\">Usuario</label>\r\n                <Input\r\n                  value={dataLogin.email}\r\n                  onChange={(e) => {\r\n                    setDataLogin({ ...dataLogin, email: e.target.value });\r\n                    setErrorsLogin({\r\n                      ...errorsLogin,\r\n                      error: false,\r\n                      errorEmail: false,\r\n                    });\r\n                  }}\r\n                  suffix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                />\r\n              </div>\r\n              <div\r\n                className={`error_login_incorrect_data_field ${\r\n                  errorsLogin.errorEmail === false ? \"hide\" : \"visible\"\r\n                }`}\r\n              >\r\n                <img src={saqareX} alt=\"exclaim\" />\r\n                <span>Este campo es requerido</span>\r\n              </div>\r\n              <div className=\"login-ant-input\">\r\n                <label className=\"login-label-placeholder\">Contraseña</label>\r\n                <Input.Password\r\n                  value={dataLogin.password}\r\n                  onChange={(e) => {\r\n                    setDataLogin({ ...dataLogin, password: e.target.value });\r\n                    setErrorsLogin({\r\n                      ...errorsLogin,\r\n                      error: false,\r\n                      errorPass: false,\r\n                    });\r\n                  }}\r\n                  iconRender={(visible) =>\r\n                    visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\r\n                  }\r\n                />\r\n              </div>\r\n              <div\r\n                className={`error_login_incorrect_data_field ${\r\n                  errorsLogin.errorPass === false ? \"hide\" : \"visible\"\r\n                }`}\r\n              >\r\n                <img src={saqareX} alt=\"exclaim\" />\r\n                <span>Este campo es requerido</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"login-recover-pass\">\r\n              <p>Olvidé mi contraseña</p>\r\n            </div>\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  handlerCallApiLogin(dataLogin);\r\n                }}\r\n              >\r\n                <span>Iniciar sesión</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"login_divider\">\r\n            <hr />\r\n            <span>No tengo cuenta</span>\r\n            <hr />\r\n          </div>\r\n          <div className=\"login_bottom_form\">\r\n            <div className=\"button_init_secondary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  history.push(\"/registro\");\r\n                }}\r\n              >\r\n                <span>Crear cuenta</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"login_footer_version\">\r\n          <h3>{GLOBAL_CONSTANTS.VERSION}</h3>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callApiLogin: (data) => dispatch(callApiLogin(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js",["89"],"import { API_CONSTANTS, HEADER } from \"../constants/apiConstants\";\r\nimport RequesterAxios from \"../requester/requester\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nconst callApiLogin = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.LOGIN,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomers = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllPersons = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PERSON_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllEndorsement = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_ENDORSEMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRegisterUser = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllVerifyCode = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.VERIFY_CODE_REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport {\r\n  callApiLogin,\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetAllRegisterUser,\r\n  callGetAllVerifyCode,\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js",["90"],"import { applyMiddleware, compose, createStore } from 'redux';\r\nimport storageSession from 'redux-persist/lib/storage/session';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer, PURGE } from 'redux-persist';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createBrowserHistory } from 'history';\r\nimport { routerMiddleware } from 'react-router-redux';\r\n// TO DO: import immutableTransform from 'redux-persist-transform-immutable';\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './RootSaga';\r\n\r\nexport const history = createBrowserHistory();\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default function configureStore(preloadedState) {\r\n  /* eslint-disable no-underscore-dangle */\r\n  const composeEnhancers =\r\n    process.env.NODE_ENV !== 'production' &&\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      : compose;\r\n  /* eslint-enable */\r\n\r\n  const persistConfig = {\r\n    // TO DO:\r\n    // transforms: [immutableTransform()],\r\n    key: 'root',\r\n    storage: storageSession,\r\n    blacklist: [],\r\n  };\r\n\r\n  const rootReducerMiddleware = (state, action) =>\r\n    rootReducer(state, action, persistConfig);\r\n\r\n  const persistedReducer = persistReducer(persistConfig, rootReducerMiddleware);\r\n\r\n  const store = createStore(\r\n    persistedReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(sagaMiddleware, routerMiddleware(history), thunk),\r\n    ),\r\n  );\r\n\r\n  store.runSaga = sagaMiddleware.run(rootSaga);\r\n\r\n  const persistor = persistStore(store, {});\r\n\r\n  return { store, persistor };\r\n}\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js",["91"],"import { combineReducers } from \"redux\";\r\nimport { purgeStoredState } from \"redux-persist\";\r\n\r\nconst appReducers = combineReducers({});\r\n\r\nexport default (state, action, persistConfig) => {\r\n  // Reset to initialState\r\n  if (action.type === \"PURGE\") {\r\n    purgeStoredState(persistConfig);\r\n    // Default or Current State\r\n    return appReducers({}, action);\r\n  }\r\n\r\n  return appReducers(state, action);\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx",["92","93","94","95","96","97","98","99","100"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Radio, Select, Input } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  LockOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetAllRegisterUser,\r\n  callGetAllVerifyCode,\r\n} from \"../../utils/actions/actions\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport logo from \"../../assets/img/logo.png\";\r\nimport admiration from \"../../assets/icons/exclaim.svg\";\r\nimport saqareX from \"../../assets/icons/saqareX.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Register = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomers,\r\n    callGetAllPersons,\r\n    callGetAllEndorsement,\r\n    callGetAllRegisterUser,\r\n    callGetAllVerifyCode,\r\n  } = props;\r\n  const [userType, setUserType] = useState(1);\r\n  const [userCustomer, setUserCustomer] = useState([]);\r\n  const [selectuserCustomer, setSelectUserCustomer] = useState(1);\r\n  const [userPerson, setUserPerson] = useState([]);\r\n  const [userEndorsement, setUserEndorsement] = useState([]);\r\n  const [configComponents, setConfigComponents] = useState({});\r\n  const [verifyPassword, setVerifyPassword] = useState(null);\r\n  const [dataForm, setDataForm] = useState({\r\n    idPersonType: null,\r\n    idEndorsement: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    username: null,\r\n    password: null,\r\n  });\r\n  const copyErrors = {\r\n    errorPass: {\r\n      error: false,\r\n      message: \"Las contraseñas no coinciden\",\r\n      errorEmpty: false,\r\n      messageEmpty: \"La contraseña es requerida\",\r\n    },\r\n    errorGivenName: {\r\n      error: false,\r\n      message: \"El Nombre o Razón social es requerido\",\r\n    },\r\n    errorUserName: {\r\n      error: false,\r\n      message: \"El correo electrónico es requerido\",\r\n      errorFormat: false,\r\n      messageFormatError: \"El correo electronico no es valido\",\r\n    },\r\n    errorPersonType: {\r\n      error: false,\r\n      message: \"El tipo de persona es requerido\",\r\n    },\r\n  };\r\n  const [errorsRegister, setErrorsRegister] = useState(copyErrors);\r\n  const [errorFormulary, setErrorFormulary] = useState(false);\r\n  const [idRequestSignUp, setIdRequestSignUp] = useState(null);\r\n  const [codeVerify, setCodeVerify] = useState({\r\n    value1: \"\",\r\n    value2: \"\",\r\n    value3: \"\",\r\n    value4: \"\",\r\n    value5: \"\",\r\n    value6: \"\",\r\n  });\r\n  const errorCatchBase = {\r\n    error: false,\r\n    message: \"\",\r\n  };\r\n  const [errorBase, setErrorBase] = useState(errorCatchBase);\r\n\r\n  const handlerCallApiCustomer = async (data) => {\r\n    try {\r\n      const response = await callGetAllCustomers(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserCustomer(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiPersonTypes = async (data) => {\r\n    try {\r\n      const response = await callGetAllPersons(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserPerson(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiEndorsement = async (data) => {\r\n    try {\r\n      const response = await callGetAllEndorsement(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserEndorsement(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiRegister = async (data) => {\r\n    try {\r\n      const response = await callGetAllRegisterUser(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : \"\";\r\n      setIdRequestSignUp(\r\n        isEmpty(responseResult) === false ? responseResult.idRequestSignUp : \"\"\r\n      );\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallVerifyCode = async (data) => {\r\n    try {\r\n      await callGetAllVerifyCode(data);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerVerifyInformation = async (data) => {\r\n    const emailRegex = /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i;\r\n    let objectErrors = errorsRegister;\r\n    let validatePass = true;\r\n    let validateIdPerson = true;\r\n    let validateGivenName = true;\r\n    let validateUserName = true;\r\n    const validateTypeEmail =\r\n      isNil(data.username) === false ? emailRegex.test(data.username) : false;\r\n\r\n    if (\r\n      isEmpty(data.password) === false &&\r\n      isEmpty(data.verifyPassword) === false &&\r\n      data.password === data.verifyPassword\r\n    ) {\r\n      validatePass = true;\r\n    } else if (isEmpty(data.password) || isEmpty(data.verifyPassword)) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, errorEmpty: true },\r\n      };\r\n      validatePass = false;\r\n    } else if (data.password !== data.verifyPassword) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, error: true },\r\n      };\r\n      validatePass = false;\r\n    }\r\n\r\n    if (isNil(data.idPersonType) === false) {\r\n      validateIdPerson = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPersonType: { ...objectErrors.errorPersonType, error: true },\r\n      };\r\n      validateIdPerson = false;\r\n    }\r\n\r\n    if (isNil(data.givenName) === false && isEmpty(data.givenName) === false) {\r\n      validateGivenName = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorGivenName: { ...objectErrors.errorGivenName, error: true },\r\n      };\r\n      validateGivenName = false;\r\n    }\r\n\r\n    if (\r\n      isNil(data.username) === false &&\r\n      isEmpty(data.username) === false &&\r\n      validateTypeEmail === true\r\n    ) {\r\n      validateUserName = true;\r\n    } else {\r\n      if (isEmpty(data.username) || isEmpty(data.username)) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, error: true },\r\n        };\r\n      } else if (validateTypeEmail === false) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, errorFormat: true },\r\n        };\r\n      }\r\n      validateUserName = false;\r\n    }\r\n\r\n    setErrorsRegister(objectErrors);\r\n\r\n    return (\r\n      validatePass && validateIdPerson && validateGivenName && validateUserName\r\n    );\r\n  };\r\n\r\n  const selectPerson = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> ¿Qué te trae por aquí? </h1>\r\n          <div className=\"login_inputs_form\">\r\n            <Radio.Group\r\n              name=\"radiogroup\"\r\n              value={selectuserCustomer}\r\n              defaultValue={1}\r\n              onChange={(e) => {\r\n                setSelectUserCustomer(e.target.value);\r\n              }}\r\n            >\r\n              {isEmpty(userCustomer) === false &&\r\n                userCustomer.map((row) => {\r\n                  return (\r\n                    <p className=\"visible\" style={{ marginBottom: \"32px\" }}>\r\n                      <Radio value={row.id}> {row.text} </Radio>\r\n                    </p>\r\n                  );\r\n                })}\r\n            </Radio.Group>\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  await handlerCallApiPersonTypes({\r\n                    idType: 1,\r\n                    idCustomerType: selectuserCustomer,\r\n                  });\r\n                  await handlerCallApiEndorsement({\r\n                    idType: 1,\r\n                  });\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const selectForm = (\r\n    <div className=\"login_main\" style={{ height: \"100%\" }}>\r\n      <div className=\"login_card_form large\">\r\n        <div className=\"register_holder\">\r\n          <div className=\"login_top_form\">\r\n            <h1> Completa tu perfil </h1>\r\n            <div\r\n              className={`error_login_incorrect_data ${\r\n                errorFormulary === false ? \"hide\" : \"visible\"\r\n              }`}\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              {errorBase.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorBase.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorGivenName.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorGivenName.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorPass.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorPass.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorPass.errorEmpty && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorPass.messageEmpty}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorPersonType.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorPersonType.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorUserName.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorUserName.message}</span>\r\n                </div>\r\n              )}\r\n              {errorsRegister.errorUserName.errorFormat && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorUserName.messageFormatError}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <label className=\"fieldset_title\">Información personal</label>\r\n            <div className=\"register_row half\">\r\n              <Select\r\n                placeholder=\"Tipo de Persona\"\r\n                onChange={(value, option) => {\r\n                  const configureOption = option.onClick();\r\n                  setConfigComponents(configureOption);\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                  setDataForm({ ...dataForm, idPersonType: value });\r\n                }}\r\n              >\r\n                {isEmpty(userPerson) === false &&\r\n                  userPerson.map((row) => {\r\n                    return (\r\n                      <Option\r\n                        value={row.id}\r\n                        onClick={() => {\r\n                          return isNil(row) === false &&\r\n                            isNil(row.jsonProperties) === false\r\n                            ? JSON.parse(row.jsonProperties)\r\n                            : {};\r\n                        }}\r\n                      >\r\n                        {row.text}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n              </Select>\r\n              {isEmpty(configComponents) === false &&\r\n                configComponents.idEndorsement && (\r\n                  <Select\r\n                    placeholder=\"Aval\"\r\n                    onChange={(value) => {\r\n                      setDataForm({ ...dataForm, idEndorsement: value });\r\n                    }}\r\n                  >\r\n                    {isEmpty(userEndorsement) === false &&\r\n                      userEndorsement.map((row) => {\r\n                        return <Option value={row.id}>{row.text}</Option>;\r\n                      })}\r\n                  </Select>\r\n                )}\r\n            </div>\r\n            <div className=\"register_row\">\r\n              <Input\r\n                value={dataForm.givenName}\r\n                suffix={<UserOutlined />}\r\n                placeholder={\r\n                  configComponents.lastName ? \"Nombre(s):\" : \"Razón Social\"\r\n                }\r\n                onChange={(e) => {\r\n                  setDataForm({ ...dataForm, givenName: e.target.value });\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"register_row half\">\r\n              {isEmpty(configComponents) === false &&\r\n                configComponents.lastName && (\r\n                  <Input\r\n                    value={dataForm.lastName}\r\n                    suffix={<UserOutlined />}\r\n                    placeholder=\"Primer Apellido\"\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, lastName: e.target.value });\r\n                    }}\r\n                  />\r\n                )}\r\n              {isEmpty(configComponents) === false &&\r\n                configComponents.mothersMaidenName && (\r\n                  <Input\r\n                    value={dataForm.mothersMaidenName}\r\n                    suffix={<UserOutlined />}\r\n                    placeholder=\"Segundo Apellido\"\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        mothersMaidenName: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n            </div>\r\n            <label className=\"fieldset_title\"> Información de contacto </label>\r\n            <div className=\"register_row half\">\r\n              <Input\r\n                value={dataForm.phoneNumber}\r\n                suffix={<PhoneOutlined />}\r\n                placeholder=\"Teléfono celular\"\r\n                onChange={(e) => {\r\n                  const regexp = /^([0-9])*$/;\r\n                  if (regexp.test(e.target.value) === true) {\r\n                    setDataForm({ ...dataForm, phoneNumber: e.target.value });\r\n                  }\r\n                }}\r\n              />\r\n              <Input\r\n                value={dataForm.username}\r\n                suffix={<MailOutlined />}\r\n                placeholder=\"Correo electrónico\"\r\n                onChange={(e) => {\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    username: e.target.value,\r\n                  });\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <label className=\"fieldset_title\"> Contraseña </label>\r\n            <div className=\"register_row half\">\r\n              <Input\r\n                value={dataForm.password}\r\n                suffix={<LockOutlined />}\r\n                placeholder=\"Contraseña\"\r\n                type=\"password\"\r\n                onChange={(e) => {\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    password: e.target.value,\r\n                  });\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                }}\r\n              />\r\n              <Input\r\n                value={verifyPassword}\r\n                suffix={<LockOutlined />}\r\n                placeholder=\"Confirmar Contraseña\"\r\n                type=\"password\"\r\n                onChange={(e) => {\r\n                  setVerifyPassword(e.target.value);\r\n                  setErrorsRegister(copyErrors);\r\n                  setErrorFormulary(false);\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"button_init_primary\" style={{ margin: \"16px 0 0\" }}>\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  try {\r\n                    const verifyData = await handlerVerifyInformation({\r\n                      ...dataForm,\r\n                      verifyPassword,\r\n                    });\r\n                    setErrorFormulary(!verifyData);\r\n                    if (verifyData === true) {\r\n                      await handlerCallApiRegister({\r\n                        ...dataForm,\r\n                        idCustomerType: selectuserCustomer,\r\n                        offset: \"-06:00\",\r\n                      });\r\n                      setUserType(3);\r\n                    }\r\n                  } catch (error) {\r\n                    setErrorFormulary(true);\r\n                    setErrorBase({ ...errorBase, error: true, message: error });\r\n                    setTimeout(() => {\r\n                      setErrorFormulary(false);\r\n                      setErrorBase(errorCatchBase);\r\n                    }, 3000);\r\n                  }\r\n                }}\r\n              >\r\n                <span> Registrarme </span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const insterCodeCompoent = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> Ingresa tu código </h1>\r\n          <p className=\"recoverInstructions\">\r\n            Enviamos un código de confirmación al correo {dataForm.username}\r\n          </p>\r\n          <div className=\"codeForm\">\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-0\"\r\n                type=\"number\"\r\n                value={codeVerify.value1}\r\n                maxLength={1}\r\n                minLength={1}\r\n                onChange={(event) => {\r\n                  const arrayCode = codeVerify;\r\n                  if (event.target.value === \"\") {\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-1\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value1: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-1\"\r\n                type=\"number\"\r\n                value={codeVerify.value2}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  const arrayCode = codeVerify;\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-0\").focus();\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-2\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value2: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-2\"\r\n                type=\"number\"\r\n                value={codeVerify.value3}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  const arrayCode = codeVerify;\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-1\").focus();\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-3\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value3: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-3\"\r\n                type=\"number\"\r\n                value={codeVerify.value4}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  const arrayCode = codeVerify;\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-2\").focus();\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-4\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value4: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-4\"\r\n                type=\"number\"\r\n                value={codeVerify.value5}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  const arrayCode = codeVerify;\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-3\").focus();\r\n                  } else {\r\n                    document.getElementById(\"input-code-validate-5\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value5: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n            <div className=\"codeFormItem\">\r\n              <Input\r\n                id=\"input-code-validate-5\"\r\n                type=\"number\"\r\n                value={codeVerify.value6}\r\n                maxLength={1}\r\n                onChange={(event) => {\r\n                  const arrayCode = codeVerify;\r\n                  if (event.target.value === \"\") {\r\n                    document.getElementById(\"input-code-validate-4\").focus();\r\n                  } else {\r\n                    document.getElementById(\"button-send-code\").focus();\r\n                  }\r\n                  if (event.target.value.length <= 1) {\r\n                    setCodeVerify({\r\n                      ...codeVerify,\r\n                      value6: event.target.value,\r\n                    });\r\n                  }\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"button_init_primary\" style={{ margin: \"60px 0 0\" }}>\r\n            <button\r\n              type=\"button\"\r\n              id=\"button-send-code\"\r\n              onClick={async () => {\r\n                try {\r\n                  let numberResult = \"\";\r\n                  for (const property in codeVerify) {\r\n                    numberResult += codeVerify[property];\r\n                  }\r\n                  await handlerCallVerifyCode({\r\n                    code: numberResult,\r\n                    idRequestSignUp,\r\n                    offset: \"-06:00\",\r\n                  });\r\n                  setUserType(4);\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <span> Validar </span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const successRegister = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> Registro completo </h1>\r\n          <p className=\"recoverInstructions\">\r\n            Felicidades tu registro se realizó con éxito!\r\n          </p>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <span>Ir al Login</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderTypeComponent = (type) => {\r\n    let component = <div />;\r\n    switch (type) {\r\n      case 1:\r\n        component = selectPerson;\r\n        break;\r\n      case 2:\r\n        component = selectForm;\r\n        break;\r\n      case 3:\r\n        component = insterCodeCompoent;\r\n        break;\r\n      case 4:\r\n        component = successRegister;\r\n        break;\r\n      default:\r\n        component = <div />;\r\n        break;\r\n    }\r\n    return component;\r\n  };\r\n\r\n  const handlerAsyncCallAppis = async () => {\r\n    await handlerCallApiCustomer({ idType: 1 });\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerAsyncCallAppis();\r\n  }, []);\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"login_head_logo\">\r\n        <img src={logo} alt=\"Homify Logo\" className=\"login_logo\" />\r\n      </div>\r\n      {renderTypeComponent(userType)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomers: (data) => dispatch(callGetAllCustomers(data)),\r\n  callGetAllPersons: (data) => dispatch(callGetAllPersons(data)),\r\n  callGetAllEndorsement: (data) => dispatch(callGetAllEndorsement(data)),\r\n  callGetAllRegisterUser: (data) => dispatch(callGetAllRegisterUser(data)),\r\n  callGetAllVerifyCode: (data) => dispatch(callGetAllVerifyCode(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx",["101"],"import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Auth = (props) => {\r\n  const { history } = props;\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      history.push(\"/dashboard\");\r\n    }, 3000);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"loader-auth-spiner\">\r\n      <div />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx",["102","103","104","105","106","107","108","109","110","111","112","113"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Content\\content.jsx",["114","115","116","117","118"],{"ruleId":"119","replacedBy":"120"},{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","severity":1,"message":"124","line":37,"column":20,"nodeType":"125","messageId":"126","endLine":37,"endColumn":25},{"ruleId":"123","severity":1,"message":"127","line":5,"column":10,"nodeType":"125","messageId":"126","endLine":5,"endColumn":14},{"ruleId":"123","severity":1,"message":"128","line":5,"column":23,"nodeType":"125","messageId":"126","endLine":5,"endColumn":29},{"ruleId":"123","severity":1,"message":"129","line":5,"column":31,"nodeType":"125","messageId":"126","endLine":5,"endColumn":39},{"ruleId":"123","severity":1,"message":"130","line":18,"column":7,"nodeType":"125","messageId":"126","endLine":18,"endColumn":13},{"ruleId":"123","severity":1,"message":"131","line":26,"column":7,"nodeType":"125","messageId":"126","endLine":26,"endColumn":17},{"ruleId":"123","severity":1,"message":"132","line":4,"column":8,"nodeType":"125","messageId":"126","endLine":4,"endColumn":15},{"ruleId":"123","severity":1,"message":"133","line":4,"column":40,"nodeType":"125","messageId":"126","endLine":4,"endColumn":45},{"ruleId":"134","severity":1,"message":"135","line":6,"column":1,"nodeType":"136","endLine":15,"endColumn":3},{"ruleId":"123","severity":1,"message":"137","line":20,"column":8,"nodeType":"125","messageId":"126","endLine":20,"endColumn":24},{"ruleId":"123","severity":1,"message":"138","line":23,"column":8,"nodeType":"125","messageId":"126","endLine":23,"endColumn":15},{"ruleId":"123","severity":1,"message":"139","line":521,"column":25,"nodeType":"125","messageId":"126","endLine":521,"endColumn":34},{"ruleId":"123","severity":1,"message":"139","line":542,"column":25,"nodeType":"125","messageId":"126","endLine":542,"endColumn":34},{"ruleId":"123","severity":1,"message":"139","line":564,"column":25,"nodeType":"125","messageId":"126","endLine":564,"endColumn":34},{"ruleId":"123","severity":1,"message":"139","line":586,"column":25,"nodeType":"125","messageId":"126","endLine":586,"endColumn":34},{"ruleId":"123","severity":1,"message":"139","line":608,"column":25,"nodeType":"125","messageId":"126","endLine":608,"endColumn":34},{"ruleId":"123","severity":1,"message":"139","line":630,"column":25,"nodeType":"125","messageId":"126","endLine":630,"endColumn":34},{"ruleId":"140","severity":1,"message":"141","line":724,"column":6,"nodeType":"142","endLine":724,"endColumn":8,"suggestions":"143"},{"ruleId":"140","severity":1,"message":"144","line":11,"column":6,"nodeType":"142","endLine":11,"endColumn":8,"suggestions":"145"},{"ruleId":"123","severity":1,"message":"146","line":1,"column":27,"nodeType":"125","messageId":"126","endLine":1,"endColumn":36},{"ruleId":"123","severity":1,"message":"147","line":6,"column":8,"nodeType":"125","messageId":"126","endLine":6,"endColumn":12},{"ruleId":"123","severity":1,"message":"148","line":10,"column":3,"nodeType":"125","messageId":"126","endLine":10,"endColumn":15},{"ruleId":"123","severity":1,"message":"149","line":11,"column":3,"nodeType":"125","messageId":"126","endLine":11,"endColumn":22},{"ruleId":"123","severity":1,"message":"150","line":12,"column":3,"nodeType":"125","messageId":"126","endLine":12,"endColumn":17},{"ruleId":"123","severity":1,"message":"151","line":24,"column":24,"nodeType":"125","messageId":"126","endLine":24,"endColumn":31},{"ruleId":"152","severity":1,"message":"153","line":64,"column":15,"nodeType":"154","endLine":68,"endColumn":17},{"ruleId":"152","severity":1,"message":"153","line":72,"column":15,"nodeType":"154","endLine":72,"endColumn":80},{"ruleId":"152","severity":1,"message":"153","line":76,"column":15,"nodeType":"154","endLine":76,"endColumn":81},{"ruleId":"152","severity":1,"message":"153","line":80,"column":15,"nodeType":"154","endLine":84,"endColumn":17},{"ruleId":"152","severity":1,"message":"153","line":88,"column":15,"nodeType":"154","endLine":88,"endColumn":79},{"ruleId":"152","severity":1,"message":"153","line":92,"column":15,"nodeType":"154","endLine":92,"endColumn":79},{"ruleId":"123","severity":1,"message":"155","line":1,"column":17,"nodeType":"125","messageId":"126","endLine":1,"endColumn":25},{"ruleId":"123","severity":1,"message":"146","line":1,"column":27,"nodeType":"125","messageId":"126","endLine":1,"endColumn":36},{"ruleId":"123","severity":1,"message":"156","line":3,"column":18,"nodeType":"125","messageId":"126","endLine":3,"endColumn":22},{"ruleId":"123","severity":1,"message":"157","line":5,"column":9,"nodeType":"125","messageId":"126","endLine":5,"endColumn":15},{"ruleId":"123","severity":1,"message":"158","line":5,"column":17,"nodeType":"125","messageId":"126","endLine":5,"endColumn":22},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","'Form' is defined but never used.","'Button' is defined but never used.","'Checkbox' is defined but never used.","'layout' is assigned a value but never used.","'tailLayout' is assigned a value but never used.","'isEmpty' is defined but never used.","'PURGE' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'GLOBAL_CONSTANTS' is defined but never used.","'saqareX' is defined but never used.","'arrayCode' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handlerAsyncCallAppis'. Either include it or remove the dependency array.","ArrayExpression",["161"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["162"],"'useEffect' is defined but never used.","'Icon' is defined but never used.","'UserOutlined' is defined but never used.","'VideoCameraOutlined' is defined but never used.","'UploadOutlined' is defined but never used.","'Content' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useState' is defined but never used.","'Menu' is defined but never used.","'Header' is assigned a value but never used.","'Sider' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [handlerAsyncCallAppis]",{"range":"167","text":"168"},"Update the dependencies array to be: [history]",{"range":"169","text":"170"},[24975,24977],"[handlerAsyncCallAppis]",[244,246],"[history]"]