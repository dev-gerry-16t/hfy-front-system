[{"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js":"1","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js":"2","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js":"3","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx":"4","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js":"5","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js":"6","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js":"7","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js":"8","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js":"9","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js":"10","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js":"11","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js":"12","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js":"13","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx":"14","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx":"15","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx":"16","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js":"17","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js":"18","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js":"19","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx":"20","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx":"21","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx":"22","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx":"23","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx":"24","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx":"25","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx":"26","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx":"27","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx":"28","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx":"29","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx":"30","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Signature\\signatureIndex.jsx":"31","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js":"32","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx":"33","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx":"34","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx":"35","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx":"36","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx":"37","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx":"38","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx":"39","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx":"40","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx":"41","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx":"42","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx":"43","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx":"44","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx":"45","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx":"46","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx":"47","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx":"48","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx":"49","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailable.jsx":"50","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionDepositGuarantee.jsx":"51","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\adviser.jsx":"52","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionCardOwner.jsx":"53","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionStatsChart.jsx":"54","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administrator.jsx":"55","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChart.jsx":"56","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwner.jsx":"57","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionAddUsers.jsx":"58","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUser.jsx":"59","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormOwner.jsx":"60","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customReference.jsx":"61"},{"size":1174,"mtime":1609949390941,"results":"62","hashOfConfig":"63"},{"size":2819,"mtime":1609946400006,"results":"64","hashOfConfig":"63"},{"size":362,"mtime":499162500000,"results":"65","hashOfConfig":"63"},{"size":6920,"mtime":1612455890721,"results":"66","hashOfConfig":"63"},{"size":49233,"mtime":1612462680149,"results":"67","hashOfConfig":"63"},{"size":3327,"mtime":1612374345752,"results":"68","hashOfConfig":"63"},{"size":1234,"mtime":1609949250693,"results":"69","hashOfConfig":"63"},{"size":1104,"mtime":1611775765405,"results":"70","hashOfConfig":"63"},{"size":257,"mtime":1612461861143,"results":"71","hashOfConfig":"63"},{"size":4811,"mtime":1608413936882,"results":"72","hashOfConfig":"63"},{"size":1673,"mtime":1608319107999,"results":"73","hashOfConfig":"63"},{"size":542,"mtime":1611369264524,"results":"74","hashOfConfig":"63"},{"size":106,"mtime":1608319107999,"results":"75","hashOfConfig":"63"},{"size":33060,"mtime":1609945276076,"results":"76","hashOfConfig":"63"},{"size":3195,"mtime":1612455895508,"results":"77","hashOfConfig":"63"},{"size":7431,"mtime":1611605056332,"results":"78","hashOfConfig":"63"},{"size":2046,"mtime":1611773856503,"results":"79","hashOfConfig":"63"},{"size":821,"mtime":1611369264535,"results":"80","hashOfConfig":"63"},{"size":261,"mtime":1611369264533,"results":"81","hashOfConfig":"63"},{"size":19114,"mtime":1612465330136,"results":"82","hashOfConfig":"63"},{"size":11455,"mtime":1611369264538,"results":"83","hashOfConfig":"63"},{"size":11318,"mtime":1611018045097,"results":"84","hashOfConfig":"63"},{"size":2841,"mtime":1610994108283,"results":"85","hashOfConfig":"63"},{"size":2232,"mtime":1611017794656,"results":"86","hashOfConfig":"63"},{"size":2820,"mtime":1611016123082,"results":"87","hashOfConfig":"63"},{"size":4382,"mtime":1610517515464,"results":"88","hashOfConfig":"63"},{"size":2124,"mtime":1609806628805,"results":"89","hashOfConfig":"63"},{"size":13671,"mtime":1611279250026,"results":"90","hashOfConfig":"63"},{"size":5068,"mtime":1610757156844,"results":"91","hashOfConfig":"63"},{"size":8735,"mtime":1610756511772,"results":"92","hashOfConfig":"63"},{"size":69474,"mtime":1611981769277,"results":"93","hashOfConfig":"63"},{"size":5753,"mtime":1611357715018,"results":"94","hashOfConfig":"63"},{"size":4643,"mtime":1610498620969,"results":"95","hashOfConfig":"63"},{"size":6492,"mtime":1611369264536,"results":"96","hashOfConfig":"63"},{"size":2318,"mtime":1611728179229,"results":"97","hashOfConfig":"63"},{"size":1462,"mtime":1610577374867,"results":"98","hashOfConfig":"63"},{"size":11456,"mtime":1612314270631,"results":"99","hashOfConfig":"63"},{"size":12520,"mtime":1612312544444,"results":"100","hashOfConfig":"63"},{"size":10091,"mtime":1611940584231,"results":"101","hashOfConfig":"63"},{"size":16065,"mtime":1612314731613,"results":"102","hashOfConfig":"63"},{"size":12085,"mtime":1611952436900,"results":"103","hashOfConfig":"63"},{"size":3551,"mtime":1611962327850,"results":"104","hashOfConfig":"63"},{"size":4923,"mtime":1612312696091,"results":"105","hashOfConfig":"63"},{"size":26059,"mtime":1612312151873,"results":"106","hashOfConfig":"63"},{"size":20341,"mtime":1612461039407,"results":"107","hashOfConfig":"63"},{"size":19408,"mtime":1612455541972,"results":"108","hashOfConfig":"63"},{"size":3848,"mtime":1612456245089,"results":"109","hashOfConfig":"63"},{"size":8844,"mtime":1612459162785,"results":"110","hashOfConfig":"63"},{"size":8188,"mtime":1612300721261,"results":"111","hashOfConfig":"63"},{"size":9481,"mtime":1611338127031,"results":"112","hashOfConfig":"63"},{"size":10275,"mtime":1611359328053,"results":"113","hashOfConfig":"63"},{"size":4136,"mtime":1611612689619,"results":"114","hashOfConfig":"63"},{"size":3937,"mtime":1611612092288,"results":"115","hashOfConfig":"63"},{"size":2046,"mtime":1611602863953,"results":"116","hashOfConfig":"63"},{"size":5058,"mtime":1611709394312,"results":"117","hashOfConfig":"63"},{"size":2055,"mtime":1611726883710,"results":"118","hashOfConfig":"63"},{"size":4965,"mtime":1612465397229,"results":"119","hashOfConfig":"63"},{"size":7977,"mtime":1611709471430,"results":"120","hashOfConfig":"63"},{"size":8114,"mtime":1612474406232,"results":"121","hashOfConfig":"63"},{"size":13345,"mtime":1612459307530,"results":"122","hashOfConfig":"63"},{"size":3635,"mtime":1612288217523,"results":"123","hashOfConfig":"63"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},"1vnvna8",{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"126"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"126"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"126"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"126"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"126"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"126"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"126"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"126"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"126"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"126"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"126"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"126"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"126"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"126"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"126"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"126"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"126"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"126"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"126"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"126"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"126"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"126"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"126"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"126"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"126"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"243","messages":"244","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"126"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"126"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"126"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"126"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"126"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"126"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"126"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"126"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"126"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"278","messages":"279","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"126"},"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js",[],["281","282"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js",["283"],"import React from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { connect } from \"react-redux\";\r\nimport { Router } from \"react-router\";\r\nimport Loadable from \"react-loadable\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport es_ES from \"antd/lib/locale-provider/es_ES\";\r\nimport \"./App.css\";\r\n\r\nconst loading = () => (\r\n  <div className=\"animated fadeIn pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\" />\r\n  </div>\r\n);\r\n\r\nconst Login = Loadable({\r\n  loader: () => import(\"./containers/Login/login\"),\r\n  loading,\r\n});\r\n\r\nconst Registro = Loadable({\r\n  loader: () => import(\"./containers/Register/Register\"),\r\n  loading,\r\n});\r\n\r\nconst Auth = Loadable({\r\n  loader: () => import(\"./containers/Auth/auth\"),\r\n  loading,\r\n});\r\n\r\nconst DefaultLayout = Loadable({\r\n  loader: () => import(\"./containers/Layout/layout\"),\r\n  loading,\r\n});\r\n\r\nconst App = (props) => {\r\n  const { history, token, dataProfile } = props;\r\n  const accessDev = false//window.location.hostname === \"localhost\";\r\n  return (\r\n    <Router history={history}>\r\n      <ConfigProvider locale={es_ES}>\r\n        <Switch>\r\n          <Route exact path=\"/\" name=\"Login Page\" component={Login} />\r\n          <Route path=\"/login\" name=\"Login Page\" component={Login} />\r\n          <Route path=\"/index\" name=\"Login Page\" component={Login} />\r\n          <Route exact path=\"/registro\" name=\"Registro\" component={Registro} />\r\n          <Route\r\n            exact\r\n            path=\"/registro/:idInvitation/:idCustomerType\"\r\n            name=\"Registro\"\r\n            component={Registro}\r\n          />\r\n          <Route path=\"/auth\" name=\"Autorizacion\" component={Auth} />\r\n          <Route path=\"/logout\" name=\"Clean App and Close\" component={Auth} />\r\n          <Route\r\n            history={history}\r\n            path=\"/websystem/\"\r\n            name=\"Home\"\r\n            render={(props) => (\r\n              <DefaultLayout\r\n                {...props}\r\n                authenticate={\r\n                  isNil(dataProfile.idSystemUser) === false &&\r\n                  isEmpty(dataProfile.idSystemUser) === false\r\n                }\r\n                authenticated={\r\n                  (isNil(dataProfile.dataProfile) === false &&\r\n                    isNil(dataProfile.dataProfile.idSystemUser) === false &&\r\n                    isEmpty(dataProfile.dataProfile.idSystemUser) === false) ||\r\n                  accessDev\r\n                }\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </ConfigProvider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile } = state;\r\n  return { dataProfile };\r\n};\r\n\r\nconst mapDispatchToProps = null;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js",["284"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js",["285"],"import { applyMiddleware, compose, createStore } from 'redux';\r\nimport storageSession from 'redux-persist/lib/storage/session';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer, PURGE } from 'redux-persist';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createBrowserHistory } from 'history';\r\nimport { routerMiddleware } from 'react-router-redux';\r\n// TO DO: import immutableTransform from 'redux-persist-transform-immutable';\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './RootSaga';\r\n\r\nexport const history = createBrowserHistory();\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default function configureStore(preloadedState) {\r\n  /* eslint-disable no-underscore-dangle */\r\n  const composeEnhancers =\r\n    process.env.NODE_ENV !== 'production' &&\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      : compose;\r\n  /* eslint-enable */\r\n\r\n  const persistConfig = {\r\n    // TO DO:\r\n    // transforms: [immutableTransform()],\r\n    key: 'root',\r\n    storage: storageSession,\r\n    blacklist: [],\r\n  };\r\n\r\n  const rootReducerMiddleware = (state, action) =>\r\n    rootReducer(state, action, persistConfig);\r\n\r\n  const persistedReducer = persistReducer(persistConfig, rootReducerMiddleware);\r\n\r\n  const store = createStore(\r\n    persistedReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(sagaMiddleware, routerMiddleware(history), thunk),\r\n    ),\r\n  );\r\n\r\n  store.runSaga = sagaMiddleware.run(rootSaga);\r\n\r\n  const persistor = persistStore(store, {});\r\n\r\n  return { store, persistor };\r\n}\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js",["286"],"import { combineReducers } from \"redux\";\r\nimport { purgeStoredState } from \"redux-persist\";\r\nimport {\r\n  dataProfile,\r\n  dataProfileMenu,\r\n} from \"../utils/reducers/dataProfileReducer\";\r\n\r\nconst appReducers = combineReducers({\r\n  dataProfile,\r\n  dataProfileMenu,\r\n});\r\n\r\nexport default (state, action, persistConfig) => {\r\n  // Reset to initialState\r\n  if (action.type === \"PURGE\") {\r\n    purgeStoredState(persistConfig);\r\n    // Default or Current State\r\n    return appReducers({}, action);\r\n  }\r\n\r\n  return appReducers(state, action);\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx",["287","288"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Radio, Select, Input, Spin, Skeleton } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  LockOutlined,\r\n  SyncOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetAllRegisterUser,\r\n  callGetAllVerifyCode,\r\n  callGetInvitationUser,\r\n} from \"../../utils/actions/actions\";\r\nimport logo from \"../../assets/img/logo.png\";\r\nimport admiration from \"../../assets/icons/exclaim.svg\";\r\nimport Arrow from \"../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Register = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomers,\r\n    callGetAllPersons,\r\n    callGetAllEndorsement,\r\n    callGetAllRegisterUser,\r\n    callGetAllVerifyCode,\r\n    callGetInvitationUser,\r\n  } = props;\r\n  const [userType, setUserType] = useState(null);\r\n  const [userCustomer, setUserCustomer] = useState([]);\r\n  const [selectuserCustomer, setSelectUserCustomer] = useState(1);\r\n  const [userPerson, setUserPerson] = useState([]);\r\n  const [userEndorsement, setUserEndorsement] = useState([]);\r\n  const [configComponents, setConfigComponents] = useState({});\r\n  const [verifyPassword, setVerifyPassword] = useState(null);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [dataForm, setDataForm] = useState({\r\n    idPersonType: null,\r\n    idEndorsement: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    username: null,\r\n    password: null,\r\n    idInvitation: null,\r\n  });\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  const copyErrors = {\r\n    errorPass: {\r\n      error: false,\r\n      message: \"Las contraseñas no coinciden\",\r\n      errorEmpty: false,\r\n      messageEmpty: \"La contraseña es requerida\",\r\n    },\r\n    errorGivenName: {\r\n      error: false,\r\n      message: \"El Nombre o Razón social es requerido\",\r\n    },\r\n    errorUserName: {\r\n      error: false,\r\n      message: \"El correo electrónico es requerido\",\r\n      errorFormat: false,\r\n      messageFormatError: \"El correo electronico no es valido\",\r\n    },\r\n    errorPersonType: {\r\n      error: false,\r\n      message: \"El tipo de persona es requerido\",\r\n    },\r\n    errorCodeVerify: {\r\n      error: false,\r\n      message: \"El código de verificación ingresado es invalido\",\r\n    },\r\n  };\r\n  const [errorsRegister, setErrorsRegister] = useState(copyErrors);\r\n  const [errorFormulary, setErrorFormulary] = useState(false);\r\n  const [idRequestSignUp, setIdRequestSignUp] = useState(null);\r\n  const [codeVerify, setCodeVerify] = useState({\r\n    value1: \"\",\r\n    value2: \"\",\r\n    value3: \"\",\r\n    value4: \"\",\r\n    value5: \"\",\r\n    value6: \"\",\r\n  });\r\n  const errorCatchBase = {\r\n    error: false,\r\n    message: \"\",\r\n  };\r\n  const [errorBase, setErrorBase] = useState(errorCatchBase);\r\n\r\n  const handlerCallApiCustomer = async (data) => {\r\n    try {\r\n      const response = await callGetAllCustomers(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserCustomer(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiPersonTypes = async (data) => {\r\n    const { match } = props;\r\n    const params = isEmpty(match.params) === false ? match.params : {};\r\n    try {\r\n      const response = await callGetAllPersons(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      if (isEmpty(params) === false && isEmpty(responseResult) === false) {\r\n        const filterCondition = responseResult.find((row) => {\r\n          return row.idPersonType == params.idCustomerType;\r\n        });\r\n        const parseResult = JSON.parse(filterCondition.jsonProperties);\r\n        setConfigComponents(parseResult);\r\n      }\r\n      setUserPerson(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiEndorsement = async (data) => {\r\n    try {\r\n      const response = await callGetAllEndorsement(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserEndorsement(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetInvitationUser = async (id) => {\r\n    try {\r\n      const response = await callGetInvitationUser(id);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      await handlerCallApiPersonTypes({\r\n        idType: 1,\r\n        idCustomerType: responseResult.idCustomerType,\r\n      });\r\n      await handlerCallApiEndorsement({\r\n        idType: 1,\r\n      });\r\n      setSelectUserCustomer(responseResult.idCustomerType);\r\n      setDataForm({\r\n        ...dataForm,\r\n        idPersonType: responseResult.idPersonType,\r\n        givenName: responseResult.givenName,\r\n        username: responseResult.usernameRequested,\r\n        idInvitation: responseResult.idInvitation,\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiRegister = async (data) => {\r\n    try {\r\n      const response = await callGetAllRegisterUser(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : \"\";\r\n      setIdRequestSignUp(\r\n        isEmpty(responseResult) === false ? responseResult.idRequestSignUp : \"\"\r\n      );\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallVerifyCode = async (data) => {\r\n    try {\r\n      await callGetAllVerifyCode(data);\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerVerifyInformation = async (data) => {\r\n    const emailRegex = /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i;\r\n    let objectErrors = errorsRegister;\r\n    let validatePass = true;\r\n    let validateIdPerson = true;\r\n    let validateGivenName = true;\r\n    let validateUserName = true;\r\n    const validateTypeEmail =\r\n      isNil(data.username) === false ? emailRegex.test(data.username) : false;\r\n\r\n    if (\r\n      isEmpty(data.password) === false &&\r\n      isEmpty(data.verifyPassword) === false &&\r\n      data.password === data.verifyPassword\r\n    ) {\r\n      validatePass = true;\r\n    } else if (isEmpty(data.password) || isEmpty(data.verifyPassword)) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, errorEmpty: true },\r\n      };\r\n      validatePass = false;\r\n    } else if (data.password !== data.verifyPassword) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, error: true },\r\n      };\r\n      validatePass = false;\r\n    }\r\n\r\n    if (isNil(data.idPersonType) === false) {\r\n      validateIdPerson = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPersonType: { ...objectErrors.errorPersonType, error: true },\r\n      };\r\n      validateIdPerson = false;\r\n    }\r\n\r\n    if (isNil(data.givenName) === false && isEmpty(data.givenName) === false) {\r\n      validateGivenName = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorGivenName: { ...objectErrors.errorGivenName, error: true },\r\n      };\r\n      validateGivenName = false;\r\n    }\r\n\r\n    if (\r\n      isNil(data.username) === false &&\r\n      isEmpty(data.username) === false &&\r\n      validateTypeEmail === true\r\n    ) {\r\n      validateUserName = true;\r\n    } else {\r\n      if (isEmpty(data.username) || isEmpty(data.username)) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, error: true },\r\n        };\r\n      } else if (validateTypeEmail === false) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, errorFormat: true },\r\n        };\r\n      }\r\n      validateUserName = false;\r\n    }\r\n\r\n    setErrorsRegister(objectErrors);\r\n\r\n    return (\r\n      validatePass && validateIdPerson && validateGivenName && validateUserName\r\n    );\r\n  };\r\n\r\n  const selectPerson = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1>\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            ¿Qué te trae por aquí?{\" \"}\r\n          </h1>\r\n          <div className=\"login_inputs_form\">\r\n            <Skeleton loading={isEmpty(userCustomer) === true} active />\r\n            {isEmpty(userCustomer) === false && (\r\n              <Radio.Group\r\n                name=\"radiogroup\"\r\n                value={selectuserCustomer}\r\n                defaultValue={1}\r\n                onChange={(e) => {\r\n                  setSelectUserCustomer(e.target.value);\r\n                }}\r\n              >\r\n                {userCustomer.map((row) => {\r\n                  return (\r\n                    <p className=\"visible\" style={{ marginBottom: \"32px\" }}>\r\n                      <Radio value={row.id}> {row.text} </Radio>\r\n                    </p>\r\n                  );\r\n                })}\r\n              </Radio.Group>\r\n            )}\r\n\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  await handlerCallApiPersonTypes({\r\n                    idType: 1,\r\n                    idCustomerType: selectuserCustomer,\r\n                  });\r\n                  await handlerCallApiEndorsement({\r\n                    idType: 1,\r\n                  });\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const selectForm = (\r\n    <div className=\"login_main\" style={{ height: \"100%\" }}>\r\n      <div className=\"login_card_form large\">\r\n        <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n          <div className=\"register_holder\">\r\n            <div className=\"login_top_form\">\r\n              <h1>\r\n                <button\r\n                  className=\"arrow-back-to\"\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    const { match } = props;\r\n                    const params =\r\n                      isEmpty(match.params) === false ? match.params : {};\r\n                    if (isEmpty(params) === false) {\r\n                      history.push(\"/login\");\r\n                    } else {\r\n                      setUserType(1);\r\n                    }\r\n                  }}\r\n                >\r\n                  <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                </button>\r\n                Completa tu perfil{\" \"}\r\n              </h1>\r\n              <div\r\n                className={`error_login_incorrect_data ${\r\n                  errorFormulary === false ? \"hide\" : \"visible\"\r\n                }`}\r\n                style={{ display: \"flex\", flexDirection: \"column\" }}\r\n              >\r\n                {errorBase.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorBase.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorGivenName.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorGivenName.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPass.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPass.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPass.errorEmpty && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPass.messageEmpty}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPersonType.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPersonType.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorUserName.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorUserName.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorUserName.errorFormat && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>\r\n                      {errorsRegister.errorUserName.messageFormatError}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <label className=\"fieldset_title\">Información personal</label>\r\n              <div className=\"register_row half\">\r\n                <Select\r\n                  placeholder=\"Tipo de Persona\"\r\n                  value={dataForm.idPersonType}\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    setConfigComponents(configureOption);\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                    setDataForm({ ...dataForm, idPersonType: value });\r\n                  }}\r\n                >\r\n                  {isEmpty(userPerson) === false &&\r\n                    userPerson.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.id}\r\n                          onClick={() => {\r\n                            return isNil(row) === false &&\r\n                              isNil(row.jsonProperties) === false\r\n                              ? JSON.parse(row.jsonProperties)\r\n                              : {};\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n                {isEmpty(configComponents) === false &&\r\n                  configComponents.idEndorsement && (\r\n                    <Select\r\n                      placeholder=\"Aval\"\r\n                      onChange={(value) => {\r\n                        setDataForm({ ...dataForm, idEndorsement: value });\r\n                      }}\r\n                    >\r\n                      {isEmpty(userEndorsement) === false &&\r\n                        userEndorsement.map((row) => {\r\n                          return <Option value={row.id}>{row.text}</Option>;\r\n                        })}\r\n                    </Select>\r\n                  )}\r\n              </div>\r\n              <div className=\"register_row\">\r\n                <Input\r\n                  value={dataForm.givenName}\r\n                  suffix={<UserOutlined />}\r\n                  placeholder={\r\n                    configComponents.lastName ? \"Nombre(s):\" : \"Razón Social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, givenName: e.target.value });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"register_row half\">\r\n                {isEmpty(configComponents) === false &&\r\n                  configComponents.lastName && (\r\n                    <Input\r\n                      value={dataForm.lastName}\r\n                      suffix={<UserOutlined />}\r\n                      placeholder=\"Primer Apellido\"\r\n                      onChange={(e) => {\r\n                        setDataForm({ ...dataForm, lastName: e.target.value });\r\n                      }}\r\n                    />\r\n                  )}\r\n                {isEmpty(configComponents) === false &&\r\n                  configComponents.mothersMaidenName && (\r\n                    <Input\r\n                      value={dataForm.mothersMaidenName}\r\n                      suffix={<UserOutlined />}\r\n                      placeholder=\"Segundo Apellido\"\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          mothersMaidenName: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  )}\r\n              </div>\r\n              <label className=\"fieldset_title\">\r\n                {\" \"}\r\n                Información de contacto{\" \"}\r\n              </label>\r\n              <div className=\"register_row half\">\r\n                <Input\r\n                  value={dataForm.phoneNumber}\r\n                  suffix={<PhoneOutlined />}\r\n                  placeholder=\"Teléfono celular\"\r\n                  onChange={(e) => {\r\n                    const regexp = /^([0-9])*$/;\r\n                    if (regexp.test(e.target.value) === true) {\r\n                      setDataForm({ ...dataForm, phoneNumber: e.target.value });\r\n                    }\r\n                  }}\r\n                />\r\n                <Input\r\n                  value={dataForm.username}\r\n                  suffix={<MailOutlined />}\r\n                  placeholder=\"Correo electrónico\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      username: e.target.value,\r\n                    });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <label className=\"fieldset_title\"> Contraseña </label>\r\n              <div className=\"register_row half\">\r\n                <Input\r\n                  value={dataForm.password}\r\n                  suffix={<LockOutlined />}\r\n                  placeholder=\"Contraseña\"\r\n                  type=\"password\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      password: e.target.value,\r\n                    });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n                <Input\r\n                  value={verifyPassword}\r\n                  suffix={<LockOutlined />}\r\n                  placeholder=\"Confirmar Contraseña\"\r\n                  type=\"password\"\r\n                  onChange={(e) => {\r\n                    setVerifyPassword(e.target.value);\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div\r\n                className=\"button_init_primary\"\r\n                style={{ margin: \"16px 0 0\" }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={async () => {\r\n                    try {\r\n                      const verifyData = await handlerVerifyInformation({\r\n                        ...dataForm,\r\n                        verifyPassword,\r\n                      });\r\n                      setErrorFormulary(!verifyData);\r\n                      if (verifyData === true) {\r\n                        setSpinVisible(true);\r\n                        await handlerCallApiRegister({\r\n                          ...dataForm,\r\n                          idCustomerType: selectuserCustomer,\r\n                          offset: \"-06:00\",\r\n                        });\r\n                        setUserType(3);\r\n                        setSpinVisible(false);\r\n                      }\r\n                    } catch (error) {\r\n                      setSpinVisible(false);\r\n                      setErrorFormulary(true);\r\n                      setErrorBase({\r\n                        ...errorBase,\r\n                        error: true,\r\n                        message: error,\r\n                      });\r\n                      setTimeout(() => {\r\n                        setErrorFormulary(false);\r\n                        setErrorBase(errorCatchBase);\r\n                      }, 3000);\r\n                    }\r\n                  }}\r\n                >\r\n                  <span> Registrarme </span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const insterCodeCompoent = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n          <div className=\"login_top_form\">\r\n            <h1>\r\n              <button\r\n                className=\"arrow-back-to\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n              </button>\r\n              Ingresa tu código{\" \"}\r\n            </h1>\r\n            <div\r\n              className={`error_login_incorrect_data ${\r\n                errorsRegister.errorCodeVerify.error === false\r\n                  ? \"hide\"\r\n                  : \"visible\"\r\n              }`}\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              {errorsRegister.errorCodeVerify.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorCodeVerify.message}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <p className=\"recoverInstructions\">\r\n              Enviamos un código de confirmación al correo{\" \"}\r\n              <strong>{dataForm.username}</strong>\r\n            </p>\r\n            <div className=\"codeForm\">\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-0\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value1}\r\n                  maxLength={1}\r\n                  minLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-1\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value1: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-1\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value2}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-0\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-2\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value2: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-2\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value3}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-1\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-3\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value3: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-3\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value4}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-2\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-4\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value4: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-4\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value5}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-3\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-5\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value5: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-5\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value6}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-4\").focus();\r\n                    } else {\r\n                      document.getElementById(\"button-send-code\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value6: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"button_init_primary\" style={{ margin: \"60px 0 0\" }}>\r\n              <button\r\n                type=\"button\"\r\n                id=\"button-send-code\"\r\n                onClick={async () => {\r\n                  setSpinVisible(true);\r\n                  try {\r\n                    let numberResult = \"\";\r\n                    for (const property in codeVerify) {\r\n                      numberResult += codeVerify[property];\r\n                    }\r\n                    await handlerCallVerifyCode({\r\n                      code: numberResult,\r\n                      idRequestSignUp,\r\n                      offset: \"-06:00\",\r\n                      idInvitation: dataForm.idInvitation,\r\n                    });\r\n                    setUserType(4);\r\n                  } catch (error) {\r\n                    const objectErrors = {\r\n                      ...errorsRegister,\r\n                      errorCodeVerify: {\r\n                        ...errorsRegister.errorCodeVerify,\r\n                        error: true,\r\n                        message: error,\r\n                      },\r\n                    };\r\n                    setErrorsRegister(objectErrors);\r\n                    setSpinVisible(false);\r\n                  }\r\n                }}\r\n              >\r\n                <span> Validar </span>\r\n              </button>\r\n            </div>\r\n            <div\r\n              className=\"login-recover-pass\"\r\n              style={{ marginTop: \"15px\", cursor: \"pointer\" }}\r\n            >\r\n              <p\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  setErrorsRegister(copyErrors);\r\n                  try {\r\n                    const verifyData = await handlerVerifyInformation({\r\n                      ...dataForm,\r\n                      verifyPassword,\r\n                    });\r\n                    setErrorFormulary(!verifyData);\r\n                    if (verifyData === true) {\r\n                      await handlerCallApiRegister({\r\n                        ...dataForm,\r\n                        idCustomerType: selectuserCustomer,\r\n                        offset: \"-06:00\",\r\n                      });\r\n                    }\r\n                  } catch (error) {\r\n                    setErrorFormulary(true);\r\n                    setErrorBase({ ...errorBase, error: true, message: error });\r\n                    setTimeout(() => {\r\n                      setErrorFormulary(false);\r\n                      setErrorBase(errorCatchBase);\r\n                    }, 3000);\r\n                  }\r\n                }}\r\n              >\r\n                Reenviar código\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const successRegister = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> Registro completo </h1>\r\n          <p className=\"recoverInstructions\">\r\n            Bienvenido(a) <strong>{dataForm.givenName}</strong>. Estamos muy\r\n            emocionados de tenerte a bordo. Ingresa a tu cuenta y que comience\r\n            la aventura.\r\n          </p>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <span>Ir al Login</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderTypeComponent = (type) => {\r\n    let component = <div />;\r\n    switch (type) {\r\n      case 1:\r\n        component = selectPerson;\r\n        break;\r\n      case 2:\r\n        component = selectForm;\r\n        break;\r\n      case 3:\r\n        component = insterCodeCompoent;\r\n        break;\r\n      case 4:\r\n        component = successRegister;\r\n        break;\r\n      default:\r\n        component = <div />;\r\n        break;\r\n    }\r\n    return component;\r\n  };\r\n\r\n  const handlerAsyncCallAppis = async () => {\r\n    await handlerCallApiCustomer({ idType: 1 });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { match } = props;\r\n    const params = isEmpty(match.params) === false ? match.params : {};\r\n    if (isEmpty(params) === false) {\r\n      setUserType(2);\r\n      handlerCallGetInvitationUser(params.idInvitation, params);\r\n    } else {\r\n      setUserType(1);\r\n      handlerAsyncCallAppis();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"login_head_logo\">\r\n        <img src={logo} alt=\"Homify Logo\" className=\"login_logo\" />\r\n      </div>\r\n      {renderTypeComponent(userType)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomers: (data) => dispatch(callGetAllCustomers(data)),\r\n  callGetAllPersons: (data) => dispatch(callGetAllPersons(data)),\r\n  callGetAllEndorsement: (data) => dispatch(callGetAllEndorsement(data)),\r\n  callGetAllRegisterUser: (data) => dispatch(callGetAllRegisterUser(data)),\r\n  callGetAllVerifyCode: (data) => dispatch(callGetAllVerifyCode(data)),\r\n  callGetInvitationUser: (paramId) => dispatch(callGetInvitationUser(paramId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx",["289"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx",["290","291","292","293","294","295"],"import React, { useState, useEffect, Suspense } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Layout, Menu, Drawer, notification } from \"antd\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport \"antd/dist/antd.css\";\r\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from \"@ant-design/icons\";\r\nimport IconDashboard from \"../../assets/icons/iconDashboard.svg\";\r\nimport IconOwner from \"../../assets/icons/iconHome.svg\";\r\nimport IconRenter from \"../../assets/icons/renter.svg\";\r\nimport IconDocument from \"../../assets/icons/document.svg\";\r\nimport IconChat from \"../../assets/icons/chat.svg\";\r\nimport IconEdit from \"../../assets/icons/edit.svg\";\r\nimport IconShortLogo from \"../../assets/icons/logoShortWhite.svg\";\r\nimport IconLongtLogo from \"../../assets/icons/logoLongWhite.svg\";\r\nimport IconNotification from \"../../assets/icons/Notification.svg\";\r\nimport IconProfile from \"../../assets/icons/Profile.svg\";\r\nimport IconClose from \"../../assets/icons/LogoutWhite.svg\";\r\nimport routes from \"../../routes\";\r\n\r\nconst { Header, Sider } = Layout;\r\n\r\nconst Loading = () => (\r\n  <div className=\"loader-auth-spiner\">\r\n    <div />\r\n  </div>\r\n);\r\n\r\nconst DefaultLayout = (props) => {\r\n  const { history, authenticated, dataProfileMenu, dataProfile } = props;\r\n  const [collapsed, setCollapsed] = useState(false);\r\n  const [collapsedButton, setCollapsedButton] = useState(false);\r\n  const arrayIconst = {\r\n    IconDashboard,\r\n    IconOwner,\r\n    IconRenter,\r\n    IconDocument,\r\n    IconChat,\r\n    IconEdit,\r\n    IconClose,\r\n  };\r\n\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isNil(dataProfile) === true) {\r\n      history.push(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {isNil(dataProfile) === false && (\r\n        <Layout>\r\n          <Drawer\r\n            placement=\"left\"\r\n            className=\"drawer-menu_header\"\r\n            closable={false}\r\n            onClose={() => {\r\n              setCollapsedButton(!collapsedButton);\r\n            }}\r\n            visible={collapsedButton}\r\n            key=\"left\"\r\n          >\r\n            {\" \"}\r\n            <div className=\"logo\">\r\n              <img src={IconLongtLogo} alt=\"Logo short\" />\r\n              <img\r\n                src={IconShortLogo}\r\n                alt=\"Logo short\"\r\n                style={{ display: collapsed === true ? \"block\" : \"none\" }}\r\n              />\r\n            </div>\r\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n              {isEmpty(dataProfileMenu) === false &&\r\n                dataProfileMenu.map((row) => {\r\n                  return (\r\n                    <Menu.Item\r\n                      key={`${row.idMenu}`}\r\n                      onClick={(event) => {\r\n                        history.push(row.path);\r\n                        setCollapsedButton(!collapsedButton);\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"ant-menu-item-icon\"\r\n                        width=\"15\"\r\n                        src={arrayIconst[row.icon]}\r\n                      />\r\n                      <span className=\"tex-menu-icon-ant\">{row.menuName}</span>\r\n                    </Menu.Item>\r\n                  );\r\n                })}\r\n            </Menu>\r\n          </Drawer>\r\n          <Sider collapsible collapsed={collapsed} onCollapse={toggle}>\r\n            <div className=\"logo\">\r\n              <img\r\n                src={IconLongtLogo}\r\n                alt=\"Logo short\"\r\n                style={{ display: collapsed === true ? \"none\" : \"block\" }}\r\n              />\r\n              <img\r\n                src={IconShortLogo}\r\n                alt=\"Logo short\"\r\n                style={{ display: collapsed === true ? \"block\" : \"none\" }}\r\n              />\r\n            </div>\r\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n              {isEmpty(dataProfileMenu) === false &&\r\n                dataProfileMenu.map((row) => {\r\n                  return (\r\n                    <Menu.Item\r\n                      key={`${row.idMenu}`}\r\n                      onClick={(event) => {\r\n                        history.push(row.path);\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"ant-menu-item-icon\"\r\n                        width=\"15\"\r\n                        src={arrayIconst[row.icon]}\r\n                      />\r\n                      <span className=\"tex-menu-icon-ant\">{row.menuName}</span>\r\n                    </Menu.Item>\r\n                  );\r\n                })}\r\n            </Menu>\r\n          </Sider>\r\n          <Layout className=\"site-layout\">\r\n            <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n              <div className=\"header-title-button\">\r\n                <button\r\n                  className=\"button-drawer-header\"\r\n                  onClick={() => {\r\n                    setCollapsedButton(!collapsedButton);\r\n                  }}\r\n                >\r\n                  {React.createElement(\r\n                    collapsedButton ? MenuUnfoldOutlined : MenuFoldOutlined\r\n                  )}\r\n                </button>\r\n                <h2>Dashboard</h2>\r\n              </div>\r\n              <div className=\"header-info-user\">\r\n                <div className=\"hi-user-name-type\">\r\n                  <strong>{dataProfile.showName}</strong>\r\n                  <span>{dataProfile.userType}</span>\r\n                </div>\r\n                <button className=\"button-header\">\r\n                  <img src={IconNotification} />\r\n                </button>\r\n                <button className=\"button-header\">\r\n                  <img src={IconProfile} />\r\n                </button>\r\n              </div>\r\n            </Header>\r\n            <Suspense fallback={<Loading />}>\r\n              <Switch>\r\n                {routes.map((route) => {\r\n                  return (\r\n                    <Route\r\n                      history={history}\r\n                      key={route.id}\r\n                      path={route.path}\r\n                      exact={route.exact}\r\n                      name={route.name}\r\n                      render={(prop) => {\r\n                        if (authenticated === true) {\r\n                          return (\r\n                            <route.component {...prop} history={history} />\r\n                          );\r\n                        } else {\r\n                          return (\r\n                            <Redirect\r\n                              to={{\r\n                                pathname: \"/\",\r\n                                state: { from: props.location },\r\n                              }}\r\n                            />\r\n                          );\r\n                        }\r\n                      }}\r\n                    />\r\n                  );\r\n                })}\r\n              </Switch>\r\n            </Suspense>\r\n          </Layout>\r\n        </Layout>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n    dataProfileMenu: dataProfileMenu.dataProfileMenu,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultLayout);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx",["296","297","298","299","300","301","302","303","304"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx",["305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Tabs,\r\n  Pagination,\r\n  Carousel,\r\n  Select,\r\n} from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport IconOwner from \"../../assets/icons/iconHomeIndicator.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../assets/icons/activity.svg\";\r\nimport IconArroRight from \"../../assets/icons/arrowRight.svg\";\r\nimport SectionDocuments from \"./sectionDocuments/sectionDocuments\";\r\nimport SectionInfoTenant from \"./sectionDocuments/sectionCardInformation\";\r\nimport SectionMessages from \"./sectionDocuments/sectionMessages\";\r\nimport SectionRegisterPayment from \"./sectionDocuments/sectionRegisterPayment\";\r\nimport {\r\n  callGetAllCustomerTenantById,\r\n  callGetPaymentTypes,\r\n  callGetPaymentContract,\r\n  callAddDocument,\r\n  callGetAllDocumentTypes,\r\n  callGetPaymentContractDocument,\r\n  callAddCustomerMessage,\r\n  callGetCustomerMessage,\r\n} from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\n\r\nconst TenantFromOwner = (props) => {\r\n  const {\r\n    dataProfile,\r\n    match,\r\n    callGetAllCustomerTenantById,\r\n    callGetPaymentTypes,\r\n    callGetPaymentContract,\r\n    callAddDocument,\r\n    callGetAllDocumentTypes,\r\n    callGetPaymentContractDocument,\r\n    callAddCustomerMessage,\r\n    callGetCustomerMessage,\r\n  } = props;\r\n  const { params } = match;\r\n  const idCustomerTenant = params.idCustomerTenant;\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataPayments, setDataPayments] = useState([]);\r\n  const [dataDocumentTypes, setDataDocumentTypes] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [dataDocumentsRepository, setDataDocumentsRepository] = useState([]);\r\n  const [idContractData, setIdContractData] = useState(null);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [idTopIndexDocuments, setIdTopIndexDocuments] = useState(-1);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n\r\n  const dotChange = useRef(null);\r\n  const contentStyle = {\r\n    height: \"160px\",\r\n    color: \"#fff\",\r\n    lineHeight: \"160px\",\r\n    textAlign: \"center\",\r\n    background: \"#364d79\",\r\n  };\r\n\r\n  const handlerCallGetAllPaymentTypes = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPayments(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetAllDocumentTypes = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllDocumentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentTypes(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetPaymentContractDocument = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentContractDocument({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        topIndex: idTopIndexDocuments,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentsRepository(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexDocuments(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetAllCustomerTenantById = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerTenantById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenant(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdContractData(responseResult.idContract);\r\n        handlerCallGetAllPaymentTypes({\r\n          type: 1,\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n        handlerCallGetCustomerMessage({\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetAllPaymentContract = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callGetPaymentContract({\r\n        ...data,\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      handlerCallGetAllCustomerTenantById();\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, type) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: type.idPaymentType,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(data.originFileObj, dataDocument);\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      return Promise.resolve(documentId);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallAddCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      handlerCallGetCustomerMessage({\r\n        idContract: idContractData,\r\n        idCustomerTenant,\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllCustomerTenantById();\r\n    handlerCallGetAllDocumentTypes();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <SectionInfoTenant dataTenant={dataTenant} />\r\n        <div className=\"actions-information-tenant\">\r\n          <div className=\"tabs-tenant-information\">\r\n            <Tabs\r\n              defaultActiveKey=\"1\"\r\n              onChange={() => {}}\r\n              tabBarStyle={{ color: \"#A0A3BD\" }}\r\n              tabPosition=\"top\"\r\n            >\r\n              <TabPane tab=\"Registrar pago\" key=\"1\">\r\n                <SectionRegisterPayment\r\n                  dataPayments={dataPayments}\r\n                  spinVisible={spinVisible}\r\n                  onGetDocuments={async (arrayDocument, data) => {\r\n                    setSpinVisible(true);\r\n                    const dataDocuments = await Promise.all(\r\n                      arrayDocument.map((row) => {\r\n                        const item = handlerAddDocument(row, data);\r\n                        return item;\r\n                      })\r\n                    );\r\n                    const parseDocument = dataDocuments.join();\r\n                    const dataSend = {\r\n                      ...data,\r\n                      idCustomerTenant,\r\n                      idContract: idContractData,\r\n                      documents: parseDocument,\r\n                    };\r\n                    handlerCallGetAllPaymentContract(dataSend);\r\n                  }}\r\n                  onRegisterPayment={(data) => {}}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Documentos\" key=\"2\">\r\n                <SectionDocuments\r\n                  dataDocumentTypes={dataDocumentTypes}\r\n                  dataDocumentsRepository={dataDocumentsRepository}\r\n                  onSearchDocument={(data) => {\r\n                    handlerCallGetPaymentContractDocument(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Mensajes\" key=\"3\">\r\n                <SectionMessages\r\n                  dataMessages={dataMessages}\r\n                  getMoreCoincidences={() => {\r\n                    handlerCallGetCustomerMessage({\r\n                      idContract: idContractData,\r\n                      idCustomerTenant,\r\n                    });\r\n                  }}\r\n                  onSendMessages={(data) => {\r\n                    handlerCallAddCustomerMessage(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Cotizar incidencia\" key=\"4\" />\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomerTenantById: (data) =>\r\n    dispatch(callGetAllCustomerTenantById(data)),\r\n  callGetPaymentTypes: (data) => dispatch(callGetPaymentTypes(data)),\r\n  callGetPaymentContract: (data) => dispatch(callGetPaymentContract(data)),\r\n  callAddDocument: (file, data) => dispatch(callAddDocument(file, data)),\r\n  callGetAllDocumentTypes: (data) => dispatch(callGetAllDocumentTypes(data)),\r\n  callGetPaymentContractDocument: (data) =>\r\n    dispatch(callGetPaymentContractDocument(data)),\r\n  callAddCustomerMessage: (data) => dispatch(callAddCustomerMessage(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TenantFromOwner);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx",["322","323","324","325","326"],"import React, { useRef, useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Pagination,\r\n  Carousel,\r\n  Select,\r\n  Row,\r\n  Col,\r\n  DatePicker,\r\n  Image,\r\n  Button,\r\n} from \"antd\";\r\nimport Search from \"../../../assets/icons/Search.svg\";\r\nimport ENVIROMENT from \"../../../utils/constants/enviroments\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionDocuments = (props) => {\r\n  const {\r\n    dataDocumentTypes,\r\n    onSearchDocument,\r\n    dataDocumentsRepository,\r\n  } = props;\r\n  const dotChange = useRef(null);\r\n  const [selectDateFilter, setSelectDateFilter] = useState(null);\r\n  const [selectDocumentType, setSelectDocumentType] = useState(null);\r\n  const [statesDates, setStatesDates] = useState({\r\n    now: `${moment().format(\"YYYY-MM-DD\")},${moment().format(\"YYYY-MM-DD\")}`,\r\n    month: `${moment().startOf(\"month\").format(\"YYYY-MM-DD\")},${moment()\r\n      .endOf(\"month\")\r\n      .format(\"YYYY-MM-DD\")}`,\r\n    startDate: moment().format(\"YYYY-MM-DD\"),\r\n    endDate: moment().format(\"YYYY-MM-DD\"),\r\n  });\r\n\r\n  const handlerToRenderPickerType = (type) => {\r\n    let component = null;\r\n    switch (type) {\r\n      case \"1\":\r\n        component = null;\r\n        break;\r\n      case \"2\":\r\n        component = (\r\n          <Col\r\n            span={4}\r\n            xs={{ span: 24 }}\r\n            md={{ span: 4 }}\r\n            style={{ marginBottom: \"10px\" }}\r\n          >\r\n            <DatePicker\r\n              placeholder=\"Seleccionar Mes\"\r\n              onChange={(momentFormat, date) => {\r\n                const initDay = moment(momentFormat)\r\n                  .startOf(\"month\")\r\n                  .format(\"YYYY-MM-DD\");\r\n                const endDate = moment(momentFormat)\r\n                  .endOf(\"month\")\r\n                  .format(\"YYYY-MM-DD\");\r\n                setStatesDates({\r\n                  ...statesDates,\r\n                  month: `${initDay},${endDate}`,\r\n                });\r\n              }}\r\n              picker=\"month\"\r\n              format=\"MMMM YYYY\"\r\n            />\r\n          </Col>\r\n        );\r\n        break;\r\n      case \"3\":\r\n        component = (\r\n          <>\r\n            <Col\r\n              span={4}\r\n              xs={{ span: 24 }}\r\n              md={{ span: 4 }}\r\n              style={{ marginBottom: \"10px\" }}\r\n            >\r\n              <DatePicker\r\n                placeholder=\"Fecha inicial\"\r\n                onChange={(momentFormat, date) => {\r\n                  setStatesDates({\r\n                    ...statesDates,\r\n                    startDate: moment(momentFormat).format(\"YYYY-MM-DD\"),\r\n                  });\r\n                }}\r\n                format=\"DD MMMM YYYY\"\r\n              />\r\n            </Col>\r\n            <Col span={1} />\r\n            <Col\r\n              span={4}\r\n              xs={{ span: 24 }}\r\n              md={{ span: 4 }}\r\n              style={{ marginBottom: \"10px\" }}\r\n            >\r\n              <DatePicker\r\n                placeholder=\"Fecha final\"\r\n                onChange={(momentFormat, date) => {\r\n                  setStatesDates({\r\n                    ...statesDates,\r\n                    endDate: moment(momentFormat).format(\"YYYY-MM-DD\"),\r\n                  });\r\n                }}\r\n                format=\"DD MMMM YYYY\"\r\n              />\r\n            </Col>\r\n          </>\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return component;\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-content-tabs\">\r\n      <div className=\"content-documents\">\r\n        <div className=\"content-history\">\r\n          <div className=\"select-file\">\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col\r\n                span={7}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 7 }}\r\n                style={{ marginBottom: \"10px\" }}\r\n              >\r\n                <Select\r\n                  placeholder=\"Tipo de documento\"\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    setSelectDocumentType(value);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataDocumentTypes) === false &&\r\n                    dataDocumentTypes.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idDocumentType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.documentType}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} />\r\n              <Col\r\n                span={4}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 4 }}\r\n                style={{ marginBottom: \"10px\" }}\r\n              >\r\n                <Select\r\n                  placeholder=\"Filtrar por\"\r\n                  onChange={(value, option) => {\r\n                    setSelectDateFilter(value);\r\n                    if (value === \"1\") {\r\n                      const toDay = moment().format(\"YYYY-MM-DD\");\r\n                      setStatesDates({\r\n                        ...statesDates,\r\n                        now: `${toDay},${toDay}`,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  <Option value=\"1\" onClick={() => {}}>\r\n                    Hoy\r\n                  </Option>\r\n                  <Option value=\"2\" onClick={() => {}}>\r\n                    Mes\r\n                  </Option>\r\n                  <Option value=\"3\" onClick={() => {}}>\r\n                    Rango de fecha\r\n                  </Option>\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} />\r\n              {handlerToRenderPickerType(selectDateFilter)}\r\n              <Col span={1} />\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }}>\r\n                <button\r\n                  type=\"button\"\r\n                  style={{ backgroundColor: \"transparent\", border: \"none\" }}\r\n                  onClick={() => {\r\n                    let sendDateFormat = \"\";\r\n                    if (selectDateFilter === \"1\") {\r\n                      sendDateFormat = statesDates.now;\r\n                    } else if (selectDateFilter === \"2\") {\r\n                      sendDateFormat = statesDates.month;\r\n                    } else if (selectDateFilter === \"3\") {\r\n                      sendDateFormat = `${statesDates.startDate},${statesDates.endDate}`;\r\n                    } else {\r\n                      sendDateFormat = `${moment().format(\r\n                        \"YYYY-MM-DD\"\r\n                      )},${moment().format(\"YYYY-MM-DD\")}`;\r\n                    }\r\n                    onSearchDocument({\r\n                      filterDate: sendDateFormat,\r\n                      idDocumentType: selectDocumentType,\r\n                    });\r\n                  }}\r\n                >\r\n                  <img src={Search} alt=\"search\" />\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"content-files\">\r\n            {isEmpty(dataDocumentsRepository) === false &&\r\n              dataDocumentsRepository.map((row) => {\r\n                return (\r\n                  <div className=\"card-file-information\">\r\n                    <div className=\"box-preview\">\r\n                      <Image\r\n                        width={100}\r\n                        height={120}\r\n                        src={`${ENVIROMENT}/api/viewFile/${row.idDocument}/${row.bucketSoruce}`}\r\n                      />\r\n                    </div>\r\n                    <div className=\"box-information\">\r\n                      <strong>{row.documentType}</strong>\r\n                      <div className=\"data-image\">\r\n                        <div>\r\n                          <span>Subido por:</span>\r\n                          <span>Fecha de pago:</span>\r\n                        </div>\r\n                        <div>\r\n                          <strong>{row.uploadedByUser}</strong>\r\n                          <strong>{row.uploadedAt}</strong>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}{\" \"}\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"content-upload\">\r\n          <div className=\"button_init_primary\">\r\n            <label type=\"button\" for=\"file-input\" onClick={() => {}}>\r\n              <span>Subir documentos</span>\r\n            </label>\r\n            <input\r\n              id=\"file-input\"\r\n              type=\"file\"\r\n              accept=\"image/png, image/jpeg, image/jpg , image/gif\"\r\n              onChange={(e) => {}}\r\n            />\r\n          </div>\r\n          <div className=\"section-container-action-up\">\r\n            <div className=\"container-carousel\">\r\n              <Carousel afterChange={() => {}} ref={dotChange} dots={false}>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n              </Carousel>\r\n            </div>\r\n            <Pagination\r\n              pageSize={1}\r\n              size=\"small\"\r\n              total={3}\r\n              onChange={(event) => {\r\n                dotChange.current.goTo(event - 1);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n       */}\r\n      </div>\r\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <Button\r\n          type=\"link\"\r\n          onClick={() => {\r\n            let sendDateFormat = \"\";\r\n            if (selectDateFilter === \"1\") {\r\n              sendDateFormat = statesDates.now;\r\n            } else if (selectDateFilter === \"2\") {\r\n              sendDateFormat = statesDates.month;\r\n            } else if (selectDateFilter === \"3\") {\r\n              sendDateFormat = `${statesDates.startDate},${statesDates.endDate}`;\r\n            } else {\r\n              sendDateFormat = `${moment().format(\r\n                \"YYYY-MM-DD\"\r\n              )},${moment().format(\"YYYY-MM-DD\")}`;\r\n            }\r\n            onSearchDocument({\r\n              filterDate: sendDateFormat,\r\n              idDocumentType: selectDocumentType,\r\n            });\r\n          }}\r\n        >\r\n          Mostrar mas\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionDocuments;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx",["327","328"],"import React, { useState } from \"react\";\r\nimport { Timeline, Input, Button } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport SectionCardItemMessage from \"./sectionCardItemMessage\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst SectionMessages = (props) => {\r\n  const { dataMessages, onSendMessages, getMoreCoincidences } = props;\r\n  const [valueText, setValueText] = useState(null);\r\n\r\n  return (\r\n    <div className=\"main-content-tabs\">\r\n      <div className=\"content-messages-sections\">\r\n        <div className=\"section-history-messages\">\r\n          <Timeline>\r\n            {isEmpty(dataMessages) === false &&\r\n              dataMessages.map((row) => {\r\n                return (\r\n                  <SectionCardItemMessage\r\n                    dataInfo={row}\r\n                    sendResponseMessage={(data) => {\r\n                      onSendMessages(data);\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n          </Timeline>\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Button\r\n              type=\"link\"\r\n              onClick={() => {\r\n                getMoreCoincidences();\r\n              }}\r\n            >\r\n              Mostrar mas\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"section-type-messages-fixed\">\r\n          <div className=\"section-type-messages\">\r\n            <div className=\"text-header\">Redactar mensaje</div>\r\n            <textarea\r\n              value={valueText}\r\n              maxlength=\"200\"\r\n              onChange={(e) => {\r\n                setValueText(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onSendMessages({\r\n                  visibilityRule: null,\r\n                  idCustomerMessages: null,\r\n                  customerMessages: valueText,\r\n                });\r\n              }}\r\n            >\r\n              <span>Enviar mensaje</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionMessages;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx",["329","330","331","332","333","334","335","336","337","338"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, Modal, Skeleton } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport IconOwner from \"../../../assets/icons/iconHomeIndicator.svg\";\r\nimport IconWallet from \"../../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../../assets/icons/activity.svg\";\r\nimport IconArroRight from \"../../../assets/icons/arrowRight.svg\";\r\nimport EmptyTenant from \"../../../assets/icons/tenantEmpty.svg\";\r\n\r\nmoment.locale(\"es\");\r\n\r\nconst SectionCardTenant = (props) => {\r\n  const {\r\n    history,\r\n    tenantCoincidences,\r\n    finishCallApis,\r\n    onClickSendInvitation,\r\n  } = props;\r\n\r\n  const formatDate = (date) => {\r\n    let dateFormat = \"\";\r\n    if (date !== \"NA\") {\r\n      dateFormat = moment(date, \"DD/MM/YYYY\").format(\"DD MMMM YYYY\");\r\n    } else {\r\n      dateFormat = date;\r\n    }\r\n    return dateFormat;\r\n  };\r\n\r\n  return (\r\n    <div className=\"renter-card-information\">\r\n      <div className=\"title-cards flex-title-card\">\r\n        <span>Inquilinos</span>\r\n        <div className=\"button_init_primary\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onClickSendInvitation();\r\n            }}\r\n          >\r\n            <span>Invitar Inquilino</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"section-information-renters\">\r\n        {isEmpty(tenantCoincidences) === false &&\r\n          finishCallApis === true &&\r\n          tenantCoincidences.map((row) => {\r\n            return (\r\n              <div className=\"data-renter-info\">\r\n                <div className=\"box-info-user\">\r\n                  <div className=\"avatar-user\">\r\n                    {isNil(row.profileThumbnail) === false ? (\r\n                      <Avatar size={50} src={row.profileThumbnail} />\r\n                    ) : (\r\n                      <Avatar size={50} icon={<UserOutlined />} />\r\n                    )}\r\n                  </div>\r\n                  <div className=\"info-user\">\r\n                    <strong>{row.shortName}</strong>\r\n                    <Rate\r\n                      style={{\r\n                        fontSize: \"15px\",\r\n                        position: \"relative\",\r\n                        bottom: \"5px\",\r\n                      }}\r\n                      tooltips={[]}\r\n                      onChange={() => {}}\r\n                      value={row.ratingRate}\r\n                    />\r\n                    <div className=\"status-payment\">\r\n                      <span>{row.customerStatus}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"info-user-payment\">\r\n                    <div>\r\n                      Próximo Pago:{\" \"}\r\n                      <strong>{formatDate(row.nextPayment)}</strong>\r\n                    </div>\r\n                    <div>\r\n                      Monto de Renta: <strong>{row.rentAmount}</strong>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"button-collapse\">\r\n                  {isNil(row.canSeeTenantDetail) === false &&\r\n                    row.canSeeTenantDetail === true && (\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          history.push(\r\n                            `/websystem/dashboard-owner/tenant/${row.idCustomerTenant}`\r\n                          );\r\n                        }}\r\n                      >\r\n                        <img src={IconArroRight} alt=\"arrow-right\" width=\"15\" />\r\n                      </button>\r\n                    )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        {finishCallApis === false && <Skeleton loading active />}\r\n      </div>\r\n      {isEmpty(tenantCoincidences) === true && finishCallApis === true && (\r\n        <div className=\"empty-tenants\">\r\n          <img src={EmptyTenant} alt=\"\" />\r\n          <span>Aun no tienes inquilinos registrados</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionCardTenant;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx",["339","340","341","342","343"],"import React, { useEffect, useState } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Layout, Avatar, Rate, Modal, Skeleton } from \"antd\";\r\n\r\nconst SectionStatsChart = (props) => {\r\n  const { dataStatsChart, finishCallApis } = props;\r\n  const [dataOptions, setDataOptions] = useState({});\r\n\r\n  const handlerConvertDataChart = (data) => {\r\n    let arrayMonths = [];\r\n    let arrayProfit = [];\r\n    let arrayExpenses = [];\r\n    let arrayBalance = [];\r\n\r\n    data.forEach((element) => {\r\n      arrayMonths.push(element.mes);\r\n      arrayProfit.push(element.ganancia);\r\n      arrayExpenses.push(element.gasto);\r\n      arrayBalance.push(element.balance);\r\n    });\r\n    const dataChart = {\r\n      chart: {\r\n        type: \"column\",\r\n      },\r\n      title: {\r\n        text: \"Estadistica Mensual\",\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: \"Monto\",\r\n        },\r\n      },\r\n      xAxis: {\r\n        categories: arrayMonths,\r\n      },\r\n      credits: {\r\n        enabled: false,\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Ganancias\",\r\n          data: arrayProfit,\r\n          color: \"#4E51D8\",\r\n        },\r\n        {\r\n          name: \"Gastos\",\r\n          data: arrayExpenses,\r\n          color: \"#EF280F\",\r\n        },\r\n        {\r\n          name: \"Balance\",\r\n          data: arrayBalance,\r\n          color: \"#32cd32\",\r\n        },\r\n      ],\r\n    };\r\n    setDataOptions(dataChart);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataStatsChart) === false) {\r\n      handlerConvertDataChart(dataStatsChart);\r\n    }\r\n  }, [dataStatsChart]);\r\n\r\n  return (\r\n    <div className=\"card-chart-information\">\r\n      <div className=\"title-cards\">Ganancias</div>\r\n      <div>\r\n        {finishCallApis === true && isEmpty(dataOptions) === false && (\r\n          <HighchartsReact highcharts={Highcharts} options={dataOptions} />\r\n        )}\r\n        {finishCallApis === false && <Skeleton loading active />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionStatsChart;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx",["344","345","346","347","348","349","350","351","352"],"import React, { useState, useEffect } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n} from \"antd\";\r\nimport {\r\n  InfoCircleOutlined,\r\n  UserOutlined,\r\n  SyncOutlined,\r\n  CloseOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAddProperty = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onClickAddProperty,\r\n    spinVisible,\r\n    onChangeZipCode,\r\n    dataZipCodeAdress,\r\n    dataZipCatalog,\r\n  } = props;\r\n  const initialDataForm = {\r\n    street: null,\r\n    suite: null,\r\n    streetNumber: null,\r\n    neighborhood: null,\r\n    city: null,\r\n    state: null,\r\n    zipCode: null,\r\n    idZipCode: null,\r\n    firstStreetReference: null,\r\n    secondStreetReference: null,\r\n    totalSuites: [],\r\n    departament: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [statesDynamic, setStateDynamic] = useState({});\r\n  const [totalDepartment, setTotalDepartment] = useState([]);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        state: dataZipCodeAdress.state,\r\n        city: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Registrar Propiedad</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>Datos de localización</p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.street}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, street: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.streetNumber}\r\n                  placeholder={\"Numero\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, streetNumber: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.zipCode}\r\n                  placeholder={\"Código postal\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    if (value.length >= 5) {\r\n                      setDataForm({ ...dataForm, zipCode: value });\r\n                      onChangeZipCode(e.target.value);\r\n                    } else {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: null,\r\n                        idZipCode: null,\r\n                        zipCode: value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.state}\r\n                  placeholder={\"Estado\"}\r\n                  disabled\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, state: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.city}\r\n                  disabled\r\n                  placeholder={\"Municipio/Delegacion\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, city: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                {isOpenInput === false ? (\r\n                  <Select\r\n                    placeholder=\"Colonia\"\r\n                    value={dataForm.idZipCode}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setIsOpenInput(dataSelect.isOpen);\r\n                      if (dataSelect.isOpen === true) {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: null,\r\n                          idZipCode: value,\r\n                        });\r\n                      } else {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: option.children,\r\n                          idZipCode: value,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataZipCatalog) === false &&\r\n                      dataZipCatalog.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idZipCode}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.neighborhood}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                ) : (\r\n                  <Input\r\n                    value={dataForm.neighborhood}\r\n                    placeholder={\"Indicar Colonia\"}\r\n                    suffix={\r\n                      <Tooltip title=\"Cerrar\">\r\n                        <CloseOutlined\r\n                          style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                          onClick={() => {\r\n                            setIsOpenInput(false);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idZipCode: null,\r\n                              neighborhood: null,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                    }\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <p>Entre Calles</p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.firstStreetReference}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      firstStreetReference: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.secondStreetReference}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      secondStreetReference: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Agrega departamentos</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Número de departamentos\"\r\n                  value={dataForm.totalSuites}\r\n                  onChange={(value, option) => {\r\n                    let array = [];\r\n                    let statesObject = {};\r\n                    for (let index = 0; index < value; index++) {\r\n                      array.push({\r\n                        id: `suite-${index + 1}`,\r\n                      });\r\n                      statesObject[`suite-${index + 1}`] = {\r\n                        suite: null,\r\n                        currentRent: null,\r\n                      };\r\n                    }\r\n                    setStateDynamic({ ...statesObject, ...statesDynamic });\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      totalSuites: value,\r\n                    });\r\n                    setTotalDepartment(array);\r\n                  }}\r\n                >\r\n                  <Option value={1}>1 Departamento</Option>\r\n                  <Option value={2}>2 Departamentos</Option>\r\n                  <Option value={3}>3 Departamentos</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            {isEmpty(totalDepartment) === false &&\r\n              totalDepartment.map((row) => {\r\n                return (\r\n                  <Row>\r\n                    <Col span={11}>\r\n                      <Input\r\n                        value={statesDynamic[row.id].suite}\r\n                        placeholder={\"Número interior\"}\r\n                        onChange={(e) => {\r\n                          setStateDynamic({\r\n                            ...statesDynamic,\r\n                            [row.id]: {\r\n                              ...statesDynamic[row.id],\r\n                              suite: e.target.value,\r\n                            },\r\n                          });\r\n                        }}\r\n                      />\r\n                    </Col>\r\n                    <Col span={2} />\r\n                    <Col span={11}>\r\n                      <NumberFormat\r\n                        id={null}\r\n                        customInput={Input}\r\n                        thousandSeparator=\",\"\r\n                        decimalSeparator=\".\"\r\n                        decimalPrecision={2}\r\n                        allowNegative={false}\r\n                        prefix=\"$\"\r\n                        suffix=\"\"\r\n                        value={statesDynamic[row.id].currentRent}\r\n                        className=\"inputLogin\"\r\n                        floatingLabelText=\"\"\r\n                        isVisible\r\n                        toBlock={false}\r\n                        disable={false}\r\n                        placeholder=\"Monto de renta\"\r\n                        onValueChange={(values) => {\r\n                          const { formattedValue, value, floatValue } = values;\r\n                          setStateDynamic({\r\n                            ...statesDynamic,\r\n                            [row.id]: {\r\n                              ...statesDynamic[row.id],\r\n                              currentRent: floatValue,\r\n                            },\r\n                          });\r\n                        }}\r\n                        onClick={(event) => {}}\r\n                        onFocus={(event) => {}}\r\n                        onBlur={(event) => {}}\r\n                      />\r\n                    </Col>\r\n                    <Col span={1} />\r\n                    <Col\r\n                      span={2}\r\n                      style={{\r\n                        textAlign: \"center\",\r\n                        margin: \"auto\",\r\n                      }}\r\n                    ></Col>\r\n                  </Row>\r\n                );\r\n              })}\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                const arrayDepartment = [];\r\n                const objentSend = dataForm;\r\n                const statesDepartment = statesDynamic;\r\n                for (const key in statesDepartment) {\r\n                  arrayDepartment.push(statesDepartment[key]);\r\n                }\r\n                objentSend.departament = arrayDepartment;\r\n                onClickAddProperty(objentSend);\r\n                setDataForm(initialDataForm);\r\n                setStateDynamic({});\r\n                setTotalDepartment([]);\r\n              }}\r\n            >\r\n              <span>Registrar Propiedad</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAddProperty;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx",["353","354","355","356","357"],"import React, { useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n} from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAddTenant = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onClickAddProperty,\r\n    spinVisible,\r\n    dataPersonType,\r\n    dataCatalogProperty,\r\n    onChangeSelectProperty,\r\n    dataDepartment,\r\n  } = props;\r\n  const initialDataForm = {\r\n    idApartment: null,\r\n    idPersonType: null,\r\n    givenName: null,\r\n    email: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [property, setProperty] = useState(null);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  return (\r\n    <Modal visible={isModalVisible} closable={false} footer={false}>\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Invitar inquilino</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>Enviaremos una solicitud al inquilino invitado</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Propiedad\"\r\n                  value={property}\r\n                  onChange={(value, option) => {\r\n                    setProperty(value);\r\n                    onChangeSelectProperty(value);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataCatalogProperty) === false &&\r\n                    dataCatalogProperty.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Select\r\n                  placeholder=\"Tipo de persona\"\r\n                  value={dataForm.idPersonType}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, idPersonType: value });\r\n                  }}\r\n                >\r\n                  {isEmpty(dataPersonType) === false &&\r\n                    dataPersonType.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Select\r\n                  placeholder=\"Departamento\"\r\n                  value={dataForm.idApartment}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, idApartment: value });\r\n                  }}\r\n                >\r\n                  {isEmpty(dataDepartment) === false &&\r\n                    dataDepartment.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <p>Datos del inquilino</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.givenName}\r\n                  placeholder={\"Nombre del inquilino\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      givenName: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.email}\r\n                  placeholder={\"Correo electrónico del inquilino\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      email: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClickAddProperty(dataForm);\r\n                setDataForm(initialDataForm);\r\n              }}\r\n            >\r\n              <span>Invitar inquilino</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAddTenant;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx",["358","359","360","361","362","363","364","365","366"],"import React, { useEffect, useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n} from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport FrontFunctions from \"../../../utils/actions/frontFunctions\";\r\nimport SubSectionSummary from \"./subSectionSummary\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAdvancement = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onClickAdvancement,\r\n    spinVisible,\r\n    dataTenant,\r\n    dataBank,\r\n  } = props;\r\n  const frontFunctions = new FrontFunctions();\r\n  const initialDataForm = {\r\n    text: null,\r\n    currentRentFormat: \"\",\r\n    advanceRents: null,\r\n    accountHolder: null,\r\n    accountNumber: null,\r\n    clabeNumber: null,\r\n    idContract: null,\r\n    idBank: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [property, setProperty] = useState(null);\r\n  const [viewSummary, setViewSummary] = useState(false);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  return (\r\n    <Modal\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      style={{ top: 20 }}\r\n      width={600}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Adelanto de renta</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>\r\n              Llena la siguiente información para solicitar un adelanto de renta\r\n            </p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Row>\r\n                  <Select\r\n                    placeholder=\"Inquilino\"\r\n                    value={dataForm.text}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        text: value,\r\n                        currentRentFormat: dataSelect.currentRentAmount,\r\n                        idContract: dataSelect.idContract,\r\n                      });\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataTenant) === false &&\r\n                      dataTenant.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.id}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.fullName}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Row>\r\n                <Row>\r\n                  <NumberFormat\r\n                    id={null}\r\n                    customInput={Input}\r\n                    thousandSeparator=\",\"\r\n                    decimalSeparator=\".\"\r\n                    decimalPrecision={2}\r\n                    allowNegative={false}\r\n                    prefix=\"$\"\r\n                    suffix=\"\"\r\n                    disabled\r\n                    value={dataForm.currentRentFormat}\r\n                    className=\"inputLogin\"\r\n                    floatingLabelText=\"\"\r\n                    isVisible\r\n                    toBlock={false}\r\n                    disable={false}\r\n                    placeholder=\"Monto de renta\"\r\n                    onValueChange={(values) => {\r\n                      const { formattedValue, value, floatValue } = values;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        currentRentFormat: floatValue,\r\n                      });\r\n                    }}\r\n                    onClick={(event) => {}}\r\n                    onFocus={(event) => {}}\r\n                    onBlur={(event) => {}}\r\n                  />\r\n                </Row>\r\n                <Row>\r\n                  <Select\r\n                    placeholder=\"Rentas adelantadas\"\r\n                    value={dataForm.advanceRents}\r\n                    onChange={(value, option) => {\r\n                      setDataForm({ ...dataForm, advanceRents: value });\r\n                    }}\r\n                  >\r\n                    <Option value={1}>1</Option>\r\n                    <Option value={2}>2</Option>\r\n                    <Option value={3}>3</Option>\r\n                  </Select>\r\n                </Row>\r\n              </Col>\r\n              <Col\r\n                span={13}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 13 }}\r\n                className=\"total-advancement-amount\"\r\n              >\r\n                <SubSectionSummary\r\n                  viewSummary={viewSummary}\r\n                  onClickViewSummary={() => {\r\n                    setViewSummary(!viewSummary);\r\n                  }}\r\n                  dataForm={dataForm}\r\n                  frontFunctions={frontFunctions}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Información bancaria</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Mis cuentas guardadas\"\r\n                  value={dataForm.accountSave}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, accountSave: value });\r\n                  }}\r\n                >\r\n                  <Option value={1}>cuenta 1</Option>\r\n                  <Option value={2}>cuenta 2</Option>\r\n                  <Option value={3}>cuenta 3</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <p>Nueva cuenta</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.accountHolder}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      accountHolder: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.clabeNumber}\r\n                  placeholder={\"CLABE\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      clabeNumber: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.accountNumber}\r\n                  placeholder={\"Número de cuenta\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      accountNumber: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Select\r\n                  placeholder=\"Banco\"\r\n                  showSearch\r\n                  value={dataForm.idBank}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, idBank: value });\r\n                  }}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {isEmpty(dataBank) === false &&\r\n                    dataBank.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClickAdvancement(dataForm);\r\n                setDataForm(initialDataForm);\r\n              }}\r\n            >\r\n              <span>Solicitar adelanto</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAdvancement;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Signature\\signatureIndex.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js",["367","368","369","370","371","372","373","374"],"import isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nclass FrontFunctions {\r\n  constructor() {\r\n    this.currency = {\r\n      plural: \"PESOS\",\r\n      singular: \"PESO\",\r\n      centPlural: \"CENTAVOS\",\r\n      centSingular: \"CENTAVO\",\r\n    };\r\n  }\r\n\r\n  Unidades(num) {\r\n    switch (num) {\r\n      case 1:\r\n        return \"UN\";\r\n      case 2:\r\n        return \"DOS\";\r\n      case 3:\r\n        return \"TRES\";\r\n      case 4:\r\n        return \"CUATRO\";\r\n      case 5:\r\n        return \"CINCO\";\r\n      case 6:\r\n        return \"SEIS\";\r\n      case 7:\r\n        return \"SIETE\";\r\n      case 8:\r\n        return \"OCHO\";\r\n      case 9:\r\n        return \"NUEVE\";\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  Decenas(num) {\r\n    let decena = Math.floor(num / 10);\r\n    let unidad = num - decena * 10;\r\n\r\n    switch (decena) {\r\n      case 1:\r\n        switch (unidad) {\r\n          case 0:\r\n            return \"DIEZ\";\r\n          case 1:\r\n            return \"ONCE\";\r\n          case 2:\r\n            return \"DOCE\";\r\n          case 3:\r\n            return \"TRECE\";\r\n          case 4:\r\n            return \"CATORCE\";\r\n          case 5:\r\n            return \"QUINCE\";\r\n          default:\r\n            return \"DIECI\" + this.Unidades(unidad);\r\n        }\r\n      case 2:\r\n        switch (unidad) {\r\n          case 0:\r\n            return \"VEINTE\";\r\n          default:\r\n            return \"VEINTI\" + this.Unidades(unidad);\r\n        }\r\n      case 3:\r\n        return this.DecenasY(\"TREINTA\", unidad);\r\n      case 4:\r\n        return this.DecenasY(\"CUARENTA\", unidad);\r\n      case 5:\r\n        return this.DecenasY(\"CINCUENTA\", unidad);\r\n      case 6:\r\n        return this.DecenasY(\"SESENTA\", unidad);\r\n      case 7:\r\n        return this.DecenasY(\"SETENTA\", unidad);\r\n      case 8:\r\n        return this.DecenasY(\"OCHENTA\", unidad);\r\n      case 9:\r\n        return this.DecenasY(\"NOVENTA\", unidad);\r\n      case 0:\r\n        return this.Unidades(unidad);\r\n    }\r\n  }\r\n\r\n  DecenasY(strSin, numUnidades) {\r\n    if (numUnidades > 0) return strSin + \" Y \" + this.Unidades(numUnidades);\r\n\r\n    return strSin;\r\n  }\r\n\r\n  Centenas(num) {\r\n    let centenas = Math.floor(num / 100);\r\n    let decenas = num - centenas * 100;\r\n\r\n    switch (centenas) {\r\n      case 1:\r\n        if (decenas > 0) return \"CIENTO \" + this.Decenas(decenas);\r\n        return \"CIEN\";\r\n      case 2:\r\n        return \"DOSCIENTOS \" + this.Decenas(decenas);\r\n      case 3:\r\n        return \"TRESCIENTOS \" + this.Decenas(decenas);\r\n      case 4:\r\n        return \"CUATROCIENTOS \" + this.Decenas(decenas);\r\n      case 5:\r\n        return \"QUINIENTOS \" + this.Decenas(decenas);\r\n      case 6:\r\n        return \"SEISCIENTOS \" + this.Decenas(decenas);\r\n      case 7:\r\n        return \"SETECIENTOS \" + this.Decenas(decenas);\r\n      case 8:\r\n        return \"OCHOCIENTOS \" + this.Decenas(decenas);\r\n      case 9:\r\n        return \"NOVECIENTOS \" + this.Decenas(decenas);\r\n    }\r\n\r\n    return this.Decenas(decenas);\r\n  }\r\n\r\n  Seccion(num, divisor, strSingular, strPlural) {\r\n    let cientos = Math.floor(num / divisor);\r\n    let resto = num - cientos * divisor;\r\n\r\n    let letras = \"\";\r\n\r\n    if (cientos > 0)\r\n      if (cientos > 1) letras = this.Centenas(cientos) + \" \" + strPlural;\r\n      else letras = strSingular;\r\n\r\n    if (resto > 0) letras += \"\";\r\n\r\n    return letras;\r\n  }\r\n\r\n  Miles(num) {\r\n    let divisor = 1000;\r\n    let cientos = Math.floor(num / divisor);\r\n    let resto = num - cientos * divisor;\r\n\r\n    let strMiles = this.Seccion(num, divisor, \"UN MIL\", \"MIL\");\r\n    let strCentenas = this.Centenas(resto);\r\n\r\n    if (strMiles == \"\") return strCentenas;\r\n\r\n    return strMiles + \" \" + strCentenas;\r\n  }\r\n\r\n  parseNumberToLetter(num) {\r\n    const currency = this.currency || {};\r\n    let data = {\r\n      numero: num,\r\n      enteros: Math.floor(num),\r\n      centavos: Math.round(num * 100) - Math.floor(num) * 100,\r\n      letrasCentavos: \"\",\r\n      letrasMonedaPlural: currency.plural || \"PESOS CHILENOS\", //'PESOS', 'Dólares', 'Bolívares', 'etcs'\r\n      letrasMonedaSingular: currency.singular || \"PESO CHILENO\", //'PESO', 'Dólar', 'Bolivar', 'etc'\r\n      letrasMonedaCentavoPlural: currency.centPlural || \"CHIQUI PESOS CHILENOS\",\r\n      letrasMonedaCentavoSingular:\r\n        currency.centSingular || \"CHIQUI PESO CHILENO\",\r\n    };\r\n\r\n    if (data.centavos > 0) {\r\n      data.letrasCentavos =\r\n        \"CON \" +\r\n        (function () {\r\n          if (data.centavos == 1)\r\n            return (\r\n              this.Millones(data.centavos) +\r\n              \" \" +\r\n              data.letrasMonedaCentavoSingular\r\n            );\r\n          else\r\n            return (\r\n              this.Millones(data.centavos) +\r\n              \" \" +\r\n              data.letrasMonedaCentavoPlural\r\n            );\r\n        })();\r\n    }\r\n\r\n    if (data.enteros == 0)\r\n      return \"CERO \" + data.letrasMonedaPlural + \" \" + data.letrasCentavos;\r\n    if (data.enteros == 1)\r\n      return (\r\n        this.Millones(data.enteros) +\r\n        \" \" +\r\n        data.letrasMonedaSingular +\r\n        \" \" +\r\n        data.letrasCentavos\r\n      );\r\n    else\r\n      return (\r\n        this.Millones(data.enteros) +\r\n        \" \" +\r\n        data.letrasMonedaPlural +\r\n        \" \" +\r\n        data.letrasCentavos\r\n      );\r\n  }\r\n\r\n  parseFormatCurrency = (money, fraction, maxFraction) => {\r\n    let resultNumber = \"\";\r\n    if (isNil(money) === false) {\r\n      const formatMoneyJson = {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n        minimumFractionDigits: fraction,\r\n        maximumFractionDigits: maxFraction || 20,\r\n      };\r\n      const locale = \"en-US\";\r\n      const moneyFormat = new Intl.NumberFormat(locale, formatMoneyJson);\r\n      resultNumber = moneyFormat.format(money);\r\n    }\r\n    return resultNumber;\r\n  };\r\n}\r\n\r\nexport default FrontFunctions;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx",["375","376","377","378","379","380","381"],"import React, { useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Timeline, Input, Row, Col, Select, Upload, Spin } from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Delete from \"../../../assets/icons/Delete.svg\";\r\nimport PicturesWall from \"./customUploadFile\";\r\nimport SubSectionSummary from \"./subSectionSummary\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst SectionRegisterPayment = (props) => {\r\n  const {\r\n    dataPayments,\r\n    onRegisterPayment,\r\n    spinVisible,\r\n    onGetDocuments,\r\n  } = props;\r\n  const initialDataForm = {\r\n    idIncidence: null,\r\n    idPaymentType: null,\r\n    paymentDate: null,\r\n    amount: \"\",\r\n    advancingRents: null,\r\n    documents: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [dataSummary, setDataSummary] = useState({});\r\n  const [fileList, setFileList] = useState([]);\r\n  const [fileList1, setFileList1] = useState([]);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  const handlerSelectAmont = (data) => {\r\n    const { isForAdavancingRent, isForCurrentRent, currentRent, amount } = data;\r\n    let amoutData = \"\";\r\n    if (isForAdavancingRent === false && isForCurrentRent === false) {\r\n      amoutData = \"\";\r\n    } else if (isForAdavancingRent === false && isForCurrentRent === true) {\r\n      amoutData = amount;\r\n    } else if (isForAdavancingRent === true && isForCurrentRent === false) {\r\n      amoutData = currentRent;\r\n    }\r\n    return amoutData;\r\n  };\r\n\r\n  const handleChange = ({ fileList }) => {\r\n    setFileList(fileList);\r\n  };\r\n\r\n  const handleChange1 = ({ fileList }) => {\r\n    setFileList1(fileList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-content-tabs button-middle\">\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"content-messages-sections\">\r\n          <div className=\"section-history-messages\">\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Tipo de pago\"\r\n                  style={{ width: \"100%\" }}\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    const informationSummary =\r\n                      isNil(configureOption.interestArrearsDescription) ===\r\n                      false\r\n                        ? JSON.parse(\r\n                            configureOption.interestArrearsDescription\r\n                          )[0]\r\n                        : {};\r\n                    const amountPayable = handlerSelectAmont(configureOption);\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idPaymentType: value,\r\n                      amount: amountPayable,\r\n                    });\r\n                    setDataSummary(informationSummary);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataPayments) === false &&\r\n                    dataPayments.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idPaymentType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.paymentType}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col span={24}>\r\n                {isEmpty(dataSummary) === false ? (\r\n                  <div className=\"total-advancement-amount\">\r\n                    <p>Monto</p>\r\n                    <div>\r\n                      <h2>{dataSummary.totalAmountFormat}</h2>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <NumberFormat\r\n                    id={null}\r\n                    style={{ borderRadius: \"8px\" }}\r\n                    customInput={Input}\r\n                    thousandSeparator=\",\"\r\n                    decimalSeparator=\".\"\r\n                    decimalPrecision={2}\r\n                    allowNegative={false}\r\n                    prefix=\"$\"\r\n                    suffix=\"\"\r\n                    value={dataForm.amount}\r\n                    className=\"inputLogin\"\r\n                    floatingLabelText=\"\"\r\n                    isVisible\r\n                    toBlock={false}\r\n                    placeholder=\"Monto\"\r\n                    onValueChange={(values) => {\r\n                      const { formattedValue, value, floatValue } = values;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        amount: floatValue,\r\n                      });\r\n                    }}\r\n                    onClick={(event) => {}}\r\n                    onFocus={(event) => {}}\r\n                    onBlur={(event) => {}}\r\n                  />\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <SubSectionSummary dataSummary={dataSummary} />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"section-type-messages\" style={{ width: \"50%\" }}>\r\n            <div className=\"text-header\">Evidencia</div>\r\n            <div className=\"section-upload-files\">\r\n              <div className=\"section-upload-file\">\r\n                <PicturesWall fileList={fileList} handleChange={handleChange} />\r\n              </div>\r\n              <div className=\"section-upload-file\">\r\n                <PicturesWall\r\n                  handleChange={handleChange1}\r\n                  fileList={fileList1}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"button-action-payment\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              const documents = [...fileList, ...fileList1];\r\n              onGetDocuments(documents, dataForm);\r\n              setDataForm(initialDataForm);\r\n              setFileList([]);\r\n              setFileList1([]);\r\n              // onRegisterPayment(dataForm);\r\n            }}\r\n          >\r\n            <span>Registrar pago</span>\r\n          </button>\r\n        </div>\r\n      </Spin>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionRegisterPayment;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx",["382"],"import React from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nconst SubSectionSummary = (props) => {\r\n  const { dataSummary } = props;\r\n  let component = <div />;\r\n  if (isEmpty(dataSummary) === false) {\r\n    component = (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          padding: \"0px 15px\",\r\n        }}\r\n      >\r\n        <p>Resumen</p>\r\n        <table\r\n          style={{\r\n            width: \"100%\",\r\n            fontFamily: \"Poppins\",\r\n            fontSize: \"11px\",\r\n          }}\r\n        >\r\n          <tr>\r\n            <td>Monto de renta</td>\r\n            <td>{dataSummary.currentRentFormat}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Mes correspondiente</td>\r\n            <td>{dataSummary.dateDescription}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Interes</td>\r\n            <td>{dataSummary.interestArrears}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Monto de interes</td>\r\n            <td>{dataSummary.amountInterestFormat}</td>\r\n          </tr>\r\n          <tr\r\n            style={{\r\n              background: \"#faebd7\",\r\n              fontWeight: 600,\r\n            }}\r\n          >\r\n            <td>Monto total</td>\r\n            <td>{dataSummary.totalAmountFormat}</td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  return component;\r\n};\r\n\r\nexport default SubSectionSummary;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx",["383","384","385","386"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, Modal, notification } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport IconCalendar from \"../../assets/icons/Calendar.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconDanger from \"../../assets/icons/Danger.svg\";\r\nimport FileReport from \"../../assets/icons/FileReport.svg\";\r\nimport MessagesIcon from \"../../assets/icons/MessagesIcon.svg\";\r\nimport DocumentsIcon from \"../../assets/icons/DocumentsIcon.svg\";\r\nimport Tools from \"../../assets/icons/Tools.svg\";\r\nimport Transport from \"../../assets/icons/Transport.svg\";\r\nimport SectionContractAvailable from \"./sections/sectionContractAvailable\";\r\nimport SectionDepositGuarantee from \"./sections/sectionDepositGuarantee\";\r\nimport FrontFunctions from \"../../utils/actions/frontFunctions\";\r\nimport { callGetAllCustomerTenantDashboardById } from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Tenant = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomerTenantById,\r\n    dataProfile,\r\n    setDataUserProfile,\r\n  } = props;\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [isModalVisiblePolicy, setIsModalVisiblePolicy] = useState(false);\r\n  const frontFunctions = new FrontFunctions();\r\n\r\n  const args = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Antes de iniciar el formulario debes tener lista una identificación\r\n          oficial, tus últimos 3 comprobantes de ingresos y una carta de la\r\n          empresa donde trabajas que acredite desde cuando estas laborando en la\r\n          empresa. Adicional, necesitaras la escritura del inmueble que quedara\r\n          como garantía y los datos e identificación del Aval.\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            notification.destroy();\r\n            history.push(\"/websystem/typeform-user\");\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Ir al formulario</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{ fontFamily: \"Poppins\", fontSize: \"12px\", color: \"#ff0282\" }}\r\n      >\r\n        Solicitud de Investigación Persona Física con Aval\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const argsv2 = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Buen dia <strong>Sebastian</strong>, estamos en espera del pago de tu{\" \"}\r\n          <strong>depósito en ganarantía</strong>.<br /> <br />\r\n          Si no puedes pagar el\r\n          <strong> depósito en ganarantía</strong> tenemos estas opciones para\r\n          ti\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setIsModalVisiblePolicy(!isModalVisiblePolicy);\r\n            notification.destroy();\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Revisar opciones</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{ fontFamily: \"Poppins\", fontSize: \"12px\", color: \"#ff0282\" }}\r\n      >\r\n        Depósito en Garantia\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const handlerCallGetAllCustomerTenantById = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerTenantById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenant(responseResult);\r\n      if (\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.isTypeFormCompleted) === false &&\r\n        responseResult.isTypeFormCompleted === false\r\n      ) {\r\n        setDataUserProfile({\r\n          ...dataProfile,\r\n          idCustomerTenantTF: responseResult.idCustomerTenant,\r\n          idCustomerTF: responseResult.idCustomer,\r\n        });\r\n        notification.open(args);\r\n        notification.open(argsv2);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    // notification.open(argsv2);\r\n    // notification.open(args);\r\n    handlerCallGetAllCustomerTenantById();\r\n  }, []);\r\n  return (\r\n    <Content>\r\n      <SectionContractAvailable\r\n        isModalVisible={isModalVisible}\r\n        onClose={() => {\r\n          setIsModalVisible(!isModalVisible);\r\n        }}\r\n      />\r\n      <SectionDepositGuarantee\r\n        isModalVisible={isModalVisiblePolicy}\r\n        onClose={() => {\r\n          setIsModalVisiblePolicy(!isModalVisiblePolicy);\r\n        }}\r\n        frontFunctions={frontFunctions}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataTenant.shortNameTenant}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataTenant.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"action-buttons-top\">\r\n            <div className=\"button_init_primary\"></div>\r\n            {/* {dataTenant.canSignContract === 1 && ( */}\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setIsModalVisible(!isModalVisible);\r\n                }}\r\n              >\r\n                <span>¡Contrato Disponible!</span>\r\n              </button>\r\n            </div>\r\n            {/* )} */}\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconCalendar} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.nextPaymentAt}</h2>\r\n            <span>Fecha de próximo pago</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.currentRent}</h2>\r\n            <span>Monto de renta</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconDanger} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.interestAmount}</h2>\r\n            <span>Moratorios</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-owner\">\r\n          <div className=\"title-cards\">\r\n            <span>Acciones</span>\r\n          </div>\r\n          <div className=\"section-information-actions\">\r\n            <div className=\"section-information-buttons\">\r\n              <div className=\"section-information-button-2\">\r\n                <img src={Tools} height={62} alt=\"Reportar incidencia\" />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {}}\r\n                  className=\"button-action-primary\"\r\n                >\r\n                  <span>Cotizar incidencia</span>\r\n                </button>\r\n              </div>\r\n              <div className=\"section-information-button-3\">\r\n                <img src={Transport} alt=\"Reportar incidencia\" height={62} />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {}}\r\n                  className=\"button-action-primary\"\r\n                >\r\n                  <span>Solicitar mudanza</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-owner\">\r\n          <div className=\"title-cards flex-title-card\">\r\n            <span>Propietario</span>\r\n            <div className=\"button_init_secondary\">\r\n              <button type=\"button\" onClick={() => {}}>\r\n                <span>Reportar Propietario</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <div className=\"section-information-actions\">\r\n            <div className=\"section-information-info\">\r\n              <div className=\"section-information-data\">\r\n                <Avatar size={50} icon={<UserOutlined />} />\r\n                <div className=\"info-user\">\r\n                  <strong>{dataTenant.fullName}</strong>\r\n                  <Rate\r\n                    style={{\r\n                      fontSize: \"15px\",\r\n                      position: \"relative\",\r\n                      bottom: \"5px\",\r\n                    }}\r\n                    tooltips={[]}\r\n                    onChange={() => {}}\r\n                    value={dataTenant.ratingRate}\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"section-information-button-1\">\r\n                <img src={FileReport} height={62} alt=\"Reportar incidencia\" />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {}}\r\n                  className=\"button-action-primary\"\r\n                >\r\n                  <span>Reportar incidencia</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"section-information-buttons\">\r\n              <div className=\"section-information-button-2\">\r\n                <img src={MessagesIcon} height={62} alt=\"Reportar incidencia\" />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {}}\r\n                  className=\"button-action-primary\"\r\n                >\r\n                  <span>Enviar mensaje</span>\r\n                </button>\r\n              </div>\r\n              <div className=\"section-information-button-3\">\r\n                <img\r\n                  src={DocumentsIcon}\r\n                  alt=\"Reportar incidencia\"\r\n                  height={62}\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {}}\r\n                  className=\"button-action-primary\"\r\n                >\r\n                  <span>Subir documento</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n\r\n  callGetAllCustomerTenantById: (data) =>\r\n    dispatch(callGetAllCustomerTenantDashboardById(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tenant);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx",["387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405","406","407"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, Modal, Steps, Button, message } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport \"moment/locale/es\";\r\nimport IconCalendar from \"../../assets/icons/Calendar.svg\";\r\nimport HomeActive from \"../../assets/iconSteps/iconHome.svg\";\r\nimport HomeInactive from \"../../assets/iconSteps/iconHomeInactive.svg\";\r\nimport IconProfile from \"../../assets/iconSteps/Profile.svg\";\r\nimport IconProfileInactive from \"../../assets/iconSteps/ProfileInactive.svg\";\r\nimport Wallet from \"../../assets/iconSteps/wallet.svg\";\r\nimport WalletInactive from \"../../assets/iconSteps/walletInactive.svg\";\r\nimport Work from \"../../assets/iconSteps/Work.svg\";\r\nimport WorkInactive from \"../../assets/iconSteps/WorkInactive.svg\";\r\nimport DocumentIcon from \"../../assets/iconSteps/document.svg\";\r\nimport DocumentIconInactive from \"../../assets/iconSteps/documentInactive.svg\";\r\nimport Renter from \"../../assets/iconSteps/renter.svg\";\r\nimport RenterInactive from \"../../assets/iconSteps/renterInactive.svg\";\r\nimport Shield from \"../../assets/iconSteps/Shield.svg\";\r\nimport ShieldInactive from \"../../assets/iconSteps/ShieldInactive.svg\";\r\nimport SectionInfoUser from \"./sections/sectionInfoUser\";\r\nimport SectionCurrentAddress from \"./sections/currentAddress\";\r\nimport SectionCurrentWork from \"./sections/sectionCurrentWork\";\r\nimport SectionInfoReferences from \"./sections/sectionInfoReferences\";\r\nimport SectionDocumentation from \"./sections/sectionDocumentation\";\r\nimport SectionInfoAval from \"./sections/sectionInfoAval\";\r\nimport SectionInfoOwner from \"./sections/sectionInfoOwner\";\r\nimport CurrentAddressRenter from \"./sections/currentAddresRenter\";\r\nimport TypePolicy from \"./sections/TypePolicy\";\r\nimport SectionBankInfo from \"./sections/sectionBankInfo\";\r\nimport FrontFunctions from \"../../utils/actions/frontFunctions\";\r\nimport {\r\n  callGetTypeFormTenant,\r\n  callSetTypeFormTenant,\r\n  callGetZipCodeAdress,\r\n  callGetTypeFormDocumentTenant,\r\n  callSetTypeFormReferences,\r\n} from \"../../utils/actions/actions\";\r\n\r\nconst { Step } = Steps;\r\nconst { Content } = Layout;\r\n\r\nconst TypeFormUser = (props) => {\r\n  const {\r\n    dataProfile,\r\n    callGetTypeFormTenant,\r\n    callSetTypeFormTenant,\r\n    callGetTypeFormDocumentTenant,\r\n    callGetZipCodeAdress,\r\n    callSetTypeFormReferences,\r\n    history,\r\n  } = props;\r\n  const frontFunctions = new FrontFunctions();\r\n  const [current, setCurrent] = React.useState(0);\r\n  const [dataForm, setDataForm] = useState({});\r\n  const [dataReferences, setDataReferences] = useState([]);\r\n  const [dataDocuments, setDataDocuments] = useState([]);\r\n  const [dataDocumentsEndorsement, setDataDocumentsEndorsement] = useState([]);\r\n  const [dataZipCodeAdress, setDataZipCodeAdress] = useState({});\r\n  const [dataZipCatalog, setDataZipCatalog] = useState([]);\r\n\r\n  const next = () => {\r\n    setCurrent(current + 1);\r\n  };\r\n\r\n  const prev = () => {\r\n    setCurrent(current - 1);\r\n  };\r\n\r\n  const handlerCallSetTypeFormTenant = async (data) => {\r\n    const {\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callSetTypeFormTenant({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallSetTypeFormReferences = async (data) => {\r\n    const {\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callSetTypeFormReferences({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const hanlderCallGetZipCodeAdress = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetZipCodeAdress({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false &&\r\n        isNil(response.response1) === false &&\r\n        isNil(response.response1[0]) === false\r\n          ? response.response1[0]\r\n          : {};\r\n      const responseResult2 =\r\n        isNil(response) === false && isNil(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      setDataZipCodeAdress(responseResult1);\r\n      setDataZipCatalog(responseResult2);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetTypeFormDocumentTenant = async (id, type) => {\r\n    const {\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetTypeFormDocumentTenant({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idTypeForm: id,\r\n        type,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      if (type === 1) {\r\n        setDataDocuments(responseResult);\r\n      } else if (type === 2) {\r\n        setDataDocumentsEndorsement(responseResult);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  const steps = [\r\n    {\r\n      title: \"Información personal\",\r\n      content: (\r\n        <SectionInfoUser\r\n          dataFormSave={dataForm}\r\n          onClickNext={(data) => {\r\n            handlerCallSetTypeFormTenant(data);\r\n            setDataForm({ ...dataForm, ...data });\r\n            next();\r\n          }}\r\n        />\r\n      ),\r\n      iconActive: IconProfile,\r\n      iconInactive: IconProfileInactive,\r\n    },\r\n    {\r\n      title: \"Dirección actual\",\r\n      content: (\r\n        <SectionCurrentAddress\r\n          dataFormSave={dataForm}\r\n          onClickNext={(data) => {\r\n            handlerCallSetTypeFormTenant(data);\r\n            setDataForm({ ...dataForm, ...data });\r\n            setDataZipCodeAdress({});\r\n            setDataZipCatalog([]);\r\n            next();\r\n          }}\r\n          dataZipCatalog={dataZipCatalog}\r\n          onChangeZipCode={(zipCode) => {\r\n            hanlderCallGetZipCodeAdress({ type: 1, zipCode });\r\n          }}\r\n          dataZipCodeAdress={dataZipCodeAdress}\r\n          onClickBack={() => prev()}\r\n        />\r\n      ),\r\n      iconActive: HomeActive,\r\n      iconInactive: HomeInactive,\r\n    },\r\n    {\r\n      title: \"Información laboral\",\r\n      content: (\r\n        <SectionCurrentWork\r\n          dataFormSave={dataForm}\r\n          onClickNext={(data) => {\r\n            handlerCallSetTypeFormTenant(data);\r\n            setDataForm({ ...dataForm, ...data });\r\n            next();\r\n          }}\r\n          frontFunctions={frontFunctions}\r\n          onClickBack={() => prev()}\r\n        />\r\n      ),\r\n      iconActive: Work,\r\n      iconInactive: WorkInactive,\r\n    },\r\n    {\r\n      title: \"Referencias\",\r\n      content: (\r\n        <SectionInfoReferences\r\n          dataFormSave={dataForm}\r\n          dataReferences={dataReferences}\r\n          onClickSendReferences={(data) => {\r\n            handlerCallSetTypeFormReferences(data);\r\n          }}\r\n          onClickNext={() => {\r\n            next();\r\n          }}\r\n          onClickBack={() => prev()}\r\n        />\r\n      ),\r\n      iconActive: Renter,\r\n      iconInactive: RenterInactive,\r\n    },\r\n    {\r\n      title: \"Documentación\",\r\n      content: (\r\n        <SectionDocumentation\r\n          onClickNext={() => {\r\n            handlerCallGetTypeFormDocumentTenant(dataForm.idTypeForm, 1);\r\n            next();\r\n          }}\r\n          onClickBack={() => prev()}\r\n          dataDocuments={dataDocuments}\r\n          typeDocument={1}\r\n        />\r\n      ),\r\n      iconActive: DocumentIcon,\r\n      iconInactive: DocumentIconInactive,\r\n    },\r\n    {\r\n      title: \"Información aval\",\r\n      content: (\r\n        <SectionInfoAval\r\n          dataFormSave={dataForm}\r\n          dataDocuments={dataDocumentsEndorsement}\r\n          onClickFinish={(data) => {\r\n            handlerCallSetTypeFormTenant(data);\r\n            history.push(\"/websystem/dashboard-tenant\");\r\n          }}\r\n          dataZipCatalog={dataZipCatalog}\r\n          onChangeZipCode={(zipCode) => {\r\n            hanlderCallGetZipCodeAdress({ type: 1, zipCode });\r\n          }}\r\n          dataZipCodeAdress={dataZipCodeAdress}\r\n          onClickBack={() => {\r\n            prev();\r\n            setDataZipCodeAdress({});\r\n            setDataZipCatalog([]);\r\n          }}\r\n          typeDocument={2}\r\n        />\r\n      ),\r\n      iconActive: Shield,\r\n      iconInactive: ShieldInactive,\r\n    },\r\n  ];\r\n\r\n  const handlerCallGetTypeFormTenant = async () => {\r\n    const {\r\n      idCustomerTenantTF,\r\n      idCustomerTF,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetTypeFormTenant({\r\n        idCustomer: idCustomerTF,\r\n        idCustomerTenant: idCustomerTenantTF,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false &&\r\n        isNil(response.response1) === false &&\r\n        isNil(response.response1[0]) === false &&\r\n        isEmpty(response.response1[0]) === false\r\n          ? response.response1[0]\r\n          : {};\r\n      const responseResult2 =\r\n        isNil(response) === false &&\r\n        isNil(response.response2) === false &&\r\n        isEmpty(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      setDataForm(responseResult1);\r\n      setDataReferences(responseResult2);\r\n      await handlerCallGetTypeFormDocumentTenant(responseResult1.idTypeForm, 1);\r\n      await handlerCallGetTypeFormDocumentTenant(responseResult1.idTypeForm, 2);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallAsyncApis = async () => {\r\n    await handlerCallGetTypeFormTenant();\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallAsyncApis();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"steps-style-header\">\r\n          <hr />\r\n          {isEmpty(steps) === false &&\r\n            steps.map((row, index) => {\r\n              return (\r\n                <div className=\"step-icon\">\r\n                  <div\r\n                    className={\r\n                      current === index\r\n                        ? \"background-circle-active\"\r\n                        : \"background-circle-inactive\"\r\n                    }\r\n                  >\r\n                    <img\r\n                      src={\r\n                        current === index ? row.iconActive : row.iconInactive\r\n                      }\r\n                      alt=\"\"\r\n                    />\r\n                  </div>\r\n                  <span\r\n                    style={{\r\n                      visibility: current !== index ? \"visible\" : \"hidden\",\r\n                      color: \"#d6d8e7\",\r\n                    }}\r\n                    className=\"title-steps-typeform\"\r\n                  >\r\n                    {row.title}\r\n                  </span>\r\n                </div>\r\n              );\r\n            })}\r\n        </div>\r\n        {isEmpty(steps) === false && (\r\n          <div className=\"steps-content\">{steps[current].content}</div>\r\n        )}\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetTypeFormTenant: (data) => dispatch(callGetTypeFormTenant(data)),\r\n  callSetTypeFormTenant: (data) => dispatch(callSetTypeFormTenant(data)),\r\n  callSetTypeFormReferences: (data) =>\r\n    dispatch(callSetTypeFormReferences(data)),\r\n  callGetZipCodeAdress: (data) => dispatch(callGetZipCodeAdress(data)),\r\n  callGetTypeFormDocumentTenant: (data) =>\r\n    dispatch(callGetTypeFormDocumentTenant(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TypeFormUser);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx",["408","409","410","411","412","413","414","415"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n} from \"antd\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\n\r\nconst SectionInfoUser = (props) => {\r\n  const { onClickNext, dataFormSave } = props;\r\n  const initialForm = {\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    emailAddress: null,\r\n    taxId: null,\r\n    citizenId: null,\r\n    hasCar: null,\r\n    carriagePlate: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataFormSave) === false) {\r\n      setDataForm(dataFormSave);\r\n    }\r\n  }, [dataFormSave]);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Información personal\"\r\n          : \"Confirmar Información Personal\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <Input\r\n                  value={dataForm.givenName}\r\n                  placeholder={\"Nombres\"}\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, givenName: value });\r\n                  }}\r\n                  suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.lastName}\r\n                  placeholder={\"Apellido paterno\"}\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, lastName: value });\r\n                  }}\r\n                  suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Input\r\n                  value={dataForm.mothersMaidenName}\r\n                  placeholder={\"Apellido materno\"}\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, mothersMaidenName: value });\r\n                  }}\r\n                  suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.phoneNumber}\r\n                  placeholder={\"Telefono\"}\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, phoneNumber: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.emailAddress}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    // const value = e.target.value;\r\n                    // setDataForm({ ...dataForm, emailAddress: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.taxId}\r\n                  placeholder={\"RFC con Homoclave\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, taxId: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.citizenId}\r\n                  placeholder={\"CURP\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    setDataForm({ ...dataForm, citizenId: value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span style={{ color: \"#ff0282\", fontWeight: \"bold\" }}>\r\n                    Tienes Auto\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, hasCar: value });\r\n                    }}\r\n                    value={\r\n                      dataForm.hasCar === true || dataForm.hasCar === 1 ? 1 : 0\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              {(dataForm.hasCar === 1 || dataForm.hasCar === true) && (\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.carriagePlate}\r\n                    placeholder={\"Ingresa las placas\"}\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, carriagePlate: value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              )}\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Nombre completo\"\r\n                  content={`${dataForm.givenName} ${dataForm.lastName} ${dataForm.mothersMaidenName}`}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Telefono\"\r\n                  content={dataForm.phoneNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Correo\"\r\n                  content={dataForm.emailAddress}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"RFC con Homoclave\"\r\n                  content={dataForm.taxId}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem title=\"CURP\" content={dataForm.citizenId} />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={3} xs={{ span: 24 }} md={{ span: 3 }}>\r\n                <DescriptionItem\r\n                  title=\"Tienes Auto\"\r\n                  content={dataForm.hasCar === 1 ? \"Si\" : \"No\"}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              {dataForm.hasCar === 1 && (\r\n                <Col span={3} xs={{ span: 24 }} md={{ span: 3 }}>\r\n                  <DescriptionItem\r\n                    title=\"Placas\"\r\n                    content={dataForm.carriagePlate}\r\n                  />\r\n                </Col>\r\n              )}\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionInfoUser;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx",["416","417","418","419","420","421","422","423","424","425","426","427","428"],"import React, { useState, useEffect } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n  DatePicker,\r\n} from \"antd\";\r\nimport {\r\n  InfoCircleOutlined,\r\n  UserOutlined,\r\n  SyncOutlined,\r\n  CloseOutlined,\r\n} from \"@ant-design/icons\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionCurrentAddress = (props) => {\r\n  const {\r\n    onClickBack,\r\n    onClickNext,\r\n    dataFormSave,\r\n    dataZipCatalog,\r\n    onChangeZipCode,\r\n    dataZipCodeAdress,\r\n  } = props;\r\n  const initialForm = {\r\n    street: null,\r\n    suite: null,\r\n    streetNumber: null,\r\n    idZipCode: null,\r\n    zipCode: null,\r\n    city: null,\r\n    state: null,\r\n    neighborhood: null,\r\n    isOwn: null,\r\n    currentTimeRange: null,\r\n    currentTimeRangeText: null,\r\n    currentTime: null,\r\n    dateChangeAddress: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataFormSave) === false) {\r\n      setDataForm({\r\n        ...dataFormSave,\r\n        currentTimeRangeText:\r\n          dataFormSave.currentTimeRange === \"Y\"\r\n            ? \"Años\"\r\n            : dataFormSave.currentTimeRange === \"M\"\r\n            ? \"Meses\"\r\n            : null,\r\n      });\r\n      onChangeZipCode(dataFormSave.zipCode);\r\n    }\r\n  }, [dataFormSave]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        state: dataZipCodeAdress.state,\r\n        city: dataZipCodeAdress.municipality,\r\n        currentTimeRangeText:\r\n          dataFormSave.currentTimeRange === \"Y\"\r\n            ? \"Años\"\r\n            : dataFormSave.currentTimeRange === \"M\"\r\n            ? \"Meses\"\r\n            : null,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Domicilio actual\"\r\n          : \"Confirmar Domicilio actual\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Input\r\n                  value={dataForm.street}\r\n                  placeholder={\"Calle\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, street: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.streetNumber}\r\n                  placeholder={\"Numero\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, streetNumber: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.zipCode}\r\n                  placeholder={\"Código postal\"}\r\n                  onChange={(e) => {\r\n                    const value = e.target.value;\r\n                    if (value.length >= 5) {\r\n                      setDataForm({ ...dataForm, zipCode: value });\r\n                      onChangeZipCode(e.target.value);\r\n                    } else {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: null,\r\n                        idZipCode: null,\r\n                        zipCode: value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.state}\r\n                  placeholder={\"Estado\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.city}\r\n                  placeholder={\"Municipio/Delegación\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                {isOpenInput === false ? (\r\n                  <Select\r\n                    placeholder=\"Colonia\"\r\n                    value={dataForm.idZipCode}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setIsOpenInput(dataSelect.isOpen);\r\n                      if (dataSelect.isOpen === true) {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: null,\r\n                          idZipCode: value,\r\n                        });\r\n                      } else {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          neighborhood: option.children,\r\n                          idZipCode: value,\r\n                        });\r\n                      }\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataZipCatalog) === false &&\r\n                      dataZipCatalog.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idZipCode}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.neighborhood}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                ) : (\r\n                  <Input\r\n                    value={dataForm.neighborhood}\r\n                    placeholder={\"Indicar Colonia\"}\r\n                    suffix={\r\n                      <Tooltip title=\"Cerrar\">\r\n                        <CloseOutlined\r\n                          style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                          onClick={() => {\r\n                            setIsOpenInput(false);\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              idZipCode: null,\r\n                              neighborhood: null,\r\n                            });\r\n                          }}\r\n                        />\r\n                      </Tooltip>\r\n                    }\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        neighborhood: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                )}\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span style={{ color: \"#ff0282\", fontWeight: \"bold\" }}>\r\n                    La propiedad actual es\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, isOwn: e.target.value });\r\n                    }}\r\n                    value={\r\n                      dataForm.isOwn === 1 || dataForm.isOwn === true ? 1 : 0\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Propia</Radio>\r\n                    <Radio value={0}>Rentada</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <NumberFormat\r\n                      id={null}\r\n                      customInput={Input}\r\n                      thousandSeparator=\",\"\r\n                      decimalSeparator=\".\"\r\n                      decimalPrecision={2}\r\n                      allowNegative={false}\r\n                      prefix=\"\"\r\n                      suffix=\"\"\r\n                      value={dataForm.currentTime}\r\n                      className=\"inputLogin\"\r\n                      floatingLabelText=\"\"\r\n                      isVisible\r\n                      toBlock={false}\r\n                      disable={false}\r\n                      placeholder=\"Tiempo habitando\"\r\n                      onValueChange={(values) => {\r\n                        const { formattedValue, value, floatValue } = values;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          currentTime: floatValue,\r\n                        });\r\n                      }}\r\n                      onClick={(event) => {}}\r\n                      onFocus={(event) => {}}\r\n                      onBlur={(event) => {}}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Select\r\n                      placeholder=\"Periodo\"\r\n                      onChange={(value, option) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          currentTimeRange: value,\r\n                          currentTimeRangeText: option.children,\r\n                        });\r\n                      }}\r\n                      value={dataForm.currentTimeRange}\r\n                    >\r\n                      <Option value={\"M\"} onClick={() => {}}>\r\n                        Meses\r\n                      </Option>\r\n                      <Option value={\"Y\"} onClick={() => {}}>\r\n                        Años\r\n                      </Option>\r\n                    </Select>\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={14} xs={{ span: 24 }} md={{ span: 14 }}>\r\n                <DatePicker\r\n                  value={\r\n                    isNil(dataForm.dateChangeAddress) === false\r\n                      ? moment(dataForm.dateChangeAddress, \"YYYY-MM-DD\")\r\n                      : null\r\n                  }\r\n                  placeholder=\"Fecha de cambio proximo domicilio\"\r\n                  onChange={(momentFormat, date) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      dateChangeAddress: moment(momentFormat).format(\r\n                        \"YYYY-MM-DD\"\r\n                      ),\r\n                    });\r\n                  }}\r\n                  format=\"DD MMMM YYYY\"\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={onClickBack}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Regresar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem title=\"Calle\" content={dataForm.street} />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Numero\"\r\n                  content={dataForm.streetNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Colonia\"\r\n                  content={dataForm.neighborhood}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Municipio/Delegación\"\r\n                  content={dataForm.city}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem title=\"Estado\" content={dataForm.state} />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Código postal\"\r\n                  content={dataForm.zipCode}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"La propiedad es\"\r\n                  content={\r\n                    dataForm.isOwn === 1 || dataForm.isOwn === true\r\n                      ? \"Propia\"\r\n                      : \"Rentada\"\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n                <DescriptionItem\r\n                  title=\"Tiempo habitando\"\r\n                  content={`${dataForm.currentTime} ${dataForm.currentTimeRangeText}`}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={9} xs={{ span: 24 }} md={{ span: 9 }}>\r\n                <DescriptionItem\r\n                  title=\"Fecha de cambio proximo domicilio\"\r\n                  content={moment(\r\n                    dataForm.dateChangeAddress,\r\n                    \"YYYY-MM-DD\"\r\n                  ).format(\"DD MMMM YYYY\")}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionCurrentAddress;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx",["429","430","431","432","433","434","435","436","437","438","439","440","441","442"],"import React, { useState, useEffect } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n} from \"antd\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionCurrentWork = (props) => {\r\n  const { onClickBack, onClickNext, dataFormSave, frontFunctions } = props;\r\n  const initialForm = {\r\n    jobPosition: null,\r\n    economicDependents: null,\r\n    companyName: null,\r\n    currentSalary: null,\r\n    currentSalaryFormat: null,\r\n    antiquityTimeRange: null,\r\n    antiquityTimeRangeText: null,\r\n    antiquity: null,\r\n    bossName: null,\r\n    bossEmailAddress: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataFormSave) === false) {\r\n      setDataForm({\r\n        ...dataFormSave,\r\n        antiquityTimeRangeText:\r\n          dataFormSave.antiquityTimeRange === \"Y\"\r\n            ? \"Años\"\r\n            : dataFormSave.antiquityTimeRange === \"M\"\r\n            ? \"Meses\"\r\n            : null,\r\n        currentSalaryFormat:\r\n          isNil(dataFormSave.currentSalary) === false\r\n            ? frontFunctions.parseFormatCurrency(\r\n                dataFormSave.currentSalary,\r\n                2,\r\n                2\r\n              )\r\n            : null,\r\n      });\r\n    }\r\n  }, [dataFormSave]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Información laboral\"\r\n          : \"Confirmar Información laboral\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.jobPosition}\r\n                  placeholder={\"Puesto\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, jobPosition: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={dataForm.economicDependents}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Numero de dependientes economicos\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      economicDependents: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Input\r\n                  value={dataForm.companyName}\r\n                  placeholder={\"Nombre de la empresa\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, companyName: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"$\"\r\n                  suffix=\"\"\r\n                  value={dataForm.currentSalary}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Sueldo mensual\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      currentSalary: floatValue,\r\n                      currentSalaryFormat: formattedValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={dataForm.antiquity}\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Antiguedad\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({ ...dataForm, antiquity: floatValue });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <Select\r\n                  placeholder=\"Periodo\"\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      antiquityTimeRange: value,\r\n                      antiquityTimeRangeText: option.children,\r\n                    });\r\n                  }}\r\n                  value={dataForm.antiquityTimeRange}\r\n                >\r\n                  <Option value={\"M\"} onClick={() => {}}>\r\n                    Meses\r\n                  </Option>\r\n                  <Option value={\"Y\"} onClick={() => {}}>\r\n                    Años\r\n                  </Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.bossName}\r\n                  placeholder={\"Nombre de tu jefe\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, bossName: e.target.value });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Input\r\n                  value={dataForm.bossEmailAddress}\r\n                  placeholder={\"Correo de tu jefe\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      bossEmailAddress: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={onClickBack}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Regresar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Puesto\"\r\n                  content={dataForm.jobPosition}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Numero de dependientes\"\r\n                  content={dataForm.economicDependents}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Nombre de la empresa\"\r\n                  content={dataForm.companyName}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Sueldo mensual\"\r\n                  content={dataForm.currentSalaryFormat}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Antiguedad\"\r\n                  content={`${dataForm.antiquity} ${dataForm.antiquityTimeRangeText}`}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Nombre de tu jefe\"\r\n                  content={dataForm.bossName}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Correo de tu jefe\"\r\n                  content={dataForm.bossEmailAddress}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickNext(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionCurrentWork;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx",["443","444","445","446","447","448","449","450","451","452","453"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n} from \"antd\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\nimport CustomReferences from \"./customReference\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionInfoReferences = (props) => {\r\n  const {\r\n    onClickBack,\r\n    onClickNext,\r\n    dataFormSave,\r\n    onClickSendReferences,\r\n    dataReferences,\r\n  } = props;\r\n  const initialForm = {\r\n    jobPosition: null,\r\n    economicDependents: null,\r\n    companyName: null,\r\n    currentSalary: null,\r\n    antiquityTimeRange: null,\r\n    antiquity: null,\r\n    bossName: null,\r\n    bossEmailAddress: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [isVisibleButtonContinue, setIsVisibleButtonContinue] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataFormSave) === false) {\r\n      setDataForm(dataFormSave);\r\n    }\r\n  }, [dataFormSave]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>Referencias</h3>\r\n      <Row>\r\n        <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n          <CustomReferences\r\n            dataReferences={\r\n              isEmpty(dataReferences) === false &&\r\n              isNil(dataReferences[0]) === false\r\n                ? dataReferences[0]\r\n                : []\r\n            }\r\n            title=\"Referencia 1\"\r\n            onClickAdd={(data) => {\r\n              onClickSendReferences({\r\n                ...data,\r\n                idTypeForm: dataFormSave.idTypeForm,\r\n              });\r\n            }}\r\n          />\r\n          <CustomReferences\r\n            dataReferences={\r\n              isEmpty(dataReferences) === false &&\r\n              isNil(dataReferences[1]) === false\r\n                ? dataReferences[1]\r\n                : []\r\n            }\r\n            title=\"Referencia 2\"\r\n            onClickAdd={(data) => {\r\n              onClickSendReferences({\r\n                ...data,\r\n                idTypeForm: dataFormSave.idTypeForm,\r\n              });\r\n            }}\r\n          />\r\n          <CustomReferences\r\n            dataReferences={\r\n              isEmpty(dataReferences) === false &&\r\n              isNil(dataReferences[2]) === false\r\n                ? dataReferences[2]\r\n                : []\r\n            }\r\n            title=\"Referencia 3\"\r\n            onClickAdd={(data) => {\r\n              onClickSendReferences({\r\n                ...data,\r\n                idTypeForm: dataFormSave.idTypeForm,\r\n              });\r\n              setIsVisibleButtonContinue(true);\r\n            }}\r\n          />\r\n          <div className=\"button_actions\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClickBack}\r\n              className=\"button_secondary\"\r\n            >\r\n              <span>Regresar</span>\r\n            </button>\r\n            {(isVisibleButtonContinue === true ||\r\n              isEmpty(dataReferences) === false) && (\r\n              <button\r\n                type=\"button\"\r\n                onClick={onClickNext}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            )}\r\n          </div>\r\n        </Col>\r\n        <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionInfoReferences;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx",["454","455","456","457","458","459","460","461","462","463","464","465","466","467","468"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Upload,\r\n  message,\r\n  Radio,\r\n} from \"antd\";\r\nimport CustomFileUpload from \"./customFileUpload\";\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst CustomSubSectionCardDocument = (props) => {\r\n  const { children, title, subtitle, visibleSubtitle } = props;\r\n  return (\r\n    <div className=\"section-card-documentation\">\r\n      <div className=\"section-title-card-doc\">\r\n        <strong>{title}</strong>\r\n        <span\r\n          style={{\r\n            visibility: visibleSubtitle === true ? \"visible\" : \"hidden\",\r\n          }}\r\n        >\r\n          {subtitle}\r\n        </span>\r\n      </div>\r\n      <div className=\"section-content-card-doc\">{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst SectionDocumentation = (props) => {\r\n  const { onClickBack, onClickNext, dataDocuments, typeDocument } = props;\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>Documentación</h3>\r\n      <div className=\"section-top-documentation\">\r\n        <CustomSubSectionCardDocument\r\n          title=\"Selfie\"\r\n          subtitle=\"N/A\"\r\n          visibleSubtitle={false}\r\n        >\r\n          <CustomFileUpload\r\n            acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n            dataDocument={\r\n              isEmpty(dataDocuments) === false &&\r\n              isNil(dataDocuments[6]) === false\r\n                ? dataDocuments[6]\r\n                : {}\r\n            }\r\n            typeDocument={typeDocument}\r\n          />\r\n        </CustomSubSectionCardDocument>\r\n        <CustomSubSectionCardDocument\r\n          title=\"INE\"\r\n          subtitle=\"Frente y vuelta\"\r\n          visibleSubtitle\r\n        >\r\n          <CustomFileUpload\r\n            acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n            dataDocument={\r\n              isEmpty(dataDocuments) === false &&\r\n              isNil(dataDocuments[0]) === false\r\n                ? dataDocuments[0]\r\n                : {}\r\n            }\r\n            typeDocument={typeDocument}\r\n          />\r\n          <CustomFileUpload\r\n            acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n            dataDocument={\r\n              isEmpty(dataDocuments) === false &&\r\n              isNil(dataDocuments[1]) === false\r\n                ? dataDocuments[1]\r\n                : {}\r\n            }\r\n            typeDocument={typeDocument}\r\n          />\r\n        </CustomSubSectionCardDocument>\r\n        <CustomSubSectionCardDocument\r\n          title=\"Carta laboral\"\r\n          subtitle=\"Membretada y firmada\"\r\n          visibleSubtitle\r\n        >\r\n          <CustomFileUpload\r\n            acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n            dataDocument={\r\n              isEmpty(dataDocuments) === false &&\r\n              isNil(dataDocuments[5]) === false\r\n                ? dataDocuments[5]\r\n                : {}\r\n            }\r\n            typeDocument={typeDocument}\r\n          />\r\n        </CustomSubSectionCardDocument>\r\n      </div>\r\n      <div className=\"section-bottom-documentation\">\r\n        <CustomSubSectionCardDocument\r\n          title=\"últimos 3 comprobantes de ingreso\"\r\n          subtitle=\"N/A\"\r\n          visibleSubtitle={false}\r\n        >\r\n          <CustomFileUpload\r\n            acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n            dataDocument={\r\n              isEmpty(dataDocuments) === false &&\r\n              isNil(dataDocuments[2]) === false\r\n                ? dataDocuments[2]\r\n                : {}\r\n            }\r\n            typeDocument={typeDocument}\r\n          />\r\n          <CustomFileUpload\r\n            acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n            dataDocument={\r\n              isEmpty(dataDocuments) === false &&\r\n              isNil(dataDocuments[3]) === false\r\n                ? dataDocuments[3]\r\n                : {}\r\n            }\r\n            typeDocument={typeDocument}\r\n          />\r\n          <CustomFileUpload\r\n            acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n            dataDocument={\r\n              isEmpty(dataDocuments) === false &&\r\n              isNil(dataDocuments[4]) === false\r\n                ? dataDocuments[4]\r\n                : {}\r\n            }\r\n            typeDocument={typeDocument}\r\n          />\r\n        </CustomSubSectionCardDocument>\r\n      </div>\r\n      <div className=\"button_actions\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={onClickBack}\r\n          className=\"button_secondary\"\r\n        >\r\n          <span>Regresar</span>\r\n        </button>\r\n        <button type=\"button\" onClick={onClickNext} className=\"button_primary\">\r\n          <span>Continuar</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionDocumentation;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx",["469","470","471","472","473","474","475","476","477","478","479"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  InfoCircleOutlined,\r\n  UserOutlined,\r\n  SyncOutlined,\r\n  CloseOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n  DatePicker,\r\n} from \"antd\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\nimport CustomFileUpload from \"./customFileUpload\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionInfoAval = (props) => {\r\n  const {\r\n    onClickBack,\r\n    onClickFinish,\r\n    dataFormSave,\r\n    onChangeZipCode,\r\n    dataZipCatalog,\r\n    dataZipCodeAdress,\r\n    dataDocuments,\r\n    typeDocument,\r\n  } = props;\r\n  const initialForm = {\r\n    hasEndorsement: null,\r\n    endorsementGivenName: null,\r\n    endorsementLastName: null,\r\n    endorsementMothersMaidenName: null,\r\n    endorsementEmailAddress: null,\r\n    endorsementPhoneNumber: null,\r\n    collateralPropertyStreet: null,\r\n    collateralPropertySuite: null,\r\n    collateralPropertyStreetNumber: null,\r\n    collateralPropertyIdZipCoode: null,\r\n    collateralPropertyNeighborhood: null,\r\n    collateralPropertyCity: null,\r\n    collateralPropertyState: null,\r\n    documentNumber: null,\r\n    documentSignedAt: null,\r\n    notaryOfficeNumber: null,\r\n    notaryName: null,\r\n    signedAtPlace: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [isOpenInput, setIsOpenInput] = useState(false);\r\n  const [confirmData, setConfirmData] = useState(false);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div\r\n      className=\"site-description-item-profile-wrapper\"\r\n      style={{ textAlign: \"center\" }}\r\n    >\r\n      <strong className=\"site-description-item-profile-p-label\">{title}</strong>\r\n      <br />\r\n      {content}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataFormSave) === false) {\r\n      setDataForm(dataFormSave);\r\n      onChangeZipCode(dataFormSave.collateralPropertyZipCode);\r\n    }\r\n  }, [dataFormSave]);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataZipCodeAdress) === false) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        collateralPropertyState: dataZipCodeAdress.state,\r\n        collateralPropertyCity: dataZipCodeAdress.municipality,\r\n      });\r\n    }\r\n  }, [dataZipCodeAdress]);\r\n\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>\r\n        {confirmData === false\r\n          ? \"Información Aval\"\r\n          : \"Confirmar Información Aval\"}\r\n      </h3>\r\n      {confirmData === false && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span style={{ color: \"#ff0282\", fontWeight: \"bold\" }}>\r\n                    ¿Cuentas con Aval?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      const value = e.target.value;\r\n                      setDataForm({ ...dataForm, hasEndorsement: value });\r\n                    }}\r\n                    value={\r\n                      dataForm.hasEndorsement === true ||\r\n                      dataForm.hasEndorsement === 1\r\n                        ? 1\r\n                        : 0\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            {(dataForm.hasEndorsement === 1 ||\r\n              dataForm.hasEndorsement === true) && (\r\n              <>\r\n                <p>Información personal</p>\r\n                <Row>\r\n                  <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                    <Input\r\n                      value={dataForm.endorsementGivenName}\r\n                      placeholder={\"Nombres\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          endorsementGivenName: value,\r\n                        });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <Input\r\n                      value={dataForm.endorsementLastName}\r\n                      placeholder={\"Apellido paterno\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          endorsementLastName: value,\r\n                        });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                  <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                  <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                    <Input\r\n                      value={dataForm.endorsementMothersMaidenName}\r\n                      placeholder={\"Apellido materno\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          endorsementMothersMaidenName: value,\r\n                        });\r\n                      }}\r\n                      suffix={\r\n                        <img src={IconProfile} alt=\"profile\" width=\"15\" />\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.endorsementPhoneNumber}\r\n                      placeholder={\"Telefono\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          endorsementPhoneNumber: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.endorsementEmailAddress}\r\n                      placeholder={\"Correo\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          endorsementEmailAddress: value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <p>Dirección de la propiedad en garantia</p>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <Input\r\n                      value={dataForm.collateralPropertyStreet}\r\n                      placeholder={\"Calle\"}\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          collateralPropertyStreet: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.collateralPropertyStreetNumber}\r\n                      placeholder={\"Numero\"}\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          collateralPropertyStreetNumber: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.collateralPropertyZipCode}\r\n                      placeholder={\"Código postal\"}\r\n                      onChange={(e) => {\r\n                        const value = e.target.value;\r\n                        if (value.length >= 5) {\r\n                          setDataForm({\r\n                            ...dataForm,\r\n                            collateralPropertyZipCode: value,\r\n                          });\r\n                          onChangeZipCode(e.target.value);\r\n                        } else {\r\n                          setDataForm({\r\n                            ...dataForm,\r\n                            collateralPropertyNeighborhood: null,\r\n                            collateralPropertyIdZipCoode: null,\r\n                            collateralPropertyZipCode: value,\r\n                          });\r\n                        }\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.collateralPropertyState}\r\n                      placeholder={\"Estado\"}\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          collateralPropertyState: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.collateralPropertyCity}\r\n                      placeholder={\"Municipio/Delegación\"}\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          collateralPropertyCity: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    {isOpenInput === false ? (\r\n                      <Select\r\n                        placeholder=\"Colonia\"\r\n                        value={dataForm.collateralPropertyIdZipCoode}\r\n                        onChange={(value, option) => {\r\n                          const dataSelect = option.onClick();\r\n                          setIsOpenInput(dataSelect.isOpen);\r\n                          if (dataSelect.isOpen === true) {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              collateralPropertyNeighborhood: null,\r\n                              collateralPropertyIdZipCoode: value,\r\n                            });\r\n                          } else {\r\n                            setDataForm({\r\n                              ...dataForm,\r\n                              collateralPropertyNeighborhood: option.children,\r\n                              collateralPropertyIdZipCoode: value,\r\n                            });\r\n                          }\r\n                        }}\r\n                      >\r\n                        {isEmpty(dataZipCatalog) === false &&\r\n                          dataZipCatalog.map((row) => {\r\n                            return (\r\n                              <Option\r\n                                value={row.idZipCode}\r\n                                onClick={() => {\r\n                                  return row;\r\n                                }}\r\n                              >\r\n                                {row.neighborhood}\r\n                              </Option>\r\n                            );\r\n                          })}\r\n                      </Select>\r\n                    ) : (\r\n                      <Input\r\n                        value={dataForm.collateralPropertyNeighborhood}\r\n                        placeholder={\"Indicar Colonia\"}\r\n                        suffix={\r\n                          <Tooltip title=\"Cerrar\">\r\n                            <CloseOutlined\r\n                              style={{ color: \"rgba(0,0,0,.45)\" }}\r\n                              onClick={() => {\r\n                                setIsOpenInput(false);\r\n                                setDataForm({\r\n                                  ...dataForm,\r\n                                  collateralPropertyIdZipCoode: null,\r\n                                  collateralPropertyNeighborhood: null,\r\n                                });\r\n                              }}\r\n                            />\r\n                          </Tooltip>\r\n                        }\r\n                        onChange={(e) => {\r\n                          setDataForm({\r\n                            ...dataForm,\r\n                            collateralPropertyNeighborhood: e.target.value,\r\n                          });\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                </Row>\r\n                <p>Escrituras</p>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.documentNumber}\r\n                      placeholder={\"Numero de las escrituras\"}\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          documentNumber: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <DatePicker\r\n                      value={\r\n                        isNil(dataForm.documentSignedAt) === false\r\n                          ? moment(dataForm.documentSignedAt, \"YYYY-MM-DD\")\r\n                          : null\r\n                      }\r\n                      placeholder=\"Fecha de firma de las escrituras\"\r\n                      onChange={(momentFormat, date) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          documentSignedAt: moment(momentFormat).format(\r\n                            \"YYYY-MM-DD\"\r\n                          ),\r\n                        });\r\n                      }}\r\n                      format=\"DD MMMM YYYY\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <Input\r\n                      value={dataForm.signedAtPlace}\r\n                      placeholder={\"Lugar de firma de la escritura\"}\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          signedAtPlace: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.notaryOfficeNumber}\r\n                      placeholder={\"Número de la notaria\"}\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          notaryOfficeNumber: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                  <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <Input\r\n                      value={dataForm.notaryName}\r\n                      placeholder={\"Nombre del notario\"}\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          notaryName: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <p>Documentación</p>\r\n                <div className=\"section-top-documentation\">\r\n                  <div className=\"section-card-documentation\">\r\n                    <div className=\"section-title-card-doc\">\r\n                      <strong>INE</strong>\r\n                      <span>Frente y vuelta</span>\r\n                    </div>\r\n                    <div className=\"section-content-card-doc\">\r\n                      <CustomFileUpload\r\n                        acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                        dataDocument={\r\n                          isEmpty(dataDocuments) === false &&\r\n                          isNil(dataDocuments[0]) === false\r\n                            ? dataDocuments[0]\r\n                            : {}\r\n                        }\r\n                        typeDocument={typeDocument}\r\n                      />\r\n                      <CustomFileUpload\r\n                        acceptFile=\"image/png, image/jpeg, image/jpg\"\r\n                        dataDocument={\r\n                          isEmpty(dataDocuments) === false &&\r\n                          isNil(dataDocuments[1]) === false\r\n                            ? dataDocuments[1]\r\n                            : {}\r\n                        }\r\n                        typeDocument={typeDocument}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"section-card-documentation\">\r\n                    <div className=\"section-title-card-doc\">\r\n                      <strong>Escrituras de la propiedad</strong>\r\n                      <span style={{ visibility: \"hidden\" }}>N/A</span>\r\n                    </div>\r\n                    <div className=\"section-content-card-doc\">\r\n                      <CustomFileUpload\r\n                        acceptFile=\"image/png, image/jpeg, image/jpg, .pdf, .doc, .docx\"\r\n                        dataDocument={\r\n                          isEmpty(dataDocuments) === false &&\r\n                          isNil(dataDocuments[2]) === false\r\n                            ? dataDocuments[2]\r\n                            : {}\r\n                        }\r\n                        typeDocument={typeDocument}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={onClickBack}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Regresar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(true);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Finalizar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n      {confirmData === true && (\r\n        <Row>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n          <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n            <p>Información personal</p>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"¿Cuentas con Aval?\"\r\n                  content={\r\n                    dataForm.hasEndorsement === true ||\r\n                    dataForm.hasEndorsement === 1\r\n                      ? \"Si\"\r\n                      : \"No\"\r\n                  }\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n                <DescriptionItem\r\n                  title=\"Nombre completo\"\r\n                  content={`${dataForm.endorsementGivenName} ${dataForm.endorsementLastName} ${dataForm.endorsementMothersMaidenName}`}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Telefono\"\r\n                  content={dataForm.endorsementPhoneNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n                <DescriptionItem\r\n                  title=\"Correo\"\r\n                  content={dataForm.endorsementEmailAddress}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Dirección de la propiedad en garantia</p>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Calle\"\r\n                  content={dataForm.collateralPropertyStreet}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Numero\"\r\n                  content={dataForm.collateralPropertyStreetNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Colonia\"\r\n                  content={dataForm.collateralPropertyNeighborhood}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n                <DescriptionItem\r\n                  title=\"Municipio/Delegación\"\r\n                  content={dataForm.collateralPropertyCity}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Estado\"\r\n                  content={dataForm.collateralPropertyState}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <DescriptionItem\r\n                  title=\"Código postal\"\r\n                  content={dataForm.collateralPropertyZipCode}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Escrituras</p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <DescriptionItem\r\n                  title=\"Numero de las escrituras\"\r\n                  content={dataForm.documentNumber}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <DescriptionItem\r\n                  title=\"Fecha de firma de las escrituras\"\r\n                  content={moment(\r\n                    dataForm.documentSignedAt,\r\n                    \"YYYY-MM-DD\"\r\n                  ).format(\"DD MMMM YYYY\")}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <DescriptionItem\r\n                  title=\"Lugar de la firma de las escrituras\"\r\n                  content={dataForm.signedAtPlace}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <DescriptionItem\r\n                  title=\"Número de la notaria\"\r\n                  content={dataForm.notaryOfficeNumber}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <DescriptionItem\r\n                  title=\"Nombre del notario\"\r\n                  content={dataForm.notaryOfficeNumber}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setConfirmData(false);\r\n                }}\r\n                className=\"button_secondary\"\r\n              >\r\n                <span>Cancelar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  onClickFinish(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>Confirmar</span>\r\n              </button>\r\n            </div>\r\n          </Col>\r\n          <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        </Row>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionInfoAval;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx",["480","481","482","483","484","485","486","487","488","489","490"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx",["491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx",["510","511","512","513","514","515","516","517","518"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx",["519","520","521","522","523","524","525","526"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx",["527","528","529","530","531","532","533","534","535","536","537"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport Magnifier from \"react-magnifier\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Upload,\r\n  Radio,\r\n  message,\r\n  Progress,\r\n  Image,\r\n} from \"antd\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport Show from \"../../../assets/icons/Show.svg\";\r\nimport Delete from \"../../../assets/icons/Delete.svg\";\r\nimport {\r\n  callAddDocument,\r\n  callAddTypeFormDocument,\r\n} from \"../../../utils/actions/actions\";\r\nimport ENVIROMENT from \"../../../utils/constants/enviroments\";\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst CustomFileUpload = (props) => {\r\n  const {\r\n    acceptFile,\r\n    typeDocument,\r\n    dataDocument,\r\n    callAddDocument,\r\n    callAddTypeFormDocument,\r\n    dataProfile,\r\n    onSuccesUpload,\r\n  } = props;\r\n  const [fileList, setFileList] = useState({});\r\n  const [preview, setPreview] = useState(null);\r\n  const [fileName, setFileName] = useState(null);\r\n  const [timeUpload, setTimeUpload] = useState(0);\r\n  const [previewVisible, setPreviewVisible] = useState(false);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [spinVisibleUpload, setSpinVisibleUpload] = useState(true);\r\n\r\n  const LoadingSpin = (\r\n    <div\r\n      style={{\r\n        top: \"20px\",\r\n        position: \"absolute\",\r\n        left: \"50px\",\r\n      }}\r\n    >\r\n      <Progress type=\"circle\" percent={timeUpload} />\r\n    </div>\r\n  );\r\n\r\n  const beforeUpload = (file) => {\r\n    const isLt2M = file.size / 1024 / 1024 < 5;\r\n    if (!isLt2M) {\r\n      message.error(\"¡El archivo que intentas subir debe ser menor que 5MB!\");\r\n    }\r\n    return isLt2M;\r\n  };\r\n\r\n  const handlerAddTypeFormDocument = async (data, id) => {\r\n    try {\r\n      await callAddTypeFormDocument(data, id);\r\n      setSpinVisibleUpload(false);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerAddDocument = async (data, infoDoc) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: infoDoc.idDocumentType,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(\r\n        data.originFileObj,\r\n        dataDocument,\r\n        (percent) => {\r\n          setTimeUpload(percent);\r\n        }\r\n      );\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      await handlerAddTypeFormDocument(\r\n        {\r\n          idCustomer,\r\n          idTypeForm: infoDoc.idTypeForm,\r\n          idCustomerTenant: idCustomer,\r\n          type: typeDocument,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        documentId\r\n      );\r\n      setTimeout(() => {\r\n        setSpinVisible(false);\r\n      }, 3000);\r\n      onSuccesUpload(infoDoc.idDocumentType);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <Spin indicator={LoadingSpin} spinning={spinVisible}>\r\n      <div\r\n        className={`section-drop-document ${\r\n          (isNil(preview) === false ||\r\n            (isEmpty(dataDocument) === false &&\r\n              isNil(dataDocument.idDocument) === false)) &&\r\n          \"border-dashed-none\"\r\n        }`}\r\n      >\r\n        {isNil(preview) === true &&\r\n          isEmpty(dataDocument) === false &&\r\n          isNil(dataDocument.idDocument) === true && (\r\n            <Dragger\r\n              action=\"/\"\r\n              onChange={({ file }) => {\r\n                if (isNil(file.originFileObj) === false) {\r\n                  const reader = new FileReader();\r\n                  reader.readAsDataURL(file.originFileObj);\r\n                  reader.onload = (event) => {\r\n                    if (file.type !== \"application/pdf\") {\r\n                      setPreview(event.target.result);\r\n                    } else {\r\n                      setPreview(\"\");\r\n                    }\r\n                  };\r\n                  setFileList(file);\r\n                  setFileName(file.name);\r\n                }\r\n              }}\r\n              method=\"get\"\r\n              showUploadList={false}\r\n              accept={acceptFile}\r\n              beforeUpload={beforeUpload}\r\n            >\r\n              <span>\r\n                Arrastra tu documento\r\n                <br /> aqui o haz Clic\r\n              </span>\r\n            </Dragger>\r\n          )}\r\n        {isNil(preview) === false &&\r\n          isEmpty(dataDocument) === false &&\r\n          isNil(dataDocument.idDocument) === true && (\r\n            <div className=\"content-preview-document\">\r\n              <div className=\"screen-hover-action\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setPreviewVisible(!previewVisible);\r\n                  }}\r\n                >\r\n                  <img src={Show} alt=\"preview\" />\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setFileList({});\r\n                    setPreview(null);\r\n                    setFileName(null);\r\n                  }}\r\n                >\r\n                  <img src={Delete} alt=\"eliminar\" />\r\n                </button>\r\n              </div>\r\n              <img src={preview} alt=\"Preview\" />\r\n            </div>\r\n          )}\r\n        {isEmpty(dataDocument) === false &&\r\n          isNil(dataDocument.idDocument) === false && (\r\n            <div className=\"content-preview-document\">\r\n              <Image\r\n                width={100}\r\n                height={110}\r\n                style={{ textAlign: \"center\" }}\r\n                src={`${ENVIROMENT}/api/viewFile/${dataDocument.idDocument}/${dataDocument.bucketSource}`}\r\n              />\r\n            </div>\r\n          )}\r\n        <Modal\r\n          visible={previewVisible}\r\n          title={\r\n            <div className=\"form-modal\">\r\n              <div className=\"title-head-modal\">\r\n                <button\r\n                  className=\"arrow-back-to\"\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setPreviewVisible(!previewVisible);\r\n                  }}\r\n                >\r\n                  <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                </button>\r\n                <h1>{fileName}</h1>\r\n              </div>\r\n            </div>\r\n          }\r\n          closable={false}\r\n          footer={null}\r\n          style={{ top: \"20px\" }}\r\n        >\r\n          <Magnifier src={preview} />\r\n        </Modal>\r\n      </div>\r\n      {isNil(preview) === false &&\r\n        isEmpty(dataDocument) === false &&\r\n        isNil(dataDocument.idDocument) === true &&\r\n        spinVisibleUpload === true && (\r\n          <div className=\"confirm-upload-document button_actions\">\r\n            <button\r\n              className=\"button_primary\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                if (\r\n                  isEmpty(dataDocument) === false &&\r\n                  isEmpty(fileList) === false\r\n                ) {\r\n                  setSpinVisible(true);\r\n                  handlerAddDocument(fileList, dataDocument);\r\n                }\r\n              }}\r\n            >\r\n              <span>\r\n                <i className=\"fa fa-upload\" /> Subir\r\n              </span>\r\n            </button>\r\n          </div>\r\n        )}\r\n    </Spin>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callAddDocument: (file, data, callback) =>\r\n    dispatch(callAddDocument(file, data, callback)),\r\n  callAddTypeFormDocument: (data, id) =>\r\n    dispatch(callAddTypeFormDocument(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomFileUpload);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailable.jsx",["538","539","540","541","542","543","544","545","546","547","548","549","550","551","552","553","554","555"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Checkbox,\r\n} from \"antd\";\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\nimport {\r\n  InfoCircleOutlined,\r\n  UserOutlined,\r\n  SyncOutlined,\r\n  CloseOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport ChatContract from \"../../../assets/icons/ChatContract.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionContractAvailable = (props) => {\r\n  const { isModalVisible, onClose } = props;\r\n  const [signature, setSignature] = useState(\"\");\r\n  const [valueText, setValueText] = useState(null);\r\n  const [openSection, setOpenSection] = useState(1);\r\n  const [aceptTerms, setAceptTerms] = useState(false);\r\n  const signatureRef = useRef(null);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      className=\"modal-signature-contract\"\r\n    >\r\n      <div className=\"form-modal\">\r\n        <div className=\"title-head-modal\">\r\n          <button\r\n            className=\"arrow-back-to\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              if (openSection === 1) {\r\n                onClose();\r\n              } else {\r\n                setOpenSection(1);\r\n              }\r\n              setAceptTerms(false);\r\n            }}\r\n          >\r\n            <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n          <h1>\r\n            {openSection === 1 && \"Contrato\"}\r\n            {openSection === 2 && \"Firma electrónica\"}\r\n            {openSection === 3 && \"Observaciones\"}\r\n          </h1>\r\n          <button\r\n            className=\"chat-contract-icon\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setOpenSection(3);\r\n              setAceptTerms(false);\r\n            }}\r\n          >\r\n            <img src={ChatContract} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n        </div>\r\n        <div className=\"main-form-information\">\r\n          <div className=\"contract-card-information\">\r\n            {openSection === 1 && (\r\n              <div className=\"contract-children-information\">\r\n                Lorem ipsum dolor sit amet consectetur adipisicing elit. Iusto\r\n                alias distinctio ab debitis magni perferendis sapiente? Facilis\r\n                eos quos optio, totam deserunt ad reprehenderit minus. Laborum\r\n                corrupti aperiam quisquam sit. Voluptatum, ducimus sequi\r\n                blanditiis vel libero facere exercitationem iste et obcaecati\r\n                asperiores magnam possimus voluptatem quam tempora quisquam sed\r\n                eveniet quae amet quaerat unde molestias? Qui vitae fugit\r\n                ratione deserunt! Fugit mollitia, dolorem vitae facere, eos non\r\n                reprehenderit dicta voluptate quidem voluptatum ipsam quaerat,\r\n                fugiat error qui voluptatem quis iste ducimus ad exercitationem\r\n                veritatis possimus soluta quos cumque. Assumenda, esse!\r\n                Repellendus architecto eveniet doloribus quia molestias, porro\r\n                beatae quas quibusdam reprehenderit iusto. Facere laboriosam\r\n                nemo hic est obcaecati tempore! Vero minima nostrum officiis\r\n                exercitationem nemo animi harum a tempora eum. Sunt nobis\r\n                voluptate officia architecto autem? Aperiam ipsam ipsum magnam,\r\n                minus tempora illo nisi animi maxime voluptate, neque sint harum\r\n                consequuntur, corporis quas! Voluptas alias perferendis\r\n                temporibus autem, odit velit. Natus tenetur sint voluptatum\r\n                ullam illum nulla, suscipit eaque corrupti voluptas error quae\r\n                excepturi, vel alias provident quas beatae voluptate illo iure\r\n                quos? Et alias eaque placeat molestias impedit fugiat.\r\n                Exercitationem commodi, corrupti porro asperiores provident, hic\r\n                mollitia facere debitis autem numquam, reiciendis molestias\r\n                libero enim iure sint delectus placeat quam amet harum sit\r\n                distinctio nobis incidunt necessitatibus vero! Quisquam!\r\n                Provident distinctio asperiores cumque, minus magnam ex impedit\r\n                omnis, maxime temporibus facere exercitationem voluptatem.\r\n                Temporibus, autem sed. Repudiandae voluptatum vel deserunt qui\r\n                officiis quasi tempora expedita, magnam similique molestiae\r\n                esse! Quibusdam perferendis, in eum velit corrupti dicta\r\n                similique assumenda autem ipsum nesciunt. Unde quaerat\r\n                consectetur quos enim, iste ipsa dicta doloribus quasi\r\n                consequatur architecto, earum dolore soluta fugiat in\r\n                aspernatur. Ipsum voluptatum quo autem, architecto earum\r\n                pariatur accusamus ea perspiciatis quas labore debitis quia\r\n                totam. Temporibus blanditiis similique totam vitae? Velit itaque\r\n                quas, aliquam perferendis dolorem porro necessitatibus.\r\n                Consequuntur, ad!\r\n              </div>\r\n            )}\r\n            {openSection === 2 && (\r\n              <div className=\"contract-section-signature\">\r\n                <p style={{ fontSize: \"12px\" }}>\r\n                  Firma dentro del reacuadro negro\r\n                </p>\r\n                <div className=\"signature\">\r\n                  <SignatureCanvas\r\n                    penColor=\"black\"\r\n                    canvasProps={{\r\n                      width: 320,\r\n                      height: 150,\r\n                      className: \"sigCanvas\",\r\n                    }}\r\n                    ref={signatureRef}\r\n                  />\r\n                </div>\r\n                <div className=\"conditions-name\">\r\n                  <strong>GERARDO ALDAIR GONZALEZ JIMENEZ</strong>\r\n                </div>\r\n                <Checkbox\r\n                  checked={aceptTerms}\r\n                  onChange={(e) => {\r\n                    const signatureCurrent = signatureRef.current;\r\n                    if (signatureCurrent.isEmpty() === false) {\r\n                      setAceptTerms(e.target.checked);\r\n                      const signatureBase64 = signatureCurrent.toDataURL();\r\n                      setSignature(signatureBase64);\r\n                    }\r\n                  }}\r\n                ></Checkbox>\r\n                <span\r\n                  style={{\r\n                    marginLeft: 5,\r\n                    textAlign: \"center\",\r\n                    fontSize: 10,\r\n                    color: \"gray\",\r\n                  }}\r\n                >\r\n                  Acepto que al dar click en aceptar estoy aceptando los\r\n                  terminos y condiciones publicados en la pagina\r\n                  https//homify.ai/terminos-y-condiciones amparados bajo la ley\r\n                </span>\r\n              </div>\r\n            )}\r\n            {openSection === 3 && (\r\n              <div className=\"contract-section-signature\">\r\n                <p style={{ fontSize: \"12px\" }}>\r\n                  No estas de acuerdo con tu contrato, puedes mandarnos tus\r\n                  observaciones\r\n                </p>\r\n                <div className=\"section-type-messages-fixed\">\r\n                  <div className=\"section-type-messages\">\r\n                    <div className=\"text-header\">Redactar mensaje</div>\r\n                    <textarea\r\n                      value={valueText}\r\n                      maxlength=\"200\"\r\n                      onChange={(e) => {\r\n                        setValueText(e.target.value);\r\n                      }}\r\n                      className=\"text-area-contract\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {openSection === 1 && (\r\n          <div className=\"two-action-buttons\">\r\n            <button type=\"button\" onClick={() => {}}>\r\n              <span>Descargar contrato</span>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setOpenSection(2);\r\n              }}\r\n            >\r\n              <span>Firma electrónica</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n        {openSection === 2 && (\r\n          <div className=\"two-action-buttons\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                signatureRef.current.clear();\r\n                setAceptTerms(false);\r\n              }}\r\n            >\r\n              <span>Limpiar firma</span>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {}}\r\n              className={aceptTerms === true ? \"\" : \"disabled-button\"}\r\n            >\r\n              <span>Aceptar</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n        {openSection === 3 && (\r\n          <div className=\"button_init_primary\">\r\n            <button type=\"button\" onClick={() => {}}>\r\n              <span>Enviar</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionContractAvailable;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionDepositGuarantee.jsx",["556","557","558","559","560","561","562","563","564","565","566","567","568","569","570","571","572","573","574","575","576"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport ReactPlayer from \"react-player\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Checkbox,\r\n  Radio,\r\n  Slider,\r\n} from \"antd\";\r\nimport SignatureCanvas from \"react-signature-canvas\";\r\nimport {\r\n  InfoCircleOutlined,\r\n  UserOutlined,\r\n  SyncOutlined,\r\n  CloseOutlined,\r\n} from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport Info from \"../../../assets/icons/Info.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionDepositGuarantee = (props) => {\r\n  const { isModalVisible, onClose, frontFunctions } = props;\r\n  const [openSection, setOpenSection] = useState(1);\r\n  const [valueSlider, setValueSlider] = useState(10000);\r\n  const [radioCkecked, setRadioChecked] = useState({\r\n    radio1: false,\r\n    radio2: false,\r\n    radio3: false,\r\n  });\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      className=\"modal-signature-contract\"\r\n    >\r\n      <div className=\"form-modal\">\r\n        <div className=\"title-head-modal\">\r\n          <button\r\n            className=\"arrow-back-to\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              if (openSection === 1) {\r\n                onClose();\r\n              } else {\r\n                setOpenSection(1);\r\n              }\r\n            }}\r\n          >\r\n            <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n          <h1>\r\n            {openSection === 1 && \"Oferta de póliza\"}\r\n            {openSection === 2 && \"Calcular el monto\"}\r\n            {openSection === 3 && \"¿Cómo funciona?\"}\r\n          </h1>\r\n          {openSection === 1 && (\r\n            <button\r\n              className=\"chat-contract-icon\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setOpenSection(3);\r\n              }}\r\n              style={{ border: \"1px solid #FF0282\", borderRadius: \"5px\" }}\r\n            >\r\n              <span style={{ fontSize: 15 }}>?</span>\r\n            </button>\r\n          )}\r\n        </div>\r\n        <div className=\"main-form-information-guarantee\">\r\n          {openSection === 1 && (\r\n            <div className=\"policy-information-modal\">\r\n              <span>\r\n                <strong>Homify</strong> te ofrece una poliza para que no\r\n                realices tu depòsito en garantía.\r\n              </span>\r\n              <div className=\"percentage-description\">\r\n                <div className=\"radio-percentage\">\r\n                  <Radio\r\n                    checked={radioCkecked.radio1}\r\n                    value={1}\r\n                    onClick={() => {\r\n                      setRadioChecked({\r\n                        radio3: false,\r\n                        radio2: false,\r\n                        radio1: true,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <strong>0% </strong>\r\n                  </Radio>\r\n                </div>\r\n                <div className=\"description\">\r\n                  Poliza por 2 veces el valor de la renta en caso de\r\n                  incumplimiento. <br />\r\n                  Costo:2% mas iva mensual del valor de la renta.\r\n                </div>\r\n              </div>\r\n              <div className=\"percentage-description\">\r\n                <div className=\"radio-percentage\">\r\n                  <Radio\r\n                    checked={radioCkecked.radio2}\r\n                    value={2}\r\n                    onClick={() => {\r\n                      setRadioChecked({\r\n                        radio3: false,\r\n                        radio2: true,\r\n                        radio1: false,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <strong>50%</strong>\r\n                  </Radio>\r\n                </div>\r\n                <div className=\"description\">\r\n                  Pago del 50% del valor del deposito en garantía mas una poliza\r\n                  por el 100% del valor de una renta.\r\n                  <br />\r\n                  Costo: 3% mas iva mensual del valor de una renta.\r\n                </div>\r\n              </div>\r\n              <div className=\"percentage-description\">\r\n                <div className=\"radio-percentage\">\r\n                  <Radio\r\n                    checked={radioCkecked.radio3}\r\n                    value={3}\r\n                    onClick={() => {\r\n                      setRadioChecked({\r\n                        radio3: true,\r\n                        radio2: false,\r\n                        radio1: false,\r\n                      });\r\n                    }}\r\n                  >\r\n                    <strong>100%</strong>\r\n                  </Radio>\r\n                </div>\r\n                <div className=\"description\">\r\n                  Pago del deposito en garantía en su totalidad directamente al\r\n                  propietario.\r\n                  <br />\r\n                  Costo: 4.5% mas iva mensual del valor de una renta.\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {openSection === 2 && (\r\n            <div className=\"value-calculator-policy\">\r\n              <div className=\"amount-rent-result\">\r\n                <p>Monto de renta</p>\r\n                <h3 style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\r\n                  {frontFunctions.parseFormatCurrency(valueSlider)}\r\n                </h3>\r\n              </div>\r\n              <div className=\"slider-percentage\">\r\n                <Slider\r\n                  defaultValue={1}\r\n                  value={valueSlider}\r\n                  min={10000}\r\n                  max={50000}\r\n                  tooltipVisible={false}\r\n                  onChange={(e) => {\r\n                    setValueSlider(e);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"calculate-percentage\">\r\n                <div className=\"percentage-description\">\r\n                  <div className=\"radio-percentage\">\r\n                    <Radio\r\n                      checked={radioCkecked.radio1}\r\n                      value={1}\r\n                      onClick={() => {\r\n                        setRadioChecked({\r\n                          radio3: false,\r\n                          radio2: false,\r\n                          radio1: true,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <strong>0% </strong>\r\n                    </Radio>\r\n                  </div>\r\n                  <div className=\"description\">\r\n                    {frontFunctions.parseFormatCurrency(\r\n                      valueSlider * 0.02,\r\n                      2,\r\n                      4\r\n                    )}{\" \"}\r\n                    + iva mensual\r\n                  </div>\r\n                </div>\r\n                <div className=\"percentage-description\">\r\n                  <div className=\"radio-percentage\">\r\n                    <Radio\r\n                      checked={radioCkecked.radio2}\r\n                      value={2}\r\n                      onClick={() => {\r\n                        setRadioChecked({\r\n                          radio3: false,\r\n                          radio2: true,\r\n                          radio1: false,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <strong>50%</strong>\r\n                    </Radio>\r\n                  </div>\r\n                  <div className=\"description\">\r\n                    {frontFunctions.parseFormatCurrency(\r\n                      valueSlider * 0.03,\r\n                      2,\r\n                      4\r\n                    )}{\" \"}\r\n                    + iva mensual\r\n                  </div>\r\n                </div>\r\n                <div className=\"percentage-description\">\r\n                  <div className=\"radio-percentage\">\r\n                    <Radio\r\n                      checked={radioCkecked.radio3}\r\n                      value={3}\r\n                      onClick={() => {\r\n                        setRadioChecked({\r\n                          radio3: true,\r\n                          radio2: false,\r\n                          radio1: false,\r\n                        });\r\n                      }}\r\n                    >\r\n                      <strong>100%</strong>\r\n                    </Radio>\r\n                  </div>\r\n                  <div className=\"description\">\r\n                    {frontFunctions.parseFormatCurrency(\r\n                      valueSlider * 0.045,\r\n                      2,\r\n                      4\r\n                    )}{\" \"}\r\n                    + iva mensual\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n          {openSection === 3 && (\r\n            <div className=\"video-how-functionaly\">\r\n              <ReactPlayer\r\n                url=\"https://www.youtube.com/watch?v=5UBYS7DEiAk\"\r\n                width=\"100%\"\r\n                height=\"200px\"\r\n              />\r\n            </div>\r\n          )}\r\n        </div>\r\n        {openSection === 1 && (\r\n          <div className=\"two-action-buttons\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setOpenSection(2);\r\n              }}\r\n            >\r\n              <span>Calcular</span>\r\n            </button>\r\n            <button type=\"button\" onClick={() => {}}>\r\n              <span>¡Lo quiero!</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n        {openSection === 2 && (\r\n          <div className=\"button_init_primary\">\r\n            <button type=\"button\" onClick={() => {}}>\r\n              <span>Autorizar</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n        {openSection === 3 && (\r\n          <div className=\"button_init_primary\">\r\n            <button type=\"button\" onClick={() => {}}>\r\n              <span>Autorizar</span>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionDepositGuarantee;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\adviser.jsx",["577","578","579","580","581","582","583","584","585","586","587"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, Modal } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport IconPolicy from \"../../assets/icons/Policy.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../assets/icons/activity.svg\";\r\nimport IconArroRight from \"../../assets/icons/arrowRight.svg\";\r\nimport {} from \"../../utils/actions/actions\";\r\nimport SectionStatsChart from \"./sections/sectionStatsChart\";\r\nimport SectionCardOwner from \"./sections/sectionCardOwner\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Adviser = (props) => {\r\n  const { dataProfile, history } = props;\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, Asesor</h2>\r\n            <span>\r\n              Último inicio de sesión: <strong>25 enero 2021</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>$18,000.00</h2>\r\n            <span>Total Comisiones</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconPolicy} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>45</h2>\r\n            <span>Polizas</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconActivity} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>2</h2>\r\n            <span>Renovaciones</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user\">\r\n          <SectionStatsChart\r\n            dataStatsChart={[\r\n              {\r\n                mes: \"Noviembre, 2021\",\r\n                ganancia: 35307.5,\r\n                gananciaFormat: \"$ 35,307.50 MXN\",\r\n                colorGanancia: \"#4E51D8\",\r\n                gasto: 0,\r\n                gastoFormat: \"$ 0.00 MXN\",\r\n                colorGasto: \"#EF280F\",\r\n                balance: 55307.5,\r\n                balanceFormat: \"$ 35,307.50 MXN\",\r\n                colorBalance: \"#32cd32\",\r\n              },\r\n              {\r\n                mes: \"Diciembre, 2021\",\r\n                ganancia: 15307.5,\r\n                gananciaFormat: \"$ 15,307.50 MXN\",\r\n                colorGanancia: \"#4E51D8\",\r\n                gasto: 0,\r\n                gastoFormat: \"$ 0.00 MXN\",\r\n                colorGasto: \"#EF280F\",\r\n                balance: 55307.5,\r\n                balanceFormat: \"$ 15,307.50 MXN\",\r\n                colorBalance: \"#32cd32\",\r\n              },\r\n              {\r\n                mes: \"Enero, 2021\",\r\n                ganancia: 55307.5,\r\n                gananciaFormat: \"$ 55,307.50 MXN\",\r\n                colorGanancia: \"#4E51D8\",\r\n                gasto: 0,\r\n                gastoFormat: \"$ 0.00 MXN\",\r\n                colorGasto: \"#EF280F\",\r\n                balance: 55307.5,\r\n                balanceFormat: \"$ 55,307.50 MXN\",\r\n                colorBalance: \"#32cd32\",\r\n              },\r\n            ]}\r\n            finishCallApis\r\n          />\r\n          <SectionCardOwner\r\n            history={history}\r\n            tenantCoincidences={[{}]}\r\n            finishCallApis\r\n            onClickSendInvitation={() => {}}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Adviser);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionCardOwner.jsx",["588","589","590","591","592","593","594","595","596","597","598","599","600","601","602"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, Modal, Skeleton } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport IconOwner from \"../../../assets/icons/iconHomeIndicator.svg\";\r\nimport IconWallet from \"../../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../../assets/icons/activity.svg\";\r\nimport IconArroRight from \"../../../assets/icons/arrowRight.svg\";\r\nimport EmptyTenant from \"../../../assets/icons/tenantEmpty.svg\";\r\n\r\nmoment.locale(\"es\");\r\n\r\nconst SectionCardOwner = (props) => {\r\n  const {\r\n    history,\r\n    tenantCoincidences,\r\n    finishCallApis,\r\n    onClickSendInvitation,\r\n  } = props;\r\n\r\n  const formatDate = (date) => {\r\n    let dateFormat = \"\";\r\n    if (date !== \"NA\") {\r\n      dateFormat = moment(date, \"DD/MM/YYYY\").format(\"DD MMMM YYYY\");\r\n    } else {\r\n      dateFormat = date;\r\n    }\r\n    return dateFormat;\r\n  };\r\n\r\n  return (\r\n    <div className=\"renter-card-information\">\r\n      <div className=\"title-cards flex-title-card\">\r\n        <span>Propietarios</span>\r\n      </div>\r\n      <div className=\"section-information-renters\">\r\n        <div className=\"data-renter-info\">\r\n          <div className=\"box-info-user\">\r\n            <div className=\"avatar-user\">\r\n              <Avatar size={50} icon={<UserOutlined />} />\r\n            </div>\r\n            <div className=\"info-user\">\r\n              <strong>Juan Carlos Gutierrez</strong>\r\n              <Rate\r\n                style={{\r\n                  fontSize: \"15px\",\r\n                  position: \"relative\",\r\n                  bottom: \"5px\",\r\n                }}\r\n                tooltips={[]}\r\n                onChange={() => {}}\r\n                value={5}\r\n              />\r\n              <div className=\"status-payment\" style={{ cursor: \"pointer\" }}>\r\n                <span>Enviar mensaje</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"info-user-payment\">\r\n              <div>\r\n                Vencimiento de contrato: <strong>25 enero 2022</strong>\r\n              </div>\r\n              <div>\r\n                Monto de Renta: <strong>$25,000.00</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"data-renter-info\">\r\n          <div className=\"box-info-user\">\r\n            <div className=\"avatar-user\">\r\n              <Avatar size={50} icon={<UserOutlined />} />\r\n            </div>\r\n            <div className=\"info-user\">\r\n              <strong>Alberto Hernandez</strong>\r\n              <Rate\r\n                style={{\r\n                  fontSize: \"15px\",\r\n                  position: \"relative\",\r\n                  bottom: \"5px\",\r\n                }}\r\n                tooltips={[]}\r\n                onChange={() => {}}\r\n                value={5}\r\n              />\r\n              <div className=\"status-payment\" style={{ cursor: \"pointer\" }}>\r\n                <span>Enviar mensaje</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"info-user-payment\">\r\n              <div>\r\n                Vencimiento de contrato: <strong>3 Febrero 2021</strong>\r\n              </div>\r\n              <div>\r\n                Monto de Renta: <strong>$18,000.00</strong>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {finishCallApis === false && <Skeleton loading active />}\r\n      </div>\r\n      {isEmpty(tenantCoincidences) === true && finishCallApis === true && (\r\n        <div className=\"empty-tenants\">\r\n          <img src={EmptyTenant} alt=\"\" />\r\n          <span>Aun no tienes propietarios</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionCardOwner;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionStatsChart.jsx",["603","604","605","606","607","608"],"import React, { useEffect, useState } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Layout, Avatar, Rate, Modal, Skeleton } from \"antd\";\r\n\r\nconst SectionStatsChart = (props) => {\r\n  const { dataStatsChart, finishCallApis } = props;\r\n  const [dataOptions, setDataOptions] = useState({});\r\n\r\n  const handlerConvertDataChart = (data) => {\r\n    let arrayMonths = [];\r\n    let arrayProfit = [];\r\n    let arrayExpenses = [];\r\n    let arrayBalance = [];\r\n\r\n    data.forEach((element) => {\r\n      arrayMonths.push(element.mes);\r\n      arrayProfit.push(element.ganancia);\r\n      arrayExpenses.push(element.gasto);\r\n      arrayBalance.push(element.balance);\r\n    });\r\n    const dataChart = {\r\n      chart: {\r\n        type: \"area\",\r\n      },\r\n      title: {\r\n        text: \"Comisiones\",\r\n      },\r\n      tooltip: {\r\n        pointFormat:\r\n          \"{series.name}: <b>${point.y:,.0f}</b><br/>Polizas: <b>10</b><br/>Renovaciones: <b>0</b><br/>\",\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: \"Monto\",\r\n        },\r\n      },\r\n      xAxis: {\r\n        categories: arrayMonths,\r\n      },\r\n      credits: {\r\n        enabled: false,\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Ganancias\",\r\n          data: arrayProfit,\r\n          color: \"#4E51D8\",\r\n        },\r\n      ],\r\n    };\r\n    setDataOptions(dataChart);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataStatsChart) === false) {\r\n      handlerConvertDataChart(dataStatsChart);\r\n    }\r\n  }, [dataStatsChart]);\r\n\r\n  return (\r\n    <div className=\"card-chart-information\">\r\n      <div className=\"title-cards\">Grafica</div>\r\n      <div>\r\n        {finishCallApis === true && isEmpty(dataOptions) === false && (\r\n          <HighchartsReact highcharts={Highcharts} options={dataOptions} />\r\n        )}\r\n        {finishCallApis === false && <Skeleton loading active />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionStatsChart;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administrator.jsx",["609","610","611","612","613","614","615","616","617","618","619"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, Modal } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport IconPolicy from \"../../assets/icons/Policy.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../assets/icons/activity.svg\";\r\nimport IconArroRight from \"../../assets/icons/arrowRight.svg\";\r\nimport IconDanger from \"../../assets/icons/Danger.svg\";\r\nimport {} from \"../../utils/actions/actions\";\r\nimport SectionStatsChart from \"./sections/sectionStatsChart\";\r\nimport SectionCardOwner from \"./sections/sectionCardOwner\";\r\nimport SectionAddUsers from \"./sections/sectionAddUsers\";\r\nimport SectionDetailUser from \"./sections/sectionDetailUser\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Administrator = (props) => {\r\n  const { dataProfile, history } = props;\r\n  const [isVisibleAddUser, setIsVisibleAddUser] = useState(false);\r\n  const [isVisibleDetailUser, setIsVisibleDetailUser] = useState(false);\r\n\r\n  return (\r\n    <Content>\r\n      <SectionAddUsers\r\n        isModalVisible={isVisibleAddUser}\r\n        onClose={() => {\r\n          setIsVisibleAddUser(!isVisibleAddUser);\r\n        }}\r\n        spinVisible={false}\r\n      />\r\n      <SectionDetailUser\r\n        isDrawerVisible={isVisibleDetailUser}\r\n        onClose={() => {\r\n          setIsVisibleDetailUser(!isVisibleDetailUser);\r\n        }}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, Administrador</h2>\r\n            <span>\r\n              Último inicio de sesión: <strong>25 enero 2021</strong>\r\n            </span>\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>$60,000.00</h2>\r\n            <span>Ventas</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconPolicy} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>115</h2>\r\n            <span>Cierres</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconDanger} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>20</h2>\r\n            <span>Por cerrar</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user\">\r\n          <SectionStatsChart\r\n            dataStatsChart={[\r\n              {\r\n                mes: \"Noviembre, 2021\",\r\n                ganancia: 35307.5,\r\n                gananciaFormat: \"$ 35,307.50 MXN\",\r\n                colorGanancia: \"#4E51D8\",\r\n                gasto: 0,\r\n                gastoFormat: \"$ 0.00 MXN\",\r\n                colorGasto: \"#EF280F\",\r\n                balance: 55307.5,\r\n                balanceFormat: \"$ 35,307.50 MXN\",\r\n                colorBalance: \"#32cd32\",\r\n              },\r\n              {\r\n                mes: \"Diciembre, 2021\",\r\n                ganancia: 15307.5,\r\n                gananciaFormat: \"$ 15,307.50 MXN\",\r\n                colorGanancia: \"#4E51D8\",\r\n                gasto: 0,\r\n                gastoFormat: \"$ 0.00 MXN\",\r\n                colorGasto: \"#EF280F\",\r\n                balance: 55307.5,\r\n                balanceFormat: \"$ 15,307.50 MXN\",\r\n                colorBalance: \"#32cd32\",\r\n              },\r\n              {\r\n                mes: \"Enero, 2021\",\r\n                ganancia: 55307.5,\r\n                gananciaFormat: \"$ 55,307.50 MXN\",\r\n                colorGanancia: \"#4E51D8\",\r\n                gasto: 0,\r\n                gastoFormat: \"$ 0.00 MXN\",\r\n                colorGasto: \"#EF280F\",\r\n                balance: 55307.5,\r\n                balanceFormat: \"$ 55,307.50 MXN\",\r\n                colorBalance: \"#32cd32\",\r\n              },\r\n            ]}\r\n            finishCallApis\r\n          />\r\n          <SectionCardOwner\r\n            history={history}\r\n            onAddUser={() => {\r\n              setIsVisibleAddUser(!isVisibleAddUser);\r\n            }}\r\n            onOpenDetail={(type) => {\r\n              setIsVisibleDetailUser(!isVisibleDetailUser);\r\n            }}\r\n            tenantCoincidences={[{}]}\r\n            finishCallApis\r\n            onClickSendInvitation={() => {}}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Administrator);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChart.jsx",["620","621","622","623","624","625"],"import React, { useEffect, useState } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Layout, Avatar, Rate, Modal, Skeleton } from \"antd\";\r\n\r\nconst SectionStatsChart = (props) => {\r\n  const { dataStatsChart, finishCallApis } = props;\r\n  const [dataOptions, setDataOptions] = useState({});\r\n\r\n  const handlerConvertDataChart = (data) => {\r\n    let arrayMonths = [];\r\n    let arrayProfit = [];\r\n    let arrayExpenses = [];\r\n    let arrayBalance = [];\r\n\r\n    data.forEach((element) => {\r\n      arrayMonths.push(element.mes);\r\n      arrayProfit.push(element.ganancia);\r\n      arrayExpenses.push(element.gasto);\r\n      arrayBalance.push(element.balance);\r\n    });\r\n    const dataChart = {\r\n      chart: {\r\n        type: \"area\",\r\n      },\r\n      title: {\r\n        text: \"Cierres\",\r\n      },\r\n      tooltip: {\r\n        pointFormat:\r\n          \"{series.name}: <b>${point.y:,.0f}</b><br/>Polizas: <b>10</b><br/>Renovaciones: <b>0</b><br/>\",\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: \"Monto\",\r\n        },\r\n      },\r\n      xAxis: {\r\n        categories: arrayMonths,\r\n      },\r\n      credits: {\r\n        enabled: false,\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Ganancias\",\r\n          data: arrayProfit,\r\n          color: \"#4E51D8\",\r\n        },\r\n      ],\r\n    };\r\n    setDataOptions(dataChart);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataStatsChart) === false) {\r\n      handlerConvertDataChart(dataStatsChart);\r\n    }\r\n  }, [dataStatsChart]);\r\n\r\n  return (\r\n    <div className=\"card-chart-information total-width\">\r\n      <div className=\"title-cards\">Grafica</div>\r\n      <div>\r\n        {finishCallApis === true && isEmpty(dataOptions) === false && (\r\n          <HighchartsReact highcharts={Highcharts} options={dataOptions} />\r\n        )}\r\n        {finishCallApis === false && <Skeleton loading active />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionStatsChart;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwner.jsx",["626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645","646"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionAddUsers.jsx",["647","648","649","650","651","652","653","654"],"import React, { useEffect, useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n} from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport FrontFunctions from \"../../../utils/actions/frontFunctions\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAddUsers = (props) => {\r\n  const { isModalVisible, onClose, spinVisible } = props;\r\n  const frontFunctions = new FrontFunctions();\r\n  const initialDataForm = { emailOwner: null };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  return (\r\n    <Modal\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      style={{ top: 20 }}\r\n      width={600}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Agregar Prospectos</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>Ingresa la información del Propietario</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailOwner}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.nameOwner}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.lastNameOwner}\r\n                  placeholder={\"Apellido paterno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      lastNameOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.mothersLastNameOwner}\r\n                  placeholder={\"Apellido materno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      mothersLastNameOwner: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Ingresa la información del Inquilino</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailTenant}\r\n                  placeholder={\"Correo\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailTenant: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Select\r\n                  placeholder=\"Tipo de persona\"\r\n                  value={dataForm.personType}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, personType: value });\r\n                  }}\r\n                >\r\n                  <Option value={1}>Fisica</Option>\r\n                  <Option value={2}>Moral</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.nameTenant}\r\n                  placeholder={\r\n                    dataForm.personType !== 2 ? \"Nombre\" : \"Razon social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameTenant: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            {dataForm.personType !== 2 && (\r\n              <Row>\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.lastNameTenant}\r\n                    placeholder={\"Apellido paterno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        lastNameTenant: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} />\r\n                <Col span={11}>\r\n                  <Input\r\n                    value={dataForm.mothersLastNameTenant}\r\n                    placeholder={\"Apellido materno\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        mothersLastNameTenant: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <p>Ingresa la información del Asesor</p>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.emailAdviser}\r\n                  placeholder={\"Correo/No Asesor\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      emailAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.nameAdviser}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      nameAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.lastNameAdviser}\r\n                  placeholder={\"Apellido paterno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      lastNameAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.mothersLastNameAdviser}\r\n                  placeholder={\"Apellido materno\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      mothersLastNameAdviser: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button type=\"button\" onClick={() => {}}>\r\n              <span>Enviar Prospectos</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAddUsers;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUser.jsx",["655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormOwner.jsx",["691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customReference.jsx",["715","716","717","718","719","720","721","722","723","724","725","726"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n} from \"antd\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst CustomReferences = (props) => {\r\n  const {\r\n    onClickBack,\r\n    onClickNext,\r\n    dataFormSave,\r\n    title,\r\n    onClickAdd,\r\n    dataReferences,\r\n  } = props;\r\n  const initialForm = {\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    emailAddress: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialForm);\r\n  const [isVisibleAdd, setIsVisibleAdd] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataReferences) === false) {\r\n      setDataForm(dataReferences);\r\n    }\r\n  }, [dataReferences]);\r\n\r\n  return (\r\n    <>\r\n      <p>{title}</p>\r\n      <Row>\r\n        <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n          <Input\r\n            placeholder={\"Nombres\"}\r\n            onChange={(e) => {\r\n              setDataForm({ ...dataForm, givenName: e.target.value });\r\n            }}\r\n            suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n            value={dataForm.givenName}\r\n          />\r\n        </Col>\r\n        <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n        <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n          <Input\r\n            placeholder={\"Apellido paterno\"}\r\n            onChange={(e) => {\r\n              setDataForm({ ...dataForm, lastName: e.target.value });\r\n            }}\r\n            suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n            value={dataForm.lastName}\r\n          />\r\n        </Col>\r\n        <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n        <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n          <Input\r\n            placeholder={\"Apellido materno\"}\r\n            onChange={(e) => {\r\n              setDataForm({ ...dataForm, mothersMaidenName: e.target.value });\r\n            }}\r\n            suffix={<img src={IconProfile} alt=\"profile\" width=\"15\" />}\r\n            value={dataForm.mothersMaidenName}\r\n          />\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n          <Input\r\n            placeholder={\"Telefono\"}\r\n            onChange={(e) => {\r\n              setDataForm({ ...dataForm, phoneNumber: e.target.value });\r\n            }}\r\n            value={dataForm.phoneNumber}\r\n          />\r\n        </Col>\r\n        <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n        <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n          <Input\r\n            placeholder={\"Correo\"}\r\n            onChange={(e) => {\r\n              setDataForm({ ...dataForm, emailAddress: e.target.value });\r\n            }}\r\n            value={dataForm.emailAddress}\r\n          />\r\n        </Col>\r\n        {isVisibleAdd === true && (\r\n          <div style={{ width: \"100%\" }}>\r\n            <div className=\"button_actions\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setIsVisibleAdd(false);\r\n                  onClickAdd(dataForm);\r\n                }}\r\n                className=\"button_primary\"\r\n              >\r\n                <span>\r\n                  {isEmpty(dataReferences) === false ? \"Guardar\" : \"Agregar\"}\r\n                </span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CustomReferences;\r\n",{"ruleId":"727","replacedBy":"728"},{"ruleId":"729","replacedBy":"730"},{"ruleId":"731","severity":1,"message":"732","line":39,"column":20,"nodeType":"733","messageId":"734","endLine":39,"endColumn":25},{"ruleId":"731","severity":1,"message":"735","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":15},{"ruleId":"731","severity":1,"message":"736","line":4,"column":40,"nodeType":"733","messageId":"734","endLine":4,"endColumn":45},{"ruleId":"737","severity":1,"message":"738","line":13,"column":1,"nodeType":"739","endLine":22,"endColumn":3},{"ruleId":"740","severity":1,"message":"741","line":125,"column":35,"nodeType":"742","messageId":"743","endLine":125,"endColumn":37},{"ruleId":"744","severity":1,"message":"745","line":906,"column":6,"nodeType":"746","endLine":906,"endColumn":8,"suggestions":"747"},{"ruleId":"744","severity":1,"message":"748","line":86,"column":6,"nodeType":"746","endLine":86,"endColumn":8,"suggestions":"749"},{"ruleId":"731","severity":1,"message":"750","line":5,"column":32,"nodeType":"733","messageId":"734","endLine":5,"endColumn":44},{"ruleId":"744","severity":1,"message":"751","line":52,"column":6,"nodeType":"746","endLine":52,"endColumn":8,"suggestions":"752"},{"ruleId":"753","severity":1,"message":"754","line":88,"column":23,"nodeType":"755","endLine":92,"endColumn":25},{"ruleId":"753","severity":1,"message":"754","line":122,"column":23,"nodeType":"755","endLine":126,"endColumn":25},{"ruleId":"753","severity":1,"message":"754","line":154,"column":19,"nodeType":"755","endLine":154,"endColumn":49},{"ruleId":"753","severity":1,"message":"754","line":157,"column":19,"nodeType":"755","endLine":157,"endColumn":44},{"ruleId":"731","severity":1,"message":"756","line":3,"column":18,"nodeType":"733","messageId":"734","endLine":3,"endColumn":24},{"ruleId":"731","severity":1,"message":"757","line":3,"column":26,"nodeType":"733","messageId":"734","endLine":3,"endColumn":30},{"ruleId":"731","severity":1,"message":"758","line":3,"column":32,"nodeType":"733","messageId":"734","endLine":3,"endColumn":37},{"ruleId":"731","severity":1,"message":"759","line":9,"column":8,"nodeType":"733","messageId":"734","endLine":9,"endColumn":21},{"ruleId":"731","severity":1,"message":"760","line":247,"column":13,"nodeType":"733","messageId":"734","endLine":247,"endColumn":27},{"ruleId":"731","severity":1,"message":"760","line":273,"column":13,"nodeType":"733","messageId":"734","endLine":273,"endColumn":27},{"ruleId":"731","severity":1,"message":"760","line":347,"column":13,"nodeType":"733","messageId":"734","endLine":347,"endColumn":27},{"ruleId":"744","severity":1,"message":"761","line":420,"column":6,"nodeType":"746","endLine":420,"endColumn":8,"suggestions":"762"},{"ruleId":"731","severity":1,"message":"763","line":557,"column":24,"nodeType":"733","messageId":"734","endLine":557,"endColumn":39},{"ruleId":"731","severity":1,"message":"756","line":5,"column":3,"nodeType":"733","messageId":"734","endLine":5,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":8},{"ruleId":"731","severity":1,"message":"764","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":13},{"ruleId":"731","severity":1,"message":"765","line":10,"column":3,"nodeType":"733","messageId":"734","endLine":10,"endColumn":11},{"ruleId":"731","severity":1,"message":"766","line":15,"column":8,"nodeType":"733","messageId":"734","endLine":15,"endColumn":18},{"ruleId":"731","severity":1,"message":"767","line":16,"column":8,"nodeType":"733","messageId":"734","endLine":16,"endColumn":23},{"ruleId":"731","severity":1,"message":"768","line":17,"column":8,"nodeType":"733","messageId":"734","endLine":17,"endColumn":17},{"ruleId":"731","severity":1,"message":"769","line":18,"column":8,"nodeType":"733","messageId":"734","endLine":18,"endColumn":18},{"ruleId":"731","severity":1,"message":"770","line":19,"column":8,"nodeType":"733","messageId":"734","endLine":19,"endColumn":20},{"ruleId":"731","severity":1,"message":"759","line":20,"column":8,"nodeType":"733","messageId":"734","endLine":20,"endColumn":21},{"ruleId":"731","severity":1,"message":"771","line":38,"column":9,"nodeType":"733","messageId":"734","endLine":38,"endColumn":15},{"ruleId":"731","severity":1,"message":"772","line":65,"column":9,"nodeType":"733","messageId":"734","endLine":65,"endColumn":18},{"ruleId":"731","severity":1,"message":"773","line":66,"column":9,"nodeType":"733","messageId":"734","endLine":66,"endColumn":21},{"ruleId":"731","severity":1,"message":"760","line":237,"column":13,"nodeType":"733","messageId":"734","endLine":237,"endColumn":27},{"ruleId":"744","severity":1,"message":"774","line":251,"column":6,"nodeType":"746","endLine":251,"endColumn":8,"suggestions":"775"},{"ruleId":"731","severity":1,"message":"763","line":322,"column":24,"nodeType":"733","messageId":"734","endLine":322,"endColumn":39},{"ruleId":"731","severity":1,"message":"776","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":13},{"ruleId":"731","severity":1,"message":"764","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":13},{"ruleId":"731","severity":1,"message":"765","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":11},{"ruleId":"731","severity":1,"message":"772","line":26,"column":9,"nodeType":"733","messageId":"734","endLine":26,"endColumn":18},{"ruleId":"731","severity":1,"message":"777","line":135,"column":27,"nodeType":"733","messageId":"734","endLine":135,"endColumn":42},{"ruleId":"731","severity":1,"message":"776","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":13},{"ruleId":"731","severity":1,"message":"778","line":7,"column":9,"nodeType":"733","messageId":"734","endLine":7,"endColumn":17},{"ruleId":"731","severity":1,"message":"779","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"780","line":1,"column":28,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"781","line":2,"column":10,"nodeType":"733","messageId":"734","endLine":2,"endColumn":17},{"ruleId":"731","severity":1,"message":"782","line":3,"column":10,"nodeType":"733","messageId":"734","endLine":3,"endColumn":16},{"ruleId":"731","severity":1,"message":"758","line":3,"column":32,"nodeType":"733","messageId":"734","endLine":3,"endColumn":37},{"ruleId":"731","severity":1,"message":"766","line":9,"column":8,"nodeType":"733","messageId":"734","endLine":9,"endColumn":18},{"ruleId":"731","severity":1,"message":"767","line":10,"column":8,"nodeType":"733","messageId":"734","endLine":10,"endColumn":23},{"ruleId":"731","severity":1,"message":"768","line":11,"column":8,"nodeType":"733","messageId":"734","endLine":11,"endColumn":17},{"ruleId":"731","severity":1,"message":"769","line":12,"column":8,"nodeType":"733","messageId":"734","endLine":12,"endColumn":18},{"ruleId":"731","severity":1,"message":"770","line":13,"column":8,"nodeType":"733","messageId":"734","endLine":13,"endColumn":20},{"ruleId":"731","severity":1,"message":"776","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":13},{"ruleId":"731","severity":1,"message":"782","line":6,"column":10,"nodeType":"733","messageId":"734","endLine":6,"endColumn":16},{"ruleId":"731","severity":1,"message":"756","line":6,"column":18,"nodeType":"733","messageId":"734","endLine":6,"endColumn":24},{"ruleId":"731","severity":1,"message":"757","line":6,"column":26,"nodeType":"733","messageId":"734","endLine":6,"endColumn":30},{"ruleId":"731","severity":1,"message":"758","line":6,"column":32,"nodeType":"733","messageId":"734","endLine":6,"endColumn":37},{"ruleId":"731","severity":1,"message":"776","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":13},{"ruleId":"731","severity":1,"message":"782","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":7},{"ruleId":"731","severity":1,"message":"783","line":18,"column":3,"nodeType":"733","messageId":"734","endLine":18,"endColumn":21},{"ruleId":"731","severity":1,"message":"784","line":19,"column":3,"nodeType":"733","messageId":"734","endLine":19,"endColumn":15},{"ruleId":"744","severity":1,"message":"785","line":66,"column":6,"nodeType":"746","endLine":66,"endColumn":25,"suggestions":"786"},{"ruleId":"731","severity":1,"message":"787","line":341,"column":35,"nodeType":"733","messageId":"734","endLine":341,"endColumn":49},{"ruleId":"731","severity":1,"message":"788","line":341,"column":51,"nodeType":"733","messageId":"734","endLine":341,"endColumn":56},{"ruleId":"731","severity":1,"message":"776","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":13},{"ruleId":"731","severity":1,"message":"789","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":20},{"ruleId":"731","severity":1,"message":"782","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":7},{"ruleId":"731","severity":1,"message":"779","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"776","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":13},{"ruleId":"731","severity":1,"message":"782","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":7},{"ruleId":"731","severity":1,"message":"790","line":44,"column":10,"nodeType":"733","messageId":"734","endLine":44,"endColumn":18},{"ruleId":"731","severity":1,"message":"791","line":44,"column":20,"nodeType":"733","messageId":"734","endLine":44,"endColumn":31},{"ruleId":"731","severity":1,"message":"787","line":125,"column":31,"nodeType":"733","messageId":"734","endLine":125,"endColumn":45},{"ruleId":"731","severity":1,"message":"788","line":125,"column":47,"nodeType":"733","messageId":"734","endLine":125,"endColumn":52},{"ruleId":"731","severity":1,"message":"735","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":15},{"ruleId":"792","severity":1,"message":"793","line":15,"column":5,"nodeType":"794","messageId":"795","endLine":34,"endColumn":6},{"ruleId":"792","severity":1,"message":"793","line":43,"column":5,"nodeType":"794","messageId":"795","endLine":84,"endColumn":6},{"ruleId":"792","severity":1,"message":"793","line":97,"column":5,"nodeType":"794","messageId":"795","endLine":117,"endColumn":6},{"ruleId":"740","severity":1,"message":"741","line":145,"column":18,"nodeType":"742","messageId":"743","endLine":145,"endColumn":20},{"ruleId":"740","severity":1,"message":"741","line":168,"column":29,"nodeType":"742","messageId":"743","endLine":168,"endColumn":31},{"ruleId":"740","severity":1,"message":"741","line":183,"column":22,"nodeType":"742","messageId":"743","endLine":183,"endColumn":24},{"ruleId":"740","severity":1,"message":"741","line":185,"column":22,"nodeType":"742","messageId":"743","endLine":185,"endColumn":24},{"ruleId":"731","severity":1,"message":"796","line":5,"column":10,"nodeType":"733","messageId":"734","endLine":5,"endColumn":18},{"ruleId":"731","severity":1,"message":"797","line":5,"column":45,"nodeType":"733","messageId":"734","endLine":5,"endColumn":51},{"ruleId":"731","severity":1,"message":"798","line":7,"column":8,"nodeType":"733","messageId":"734","endLine":7,"endColumn":14},{"ruleId":"731","severity":1,"message":"778","line":11,"column":9,"nodeType":"733","messageId":"734","endLine":11,"endColumn":17},{"ruleId":"731","severity":1,"message":"799","line":17,"column":5,"nodeType":"733","messageId":"734","endLine":17,"endColumn":22},{"ruleId":"731","severity":1,"message":"787","line":128,"column":31,"nodeType":"733","messageId":"734","endLine":128,"endColumn":45},{"ruleId":"731","severity":1,"message":"788","line":128,"column":47,"nodeType":"733","messageId":"734","endLine":128,"endColumn":52},{"ruleId":"731","severity":1,"message":"776","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":13},{"ruleId":"731","severity":1,"message":"800","line":1,"column":38,"nodeType":"733","messageId":"734","endLine":1,"endColumn":44},{"ruleId":"731","severity":1,"message":"758","line":3,"column":32,"nodeType":"733","messageId":"734","endLine":3,"endColumn":37},{"ruleId":"744","severity":1,"message":"801","line":138,"column":6,"nodeType":"746","endLine":138,"endColumn":8,"suggestions":"802"},{"ruleId":"731","severity":1,"message":"763","line":303,"column":24,"nodeType":"733","messageId":"734","endLine":303,"endColumn":39},{"ruleId":"731","severity":1,"message":"800","line":1,"column":38,"nodeType":"733","messageId":"734","endLine":1,"endColumn":44},{"ruleId":"731","severity":1,"message":"756","line":3,"column":18,"nodeType":"733","messageId":"734","endLine":3,"endColumn":24},{"ruleId":"731","severity":1,"message":"757","line":3,"column":26,"nodeType":"733","messageId":"734","endLine":3,"endColumn":30},{"ruleId":"731","severity":1,"message":"758","line":3,"column":32,"nodeType":"733","messageId":"734","endLine":3,"endColumn":37},{"ruleId":"731","severity":1,"message":"803","line":3,"column":46,"nodeType":"733","messageId":"734","endLine":3,"endColumn":52},{"ruleId":"731","severity":1,"message":"804","line":3,"column":54,"nodeType":"733","messageId":"734","endLine":3,"endColumn":61},{"ruleId":"731","severity":1,"message":"784","line":4,"column":10,"nodeType":"733","messageId":"734","endLine":4,"endColumn":22},{"ruleId":"731","severity":1,"message":"805","line":8,"column":8,"nodeType":"733","messageId":"734","endLine":8,"endColumn":20},{"ruleId":"731","severity":1,"message":"806","line":13,"column":8,"nodeType":"733","messageId":"734","endLine":13,"endColumn":14},{"ruleId":"731","severity":1,"message":"807","line":14,"column":8,"nodeType":"733","messageId":"734","endLine":14,"endColumn":22},{"ruleId":"731","severity":1,"message":"808","line":29,"column":8,"nodeType":"733","messageId":"734","endLine":29,"endColumn":24},{"ruleId":"731","severity":1,"message":"809","line":30,"column":8,"nodeType":"733","messageId":"734","endLine":30,"endColumn":28},{"ruleId":"731","severity":1,"message":"810","line":31,"column":8,"nodeType":"733","messageId":"734","endLine":31,"endColumn":18},{"ruleId":"731","severity":1,"message":"811","line":32,"column":8,"nodeType":"733","messageId":"734","endLine":32,"endColumn":23},{"ruleId":"731","severity":1,"message":"812","line":42,"column":9,"nodeType":"733","messageId":"734","endLine":42,"endColumn":13},{"ruleId":"731","severity":1,"message":"760","line":87,"column":13,"nodeType":"733","messageId":"734","endLine":87,"endColumn":27},{"ruleId":"731","severity":1,"message":"813","line":102,"column":13,"nodeType":"733","messageId":"734","endLine":102,"endColumn":21},{"ruleId":"731","severity":1,"message":"814","line":140,"column":7,"nodeType":"733","messageId":"734","endLine":140,"endColumn":17},{"ruleId":"731","severity":1,"message":"814","line":289,"column":7,"nodeType":"733","messageId":"734","endLine":289,"endColumn":17},{"ruleId":"744","severity":1,"message":"815","line":326,"column":6,"nodeType":"746","endLine":326,"endColumn":8,"suggestions":"816"},{"ruleId":"731","severity":1,"message":"763","line":373,"column":24,"nodeType":"733","messageId":"734","endLine":373,"endColumn":39},{"ruleId":"731","severity":1,"message":"776","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":13},{"ruleId":"731","severity":1,"message":"782","line":5,"column":3,"nodeType":"733","messageId":"734","endLine":5,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":8},{"ruleId":"731","severity":1,"message":"817","line":12,"column":3,"nodeType":"733","messageId":"734","endLine":12,"endColumn":9},{"ruleId":"731","severity":1,"message":"818","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":7},{"ruleId":"731","severity":1,"message":"819","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":10},{"ruleId":"731","severity":1,"message":"782","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":10,"column":3,"nodeType":"733","messageId":"734","endLine":10,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":15,"column":3,"nodeType":"733","messageId":"734","endLine":15,"endColumn":7},{"ruleId":"731","severity":1,"message":"783","line":21,"column":3,"nodeType":"733","messageId":"734","endLine":21,"endColumn":21},{"ruleId":"731","severity":1,"message":"784","line":22,"column":3,"nodeType":"733","messageId":"734","endLine":22,"endColumn":15},{"ruleId":"731","severity":1,"message":"820","line":23,"column":3,"nodeType":"733","messageId":"734","endLine":23,"endColumn":15},{"ruleId":"731","severity":1,"message":"821","line":26,"column":8,"nodeType":"733","messageId":"734","endLine":26,"endColumn":19},{"ruleId":"744","severity":1,"message":"822","line":82,"column":6,"nodeType":"746","endLine":82,"endColumn":20,"suggestions":"823"},{"ruleId":"744","severity":1,"message":"824","line":98,"column":6,"nodeType":"746","endLine":98,"endColumn":25,"suggestions":"825"},{"ruleId":"731","severity":1,"message":"787","line":278,"column":33,"nodeType":"733","messageId":"734","endLine":278,"endColumn":47},{"ruleId":"731","severity":1,"message":"788","line":278,"column":49,"nodeType":"733","messageId":"734","endLine":278,"endColumn":54},{"ruleId":"731","severity":1,"message":"782","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":7},{"ruleId":"731","severity":1,"message":"819","line":15,"column":3,"nodeType":"733","messageId":"734","endLine":15,"endColumn":10},{"ruleId":"731","severity":1,"message":"826","line":16,"column":3,"nodeType":"733","messageId":"734","endLine":16,"endColumn":8},{"ruleId":"731","severity":1,"message":"821","line":18,"column":8,"nodeType":"733","messageId":"734","endLine":18,"endColumn":19},{"ruleId":"744","severity":1,"message":"827","line":70,"column":6,"nodeType":"746","endLine":70,"endColumn":20,"suggestions":"828"},{"ruleId":"731","severity":1,"message":"787","line":112,"column":29,"nodeType":"733","messageId":"734","endLine":112,"endColumn":43},{"ruleId":"731","severity":1,"message":"788","line":112,"column":45,"nodeType":"733","messageId":"734","endLine":112,"endColumn":50},{"ruleId":"731","severity":1,"message":"788","line":154,"column":45,"nodeType":"733","messageId":"734","endLine":154,"endColumn":50},{"ruleId":"731","severity":1,"message":"787","line":185,"column":29,"nodeType":"733","messageId":"734","endLine":185,"endColumn":43},{"ruleId":"731","severity":1,"message":"788","line":185,"column":45,"nodeType":"733","messageId":"734","endLine":185,"endColumn":50},{"ruleId":"731","severity":1,"message":"782","line":5,"column":3,"nodeType":"733","messageId":"734","endLine":5,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":8},{"ruleId":"731","severity":1,"message":"829","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":7},{"ruleId":"731","severity":1,"message":"819","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":10},{"ruleId":"731","severity":1,"message":"826","line":15,"column":3,"nodeType":"733","messageId":"734","endLine":15,"endColumn":8},{"ruleId":"731","severity":1,"message":"821","line":17,"column":8,"nodeType":"733","messageId":"734","endLine":17,"endColumn":19},{"ruleId":"731","severity":1,"message":"771","line":20,"column":9,"nodeType":"733","messageId":"734","endLine":20,"endColumn":15},{"ruleId":"731","severity":1,"message":"830","line":40,"column":10,"nodeType":"733","messageId":"734","endLine":40,"endColumn":18},{"ruleId":"731","severity":1,"message":"780","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":25},{"ruleId":"731","severity":1,"message":"779","line":1,"column":27,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"782","line":5,"column":3,"nodeType":"733","messageId":"734","endLine":5,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":8},{"ruleId":"731","severity":1,"message":"829","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":8},{"ruleId":"731","severity":1,"message":"831","line":10,"column":3,"nodeType":"733","messageId":"734","endLine":10,"endColumn":6},{"ruleId":"731","severity":1,"message":"832","line":11,"column":3,"nodeType":"733","messageId":"734","endLine":11,"endColumn":6},{"ruleId":"731","severity":1,"message":"817","line":12,"column":3,"nodeType":"733","messageId":"734","endLine":12,"endColumn":9},{"ruleId":"731","severity":1,"message":"818","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":7},{"ruleId":"731","severity":1,"message":"819","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":10},{"ruleId":"731","severity":1,"message":"804","line":16,"column":3,"nodeType":"733","messageId":"734","endLine":16,"endColumn":10},{"ruleId":"731","severity":1,"message":"826","line":17,"column":3,"nodeType":"733","messageId":"734","endLine":17,"endColumn":8},{"ruleId":"731","severity":1,"message":"833","line":21,"column":9,"nodeType":"733","messageId":"734","endLine":21,"endColumn":16},{"ruleId":"731","severity":1,"message":"789","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":20},{"ruleId":"731","severity":1,"message":"783","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":21},{"ruleId":"731","severity":1,"message":"784","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":15},{"ruleId":"731","severity":1,"message":"820","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":15},{"ruleId":"731","severity":1,"message":"782","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":15,"column":3,"nodeType":"733","messageId":"734","endLine":15,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":16,"column":3,"nodeType":"733","messageId":"734","endLine":16,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":21,"column":3,"nodeType":"733","messageId":"734","endLine":21,"endColumn":7},{"ruleId":"744","severity":1,"message":"822","line":82,"column":6,"nodeType":"746","endLine":82,"endColumn":20,"suggestions":"834"},{"ruleId":"744","severity":1,"message":"785","line":92,"column":6,"nodeType":"746","endLine":92,"endColumn":25,"suggestions":"835"},{"ruleId":"731","severity":1,"message":"776","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":13},{"ruleId":"731","severity":1,"message":"782","line":5,"column":3,"nodeType":"733","messageId":"734","endLine":5,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":7},{"ruleId":"731","severity":1,"message":"783","line":18,"column":3,"nodeType":"733","messageId":"734","endLine":18,"endColumn":21},{"ruleId":"731","severity":1,"message":"784","line":19,"column":3,"nodeType":"733","messageId":"734","endLine":19,"endColumn":15},{"ruleId":"731","severity":1,"message":"820","line":20,"column":3,"nodeType":"733","messageId":"734","endLine":20,"endColumn":15},{"ruleId":"744","severity":1,"message":"822","line":78,"column":6,"nodeType":"746","endLine":78,"endColumn":20,"suggestions":"836"},{"ruleId":"744","severity":1,"message":"785","line":88,"column":6,"nodeType":"746","endLine":88,"endColumn":25,"suggestions":"837"},{"ruleId":"731","severity":1,"message":"782","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":7},{"ruleId":"731","severity":1,"message":"783","line":19,"column":3,"nodeType":"733","messageId":"734","endLine":19,"endColumn":21},{"ruleId":"731","severity":1,"message":"784","line":20,"column":3,"nodeType":"733","messageId":"734","endLine":20,"endColumn":15},{"ruleId":"731","severity":1,"message":"820","line":21,"column":3,"nodeType":"733","messageId":"734","endLine":21,"endColumn":15},{"ruleId":"731","severity":1,"message":"821","line":24,"column":8,"nodeType":"733","messageId":"734","endLine":24,"endColumn":19},{"ruleId":"731","severity":1,"message":"838","line":58,"column":10,"nodeType":"733","messageId":"734","endLine":58,"endColumn":19},{"ruleId":"731","severity":1,"message":"839","line":58,"column":21,"nodeType":"733","messageId":"734","endLine":58,"endColumn":33},{"ruleId":"744","severity":1,"message":"822","line":76,"column":6,"nodeType":"746","endLine":76,"endColumn":20,"suggestions":"840"},{"ruleId":"744","severity":1,"message":"785","line":86,"column":6,"nodeType":"746","endLine":86,"endColumn":25,"suggestions":"841"},{"ruleId":"731","severity":1,"message":"787","line":311,"column":29,"nodeType":"733","messageId":"734","endLine":311,"endColumn":43},{"ruleId":"731","severity":1,"message":"788","line":311,"column":45,"nodeType":"733","messageId":"734","endLine":311,"endColumn":50},{"ruleId":"731","severity":1,"message":"787","line":341,"column":29,"nodeType":"733","messageId":"734","endLine":341,"endColumn":43},{"ruleId":"731","severity":1,"message":"788","line":341,"column":45,"nodeType":"733","messageId":"734","endLine":341,"endColumn":50},{"ruleId":"731","severity":1,"message":"787","line":372,"column":29,"nodeType":"733","messageId":"734","endLine":372,"endColumn":43},{"ruleId":"731","severity":1,"message":"788","line":372,"column":45,"nodeType":"733","messageId":"734","endLine":372,"endColumn":50},{"ruleId":"731","severity":1,"message":"782","line":5,"column":3,"nodeType":"733","messageId":"734","endLine":5,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":8},{"ruleId":"731","severity":1,"message":"829","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":7},{"ruleId":"731","severity":1,"message":"819","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":10},{"ruleId":"731","severity":1,"message":"826","line":15,"column":3,"nodeType":"733","messageId":"734","endLine":15,"endColumn":8},{"ruleId":"731","severity":1,"message":"821","line":17,"column":8,"nodeType":"733","messageId":"734","endLine":17,"endColumn":19},{"ruleId":"731","severity":1,"message":"782","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":7},{"ruleId":"731","severity":1,"message":"819","line":15,"column":3,"nodeType":"733","messageId":"734","endLine":15,"endColumn":10},{"ruleId":"731","severity":1,"message":"826","line":16,"column":3,"nodeType":"733","messageId":"734","endLine":16,"endColumn":8},{"ruleId":"731","severity":1,"message":"821","line":19,"column":8,"nodeType":"733","messageId":"734","endLine":19,"endColumn":19},{"ruleId":"731","severity":1,"message":"779","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"782","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":7},{"ruleId":"731","severity":1,"message":"829","line":11,"column":3,"nodeType":"733","messageId":"734","endLine":11,"endColumn":8},{"ruleId":"731","severity":1,"message":"831","line":12,"column":3,"nodeType":"733","messageId":"734","endLine":12,"endColumn":6},{"ruleId":"731","severity":1,"message":"832","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":6},{"ruleId":"731","severity":1,"message":"817","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":9},{"ruleId":"731","severity":1,"message":"819","line":16,"column":3,"nodeType":"733","messageId":"734","endLine":16,"endColumn":10},{"ruleId":"731","severity":1,"message":"826","line":18,"column":3,"nodeType":"733","messageId":"734","endLine":18,"endColumn":8},{"ruleId":"731","severity":1,"message":"763","line":258,"column":24,"nodeType":"733","messageId":"734","endLine":258,"endColumn":39},{"ruleId":"731","severity":1,"message":"779","line":1,"column":27,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"776","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":13},{"ruleId":"731","severity":1,"message":"735","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":15},{"ruleId":"731","severity":1,"message":"789","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":20},{"ruleId":"731","severity":1,"message":"782","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":7},{"ruleId":"731","severity":1,"message":"829","line":10,"column":3,"nodeType":"733","messageId":"734","endLine":10,"endColumn":8},{"ruleId":"731","severity":1,"message":"831","line":11,"column":3,"nodeType":"733","messageId":"734","endLine":11,"endColumn":6},{"ruleId":"731","severity":1,"message":"832","line":12,"column":3,"nodeType":"733","messageId":"734","endLine":12,"endColumn":6},{"ruleId":"731","severity":1,"message":"818","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":7},{"ruleId":"731","severity":1,"message":"819","line":15,"column":3,"nodeType":"733","messageId":"734","endLine":15,"endColumn":10},{"ruleId":"731","severity":1,"message":"783","line":20,"column":3,"nodeType":"733","messageId":"734","endLine":20,"endColumn":21},{"ruleId":"731","severity":1,"message":"784","line":21,"column":3,"nodeType":"733","messageId":"734","endLine":21,"endColumn":15},{"ruleId":"731","severity":1,"message":"842","line":23,"column":3,"nodeType":"733","messageId":"734","endLine":23,"endColumn":16},{"ruleId":"731","severity":1,"message":"771","line":28,"column":9,"nodeType":"733","messageId":"734","endLine":28,"endColumn":15},{"ruleId":"731","severity":1,"message":"843","line":32,"column":10,"nodeType":"733","messageId":"734","endLine":32,"endColumn":19},{"ruleId":"731","severity":1,"message":"844","line":38,"column":9,"nodeType":"733","messageId":"734","endLine":38,"endColumn":20},{"ruleId":"731","severity":1,"message":"779","line":1,"column":27,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"800","line":1,"column":38,"nodeType":"733","messageId":"734","endLine":1,"endColumn":44},{"ruleId":"731","severity":1,"message":"776","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":13},{"ruleId":"731","severity":1,"message":"735","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":15},{"ruleId":"731","severity":1,"message":"789","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":20},{"ruleId":"731","severity":1,"message":"782","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":7},{"ruleId":"731","severity":1,"message":"829","line":11,"column":3,"nodeType":"733","messageId":"734","endLine":11,"endColumn":8},{"ruleId":"731","severity":1,"message":"831","line":12,"column":3,"nodeType":"733","messageId":"734","endLine":12,"endColumn":6},{"ruleId":"731","severity":1,"message":"832","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":6},{"ruleId":"731","severity":1,"message":"818","line":15,"column":3,"nodeType":"733","messageId":"734","endLine":15,"endColumn":7},{"ruleId":"731","severity":1,"message":"819","line":16,"column":3,"nodeType":"733","messageId":"734","endLine":16,"endColumn":10},{"ruleId":"731","severity":1,"message":"845","line":17,"column":3,"nodeType":"733","messageId":"734","endLine":17,"endColumn":11},{"ruleId":"731","severity":1,"message":"846","line":21,"column":8,"nodeType":"733","messageId":"734","endLine":21,"endColumn":23},{"ruleId":"731","severity":1,"message":"783","line":23,"column":3,"nodeType":"733","messageId":"734","endLine":23,"endColumn":21},{"ruleId":"731","severity":1,"message":"784","line":24,"column":3,"nodeType":"733","messageId":"734","endLine":24,"endColumn":15},{"ruleId":"731","severity":1,"message":"842","line":26,"column":3,"nodeType":"733","messageId":"734","endLine":26,"endColumn":16},{"ruleId":"731","severity":1,"message":"847","line":29,"column":8,"nodeType":"733","messageId":"734","endLine":29,"endColumn":12},{"ruleId":"731","severity":1,"message":"771","line":31,"column":9,"nodeType":"733","messageId":"734","endLine":31,"endColumn":15},{"ruleId":"731","severity":1,"message":"844","line":43,"column":9,"nodeType":"733","messageId":"734","endLine":43,"endColumn":20},{"ruleId":"731","severity":1,"message":"779","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"780","line":1,"column":28,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"756","line":3,"column":18,"nodeType":"733","messageId":"734","endLine":3,"endColumn":24},{"ruleId":"731","severity":1,"message":"757","line":3,"column":26,"nodeType":"733","messageId":"734","endLine":3,"endColumn":30},{"ruleId":"731","severity":1,"message":"758","line":3,"column":32,"nodeType":"733","messageId":"734","endLine":3,"endColumn":37},{"ruleId":"731","severity":1,"message":"735","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":15},{"ruleId":"731","severity":1,"message":"776","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":13},{"ruleId":"731","severity":1,"message":"848","line":6,"column":8,"nodeType":"733","messageId":"734","endLine":6,"endColumn":14},{"ruleId":"731","severity":1,"message":"759","line":11,"column":8,"nodeType":"733","messageId":"734","endLine":11,"endColumn":21},{"ruleId":"731","severity":1,"message":"849","line":19,"column":11,"nodeType":"733","messageId":"734","endLine":19,"endColumn":22},{"ruleId":"731","severity":1,"message":"763","line":109,"column":24,"nodeType":"733","messageId":"734","endLine":109,"endColumn":39},{"ruleId":"731","severity":1,"message":"779","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"780","line":1,"column":28,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"781","line":2,"column":10,"nodeType":"733","messageId":"734","endLine":2,"endColumn":17},{"ruleId":"731","severity":1,"message":"782","line":3,"column":10,"nodeType":"733","messageId":"734","endLine":3,"endColumn":16},{"ruleId":"731","severity":1,"message":"758","line":3,"column":32,"nodeType":"733","messageId":"734","endLine":3,"endColumn":37},{"ruleId":"731","severity":1,"message":"776","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":13},{"ruleId":"731","severity":1,"message":"766","line":9,"column":8,"nodeType":"733","messageId":"734","endLine":9,"endColumn":18},{"ruleId":"731","severity":1,"message":"767","line":10,"column":8,"nodeType":"733","messageId":"734","endLine":10,"endColumn":23},{"ruleId":"731","severity":1,"message":"768","line":11,"column":8,"nodeType":"733","messageId":"734","endLine":11,"endColumn":17},{"ruleId":"731","severity":1,"message":"769","line":12,"column":8,"nodeType":"733","messageId":"734","endLine":12,"endColumn":18},{"ruleId":"731","severity":1,"message":"770","line":13,"column":8,"nodeType":"733","messageId":"734","endLine":13,"endColumn":20},{"ruleId":"731","severity":1,"message":"759","line":14,"column":8,"nodeType":"733","messageId":"734","endLine":14,"endColumn":21},{"ruleId":"731","severity":1,"message":"850","line":21,"column":5,"nodeType":"733","messageId":"734","endLine":21,"endColumn":12},{"ruleId":"731","severity":1,"message":"851","line":24,"column":5,"nodeType":"733","messageId":"734","endLine":24,"endColumn":26},{"ruleId":"731","severity":1,"message":"852","line":27,"column":9,"nodeType":"733","messageId":"734","endLine":27,"endColumn":19},{"ruleId":"731","severity":1,"message":"776","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":13},{"ruleId":"731","severity":1,"message":"782","line":6,"column":10,"nodeType":"733","messageId":"734","endLine":6,"endColumn":16},{"ruleId":"731","severity":1,"message":"756","line":6,"column":18,"nodeType":"733","messageId":"734","endLine":6,"endColumn":24},{"ruleId":"731","severity":1,"message":"757","line":6,"column":26,"nodeType":"733","messageId":"734","endLine":6,"endColumn":30},{"ruleId":"731","severity":1,"message":"758","line":6,"column":32,"nodeType":"733","messageId":"734","endLine":6,"endColumn":37},{"ruleId":"853","severity":1,"message":"854","line":33,"column":11,"nodeType":"855","messageId":"856","endLine":33,"endColumn":105},{"ruleId":"731","severity":1,"message":"779","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"756","line":3,"column":18,"nodeType":"733","messageId":"734","endLine":3,"endColumn":24},{"ruleId":"731","severity":1,"message":"757","line":3,"column":26,"nodeType":"733","messageId":"734","endLine":3,"endColumn":30},{"ruleId":"731","severity":1,"message":"758","line":3,"column":32,"nodeType":"733","messageId":"734","endLine":3,"endColumn":37},{"ruleId":"731","severity":1,"message":"735","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":15},{"ruleId":"731","severity":1,"message":"776","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":13},{"ruleId":"731","severity":1,"message":"848","line":6,"column":8,"nodeType":"733","messageId":"734","endLine":6,"endColumn":14},{"ruleId":"731","severity":1,"message":"770","line":10,"column":8,"nodeType":"733","messageId":"734","endLine":10,"endColumn":20},{"ruleId":"731","severity":1,"message":"759","line":11,"column":8,"nodeType":"733","messageId":"734","endLine":11,"endColumn":21},{"ruleId":"731","severity":1,"message":"849","line":22,"column":11,"nodeType":"733","messageId":"734","endLine":22,"endColumn":22},{"ruleId":"731","severity":1,"message":"763","line":134,"column":24,"nodeType":"733","messageId":"734","endLine":134,"endColumn":39},{"ruleId":"731","severity":1,"message":"776","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":13},{"ruleId":"731","severity":1,"message":"782","line":6,"column":10,"nodeType":"733","messageId":"734","endLine":6,"endColumn":16},{"ruleId":"731","severity":1,"message":"756","line":6,"column":18,"nodeType":"733","messageId":"734","endLine":6,"endColumn":24},{"ruleId":"731","severity":1,"message":"757","line":6,"column":26,"nodeType":"733","messageId":"734","endLine":6,"endColumn":30},{"ruleId":"731","severity":1,"message":"758","line":6,"column":32,"nodeType":"733","messageId":"734","endLine":6,"endColumn":37},{"ruleId":"853","severity":1,"message":"854","line":33,"column":11,"nodeType":"855","messageId":"856","endLine":33,"endColumn":105},{"ruleId":"731","severity":1,"message":"779","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"780","line":1,"column":28,"nodeType":"733","messageId":"734","endLine":1,"endColumn":36},{"ruleId":"731","severity":1,"message":"781","line":2,"column":10,"nodeType":"733","messageId":"734","endLine":2,"endColumn":17},{"ruleId":"731","severity":1,"message":"782","line":3,"column":10,"nodeType":"733","messageId":"734","endLine":3,"endColumn":16},{"ruleId":"731","severity":1,"message":"756","line":3,"column":18,"nodeType":"733","messageId":"734","endLine":3,"endColumn":24},{"ruleId":"731","severity":1,"message":"757","line":3,"column":26,"nodeType":"733","messageId":"734","endLine":3,"endColumn":30},{"ruleId":"731","severity":1,"message":"758","line":3,"column":32,"nodeType":"733","messageId":"734","endLine":3,"endColumn":37},{"ruleId":"731","severity":1,"message":"776","line":5,"column":8,"nodeType":"733","messageId":"734","endLine":5,"endColumn":13},{"ruleId":"731","severity":1,"message":"784","line":8,"column":10,"nodeType":"733","messageId":"734","endLine":8,"endColumn":22},{"ruleId":"731","severity":1,"message":"766","line":9,"column":8,"nodeType":"733","messageId":"734","endLine":9,"endColumn":18},{"ruleId":"731","severity":1,"message":"767","line":10,"column":8,"nodeType":"733","messageId":"734","endLine":10,"endColumn":23},{"ruleId":"731","severity":1,"message":"768","line":11,"column":8,"nodeType":"733","messageId":"734","endLine":11,"endColumn":17},{"ruleId":"731","severity":1,"message":"769","line":12,"column":8,"nodeType":"733","messageId":"734","endLine":12,"endColumn":18},{"ruleId":"731","severity":1,"message":"770","line":13,"column":8,"nodeType":"733","messageId":"734","endLine":13,"endColumn":20},{"ruleId":"731","severity":1,"message":"759","line":14,"column":8,"nodeType":"733","messageId":"734","endLine":14,"endColumn":21},{"ruleId":"731","severity":1,"message":"850","line":21,"column":5,"nodeType":"733","messageId":"734","endLine":21,"endColumn":12},{"ruleId":"731","severity":1,"message":"851","line":24,"column":5,"nodeType":"733","messageId":"734","endLine":24,"endColumn":26},{"ruleId":"857","severity":1,"message":"858","line":35,"column":9,"nodeType":"755","endLine":39,"endColumn":10},{"ruleId":"857","severity":1,"message":"858","line":49,"column":9,"nodeType":"755","endLine":54,"endColumn":10},{"ruleId":"857","severity":1,"message":"858","line":64,"column":9,"nodeType":"755","endLine":69,"endColumn":10},{"ruleId":"731","severity":1,"message":"852","line":152,"column":9,"nodeType":"733","messageId":"734","endLine":152,"endColumn":19},{"ruleId":"731","severity":1,"message":"779","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"776","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":13},{"ruleId":"731","severity":1,"message":"735","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":15},{"ruleId":"731","severity":1,"message":"789","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":20},{"ruleId":"731","severity":1,"message":"782","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":7},{"ruleId":"731","severity":1,"message":"859","line":24,"column":9,"nodeType":"733","messageId":"734","endLine":24,"endColumn":23},{"ruleId":"731","severity":1,"message":"779","line":1,"column":17,"nodeType":"733","messageId":"734","endLine":1,"endColumn":26},{"ruleId":"731","severity":1,"message":"776","line":2,"column":8,"nodeType":"733","messageId":"734","endLine":2,"endColumn":13},{"ruleId":"731","severity":1,"message":"735","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":15},{"ruleId":"731","severity":1,"message":"789","line":4,"column":8,"nodeType":"733","messageId":"734","endLine":4,"endColumn":20},{"ruleId":"731","severity":1,"message":"782","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":9,"column":3,"nodeType":"733","messageId":"734","endLine":9,"endColumn":8},{"ruleId":"731","severity":1,"message":"829","line":10,"column":3,"nodeType":"733","messageId":"734","endLine":10,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":7},{"ruleId":"731","severity":1,"message":"860","line":21,"column":8,"nodeType":"733","messageId":"734","endLine":21,"endColumn":13},{"ruleId":"731","severity":1,"message":"771","line":24,"column":9,"nodeType":"733","messageId":"734","endLine":24,"endColumn":15},{"ruleId":"731","severity":1,"message":"861","line":28,"column":37,"nodeType":"733","messageId":"734","endLine":28,"endColumn":48},{"ruleId":"731","severity":1,"message":"859","line":29,"column":9,"nodeType":"733","messageId":"734","endLine":29,"endColumn":23},{"ruleId":"731","severity":1,"message":"830","line":31,"column":10,"nodeType":"733","messageId":"734","endLine":31,"endColumn":18},{"ruleId":"731","severity":1,"message":"862","line":31,"column":20,"nodeType":"733","messageId":"734","endLine":31,"endColumn":31},{"ruleId":"731","severity":1,"message":"844","line":33,"column":9,"nodeType":"733","messageId":"734","endLine":33,"endColumn":20},{"ruleId":"857","severity":1,"message":"858","line":48,"column":9,"nodeType":"755","endLine":48,"endColumn":12},{"ruleId":"857","severity":1,"message":"858","line":51,"column":9,"nodeType":"755","endLine":51,"endColumn":12},{"ruleId":"857","severity":1,"message":"858","line":54,"column":9,"nodeType":"755","endLine":54,"endColumn":12},{"ruleId":"857","severity":1,"message":"858","line":57,"column":9,"nodeType":"755","endLine":57,"endColumn":12},{"ruleId":"863","severity":1,"message":"864","line":75,"column":25,"nodeType":"865","endLine":75,"endColumn":45},{"ruleId":"857","severity":1,"message":"858","line":138,"column":23,"nodeType":"755","endLine":138,"endColumn":26},{"ruleId":"857","severity":1,"message":"858","line":144,"column":60,"nodeType":"755","endLine":144,"endColumn":63},{"ruleId":"863","severity":1,"message":"864","line":153,"column":25,"nodeType":"865","endLine":153,"endColumn":45},{"ruleId":"857","severity":1,"message":"858","line":172,"column":17,"nodeType":"755","endLine":172,"endColumn":20},{"ruleId":"857","severity":1,"message":"858","line":183,"column":17,"nodeType":"755","endLine":183,"endColumn":20},{"ruleId":"863","severity":1,"message":"864","line":191,"column":30,"nodeType":"865","endLine":191,"endColumn":50},{"ruleId":"863","severity":1,"message":"864","line":213,"column":30,"nodeType":"865","endLine":213,"endColumn":50},{"ruleId":"857","severity":1,"message":"858","line":216,"column":58,"nodeType":"755","endLine":216,"endColumn":61},{"ruleId":"857","severity":1,"message":"858","line":221,"column":28,"nodeType":"755","endLine":221,"endColumn":31},{"ruleId":"857","severity":1,"message":"858","line":227,"column":28,"nodeType":"755","endLine":227,"endColumn":31},{"ruleId":"857","severity":1,"message":"858","line":235,"column":28,"nodeType":"755","endLine":235,"endColumn":31},{"ruleId":"857","severity":1,"message":"858","line":241,"column":28,"nodeType":"755","endLine":241,"endColumn":31},{"ruleId":"857","severity":1,"message":"858","line":249,"column":28,"nodeType":"755","endLine":249,"endColumn":31},{"ruleId":"857","severity":1,"message":"858","line":255,"column":28,"nodeType":"755","endLine":255,"endColumn":31},{"ruleId":"731","severity":1,"message":"800","line":1,"column":38,"nodeType":"733","messageId":"734","endLine":1,"endColumn":44},{"ruleId":"731","severity":1,"message":"756","line":5,"column":18,"nodeType":"733","messageId":"734","endLine":5,"endColumn":24},{"ruleId":"731","severity":1,"message":"757","line":5,"column":26,"nodeType":"733","messageId":"734","endLine":5,"endColumn":30},{"ruleId":"731","severity":1,"message":"758","line":5,"column":32,"nodeType":"733","messageId":"734","endLine":5,"endColumn":37},{"ruleId":"731","severity":1,"message":"803","line":5,"column":46,"nodeType":"733","messageId":"734","endLine":5,"endColumn":52},{"ruleId":"731","severity":1,"message":"804","line":5,"column":54,"nodeType":"733","messageId":"734","endLine":5,"endColumn":61},{"ruleId":"731","severity":1,"message":"784","line":6,"column":10,"nodeType":"733","messageId":"734","endLine":6,"endColumn":22},{"ruleId":"731","severity":1,"message":"805","line":7,"column":8,"nodeType":"733","messageId":"734","endLine":7,"endColumn":20},{"ruleId":"731","severity":1,"message":"866","line":14,"column":8,"nodeType":"733","messageId":"734","endLine":14,"endColumn":12},{"ruleId":"731","severity":1,"message":"867","line":15,"column":8,"nodeType":"733","messageId":"734","endLine":15,"endColumn":20},{"ruleId":"731","severity":1,"message":"868","line":18,"column":8,"nodeType":"733","messageId":"734","endLine":18,"endColumn":14},{"ruleId":"731","severity":1,"message":"869","line":19,"column":8,"nodeType":"733","messageId":"734","endLine":19,"endColumn":22},{"ruleId":"731","severity":1,"message":"870","line":20,"column":8,"nodeType":"733","messageId":"734","endLine":20,"endColumn":14},{"ruleId":"731","severity":1,"message":"871","line":21,"column":8,"nodeType":"733","messageId":"734","endLine":21,"endColumn":22},{"ruleId":"731","severity":1,"message":"872","line":22,"column":8,"nodeType":"733","messageId":"734","endLine":22,"endColumn":23},{"ruleId":"731","severity":1,"message":"873","line":23,"column":8,"nodeType":"733","messageId":"734","endLine":23,"endColumn":29},{"ruleId":"731","severity":1,"message":"874","line":24,"column":8,"nodeType":"733","messageId":"734","endLine":24,"endColumn":26},{"ruleId":"731","severity":1,"message":"875","line":25,"column":8,"nodeType":"733","messageId":"734","endLine":25,"endColumn":29},{"ruleId":"731","severity":1,"message":"876","line":26,"column":8,"nodeType":"733","messageId":"734","endLine":26,"endColumn":28},{"ruleId":"731","severity":1,"message":"877","line":27,"column":8,"nodeType":"733","messageId":"734","endLine":27,"endColumn":23},{"ruleId":"731","severity":1,"message":"812","line":45,"column":9,"nodeType":"733","messageId":"734","endLine":45,"endColumn":13},{"ruleId":"731","severity":1,"message":"760","line":89,"column":13,"nodeType":"733","messageId":"734","endLine":89,"endColumn":27},{"ruleId":"744","severity":1,"message":"815","line":336,"column":6,"nodeType":"746","endLine":336,"endColumn":8,"suggestions":"878"},{"ruleId":"731","severity":1,"message":"763","line":383,"column":24,"nodeType":"733","messageId":"734","endLine":383,"endColumn":39},{"ruleId":"731","severity":1,"message":"776","line":3,"column":8,"nodeType":"733","messageId":"734","endLine":3,"endColumn":13},{"ruleId":"731","severity":1,"message":"782","line":5,"column":3,"nodeType":"733","messageId":"734","endLine":5,"endColumn":9},{"ruleId":"731","severity":1,"message":"756","line":6,"column":3,"nodeType":"733","messageId":"734","endLine":6,"endColumn":9},{"ruleId":"731","severity":1,"message":"757","line":7,"column":3,"nodeType":"733","messageId":"734","endLine":7,"endColumn":7},{"ruleId":"731","severity":1,"message":"758","line":8,"column":3,"nodeType":"733","messageId":"734","endLine":8,"endColumn":8},{"ruleId":"731","severity":1,"message":"818","line":13,"column":3,"nodeType":"733","messageId":"734","endLine":13,"endColumn":7},{"ruleId":"731","severity":1,"message":"819","line":14,"column":3,"nodeType":"733","messageId":"734","endLine":14,"endColumn":10},{"ruleId":"731","severity":1,"message":"826","line":15,"column":3,"nodeType":"733","messageId":"734","endLine":15,"endColumn":8},{"ruleId":"731","severity":1,"message":"771","line":19,"column":9,"nodeType":"733","messageId":"734","endLine":19,"endColumn":15},{"ruleId":"731","severity":1,"message":"879","line":23,"column":5,"nodeType":"733","messageId":"734","endLine":23,"endColumn":16},{"ruleId":"731","severity":1,"message":"880","line":24,"column":5,"nodeType":"733","messageId":"734","endLine":24,"endColumn":16},{"ruleId":"731","severity":1,"message":"881","line":25,"column":5,"nodeType":"733","messageId":"734","endLine":25,"endColumn":17},"no-native-reassign",["882"],"no-negated-in-lhs",["883"],"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","'isEmpty' is defined but never used.","'PURGE' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handlerAsyncCallAppis', 'handlerCallGetInvitationUser', and 'props'. Either include them or remove the dependency array.","ArrayExpression",["884"],"React Hook useEffect has missing dependencies: 'handlerAsyncCallApiis' and 'handlerFinishSession'. Either include them or remove the dependency array.",["885"],"'notification' is defined but never used.","React Hook useEffect has missing dependencies: 'dataProfile' and 'history'. Either include them or remove the dependency array.",["886"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Avatar' is defined but never used.","'Rate' is defined but never used.","'Modal' is defined but never used.","'IconArroRight' is defined but never used.","'responseResult' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlerCalllSyncApis'. Either include it or remove the dependency array.",["887"],"'dataProfileMenu' is assigned a value but never used.","'Pagination' is defined but never used.","'Carousel' is defined but never used.","'Highcharts' is defined but never used.","'HighchartsReact' is defined but never used.","'IconOwner' is defined but never used.","'IconWallet' is defined but never used.","'IconActivity' is defined but never used.","'Option' is assigned a value but never used.","'dotChange' is assigned a value but never used.","'contentStyle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handlerCallGetAllCustomerTenantById' and 'handlerCallGetAllDocumentTypes'. Either include them or remove the dependency array.",["888"],"'isNil' is defined but never used.","'configureOption' is assigned a value but never used.","'TextArea' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'connect' is defined but never used.","'Layout' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'UserOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'dataForm'. Either include it or remove the dependency array. You can also do a functional update 'setDataForm(d => ...)' if you only need 'dataForm' in the 'setDataForm' call.",["889"],"'formattedValue' is assigned a value but never used.","'value' is assigned a value but never used.","'NumberFormat' is defined but never used.","'property' is assigned a value but never used.","'setProperty' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Timeline' is defined but never used.","'Upload' is defined but never used.","'Delete' is defined but never used.","'onRegisterPayment' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetAllCustomerTenantById'. Either include it or remove the dependency array.",["890"],"'Button' is defined but never used.","'message' is defined but never used.","'IconCalendar' is defined but never used.","'Wallet' is defined but never used.","'WalletInactive' is defined but never used.","'SectionInfoOwner' is defined but never used.","'CurrentAddressRenter' is defined but never used.","'TypePolicy' is defined but never used.","'SectionBankInfo' is defined but never used.","'Step' is assigned a value but never used.","'response' is assigned a value but never used.","'idCustomer' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlerCallAsyncApis'. Either include it or remove the dependency array.",["891"],"'Select' is defined but never used.","'Spin' is defined but never used.","'Tooltip' is defined but never used.","'SyncOutlined' is defined but never used.","'IconProfile' is defined but never used.","React Hook useEffect has a missing dependency: 'onChangeZipCode'. Either include it or remove the dependency array.",["892"],"React Hook useEffect has missing dependencies: 'dataForm' and 'dataFormSave.currentTimeRange'. Either include them or remove the dependency array. You can also do a functional update 'setDataForm(d => ...)' if you only need 'dataForm' in the 'setDataForm' call.",["893"],"'Radio' is defined but never used.","React Hook useEffect has a missing dependency: 'frontFunctions'. Either include it or remove the dependency array.",["894"],"'Input' is defined but never used.","'dataForm' is assigned a value but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Dragger' is assigned a value but never used.",["895"],["896"],["897"],["898"],"'furnished' is assigned a value but never used.","'setFurnished' is assigned a value but never used.",["899"],["900"],"'CloseOutlined' is defined but never used.","'signature' is assigned a value but never used.","'LoadingSpin' is assigned a value but never used.","'Checkbox' is defined but never used.","'SignatureCanvas' is defined but never used.","'Info' is defined but never used.","'moment' is defined but never used.","'dataProfile' is assigned a value but never used.","'history' is assigned a value but never used.","'onClickSendInvitation' is assigned a value but never used.","'formatDate' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'frontFunctions' is assigned a value but never used.","'Arrow' is defined but never used.","'spinVisible' is assigned a value but never used.","'setDataForm' is assigned a value but never used.","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","JSXAttribute","'Work' is defined but never used.","'WorkInactive' is defined but never used.","'Renter' is defined but never used.","'RenterInactive' is defined but never used.","'Shield' is defined but never used.","'ShieldInactive' is defined but never used.","'SectionInfoUser' is defined but never used.","'SectionCurrentAddress' is defined but never used.","'SectionCurrentWork' is defined but never used.","'SectionInfoReferences' is defined but never used.","'SectionDocumentation' is defined but never used.","'SectionInfoAval' is defined but never used.",["901"],"'onClickBack' is assigned a value but never used.","'onClickNext' is assigned a value but never used.","'dataFormSave' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"902","fix":"903"},{"desc":"904","fix":"905"},{"desc":"906","fix":"907"},{"desc":"908","fix":"909"},{"desc":"910","fix":"911"},{"desc":"912","fix":"913"},{"desc":"914","fix":"915"},{"desc":"916","fix":"917"},{"desc":"918","fix":"919"},{"desc":"920","fix":"921"},{"desc":"922","fix":"923"},{"desc":"918","fix":"924"},{"desc":"912","fix":"925"},{"desc":"918","fix":"926"},{"desc":"912","fix":"927"},{"desc":"918","fix":"928"},{"desc":"912","fix":"929"},{"desc":"916","fix":"930"},"Update the dependencies array to be: [handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",{"range":"931","text":"932"},"Update the dependencies array to be: [handlerAsyncCallApiis, handlerFinishSession]",{"range":"933","text":"934"},"Update the dependencies array to be: [dataProfile, history]",{"range":"935","text":"936"},"Update the dependencies array to be: [handlerCalllSyncApis]",{"range":"937","text":"938"},"Update the dependencies array to be: [handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",{"range":"939","text":"940"},"Update the dependencies array to be: [dataForm, dataZipCodeAdress]",{"range":"941","text":"942"},"Update the dependencies array to be: [handlerCallGetAllCustomerTenantById]",{"range":"943","text":"944"},"Update the dependencies array to be: [handlerCallAsyncApis]",{"range":"945","text":"946"},"Update the dependencies array to be: [dataFormSave, onChangeZipCode]",{"range":"947","text":"948"},"Update the dependencies array to be: [dataForm, dataFormSave.currentTimeRange, dataZipCodeAdress]",{"range":"949","text":"950"},"Update the dependencies array to be: [dataFormSave, frontFunctions]",{"range":"951","text":"952"},{"range":"953","text":"948"},{"range":"954","text":"942"},{"range":"955","text":"948"},{"range":"956","text":"942"},{"range":"957","text":"948"},{"range":"958","text":"942"},{"range":"959","text":"946"},[32193,32195],"[handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",[2574,2576],"[handlerAsyncCallApiis, handlerFinishSession]",[1791,1793],"[dataProfile, history]",[13207,13209],"[handlerCalllSyncApis]",[7945,7947],"[handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",[1539,1558],"[dataForm, dataZipCodeAdress]",[4894,4896],"[handlerCallGetAllCustomerTenantById]",[10469,10471],"[handlerCallAsyncApis]",[1939,1953],"[dataFormSave, onChangeZipCode]",[2382,2401],"[dataForm, dataFormSave.currentTimeRange, dataZipCodeAdress]",[1844,1858],"[dataFormSave, frontFunctions]",[2134,2148],[2414,2433],[1785,1799],[2029,2048],[1856,1870],[2100,2119],[11085,11087]]