[{"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js":"1","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js":"2","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js":"3","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx":"4","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js":"5","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js":"6","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js":"7","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js":"8","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js":"9","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js":"10","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js":"11","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js":"12","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js":"13","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx":"14","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx":"15","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Recovery\\RecoveryPass.jsx":"16","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx":"17","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js":"18","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js":"19","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js":"20","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomInput.jsx":"21","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\section\\sectionChangeImage.jsx":"22","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx":"23","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx":"24","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\adviser.jsx":"25","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormOwner.jsx":"26","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administrator.jsx":"27","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\MakeScreen\\makeScreen.jsx":"28","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx":"29","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx":"30","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailableOwner.jsx":"31","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx":"32","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx":"33","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx":"34","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx":"35","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx":"36","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx":"37","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx":"38","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx":"39","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx":"40","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUploadDocuments.jsx":"41","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUserDetailAdviser.jsx":"42","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenant.jsx":"43","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUser.jsx":"44","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionAddUsers.jsx":"45","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwner.jsx":"46","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChartPie.jsx":"47","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChart.jsx":"48","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js":"49","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx":"50","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx":"51","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx":"52","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx":"53","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\customFileUpload.jsx":"54","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx":"55","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx":"56","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx":"57","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx":"58","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx":"59","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx":"60","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx":"61","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx":"62","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx":"63","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx":"64","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionDepositGuarantee.jsx":"65","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionCardOwner.jsx":"66","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionStatsChart.jsx":"67","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx":"68","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customReference.jsx":"69","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Leads\\leads.jsx":"70","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\agents.jsx":"71","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Attorney\\attorney.jsx":"72","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administratorControlDesk.jsx":"73","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwnerControl.jsx":"74","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenantControl.jsx":"75","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomViewDocument.jsx":"76","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviromentSocket.js":"77","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Providers\\providers.jsx":"78","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\RequestServices\\requestServices.jsx":"79","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionIncidenceReport.jsx":"80","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomDialog.jsx":"81","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionRequestService.jsx":"82","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomContentActions.jsx":"83","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Providers\\sections\\sectionAddProvider.jsx":"84","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Providers\\sections\\sectionDetailProvider.jsx":"85","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\RequestServices\\sections\\sectionDetailRequest.jsx":"86"},{"size":1174,"mtime":1617917137034,"results":"87","hashOfConfig":"88"},{"size":3175,"mtime":1617917136967,"results":"89","hashOfConfig":"88"},{"size":362,"mtime":499162500000,"results":"90","hashOfConfig":"88"},{"size":7210,"mtime":1617980296887,"results":"91","hashOfConfig":"88"},{"size":124132,"mtime":1617980283328,"results":"92","hashOfConfig":"88"},{"size":8329,"mtime":1617980283329,"results":"93","hashOfConfig":"88"},{"size":1234,"mtime":1617917137050,"results":"94","hashOfConfig":"88"},{"size":1319,"mtime":1617917137043,"results":"95","hashOfConfig":"88"},{"size":250,"mtime":1617980283330,"results":"96","hashOfConfig":"88"},{"size":4811,"mtime":1617917137038,"results":"97","hashOfConfig":"88"},{"size":1673,"mtime":1617917136968,"results":"98","hashOfConfig":"88"},{"size":542,"mtime":1617917136968,"results":"99","hashOfConfig":"88"},{"size":106,"mtime":1617917136967,"results":"100","hashOfConfig":"88"},{"size":39047,"mtime":1617917137032,"results":"101","hashOfConfig":"88"},{"size":3195,"mtime":1617917137025,"results":"102","hashOfConfig":"88"},{"size":21340,"mtime":1617917137029,"results":"103","hashOfConfig":"88"},{"size":25555,"mtime":1617980283325,"results":"104","hashOfConfig":"88"},{"size":821,"mtime":1617917137050,"results":"105","hashOfConfig":"88"},{"size":3903,"mtime":1617980283326,"results":"106","hashOfConfig":"88"},{"size":261,"mtime":1617917137047,"results":"107","hashOfConfig":"88"},{"size":745,"mtime":1617917137024,"results":"108","hashOfConfig":"88"},{"size":2469,"mtime":1617917137027,"results":"109","hashOfConfig":"88"},{"size":25342,"mtime":1617917137088,"results":"110","hashOfConfig":"88"},{"size":36101,"mtime":1617980283337,"results":"111","hashOfConfig":"88"},{"size":6294,"mtime":1617917137061,"results":"112","hashOfConfig":"88"},{"size":19510,"mtime":1617917137088,"results":"113","hashOfConfig":"88"},{"size":30696,"mtime":1617917137052,"results":"114","hashOfConfig":"88"},{"size":440,"mtime":1617917137066,"results":"115","hashOfConfig":"88"},{"size":12637,"mtime":1617980283337,"results":"116","hashOfConfig":"88"},{"size":28204,"mtime":1617917137067,"results":"117","hashOfConfig":"88"},{"size":38612,"mtime":1617917137077,"results":"118","hashOfConfig":"88"},{"size":4933,"mtime":1617917137069,"results":"119","hashOfConfig":"88"},{"size":8638,"mtime":1617917137069,"results":"120","hashOfConfig":"88"},{"size":2502,"mtime":1617917137070,"results":"121","hashOfConfig":"88"},{"size":7462,"mtime":1617917137070,"results":"122","hashOfConfig":"88"},{"size":22882,"mtime":1617917137068,"results":"123","hashOfConfig":"88"},{"size":6375,"mtime":1617917137075,"results":"124","hashOfConfig":"88"},{"size":2667,"mtime":1617917137074,"results":"125","hashOfConfig":"88"},{"size":2841,"mtime":1617917137072,"results":"126","hashOfConfig":"88"},{"size":11893,"mtime":1617917137074,"results":"127","hashOfConfig":"88"},{"size":4257,"mtime":1617917137060,"results":"128","hashOfConfig":"88"},{"size":4200,"mtime":1617917137061,"results":"129","hashOfConfig":"88"},{"size":46276,"mtime":1617917137057,"results":"130","hashOfConfig":"88"},{"size":23453,"mtime":1617917137057,"results":"131","hashOfConfig":"88"},{"size":16255,"mtime":1617917137054,"results":"132","hashOfConfig":"88"},{"size":16988,"mtime":1617917137055,"results":"133","hashOfConfig":"88"},{"size":2348,"mtime":1617917137059,"results":"134","hashOfConfig":"88"},{"size":2994,"mtime":1617917137059,"results":"135","hashOfConfig":"88"},{"size":5753,"mtime":1617917137041,"results":"136","hashOfConfig":"88"},{"size":1427,"mtime":1617917137075,"results":"137","hashOfConfig":"88"},{"size":2318,"mtime":1617917137072,"results":"138","hashOfConfig":"88"},{"size":2776,"mtime":1617917137073,"results":"139","hashOfConfig":"88"},{"size":4643,"mtime":1617917137071,"results":"140","hashOfConfig":"88"},{"size":11783,"mtime":1617917137054,"results":"141","hashOfConfig":"88"},{"size":12274,"mtime":1617917137083,"results":"142","hashOfConfig":"88"},{"size":7606,"mtime":1617917137080,"results":"143","hashOfConfig":"88"},{"size":24469,"mtime":1617917137080,"results":"144","hashOfConfig":"88"},{"size":25773,"mtime":1617917137086,"results":"145","hashOfConfig":"88"},{"size":70811,"mtime":1617917137085,"results":"146","hashOfConfig":"88"},{"size":11532,"mtime":1617917137084,"results":"147","hashOfConfig":"88"},{"size":2876,"mtime":1617917137086,"results":"148","hashOfConfig":"88"},{"size":16840,"mtime":1617917137084,"results":"149","hashOfConfig":"88"},{"size":47216,"mtime":1617917137087,"results":"150","hashOfConfig":"88"},{"size":18051,"mtime":1617917137081,"results":"151","hashOfConfig":"88"},{"size":9787,"mtime":1617917137077,"results":"152","hashOfConfig":"88"},{"size":4108,"mtime":1617917137062,"results":"153","hashOfConfig":"88"},{"size":2993,"mtime":1617917137063,"results":"154","hashOfConfig":"88"},{"size":11643,"mtime":1617980283338,"results":"155","hashOfConfig":"88"},{"size":3406,"mtime":1617917137083,"results":"156","hashOfConfig":"88"},{"size":10871,"mtime":1617917137065,"results":"157","hashOfConfig":"88"},{"size":4788,"mtime":1617917137062,"results":"158","hashOfConfig":"88"},{"size":28873,"mtime":1617917137064,"results":"159","hashOfConfig":"88"},{"size":18619,"mtime":1617917137052,"results":"160","hashOfConfig":"88"},{"size":9324,"mtime":1617917137055,"results":"161","hashOfConfig":"88"},{"size":55643,"mtime":1617980267022,"results":"162","hashOfConfig":"88"},{"size":1471,"mtime":1617917137024,"results":"163","hashOfConfig":"88"},{"size":1382,"mtime":1617980283330,"results":"164","hashOfConfig":"88"},{"size":13478,"mtime":1617980283331,"results":"165","hashOfConfig":"88"},{"size":11444,"mtime":1617980283333,"results":"166","hashOfConfig":"88"},{"size":5447,"mtime":1617980283335,"results":"167","hashOfConfig":"88"},{"size":548,"mtime":1617980283323,"results":"168","hashOfConfig":"88"},{"size":5282,"mtime":1617980283335,"results":"169","hashOfConfig":"88"},{"size":826,"mtime":1617980283323,"results":"170","hashOfConfig":"88"},{"size":18992,"mtime":1617980283332,"results":"171","hashOfConfig":"88"},{"size":21354,"mtime":1617980283333,"results":"172","hashOfConfig":"88"},{"size":14601,"mtime":1617980283334,"results":"173","hashOfConfig":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vnvna8",{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"180"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"206","messages":"207","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"180"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"219","messages":"220","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"221","messages":"222","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"180"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"228","messages":"229","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"230","messages":"231","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"180"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"239","messages":"240","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"243","messages":"244","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"247","messages":"248","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"249","messages":"250","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"251","messages":"252","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"263","messages":"264","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"265","messages":"266","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"267","messages":"268","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"269","messages":"270","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"295","messages":"296","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"297","messages":"298","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"303","messages":"304","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"305","messages":"306","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"307","messages":"308","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"180"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"318","messages":"319","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"320","messages":"321","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"322","messages":"323","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"326","messages":"327","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"328","messages":"329","errorCount":0,"warningCount":37,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"180"},{"filePath":"331","messages":"332","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"335","messages":"336","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"180"},{"filePath":"338","messages":"339","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"180"},{"filePath":"341","messages":"342","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"180"},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"346","messages":"347","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"348","usedDeprecatedRules":"180"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"180"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"353","usedDeprecatedRules":"180"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"180"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"180"},"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js",["360","361"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js",[],["362","363"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js",["364"],"import { API_CONSTANTS, HEADER } from \"../constants/apiConstants\";\r\nimport RequesterAxios from \"../requester/requester\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nconst callApiLogin = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.LOGIN,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomers = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllPersons = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PERSON_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllEndorsement = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_ENDORSEMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetInvitationUser = (paramId) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const endPoint = `${API_CONSTANTS.GET_ALL_CUSTOMER_INVITATION}${paramId}`;\r\n    const response = await RequesterAxios.get(endPoint, config);\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRegisterUser = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRequestRecoveryPass = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REQUEST_RECOVERY_PASS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllVerifyCodeRecoveryPass = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.VERIFY_CODE_RECOVERY_PASS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callPutRecoveryPass = (data, id) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.RECOVERY_PASS + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllVerifyCode = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.VERIFY_CODE_REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllUserProfile = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_USER_PROFILE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllMenuProfile = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_MENU_PROFILE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetImageProfile = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_IMAGE_PROFILE + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerTenantById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TENANT_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerTenantDashboardById = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TENANT_DASHBOARD_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractStats = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_STATS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllProvidersCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PROVIDERS_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRequestProvidersCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_REQUEST_PROVIDER_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCollaborators = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_COLLABORATORS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRequestProviderStatus = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_REQUEST_PROVIDER_STATUS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllProviderTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PROVIDER_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCollaboratorTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_COLLABORATOR_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllProviders = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PROVIDERS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllProviderPaymentForm = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PROVIDER_PAYMENT_FORM,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractCoincidences = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractChart = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_CHART,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetSearchProspect = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_SEARCH_CUSTOMER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAddProspect = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ADD_PROSPECT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerCoincidences = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TENANT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetStatsChart = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_STATS_CHART,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetZipCodeAdress = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ZIP_CODE_ADRESS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetMaritalStatus = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_MARITAL_STATUS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetMaritalRegime = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_MARITAL_REGIME,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPropertyTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_PROPERTY_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPolicies = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_POLICIES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetNationalities = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_NATIONALITIES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetIdTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_ID_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetOccupations = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_OCCUPATIONS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllTenantsCatalog = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_TENANTS_CATALOG,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllBankCatalog = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_BANKS_CATALOG,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddProperty = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.CUSTOMER_ADD_PROPERTY,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetProperties = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PROPERTIES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetDepartments = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_DEPARTMENTS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPaymentTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PYMENT_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllDocumentTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_DOCUMENT_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPaymentContractDocument = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_PAYMENT_IN_CONTRACT_DOCUMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPaymentContract = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PYMENT_CONTRACT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.SEND_TENANT_INVITATION,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddCustomerMessage = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.ADD_CUSTOMER_MESSAGE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetCustomerMessage = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CUSTOMER_MESSAGE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callRequestAdvancement = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REQUEST_ADVANCEMENT_RENTS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddDocument = (file, data, callback) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n  formData.append(\"fileProperties\", JSON.stringify(data));\r\n  try {\r\n    const config = {\r\n      headers: { ...HEADER },\r\n      onUploadProgress: (progressEvent) => {\r\n        var percentCompleted = Math.round(\r\n          (progressEvent.loaded * 100) / progressEvent.total\r\n        );\r\n        callback(percentCompleted);\r\n      },\r\n    };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.ADD_DOCUMENT,\r\n      formData,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetTypeFormTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_TYPEFORM_TENANT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetTypeFormProperties = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_TYPEFORM_PROPERTIES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetTypeFormOwner = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_TYPEFORM_OWNER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetTypeFormDocumentTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_TYPEFORM_DOCUMENT_TENANT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetTypeFormTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.SET_TYPEFORM_DOCUMENT_TENANT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetTypeFormOwner = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.SET_TYPEFORM_OWNER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetTypeFormReferences = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.SET_TYPEFORM_REFERENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddTypeFormDocument = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.PUT_ADD_TYPEFORM_DOCUMENT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callUpdateContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_UPDATE_CONTRACT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetProvider = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_PROVIDER + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callUpdateRequestProvider = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.UPDATE_REQUEST_PROVIDER + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSwitchCustomerContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_SWITCH_CUSTOMER_CONTRACT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callSetContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_CONTRACT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddCommentContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.ADD_CONTRACT_COMMENT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callUpdateNotifications = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.UPDATE_NOTIFICATIONS + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddDocumentContract = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.ADD_CONTRACT_DOCUMENT + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddDocumentContractId = (data, id) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.ADD_CONTRACT_DOCUMENT_ID + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false\r\n        ? response.data.response\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractDocument = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_DOCUMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetNotifications = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_NOTIFICATIONS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractDocumentById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_DOCUMENT_BYID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetProviderById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_PROVIDER_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetRequestProviderById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_REQUEST_PROVIDER_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddRequestProviderForTenant = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_REQUEST_PROVIDER_FOR_TENANT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContract = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetContractComment = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CONTRACT_COMMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllPolicyStatus = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_POLICY_STATUS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCommercialSocietyTypes = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_COMMERCIAL_SOCIETY_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllStates = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CATALOG_ALL_STATES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAgentIndicators = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_AGENT_INDICATORS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAgentContractCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_AGENT_CONTRACT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAgentCommissionChart = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_AGENT_COMISSION_CHART,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetDetailCustomer = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_DETAIL_CUSTOMER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetDetailCustomerTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_DETAIL_CUSTOMER_TENANT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetDetailCustomerAgent = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_DETAIL_CUSTOMER_AGENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetLandingProspectStats = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_LANDING_PROSPECT_STATS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllProspectStatus = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PROSPECT_STATUS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRelationshipTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_RELATIONSHIP_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllPersonalReferencesStatus = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PERSONAL_REFERENCE_STATUS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetLandingProspectCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_LANDING_PROSPECT_COINCIDENECES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetCustomerAgentCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CUSTOMER_AGENT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetLegalContractCoincidences = (data) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_LEGAL_CONTRACT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callUpdateLandingProspectStatus = (data, id) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.UPDATE_LANDING_PROSPECT_STATUS + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callUpdatePersonalReferences = (data, id) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.put(\r\n      API_CONSTANTS.SET_PERSONAL_REFERENCE_FORM + id,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAuditReferences = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_AUDIT_REFERENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callUpdateMovingDialog = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.UPDATE_MOVING_DIALOG,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport {\r\n  callApiLogin,\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetInvitationUser,\r\n  callGetAllRegisterUser,\r\n  callGetAllRequestRecoveryPass,\r\n  callGetAllVerifyCodeRecoveryPass,\r\n  callGetAllVerifyCode,\r\n  callGetAllUserProfile,\r\n  callGetAllMenuProfile,\r\n  callGetAllCustomerById,\r\n  callGetAllCustomerCoincidences,\r\n  callGetStatsChart,\r\n  callAddProperty,\r\n  callGetProperties,\r\n  callGetDepartments,\r\n  callAddTenant,\r\n  callGetZipCodeAdress,\r\n  callGetAllTenantsCatalog,\r\n  callGetAllBankCatalog,\r\n  callRequestAdvancement,\r\n  callGetAllCustomerTenantById,\r\n  callGetPaymentTypes,\r\n  callGetPaymentContract,\r\n  callAddDocument,\r\n  callGetAllDocumentTypes,\r\n  callGetPaymentContractDocument,\r\n  callAddCustomerMessage,\r\n  callGetCustomerMessage,\r\n  callGetTypeFormTenant,\r\n  callGetTypeFormOwner,\r\n  callGetTypeFormDocumentTenant,\r\n  callAddTypeFormDocument,\r\n  callSetTypeFormTenant,\r\n  callSetTypeFormOwner,\r\n  callGetAllCustomerTenantDashboardById,\r\n  callSetTypeFormReferences,\r\n  callGetMaritalStatus,\r\n  callGetPropertyTypes,\r\n  callGetPolicies,\r\n  callPutRecoveryPass,\r\n  callSetImageProfile,\r\n  callGetNationalities,\r\n  callGetIdTypes,\r\n  callGetOccupations,\r\n  callGetContractStats,\r\n  callGetContractCoincidences,\r\n  callGetContractChart,\r\n  callGetSearchProspect,\r\n  callGetAddProspect,\r\n  callUpdateContract,\r\n  callGetAllPolicyStatus,\r\n  callGetDetailCustomer,\r\n  callGetDetailCustomerTenant,\r\n  callGetDetailCustomerAgent,\r\n  callSwitchCustomerContract,\r\n  callGetAgentIndicators,\r\n  callGetAgentContractCoincidences,\r\n  callSetContract,\r\n  callAddCommentContract,\r\n  callGetContract,\r\n  callGetContractComment,\r\n  callGetAgentCommissionChart,\r\n  callAddDocumentContract,\r\n  callGetContractDocument,\r\n  callGetContractDocumentById,\r\n  callAddDocumentContractId,\r\n  callGetMaritalRegime,\r\n  callGetAllCommercialSocietyTypes,\r\n  callGetAllStates,\r\n  callGetLandingProspectStats,\r\n  callGetAllProspectStatus,\r\n  callGetAllRelationshipTypes,\r\n  callGetAllPersonalReferencesStatus,\r\n  callGetLandingProspectCoincidences,\r\n  callGetCustomerAgentCoincidences,\r\n  callGetLegalContractCoincidences,\r\n  callUpdateLandingProspectStatus,\r\n  callUpdatePersonalReferences,\r\n  callGetAuditReferences,\r\n  callGetTypeFormProperties,\r\n  callUpdateNotifications,\r\n  callGetNotifications,\r\n  callGetAllProvidersCoincidences,\r\n  callGetAllCollaborators,\r\n  callGetAllProviderTypes,\r\n  callGetAllCollaboratorTypes,\r\n  callGetAllProviders,\r\n  callGetAllProviderPaymentForm,\r\n  callSetProvider,\r\n  callGetProviderById,\r\n  callGetAllRequestProvidersCoincidences,\r\n  callGetRequestProviderById,\r\n  callGetAllRequestProviderStatus,\r\n  callUpdateRequestProvider,\r\n  callAddRequestProviderForTenant,\r\n  callUpdateMovingDialog,\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js",["365"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js",["366"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx",["367","368","369"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx",["370"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Recovery\\RecoveryPass.jsx",["371","372","373","374","375","376"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx",["377","378","379","380","381","382","383","384","385"],"import React, { useState, useEffect, Suspense } from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\nimport { connect } from \"react-redux\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  Layout,\r\n  Menu,\r\n  Drawer,\r\n  Dropdown,\r\n  Avatar,\r\n  notification,\r\n  List,\r\n  Popover,\r\n} from \"antd\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport \"antd/dist/antd.css\";\r\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from \"@ant-design/icons\";\r\nimport IconDashboard from \"../../assets/icons/iconDashboard.svg\";\r\nimport IconOwner from \"../../assets/icons/iconHome.svg\";\r\nimport IconRenter from \"../../assets/icons/renter.svg\";\r\nimport IconDocument from \"../../assets/icons/document.svg\";\r\nimport IconChat from \"../../assets/icons/chat.svg\";\r\nimport IconEdit from \"../../assets/icons/edit.svg\";\r\nimport IconShortLogo from \"../../assets/icons/logoShortWhite.svg\";\r\nimport IconLongtLogo from \"../../assets/icons/logoLongWhite.svg\";\r\nimport IconNotification from \"../../assets/icons/Notification.svg\";\r\nimport IconProfile from \"../../assets/icons/Profile.svg\";\r\nimport IconClose from \"../../assets/icons/LogoutWhite.svg\";\r\nimport IconCloseLogout from \"../../assets/icons/Logout.svg\";\r\nimport IconLead from \"../../assets/icons/IconLead.svg\";\r\nimport IconLetter from \"../../assets/icons/IconLetter.svg\";\r\nimport IconCheck from \"../../assets/icons/IconCheck.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconProvider from \"../../assets/icons/IconProvider.svg\";\r\nimport IconRequest from \"../../assets/icons/IconRequest.svg\";\r\nimport IconDeal from \"../../assets/icons/IconDeal.svg\";\r\nimport SD_ALERT_31 from \"../../assets/files/SD_ALERT_31.mp3\";\r\nimport routes from \"../../routes\";\r\nimport SectionChangeImage from \"./section/sectionChangeImage\";\r\nimport {\r\n  callSetImageProfile,\r\n  callUpdateNotifications,\r\n  callGetNotifications,\r\n} from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport ENVIROMENTSOCKET from \"../../utils/constants/enviromentSocket\";\r\n\r\nconst { Header, Sider } = Layout;\r\n\r\nconst Loading = () => (\r\n  <div className=\"loader-auth-spiner\">\r\n    <div />\r\n  </div>\r\n);\r\n\r\nconst DefaultLayout = (props) => {\r\n  const {\r\n    history,\r\n    authenticated,\r\n    dataProfileMenu,\r\n    dataProfile,\r\n    callSetImageProfile,\r\n    setDataUserProfile,\r\n    callUpdateNotifications,\r\n    callGetNotifications,\r\n  } = props;\r\n  const [collapsed, setCollapsed] = useState(true);\r\n  const [dataNotifications, setDataNotifications] = useState([]);\r\n  const [notificationTopIndex, setNotificationTopIndex] = useState(null);\r\n  const [numberNotifications, setNumberNotifications] = useState(0);\r\n  const [isVisibleAvatarSection, setIsVisibleAvatarSection] = useState(false);\r\n  const [collapsedButton, setCollapsedButton] = useState(false);\r\n  const arrayIconst = {\r\n    IconDashboard,\r\n    IconOwner,\r\n    IconRenter,\r\n    IconDocument,\r\n    IconChat,\r\n    IconEdit,\r\n    IconClose,\r\n    IconLead,\r\n    IconLetter,\r\n    IconCheck,\r\n    IconWallet,\r\n    IconProvider,\r\n    IconRequest,\r\n    IconDeal,\r\n  };\r\n\r\n  const nameLocation = () => {\r\n    const name = routes.find((row) => {\r\n      return row.path === props.location.pathname;\r\n    });\r\n    return isNil(name) === false && isNil(name.name) === false\r\n      ? name.name\r\n      : \"Dashboard\";\r\n  };\r\n\r\n  const [nameSection, setNameSection] = useState(nameLocation());\r\n  const toggle = () => {\r\n    setCollapsed(!collapsed);\r\n  };\r\n\r\n  const handlerCallSetImageProfile = async (data) => {\r\n    const { idCustomer, idLoginHistory, idSystemUser } = dataProfile;\r\n    try {\r\n      await callSetImageProfile(\r\n        {\r\n          idCustomer,\r\n          idLoginHistory,\r\n          documentName: \"avatar_image\",\r\n          extension: \"png/img\",\r\n          preview: null,\r\n          thumbnail: data,\r\n        },\r\n        idSystemUser\r\n      );\r\n      await setDataUserProfile({\r\n        ...dataProfile,\r\n        thumbnail: data,\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetNotifications = async (top = null) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetNotifications({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n        topIndex: top,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataNotifications(responseResult);\r\n      setNotificationTopIndex(\r\n        isEmpty(responseResult) === false &&\r\n          isNil(responseResult[0]) === false &&\r\n          isNil(responseResult[0].topIndex) === false\r\n          ? responseResult[0].topIndex\r\n          : null\r\n      );\r\n      setNumberNotifications(\r\n        isEmpty(responseResult) === false &&\r\n          isNil(responseResult[0]) === false &&\r\n          isNil(responseResult[0].totalToBeRead) === false\r\n          ? responseResult[0].totalToBeRead\r\n          : 0\r\n      );\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallUpdateNotifications = async (id) => {\r\n    const { idCustomer, idLoginHistory, idSystemUser } = dataProfile;\r\n    try {\r\n      await callUpdateNotifications(\r\n        {\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n      handlerCallGetNotifications();\r\n    } catch (error) {}\r\n  };\r\n\r\n  const menu = (\r\n    <Menu>\r\n      <Menu.Item>\r\n        <a\r\n          target=\"_self\"\r\n          rel=\"noopener noreferrer\"\r\n          onClick={() => {\r\n            setIsVisibleAvatarSection(!isVisibleAvatarSection);\r\n          }}\r\n        >\r\n          Imagen de perfil\r\n        </a>\r\n      </Menu.Item>\r\n      <Menu.Divider />\r\n      <Menu.ItemGroup title=\"Cambiar tema\">\r\n        <Menu.Item\r\n          style={{ display: \"flex\" }}\r\n          onClick={() => {\r\n            const theme = document.getElementsByTagName(\"body\")[0];\r\n            theme.className = \"theme-light\";\r\n            localStorage.setItem(\"theme-app\", \"theme-light\");\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#ff0282\",\r\n              padding: \"0px 10px\",\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Light\r\n          </div>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          style={{ display: \"flex\" }}\r\n          onClick={() => {\r\n            const theme = document.getElementsByTagName(\"body\")[0];\r\n            theme.className = \"theme-dark\";\r\n            localStorage.setItem(\"theme-app\", \"theme-dark\");\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#0c101d\",\r\n              padding: \"0px 10px\",\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Dark\r\n          </div>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          style={{ display: \"flex\" }}\r\n          onClick={() => {\r\n            const theme = document.getElementsByTagName(\"body\")[0];\r\n            theme.className = \"theme-purple\";\r\n            localStorage.setItem(\"theme-app\", \"theme-purple\");\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#9a78b0\",\r\n              padding: \"0px 10px\",\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Purple\r\n          </div>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          style={{ display: \"flex\" }}\r\n          onClick={() => {\r\n            const theme = document.getElementsByTagName(\"body\")[0];\r\n            theme.className = \"theme-dark-blue\";\r\n            localStorage.setItem(\"theme-app\", \"theme-dark-blue\");\r\n          }}\r\n        >\r\n          <div\r\n            style={{\r\n              background: \"#072146\",\r\n              padding: \"0px 10px\",\r\n              color: \"#fff\",\r\n            }}\r\n          >\r\n            Dark Blue\r\n          </div>\r\n        </Menu.Item>\r\n      </Menu.ItemGroup>\r\n      <Menu.Divider />\r\n      <Menu.Item style={{ display: \"flex\" }}>\r\n        <img\r\n          className=\"ant-menu-item-icon\"\r\n          width=\"15\"\r\n          src={IconCloseLogout}\r\n          style={{ marginRight: \"5px\" }}\r\n        />\r\n        <a target=\"_self\" rel=\"Cerrrar sesión\" href=\"/logout\">\r\n          Cerrar sesión\r\n        </a>\r\n      </Menu.Item>\r\n    </Menu>\r\n  );\r\n\r\n  useEffect(() => {\r\n    handlerCallGetNotifications();\r\n    const documentHead = document.getElementsByTagName(\"head\");\r\n    const headExtractNode =\r\n      isNil(documentHead) === false &&\r\n      isEmpty(documentHead) === false &&\r\n      isNil(documentHead[0]) === false\r\n        ? documentHead[0]\r\n        : [];\r\n    if (isNil(dataProfile) === true) {\r\n      history.push(\"/\");\r\n    }\r\n    const getThemeApplication = localStorage.getItem(\"theme-app\");\r\n\r\n    if (isNil(getThemeApplication) === false) {\r\n      const theme = document.getElementsByTagName(\"body\")[0];\r\n      theme.className = getThemeApplication;\r\n      localStorage.setItem(\"theme-app\", getThemeApplication);\r\n    } else {\r\n      const theme = document.getElementsByTagName(\"body\")[0];\r\n      theme.className = \"theme-light\";\r\n      localStorage.setItem(\"theme-app\", \"theme-light\");\r\n    }\r\n    if (dataProfile.idUserType === 3 || dataProfile.idUserType === 2) {\r\n      const scriptCreate = document.createElement(\"script\");\r\n      scriptCreate.id = \"script-make-smartsupp-hfy\";\r\n      scriptCreate.innerHTML = `\r\n      var _smartsupp = _smartsupp || {};\r\n      _smartsupp.key = \"c63bfecea33039226338a89e3da23617cb9fd6c0\";\r\n      window.smartsupp ||\r\n        (function (d) {\r\n          var s,\r\n            c,\r\n            o = (smartsupp = function () {\r\n              o._.push(arguments);\r\n            });\r\n          o._ = [];\r\n          s = d.getElementsByTagName(\"script\")[0];\r\n          c = d.createElement(\"script\");\r\n          c.type = \"text/javascript\";\r\n          c.charset = \"utf-8\";\r\n          c.async = true;\r\n          c.src = \"https://www.smartsuppchat.com/loader.js?\";\r\n          s.parentNode.insertBefore(c, s);\r\n        })(document);`;\r\n      headExtractNode.appendChild(scriptCreate);\r\n\r\n      window.smartsupp(\"email\", dataProfile.email);\r\n      window.smartsupp(\"name\", dataProfile.showName);\r\n      window.smartsupp(\"variables\", {\r\n        userType: {\r\n          label: \"Tipo de usuario\",\r\n          value: dataProfile.userType,\r\n        },\r\n        idSystemUser: {\r\n          label: \"idSystemUser\",\r\n          value: dataProfile.idSystemUser,\r\n        },\r\n        idCustomer: {\r\n          label: \"idCustomer\",\r\n          value: dataProfile.idCustomer,\r\n        },\r\n        idCustomerTenant: {\r\n          label: \"Id Inquilino\",\r\n          value: dataProfile.idCustomerTenant,\r\n        },\r\n        agentNo: {\r\n          label: \"Número de agente\",\r\n          value: dataProfile.agentNo,\r\n        },\r\n      });\r\n    }\r\n    let interval;\r\n\r\n    const socket = socketIOClient(ENVIROMENTSOCKET, {\r\n      reconnectionDelayMax: 60000,\r\n    });\r\n\r\n    interval = setInterval(() => {\r\n      socket.emit(\"user_subscribed\", {\r\n        idSystemUser: dataProfile.idSystemUser,\r\n        idLoginHistory: dataProfile.idLoginHistory,\r\n      });\r\n    }, 30000);\r\n\r\n    socket.on(\"get_notification\", (data) => {\r\n      if (isEmpty(data) === false) {\r\n        handlerCallGetNotifications();\r\n        document.getElementById(\"audio-notice-hfy\").play();\r\n        data.forEach((element) => {\r\n          notification.open({\r\n            message: (\r\n              <div className=\"title-notification\">{element.subject}</div>\r\n            ),\r\n            duration: 15,\r\n            description: (\r\n              <div\r\n                className=\"title-body-description\"\r\n                style={{\r\n                  background: \"rgba(255,255,255,1)\",\r\n                  cursor: \"pointer\",\r\n                }}\r\n              >\r\n                <div className=\"section-circle-description\">\r\n                  <div\r\n                    className=\"icon-notification\"\r\n                    style={{\r\n                      background:\r\n                        element.isRead === true\r\n                          ? \"#DF90B8\"\r\n                          : \"var(--color-primary)\",\r\n                    }}\r\n                  >\r\n                    <img\r\n                      width=\"25\"\r\n                      src={arrayIconst[element.style]}\r\n                      alt=\"icons-notification-homify\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className=\"section-info-notification\"\r\n                  dangerouslySetInnerHTML={{\r\n                    __html:\r\n                      isNil(element.content) === false ? element.content : \"\",\r\n                  }}\r\n                />\r\n              </div>\r\n            ),\r\n            onClick: () => {},\r\n          });\r\n        });\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      socket.disconnect();\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const name = routes.find((row) => {\r\n      return row.path === props.location.pathname;\r\n    });\r\n\r\n    setNameSection(\r\n      isNil(name) === false && isNil(name.name) === false\r\n        ? name.name\r\n        : \"Dashboard\"\r\n    );\r\n  }, [props.location.pathname]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <audio id=\"audio-notice-hfy\">\r\n        <source src=\"https://homify-docs-users.s3.us-east-2.amazonaws.com/SD_ALERT_31.mp3\" />\r\n      </audio>\r\n      {isNil(dataProfile) === false && (\r\n        <Layout>\r\n          <Drawer\r\n            placement=\"left\"\r\n            className=\"drawer-menu_header\"\r\n            closable={false}\r\n            onClose={() => {\r\n              setCollapsedButton(!collapsedButton);\r\n            }}\r\n            visible={collapsedButton}\r\n            key=\"left\"\r\n          >\r\n            {\" \"}\r\n            <div className=\"logo\">\r\n              <img src={IconLongtLogo} alt=\"Logo short\" />\r\n            </div>\r\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n              {isEmpty(dataProfileMenu) === false &&\r\n                dataProfileMenu.map((row) => {\r\n                  return (\r\n                    <Menu.Item\r\n                      key={`${row.idMenu}`}\r\n                      onClick={(event) => {\r\n                        history.push(row.path);\r\n                        setNameSection(row.menuName);\r\n                        setCollapsedButton(!collapsedButton);\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"ant-menu-item-icon\"\r\n                        width=\"15\"\r\n                        src={arrayIconst[row.icon]}\r\n                      />\r\n                      <span className=\"tex-menu-icon-ant\">{row.menuName}</span>\r\n                    </Menu.Item>\r\n                  );\r\n                })}\r\n            </Menu>\r\n            <div\r\n              class=\"ant-layout-sider-trigger\"\r\n              style={{ width: \"100%\" }}\r\n              onClick={() => {\r\n                setCollapsedButton(!collapsedButton);\r\n              }}\r\n            >\r\n              <span role=\"img\" aria-label=\"left\" class=\"anticon anticon-left\">\r\n                <svg\r\n                  viewBox=\"64 64 896 896\"\r\n                  focusable=\"false\"\r\n                  data-icon=\"left\"\r\n                  width=\"1em\"\r\n                  height=\"1em\"\r\n                  fill=\"currentColor\"\r\n                  aria-hidden=\"true\"\r\n                >\r\n                  <path d=\"M724 218.3V141c0-6.7-7.7-10.4-12.9-6.3L260.3 486.8a31.86 31.86 0 000 50.3l450.8 352.1c5.3 4.1 12.9.4 12.9-6.3v-77.3c0-4.9-2.3-9.6-6.1-12.6l-360-281 360-281.1c3.8-3 6.1-7.7 6.1-12.6z\"></path>\r\n                </svg>\r\n              </span>\r\n            </div>\r\n          </Drawer>\r\n          <Sider collapsible collapsed={collapsed} onCollapse={toggle}>\r\n            <div className=\"logo\">\r\n              <img\r\n                src={IconLongtLogo}\r\n                alt=\"Logo short\"\r\n                style={{ display: collapsed === true ? \"none\" : \"block\" }}\r\n              />\r\n              <img\r\n                src={IconShortLogo}\r\n                alt=\"Logo short\"\r\n                style={{ display: collapsed === true ? \"block\" : \"none\" }}\r\n              />\r\n            </div>\r\n            <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={[\"1\"]}>\r\n              {isEmpty(dataProfileMenu) === false &&\r\n                dataProfileMenu.map((row) => {\r\n                  return (\r\n                    <Menu.Item\r\n                      key={`${row.idMenu}`}\r\n                      onClick={(event) => {\r\n                        setNameSection(row.menuName);\r\n                        history.push(row.path);\r\n                      }}\r\n                    >\r\n                      <img\r\n                        className=\"ant-menu-item-icon\"\r\n                        width=\"15\"\r\n                        src={arrayIconst[row.icon]}\r\n                      />\r\n                      <span className=\"tex-menu-icon-ant\">{row.menuName}</span>\r\n                    </Menu.Item>\r\n                  );\r\n                })}\r\n            </Menu>\r\n          </Sider>\r\n          <Layout className=\"site-layout\">\r\n            <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n              <SectionChangeImage\r\n                isModalVisible={isVisibleAvatarSection}\r\n                onClose={() => {\r\n                  setIsVisibleAvatarSection(!isVisibleAvatarSection);\r\n                }}\r\n                onSelectImage={(preview) => {\r\n                  handlerCallSetImageProfile(preview);\r\n                }}\r\n              />\r\n              <div className=\"header-title-button\">\r\n                <button\r\n                  className=\"button-drawer-header\"\r\n                  onClick={() => {\r\n                    setCollapsedButton(!collapsedButton);\r\n                  }}\r\n                >\r\n                  {React.createElement(\r\n                    collapsedButton ? MenuUnfoldOutlined : MenuFoldOutlined\r\n                  )}\r\n                </button>\r\n                <h2>{nameSection}</h2>\r\n              </div>\r\n              <div className=\"header-info-user\">\r\n                <div className=\"hi-user-name-type\">\r\n                  <strong>{dataProfile.showName}</strong>\r\n                  <span>{dataProfile.userType}</span>\r\n                </div>\r\n                <Popover\r\n                  className=\"popover-list-notification\"\r\n                  placement=\"bottomRight\"\r\n                  title={\r\n                    <div className=\"title-notification-small\">\r\n                      Notificaciones\r\n                    </div>\r\n                  }\r\n                  content={\r\n                    <>\r\n                      <List\r\n                        size=\"small\"\r\n                        style={{\r\n                          width: 360,\r\n                          maxHeight: 400,\r\n                          overflowY: \"scroll\",\r\n                        }}\r\n                        dataSource={dataNotifications}\r\n                        renderItem={(item) => (\r\n                          <List.Item\r\n                            style={{ padding: \"0px 0px !important\" }}\r\n                            onClick={() => {\r\n                              handlerCallUpdateNotifications(\r\n                                item.idNotification\r\n                              );\r\n                            }}\r\n                          >\r\n                            <div\r\n                              className=\"title-body-description-1\"\r\n                              style={{\r\n                                background:\r\n                                  item.isRead === true\r\n                                    ? \"rgba(255,255,255,1)\"\r\n                                    : \"rgba(223, 144, 184, 0.2)\",\r\n                                cursor: \"pointer\",\r\n                              }}\r\n                            >\r\n                              <div className=\"section-circle-description\">\r\n                                <div\r\n                                  className=\"icon-notification\"\r\n                                  style={{\r\n                                    background:\r\n                                      item.isRead === true\r\n                                        ? \"#DF90B8\"\r\n                                        : \"var(--color-primary)\",\r\n                                  }}\r\n                                >\r\n                                  <img\r\n                                    width=\"25\"\r\n                                    src={arrayIconst[item.style]}\r\n                                    alt=\"icons-notification-homify\"\r\n                                  />\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"section-info-notification\">\r\n                                <div className=\"title-notification-child\">\r\n                                  <span>{item.subject}</span>\r\n                                  <span>{item.sentAtFormat}</span>\r\n                                </div>\r\n                                <div\r\n                                  dangerouslySetInnerHTML={{\r\n                                    __html:\r\n                                      isNil(item.content) === false\r\n                                        ? item.content\r\n                                        : \"\",\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </List.Item>\r\n                        )}\r\n                      />\r\n                      {notificationTopIndex !== -1 && (\r\n                        <div\r\n                          style={{ padding: \"5px 0px\", textAlign: \"center\" }}\r\n                        >\r\n                          <a\r\n                            onClick={() => {\r\n                              handlerCallGetNotifications(notificationTopIndex);\r\n                            }}\r\n                          >\r\n                            Mostrar más\r\n                          </a>\r\n                        </div>\r\n                      )}\r\n                    </>\r\n                  }\r\n                  trigger=\"click\"\r\n                >\r\n                  <button\r\n                    className=\"button-header\"\r\n                    style={{ position: \"relative\" }}\r\n                    onClick={() => {}}\r\n                  >\r\n                    <div\r\n                      className=\"notification-header\"\r\n                      style={{\r\n                        display: numberNotifications === 0 ? \"none\" : \"block\",\r\n                      }}\r\n                    >\r\n                      <span>\r\n                        {numberNotifications > 10 ? \"+10\" : numberNotifications}\r\n                      </span>\r\n                    </div>\r\n                    <img className=\"icon-header-1\" src={IconNotification} />\r\n                  </button>\r\n                </Popover>\r\n                <Dropdown\r\n                  overlay={menu}\r\n                  placement=\"bottomRight\"\r\n                  arrow\r\n                  trigger=\"click\"\r\n                >\r\n                  <button className=\"button-header\">\r\n                    {isNil(dataProfile.thumbnail) === false ? (\r\n                      <Avatar size={50} src={dataProfile.thumbnail} />\r\n                    ) : (\r\n                      <img className=\"icon-header-2\" src={IconProfile} />\r\n                    )}\r\n                  </button>\r\n                </Dropdown>\r\n              </div>\r\n            </Header>\r\n            <Suspense fallback={<Loading />}>\r\n              <Switch>\r\n                {routes.map((route) => {\r\n                  return (\r\n                    <Route\r\n                      history={history}\r\n                      key={route.id}\r\n                      path={route.path}\r\n                      exact={route.exact}\r\n                      name={route.name}\r\n                      render={(prop) => {\r\n                        if (authenticated === true) {\r\n                          return (\r\n                            <route.component {...prop} history={history} />\r\n                          );\r\n                        } else {\r\n                          return (\r\n                            <Redirect\r\n                              to={{\r\n                                pathname: \"/\",\r\n                                state: { from: props.location },\r\n                              }}\r\n                            />\r\n                          );\r\n                        }\r\n                      }}\r\n                    />\r\n                  );\r\n                })}\r\n              </Switch>\r\n            </Suspense>\r\n          </Layout>\r\n        </Layout>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n    dataProfileMenu: dataProfileMenu.dataProfileMenu,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callSetImageProfile: (data, id) => dispatch(callSetImageProfile(data, id)),\r\n  callUpdateNotifications: (data, id) =>\r\n    dispatch(callUpdateNotifications(data, id)),\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callGetNotifications: (data) => dispatch(callGetNotifications(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DefaultLayout);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomInput.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\section\\sectionChangeImage.jsx",["386","387","388","389","390","391","392","393","394","395","396","397","398","399","400"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx",["401","402","403"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx",["404","405","406","407","408","409","410","411","412","413","414","415"],"import React, { useEffect, useState } from \"react\";\r\nimport moment from \"moment\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  notification,\r\n  message,\r\n  Dropdown,\r\n  Menu,\r\n} from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport IconCalendar from \"../../assets/icons/Calendar.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconDanger from \"../../assets/icons/Danger.svg\";\r\nimport FileReport from \"../../assets/icons/FileReport.svg\";\r\nimport MessagesIcon from \"../../assets/icons/MessagesIcon.svg\";\r\nimport DocumentsIcon from \"../../assets/icons/DocumentsIcon.svg\";\r\nimport Arrow from \"../../assets/icons/Arrow.svg\";\r\nimport Tools from \"../../assets/icons/Tools.svg\";\r\nimport Transport from \"../../assets/icons/Transport.svg\";\r\nimport SectionContractAvailable from \"./sections/sectionContractAvailableOwner\";\r\nimport SectionDepositGuarantee from \"./sections/sectionDepositGuarantee\";\r\nimport FrontFunctions from \"../../utils/actions/frontFunctions\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport { API_CONSTANTS, HEADER } from \"../../utils/constants/apiConstants\";\r\nimport ENVIROMENT from \"../../utils/constants/enviroments\";\r\nimport {\r\n  callGetAllCustomerTenantDashboardById,\r\n  callSetContract,\r\n  callAddDocument,\r\n  callAddCommentContract,\r\n  callGetContract,\r\n  callGetContractComment,\r\n  callGetCustomerMessage,\r\n  callAddCustomerMessage,\r\n  callAddDocumentContractId,\r\n  callGetPaymentContract,\r\n  callGetPaymentTypes,\r\n  callGetAllProviders,\r\n  callAddRequestProviderForTenant,\r\n  callUpdateMovingDialog,\r\n} from \"../../utils/actions/actions\";\r\nimport { setDataUserProfile } from \"../../utils/dispatchs/userProfileDispatch\";\r\nimport SectionMessages from \"./sectionDocuments/sectionMessages\";\r\nimport SectionRegisterPayment from \"./sectionDocuments/sectionRegisterPayment\";\r\nimport CustomViewDocument from \"../../components/CustomViewDocument\";\r\nimport SectionRequestService from \"./sections/sectionRequestService\";\r\nimport CustomDialog from \"../../components/CustomDialog\";\r\nimport CustomContentActions from \"../../components/CustomContentActions\";\r\nimport SectionIncidenceReport from \"./sections/sectionIncidenceReport\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Tenant = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomerTenantById,\r\n    dataProfile,\r\n    callAddDocument,\r\n    callGetPaymentTypes,\r\n    callGetPaymentContract,\r\n    setDataUserProfile,\r\n    callSetContract,\r\n    callAddCommentContract,\r\n    callAddRequestProviderForTenant,\r\n    callGetContract,\r\n    callGetContractComment,\r\n    callGetAllProviders,\r\n    callGetCustomerMessage,\r\n    callAddCustomerMessage,\r\n    callAddDocumentContractId,\r\n    callUpdateMovingDialog,\r\n  } = props;\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isVisibleBannerMove, setIsVisibleBannerMove] = useState(false);\r\n  const [dataProviders, setDataProviders] = useState([]);\r\n  const [isVisibleRequestService, setIsVisibleRequestService] = useState(false);\r\n  const [dataDocument, setDataDocument] = useState({});\r\n  const [isVisibleModal, setIsVisibleModal] = useState(false);\r\n  const [dataPayments, setDataPayments] = useState([]);\r\n  const [isVisibleMessages, setIsVisibleMessages] = useState(false);\r\n  const [isVisiblePaymentRent, setIsVisiblePaymentRent] = useState(false);\r\n  const [isVisibleIncidence, setIsVisibleIncidence] = useState(false);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [dataGetContract, setDataGetContract] = useState([]);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [isModalVisiblePolicy, setIsModalVisiblePolicy] = useState(false);\r\n  const frontFunctions = new FrontFunctions();\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const args = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Antes de iniciar el formulario debes tener lista una identificación\r\n          oficial, tus últimos 3 comprobantes de ingresos y una carta de la\r\n          empresa donde trabajas que acredite desde cuando estás laborando en la\r\n          empresa. Adicional, necesitaras la escritura del inmueble que quedara\r\n          como garantía y los datos e identificación del Aval.\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            notification.destroy();\r\n            history.push(\"/websystem/typeform-user\");\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Ir al formulario</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{\r\n          fontFamily: \"Poppins\",\r\n          fontSize: \"12px\",\r\n          color: \"var(--color-primary)\",\r\n        }}\r\n      >\r\n        Solicitud de Investigación Persona Física con o sin Aval\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const argsv2 = {\r\n    description: (\r\n      <div style={{ fontFamily: \"Poppins\" }}>\r\n        <span style={{ fontSize: \"12px\" }}>\r\n          Buen dia <strong>Sebastian</strong>, estamos en espera del pago de tu{\" \"}\r\n          <strong>depósito en ganarantía</strong>.<br /> <br />\r\n          Si no puedes pagar el\r\n          <strong> depósito en ganarantía</strong> tenemos estas opciones para\r\n          ti\r\n        </span>\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => {\r\n            setIsModalVisiblePolicy(!isModalVisiblePolicy);\r\n            notification.destroy();\r\n          }}\r\n          className=\"button-action-primary\"\r\n          style={{ marginTop: \"25px\" }}\r\n        >\r\n          <span>Revisar opciones</span>\r\n        </button>\r\n      </div>\r\n    ),\r\n    message: (\r\n      <div\r\n        style={{\r\n          fontFamily: \"Poppins\",\r\n          fontSize: \"12px\",\r\n          color: \"var(--color-primary)\",\r\n        }}\r\n      >\r\n        Depósito en Garantia\r\n      </div>\r\n    ),\r\n    duration: 0,\r\n    style: { marginTop: \"4vw\" },\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCustomerMessage = async (data, data2) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddCustomerMessage({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data2,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      handlerCallGetCustomerMessage(data2);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentTypes = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPayments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallUpdateMovingDialog = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callUpdateMovingDialog({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCustomerTenantById = async () => {\r\n    const {\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idCustomerTenant,\r\n    } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerTenantById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenant(responseResult);\r\n      handlerCallGetCustomerMessage({\r\n        idContract: responseResult.idContract,\r\n        idCustomerTenant: responseResult.idCustomerTenant,\r\n        idCustomer: responseResult.idCustomer,\r\n      });\r\n      handlerCallGetAllPaymentTypes({\r\n        type: 1,\r\n        idContract: responseResult.idContract,\r\n        idCustomerTenant: responseResult.idCustomerTenant,\r\n      });\r\n      setIsVisibleBannerMove(\r\n        isEmpty(responseResult) === false &&\r\n          isNil(responseResult.showDialog) == false &&\r\n          responseResult.showDialog === 1\r\n          ? true\r\n          : false\r\n      );\r\n      if (\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.isTypeFormCompleted) === false &&\r\n        responseResult.isTypeFormCompleted === false\r\n      ) {\r\n        setDataUserProfile({\r\n          ...dataProfile,\r\n          idCustomerTenantTF: responseResult.idCustomerTenant,\r\n          idCustomerTF: responseResult.idCustomer,\r\n          idContract: responseResult.idContract,\r\n        });\r\n        notification.open(args);\r\n        //notification.open(argsv2);\r\n      } else {\r\n        handlerCallGetAllProviders(responseResult.idContract);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentContract = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callGetPaymentContract({\r\n        ...data,\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      handlerCallGetAllCustomerTenantById();\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddDocumentContractId = async (data, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddDocumentContractId(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallAddRequestProviderForTenant = async (data, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddRequestProviderForTenant(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetContract = async (data, name) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      if (data.download === false) {\r\n        const response = await callGetContract({\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        });\r\n        const responseResult =\r\n          isNil(response) === false &&\r\n          isNil(response.response) === false &&\r\n          isNil(response.response[0]) === false\r\n            ? response.response[0]\r\n            : {};\r\n        setDataGetContract(responseResult);\r\n        if (isEmpty(responseResult) === false && data.process === true) {\r\n          handlerCallAddDocumentContractId(\r\n            {\r\n              type: data.type,\r\n              idContract: responseResult.idContract,\r\n            },\r\n            responseResult.idDocument\r\n          );\r\n        }\r\n      } else {\r\n        const { token } = dataProfile;\r\n        const response = await fetch(\r\n          `${ENVIROMENT}${API_CONSTANTS.GET_CONTRACT}`,\r\n          {\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n              ...data,\r\n              idSystemUser,\r\n              idLoginHistory,\r\n            }),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n              \"Access-Control-Allow-Origin\": \"*\",\r\n              Authorization: `Bearer ${token}`,\r\n              \"Access-Control-Allow-Credentials\": true,\r\n            },\r\n          }\r\n        );\r\n        if (isNil(response.status) === false && response.status !== 200) {\r\n          throw isNil(response.statusText) === false ? response.statusText : \"\";\r\n        }\r\n        const label = `${name}_${moment().format(\"YYYYMMDD-HHmm\")}`;\r\n        const blob = await response.blob();\r\n        const link = document.createElement(\"a\");\r\n        link.className = \"download\";\r\n        link.download = `${label}.${\"docx\"}`;\r\n        link.href = URL.createObjectURL(blob);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        link.parentElement.removeChild(link);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, type) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: type.idPaymentType,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(data.originFileObj, dataDocument);\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      return Promise.resolve(documentId);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCommentContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callAddCommentContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu comentario se envio correctamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallSetContract = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callSetContract(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idContract\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu solicitud se procesó exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllProviders = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllProviders({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataProviders(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllCustomerTenantById();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <CustomDialog\r\n        isVisibleDialog={isVisibleBannerMove}\r\n        onClose={() => {\r\n          setIsVisibleBannerMove(!isVisibleBannerMove);\r\n        }}\r\n      >\r\n        <div className=\"banner-move-tenant\">\r\n          <h1>!Servicio de mudanza!</h1>\r\n          <span>\r\n            Por ser parte de Homify te ofrecemos un{\" \"}\r\n            <strong>¡Increíble Descuento!</strong> en servicios de Mudanza.\r\n          </span>\r\n          <img\r\n            width=\"350\"\r\n            src=\"https://homify-docs-users.s3.us-east-2.amazonaws.com/move_homify.png\"\r\n            alt=\"\"\r\n          />\r\n          <div className=\"two-action-buttons-banner\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={async () => {\r\n                setIsVisibleBannerMove(false);\r\n                await handlerCallUpdateMovingDialog({\r\n                  idCustomerTenant: dataTenant.idCustomerTenant,\r\n                  idContract: dataTenant.idContract,\r\n                });\r\n                handlerCallGetAllCustomerTenantById();\r\n              }}\r\n            >\r\n              <span>Ahora no</span>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setIsVisibleBannerMove(false);\r\n                setIsVisibleRequestService(true);\r\n              }}\r\n            >\r\n              <span>¡Me interesa!</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </CustomDialog>\r\n      <CustomViewDocument\r\n        isVisibleModal={isVisibleModal}\r\n        dataDocument={dataDocument}\r\n        onClose={() => {\r\n          setIsVisibleModal(false);\r\n        }}\r\n      />\r\n      <SectionRequestService\r\n        isVisibleModal={isVisibleRequestService}\r\n        dataProviders={dataProviders}\r\n        onSaveRequestService={async (data) => {\r\n          try {\r\n            await handlerCallAddRequestProviderForTenant({\r\n              ...data,\r\n              idContract: dataTenant.idContract,\r\n            });\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        frontFunctions={frontFunctions}\r\n        onClose={() => {\r\n          setIsVisibleRequestService(!isVisibleRequestService);\r\n        }}\r\n      />\r\n      <SectionContractAvailable\r\n        dataProfile={dataProfile}\r\n        isModalVisible={isModalVisible}\r\n        onClose={() => {\r\n          setIsModalVisible(!isModalVisible);\r\n        }}\r\n        dataGetContract={dataGetContract}\r\n        onAddCommentContract={(data) => {\r\n          handlerCallAddCommentContract(data);\r\n        }}\r\n        onVisualiceDocument={async (data) => {\r\n          try {\r\n            await handlerCallGetContract(data);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onDownloadDocument={async (data, name) => {\r\n          try {\r\n            await handlerCallGetContract(data, name);\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onAcceptContract={async (data) => {\r\n          try {\r\n            await handlerCallSetContract(data);\r\n          } catch (error) {}\r\n        }}\r\n        onFinishContractFlow={() => {\r\n          handlerCallGetAllCustomerTenantById();\r\n        }}\r\n      />\r\n      <SectionDepositGuarantee\r\n        isModalVisible={isModalVisiblePolicy}\r\n        onClose={() => {\r\n          setIsModalVisiblePolicy(!isModalVisiblePolicy);\r\n        }}\r\n        frontFunctions={frontFunctions}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Hola, {dataTenant.shortNameTenant}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataTenant.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"action-buttons-top\">\r\n            <div className=\"button_init_primary\"></div>\r\n            {dataTenant.canSignContract === true && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    handlerCallGetContract({\r\n                      process: false,\r\n                      url: null,\r\n                      download: false,\r\n                      idContract: dataTenant.idContract,\r\n                      idCustomerTenant: dataTenant.idCustomerTenant,\r\n                      idCustomer: dataTenant.idCustomer,\r\n                      type: 1,\r\n                    });\r\n                    setIsModalVisible(!isModalVisible);\r\n                  }}\r\n                >\r\n                  <span>¡Contrato Disponible!</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n            {dataTenant.canDeal === 1 && (\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setIsVisiblePaymentRent(!isVisiblePaymentRent);\r\n                    setIsVisibleMessages(false);\r\n                    setIsVisibleIncidence(false);\r\n                  }}\r\n                >\r\n                  <span>Pagar renta</span>\r\n                </button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconCalendar} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.nextPaymentAt}</h2>\r\n            <span>Fecha de próximo pago</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.currentRent}</h2>\r\n            <span>Monto de renta</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconDanger} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataTenant.interestAmount}</h2>\r\n            <span>Moratorios</span>\r\n          </div>\r\n        </div>\r\n        {dataTenant.canDeal === 1 && (\r\n          <div className=\"main-information-owner\">\r\n            <div className=\"title-cards\">\r\n              <span>Acciones</span>\r\n            </div>\r\n            <div className=\"section-information-actions\">\r\n              <div className=\"section-information-buttons\">\r\n                <div className=\"section-information-button-2\">\r\n                  <img src={Tools} height={62} alt=\"Reportar incidencia\" />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {}}\r\n                    className=\"button-action-primary\"\r\n                  >\r\n                    <span>Solicitar Servicios</span>\r\n                  </button>\r\n                </div>\r\n                {dataTenant.canRequestMove === 1 && (\r\n                  <div className=\"section-information-button-3\">\r\n                    <img src={Transport} alt=\"Solicitar mudanza\" height={62} />\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        setIsVisibleRequestService(!isVisibleRequestService);\r\n                      }}\r\n                      className=\"button-action-primary\"\r\n                    >\r\n                      <span>Solicitar mudanza</span>\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n        {isVisibleMessages === false &&\r\n          isVisiblePaymentRent === false &&\r\n          isVisibleIncidence === false && (\r\n            <div className=\"main-information-owner\">\r\n              <div className=\"title-cards flex-title-card\">\r\n                <span>Propietario</span>\r\n                <div className=\"button_init_secondary\">\r\n                  <button type=\"button\" onClick={() => {}}>\r\n                    <span>Reportar Propietario</span>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=\"section-information-actions\">\r\n                <div className=\"section-information-info\">\r\n                  <div className=\"section-information-data\">\r\n                    {isNil(dataTenant.profileThumbnail) === false ? (\r\n                      <Avatar size={50} src={dataTenant.profileThumbnail} />\r\n                    ) : (\r\n                      <Avatar size={50} icon={<UserOutlined />} />\r\n                    )}\r\n                    <div className=\"info-user\">\r\n                      <strong>{dataTenant.fullName}</strong>\r\n                      <Rate\r\n                        style={{\r\n                          fontSize: \"15px\",\r\n                          position: \"relative\",\r\n                          bottom: \"5px\",\r\n                        }}\r\n                        tooltips={[]}\r\n                        onChange={() => {}}\r\n                        value={dataTenant.ratingRate}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"section-information-button-1\">\r\n                    <img\r\n                      src={FileReport}\r\n                      height={62}\r\n                      alt=\"Reportar incidencia\"\r\n                    />\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        setIsVisibleIncidence(true);\r\n                      }}\r\n                      className=\"button-action-primary\"\r\n                    >\r\n                      <span>Incidencias</span>\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"section-information-buttons\">\r\n                  <div className=\"section-information-button-2\">\r\n                    <img\r\n                      src={MessagesIcon}\r\n                      height={62}\r\n                      alt=\"Reportar incidencia\"\r\n                    />\r\n                    <button\r\n                      type=\"button\"\r\n                      onClick={() => {\r\n                        setIsVisibleMessages(!isVisibleMessages);\r\n                      }}\r\n                      className=\"button-action-primary\"\r\n                    >\r\n                      <span>Enviar mensaje</span>\r\n                    </button>\r\n                  </div>\r\n                  <div className=\"section-information-button-3\">\r\n                    <img src={DocumentsIcon} alt=\"Incidencias\" height={62} />\r\n                    <Dropdown\r\n                      overlay={\r\n                        <Menu onClick={() => {}}>\r\n                          <Menu.Item key=\"0\">\r\n                            <a\r\n                              onClick={() => {\r\n                                if (\r\n                                  isNil(dataTenant.infoContractDocument) ===\r\n                                  false\r\n                                ) {\r\n                                  const parseData = JSON.parse(\r\n                                    dataTenant.infoContractDocument\r\n                                  );\r\n                                  setDataDocument(parseData[0]);\r\n                                  setIsVisibleModal(true);\r\n                                }\r\n                              }}\r\n                              style={{ marginRight: 10 }}\r\n                            >\r\n                              Contrato\r\n                            </a>\r\n                          </Menu.Item>\r\n                          <Menu.Item key=\"1\">\r\n                            <a\r\n                              onClick={() => {\r\n                                if (\r\n                                  isNil(dataTenant.infoPolicyDocument) === false\r\n                                ) {\r\n                                  const parseData = JSON.parse(\r\n                                    dataTenant.infoPolicyDocument\r\n                                  );\r\n                                  setDataDocument(parseData[0]);\r\n                                  setIsVisibleModal(true);\r\n                                }\r\n                              }}\r\n                              style={{ marginRight: 10 }}\r\n                            >\r\n                              Póliza\r\n                            </a>\r\n                          </Menu.Item>\r\n                          <Menu.Item key=\"2\">\r\n                            <a\r\n                              onClick={() => {\r\n                                if (\r\n                                  isNil(dataTenant.infoPaymentDocument) ===\r\n                                  false\r\n                                ) {\r\n                                  const parseData = JSON.parse(\r\n                                    dataTenant.infoPaymentDocument\r\n                                  );\r\n                                  setDataDocument(parseData[0]);\r\n                                  setIsVisibleModal(true);\r\n                                }\r\n                              }}\r\n                              style={{ marginRight: 10 }}\r\n                            >\r\n                              Pagarés\r\n                            </a>\r\n                          </Menu.Item>\r\n                        </Menu>\r\n                      }\r\n                      trigger={[\"click\"]}\r\n                    >\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {}}\r\n                        className=\"button-action-primary\"\r\n                      >\r\n                        <span>Ver documentos</span>\r\n                      </button>\r\n                    </Dropdown>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          )}\r\n        <CustomContentActions\r\n          onClick={() => {\r\n            setIsVisibleMessages(!isVisibleMessages);\r\n          }}\r\n          titleSection=\"Mensajes\"\r\n          isVisible={isVisibleMessages}\r\n        >\r\n          <SectionMessages\r\n            dataMessages={dataMessages}\r\n            getMoreCoincidences={() => {\r\n              const { idCustomerTF, idCustomerTenantTF } = dataProfile;\r\n              handlerCallGetCustomerMessage({\r\n                idContract: dataTenant.idContract,\r\n                idCustomerTenant: dataTenant.idCustomerTenant,\r\n                idCustomer: dataTenant.idCustomer,\r\n              });\r\n            }}\r\n            onSendMessages={(data) => {\r\n              handlerCallAddCustomerMessage(data, {\r\n                idContract: dataTenant.idContract,\r\n                idCustomerTenant: dataTenant.idCustomerTenant,\r\n                idCustomer: dataTenant.idCustomer,\r\n              });\r\n            }}\r\n          />\r\n        </CustomContentActions>\r\n        <CustomContentActions\r\n          onClick={() => {\r\n            setIsVisiblePaymentRent(!isVisiblePaymentRent);\r\n          }}\r\n          titleSection=\"Pagar renta\"\r\n          isVisible={isVisiblePaymentRent}\r\n        >\r\n          <SectionRegisterPayment\r\n            dataPayments={dataPayments}\r\n            spinVisible={spinVisible}\r\n            onGetDocuments={async (arrayDocument, data) => {\r\n              setSpinVisible(true);\r\n              const dataDocuments = await Promise.all(\r\n                arrayDocument.map((row) => {\r\n                  const item = handlerAddDocument(row, data);\r\n                  return item;\r\n                })\r\n              );\r\n              const parseDocument = dataDocuments.join();\r\n              const dataSend = {\r\n                ...data,\r\n                idContract: dataTenant.idContract,\r\n                idCustomerTenant: dataTenant.idCustomerTenant,\r\n                documents: parseDocument,\r\n              };\r\n              handlerCallGetAllPaymentContract(dataSend);\r\n            }}\r\n            onRegisterPayment={(data) => {}}\r\n          />\r\n        </CustomContentActions>\r\n        <CustomContentActions\r\n          onClick={() => {\r\n            setIsVisibleIncidence(!isVisibleIncidence);\r\n          }}\r\n          titleSection=\"Incidencias\"\r\n          isVisible={isVisibleIncidence}\r\n        >\r\n          <SectionIncidenceReport />\r\n        </CustomContentActions>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callUpdateMovingDialog: (data) => dispatch(callUpdateMovingDialog(data)),\r\n  callAddRequestProviderForTenant: (data) =>\r\n    dispatch(callAddRequestProviderForTenant(data)),\r\n  callGetAllProviders: (data) => dispatch(callGetAllProviders(data)),\r\n  callAddDocument: (file, data) => dispatch(callAddDocument(file, data)),\r\n  callGetPaymentContract: (data) => dispatch(callGetPaymentContract(data)),\r\n  callGetPaymentTypes: (data) => dispatch(callGetPaymentTypes(data)),\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  callSetContract: (data, id) => dispatch(callSetContract(data, id)),\r\n  callAddCommentContract: (data, id) =>\r\n    dispatch(callAddCommentContract(data, id)),\r\n  callGetContract: (data) => dispatch(callGetContract(data)),\r\n  callGetContractComment: (data) => dispatch(callGetContractComment(data)),\r\n  callGetAllCustomerTenantById: (data) =>\r\n    dispatch(callGetAllCustomerTenantDashboardById(data)),\r\n  callAddCustomerMessage: (data) => dispatch(callAddCustomerMessage(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n  callAddDocumentContractId: (data, id) =>\r\n    dispatch(callAddDocumentContractId(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Tenant);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\adviser.jsx",["416","417"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormOwner.jsx",["418","419","420"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administrator.jsx",["421","422","423","424","425","426"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\MakeScreen\\makeScreen.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx",["427","428","429","430","431"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Tabs, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport SectionDocuments from \"./sectionDocuments/sectionDocuments\";\r\nimport SectionInfoTenant from \"./sectionDocuments/sectionCardInformation\";\r\nimport SectionMessages from \"./sectionDocuments/sectionMessages\";\r\nimport SectionRegisterPayment from \"./sectionDocuments/sectionRegisterPayment\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetAllCustomerTenantById,\r\n  callGetPaymentTypes,\r\n  callGetPaymentContract,\r\n  callAddDocument,\r\n  callGetAllDocumentTypes,\r\n  callGetPaymentContractDocument,\r\n  callAddCustomerMessage,\r\n  callGetCustomerMessage,\r\n} from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\nconst { TabPane } = Tabs;\r\n\r\nconst TenantFromOwner = (props) => {\r\n  const {\r\n    dataProfile,\r\n    match,\r\n    callGetAllCustomerTenantById,\r\n    callGetPaymentTypes,\r\n    callGetPaymentContract,\r\n    callAddDocument,\r\n    callGetAllDocumentTypes,\r\n    callGetPaymentContractDocument,\r\n    callAddCustomerMessage,\r\n    callGetCustomerMessage,\r\n  } = props;\r\n  const { params } = match;\r\n  const idCustomerTenant = params.idCustomerTenant;\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataPayments, setDataPayments] = useState([]);\r\n  const [dataDocumentTypes, setDataDocumentTypes] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [dataDocumentsRepository, setDataDocumentsRepository] = useState([]);\r\n  const [idContractData, setIdContractData] = useState(null);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [idTopIndexDocuments, setIdTopIndexDocuments] = useState(-1);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n\r\n  const dotChange = useRef(null);\r\n  const contentStyle = {\r\n    height: \"160px\",\r\n    color: \"#fff\",\r\n    lineHeight: \"160px\",\r\n    textAlign: \"center\",\r\n    background: \"#364d79\",\r\n  };\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentTypes = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPayments(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllDocumentTypes = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllDocumentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentTypes(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetPaymentContractDocument = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentContractDocument({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        topIndex: idTopIndexDocuments,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentsRepository(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexDocuments(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCustomerTenantById = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerTenantById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenant(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdContractData(responseResult.idContract);\r\n        handlerCallGetAllPaymentTypes({\r\n          type: 1,\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n        handlerCallGetCustomerMessage({\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllPaymentContract = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callGetPaymentContract({\r\n        ...data,\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      handlerCallGetAllCustomerTenantById();\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, type) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: type.idPaymentType,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(data.originFileObj, dataDocument);\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      return Promise.resolve(documentId);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallAddCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      handlerCallGetCustomerMessage({\r\n        idContract: idContractData,\r\n        idCustomerTenant,\r\n      });\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllCustomerTenantById();\r\n    handlerCallGetAllDocumentTypes();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <SectionInfoTenant dataTenant={dataTenant} />\r\n        <div className=\"actions-information-tenant\">\r\n          <div className=\"tabs-tenant-information\">\r\n            <Tabs\r\n              defaultActiveKey=\"1\"\r\n              onChange={() => {}}\r\n              tabBarStyle={{ color: \"#A0A3BD\" }}\r\n              tabPosition=\"top\"\r\n            >\r\n              <TabPane tab=\"Registrar pago\" key=\"1\">\r\n                <SectionRegisterPayment\r\n                  dataPayments={dataPayments}\r\n                  spinVisible={spinVisible}\r\n                  onGetDocuments={async (arrayDocument, data) => {\r\n                    setSpinVisible(true);\r\n                    const dataDocuments = await Promise.all(\r\n                      arrayDocument.map((row) => {\r\n                        const item = handlerAddDocument(row, data);\r\n                        return item;\r\n                      })\r\n                    );\r\n                    const parseDocument = dataDocuments.join();\r\n                    const dataSend = {\r\n                      ...data,\r\n                      idCustomerTenant,\r\n                      idContract: idContractData,\r\n                      documents: parseDocument,\r\n                    };\r\n                    handlerCallGetAllPaymentContract(dataSend);\r\n                  }}\r\n                  onRegisterPayment={(data) => {}}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Documentos\" key=\"2\">\r\n                <SectionDocuments\r\n                  dataDocumentTypes={dataDocumentTypes}\r\n                  dataDocumentsRepository={dataDocumentsRepository}\r\n                  onSearchDocument={(data) => {\r\n                    handlerCallGetPaymentContractDocument(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Mensajes\" key=\"3\">\r\n                <SectionMessages\r\n                  dataMessages={dataMessages}\r\n                  getMoreCoincidences={() => {\r\n                    handlerCallGetCustomerMessage({\r\n                      idContract: idContractData,\r\n                      idCustomerTenant,\r\n                    });\r\n                  }}\r\n                  onSendMessages={(data) => {\r\n                    handlerCallAddCustomerMessage(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Reportar incidencia\" key=\"4\" />\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomerTenantById: (data) =>\r\n    dispatch(callGetAllCustomerTenantById(data)),\r\n  callGetPaymentTypes: (data) => dispatch(callGetPaymentTypes(data)),\r\n  callGetPaymentContract: (data) => dispatch(callGetPaymentContract(data)),\r\n  callAddDocument: (file, data) => dispatch(callAddDocument(file, data)),\r\n  callGetAllDocumentTypes: (data) => dispatch(callGetAllDocumentTypes(data)),\r\n  callGetPaymentContractDocument: (data) =>\r\n    dispatch(callGetPaymentContractDocument(data)),\r\n  callAddCustomerMessage: (data) => dispatch(callAddCustomerMessage(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TenantFromOwner);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx",["432","433","434","435","436","437","438"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailableOwner.jsx",["439","440","441"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx",["442","443","444","445"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx",["446","447","448","449","450"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx",["451","452","453","454","455","456","457"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx",["458","459","460"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx",["461"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUploadDocuments.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionUserDetailAdviser.jsx",["462","463","464"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenant.jsx",["465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUser.jsx",["497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionAddUsers.jsx",["514","515","516","517","518","519","520","521"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwner.jsx",["522","523","524","525","526","527"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChartPie.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionStatsChart.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js",["528","529","530","531","532","533","534","535"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\customFileUpload.jsx",["536"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx",["537","538","539","540","541","542","543","544"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx",["545","546"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx",["547","548","549","550","551"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx",["552","553"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx",["554","555","556","557","558","559","560"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx",["561","562"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx",["563","564","565","566"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionDepositGuarantee.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionCardOwner.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\sections\\sectionStatsChart.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx",["567","568"],"import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport Magnifier from \"react-magnifier\";\r\nimport { Modal, Spin, Upload, message, Progress } from \"antd\";\r\nimport { FileUnknownOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport Show from \"../../../assets/icons/Show.svg\";\r\nimport Delete from \"../../../assets/icons/Delete.svg\";\r\nimport {\r\n  callAddDocument,\r\n  callAddTypeFormDocument,\r\n} from \"../../../utils/actions/actions\";\r\nimport ENVIROMENT from \"../../../utils/constants/enviroments\";\r\nimport GLOBAL_CONSTANTS from \"../../../utils/constants/globalConstants\";\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst CustomFileUpload = (props) => {\r\n  const {\r\n    acceptFile,\r\n    typeDocument,\r\n    dataDocument,\r\n    callAddDocument,\r\n    callAddTypeFormDocument,\r\n    dataProfile,\r\n  } = props;\r\n  const [fileList, setFileList] = useState({});\r\n  const [preview, setPreview] = useState(null);\r\n  const [fileName, setFileName] = useState(null);\r\n  const [timeUpload, setTimeUpload] = useState(0);\r\n  const [previewVisible, setPreviewVisible] = useState(false);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [spinVisibleUpload, setSpinVisibleUpload] = useState(true);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const LoadingSpin = (\r\n    <div\r\n      style={{\r\n        top: \"20px\",\r\n        position: \"absolute\",\r\n        left: \"50px\",\r\n      }}\r\n    >\r\n      <Progress\r\n        type=\"circle\"\r\n        percent={isNil(timeUpload) === false ? timeUpload : 0}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  const beforeUpload = (file) => {\r\n    const isLt2M = file.size / 1024 / 1024 < 5;\r\n    if (!isLt2M) {\r\n      message.error(\"¡El archivo que intentas subir debe ser menor que 5MB!\");\r\n    }\r\n    return isLt2M;\r\n  };\r\n\r\n  const handlerAddTypeFormDocument = async (data, id) => {\r\n    try {\r\n      await callAddTypeFormDocument(data, id);\r\n      setSpinVisibleUpload(false);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"No se pudo asociar el documento al contrato indicado\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, infoDoc) => {\r\n    const {\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n      idCustomerTF,\r\n      idContract,\r\n      idCustomerTenantTF,\r\n    } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: infoDoc.idDocumentType,\r\n      idCustomer: idCustomerTF,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(\r\n        data.originFileObj,\r\n        dataDocument,\r\n        (percent) => {\r\n          setTimeUpload(percent);\r\n        }\r\n      );\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      await handlerAddTypeFormDocument(\r\n        {\r\n          idCustomer: idCustomerTF,\r\n          idTypeForm: infoDoc.idTypeForm,\r\n          idCustomerTenant: idCustomerTenantTF,\r\n          type: typeDocument,\r\n          idContract,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        documentId\r\n      );\r\n      setTimeout(() => {\r\n        setSpinVisible(false);\r\n      }, 3000);\r\n      showMessageStatusApi(\r\n        \"Documento subido exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"No se logro subir el archivo, intenta nuevamente o mas tarde\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Spin indicator={LoadingSpin} spinning={spinVisible}>\r\n      {/* {dataDocument.isRequired === true && (\r\n        <div\r\n          style={{\r\n            textAlign: \"center\",\r\n            color: \"var(--color-primary)\",\r\n            fontSize: 12,\r\n          }}\r\n        >\r\n          Documento obligatorio\r\n        </div>\r\n      )} */}\r\n      <div\r\n        className={`section-drop-document ${\r\n          (isNil(preview) === false ||\r\n            (isEmpty(dataDocument) === false &&\r\n              isNil(dataDocument.idDocument) === false)) &&\r\n          \"border-dashed-none\"\r\n        }`}\r\n      >\r\n        {isNil(preview) === true &&\r\n          isEmpty(dataDocument) === false &&\r\n          isNil(dataDocument.idDocument) === true && (\r\n            <Dragger\r\n              action=\"/\"\r\n              onChange={({ file }) => {\r\n                if (isNil(file.originFileObj) === false) {\r\n                  const reader = new FileReader();\r\n                  reader.readAsDataURL(file.originFileObj);\r\n                  reader.onload = (event) => {\r\n                    if (file.type !== \"application/pdf\" && file.type !== \"\") {\r\n                      setPreview(event.target.result);\r\n                    } else {\r\n                      setPreview(\"\");\r\n                    }\r\n                  };\r\n                  setFileList(file);\r\n                  setFileName(file.name);\r\n                }\r\n              }}\r\n              method=\"get\"\r\n              showUploadList={false}\r\n              accept={acceptFile}\r\n              beforeUpload={beforeUpload}\r\n            >\r\n              <span>\r\n                Arrastra tu documento\r\n                <br /> aqui o haz Clic\r\n              </span>\r\n            </Dragger>\r\n          )}\r\n        {isNil(preview) === false &&\r\n          isEmpty(dataDocument) === false &&\r\n          isNil(dataDocument.idDocument) === true && (\r\n            <div className=\"content-preview-document\">\r\n              <div className=\"screen-hover-action\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setPreviewVisible(!previewVisible);\r\n                  }}\r\n                >\r\n                  <img src={Show} alt=\"preview\" />\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setFileList({});\r\n                    setPreview(null);\r\n                    setFileName(null);\r\n                  }}\r\n                >\r\n                  <img src={Delete} alt=\"eliminar\" />\r\n                </button>\r\n              </div>\r\n              {isEmpty(preview) === true ? (\r\n                <FileUnknownOutlined style={{ fontSize: 100, color: \"grey\" }} />\r\n              ) : (\r\n                <img src={preview} alt=\"Preview\" />\r\n              )}\r\n            </div>\r\n          )}\r\n        {isEmpty(dataDocument) === false &&\r\n          isNil(dataDocument.idDocument) === false && (\r\n            <div className=\"content-preview-document\">\r\n              <div className=\"screen-hover-action\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setPreviewVisible(!previewVisible);\r\n                  }}\r\n                >\r\n                  <img src={Show} alt=\"preview\" />\r\n                </button>\r\n              </div>\r\n              {isNil(dataDocument.extension) === true ||\r\n              dataDocument.extension === \"docx\" ||\r\n              dataDocument.extension === \"pdf\" ? (\r\n                <FileUnknownOutlined style={{ fontSize: 100, color: \"grey\" }} />\r\n              ) : (\r\n                <img\r\n                  src={`${ENVIROMENT}/api/viewFile/${dataDocument.idDocument}/${dataDocument.bucketSource}`}\r\n                  alt=\"Preview\"\r\n                />\r\n              )}\r\n            </div>\r\n          )}\r\n        <Modal\r\n          visible={previewVisible}\r\n          title={\r\n            <div className=\"form-modal\">\r\n              <div className=\"title-head-modal\">\r\n                <button\r\n                  className=\"arrow-back-to\"\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setPreviewVisible(!previewVisible);\r\n                  }}\r\n                >\r\n                  <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                </button>\r\n                <h1>\r\n                  {isEmpty(dataDocument) === false &&\r\n                  isNil(dataDocument.idDocument) === false\r\n                    ? dataDocument.documentType\r\n                    : fileName}\r\n                </h1>\r\n              </div>\r\n            </div>\r\n          }\r\n          closable={false}\r\n          footer={null}\r\n          style={{ top: \"20px\" }}\r\n        >\r\n          {isNil(preview) === false &&\r\n            isEmpty(dataDocument) === false &&\r\n            isNil(dataDocument.idDocument) === true && (\r\n              <>\r\n                {isEmpty(preview) === true ? (\r\n                  <div style={{ textAlign: \"center\" }}>\r\n                    <FileUnknownOutlined\r\n                      style={{ fontSize: 100, color: \"grey\" }}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <Magnifier src={preview} />\r\n                )}\r\n              </>\r\n            )}\r\n\r\n          {isEmpty(dataDocument) === false &&\r\n            isNil(dataDocument.idDocument) === false && (\r\n              <>\r\n                {isNil(dataDocument.extension) === true ||\r\n                dataDocument.extension === \"docx\" ||\r\n                dataDocument.extension === \"pdf\" ? (\r\n                  <div style={{ textAlign: \"center\" }}>\r\n                    <FileUnknownOutlined\r\n                      style={{ fontSize: 100, color: \"grey\" }}\r\n                    />\r\n                  </div>\r\n                ) : (\r\n                  <Magnifier\r\n                    src={`${ENVIROMENT}/api/viewFile/${dataDocument.idDocument}/${dataDocument.bucketSource}`}\r\n                  />\r\n                )}\r\n              </>\r\n            )}\r\n        </Modal>\r\n      </div>\r\n      {isNil(preview) === false &&\r\n        isEmpty(dataDocument) === false &&\r\n        isNil(dataDocument.idDocument) === true &&\r\n        spinVisibleUpload === true && (\r\n          <div className=\"confirm-upload-document button_actions\">\r\n            <button\r\n              className=\"button_primary\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                if (\r\n                  isEmpty(dataDocument) === false &&\r\n                  isEmpty(fileList) === false\r\n                ) {\r\n                  setSpinVisible(true);\r\n                  handlerAddDocument(fileList, dataDocument);\r\n                }\r\n              }}\r\n            >\r\n              <span>\r\n                <i className=\"fa fa-upload\" /> Subir\r\n              </span>\r\n            </button>\r\n          </div>\r\n        )}\r\n    </Spin>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callAddDocument: (file, data, callback) =>\r\n    dispatch(callAddDocument(file, data, callback)),\r\n  callAddTypeFormDocument: (data, id) =>\r\n    dispatch(callAddTypeFormDocument(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CustomFileUpload);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customReference.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Leads\\leads.jsx",["569","570","571"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Adviser\\agents.jsx",["572","573","574","575","576","577"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Attorney\\attorney.jsx",["578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\administratorControlDesk.jsx",["599","600","601","602"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionCardOwnerControl.jsx",["603","604","605","606","607","608"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Admin\\sections\\sectionDetailUserTenantControl.jsx",["609","610","611","612","613","614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640","641","642","643","644","645"],"import React, { useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Drawer,\r\n  Collapse,\r\n  Menu,\r\n  Dropdown,\r\n  Button,\r\n  Popover,\r\n  Modal,\r\n  Select,\r\n  Radio,\r\n  Timeline,\r\n} from \"antd\";\r\nimport {\r\n  SyncOutlined,\r\n  EditOutlined,\r\n  CloseOutlined,\r\n  CheckOutlined,\r\n  CloseCircleFilled,\r\n  CheckCircleFilled,\r\n} from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Panel } = Collapse;\r\nconst { Option } = Select;\r\n\r\nconst SectionDetailUserTenant = (props) => {\r\n  const {\r\n    isDrawerVisible,\r\n    onClose,\r\n    dataDetailCustomerTenant,\r\n    dataDetailReferences,\r\n    dataHistory,\r\n    changeRolesCustomers,\r\n    onSendRatingUser,\r\n    onRedirectTo,\r\n    onDownloadDocumentById,\r\n    dataRelatioshipTypes,\r\n    dataReferenceStatus,\r\n    onSaveDataScore,\r\n    onCallHistoryData,\r\n  } = props;\r\n\r\n  const initialDataForm = {\r\n    currentTime: null,\r\n    currentTimeRange: null,\r\n    detailReference: null,\r\n    detailTenant: null,\r\n    emailAddress: null,\r\n    fullName: null,\r\n    idPersonalReference: null,\r\n    isRecommended: null,\r\n    observations: null,\r\n    personalReferenceStatus: null,\r\n    phoneNumber: null,\r\n    ratingNumber: null,\r\n    referenceType: null,\r\n    relationshipType: null,\r\n  };\r\n  const [valueCalification, setValueCalification] = useState({});\r\n  const [openPopover, setOpenPopover] = useState({});\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div className=\"site-description-item-profile-wrapper\">\r\n      <strong className=\"site-description-item-profile-p-label\">\r\n        {title}:\r\n      </strong>\r\n      <br />\r\n      {isNil(content) === false ? content : \"N/A\"}\r\n    </div>\r\n  );\r\n\r\n  const replaceUrl = (address) => {\r\n    let domainPath = \"https://www.google.com/maps/search/\";\r\n\r\n    if (isNil(address) === false) {\r\n      const replaceString = address.replaceAll(\" \", \"+\");\r\n      domainPath = domainPath + replaceString;\r\n    }\r\n    return (\r\n      <a href={domainPath} target=\"_blank\">\r\n        {address}\r\n      </a>\r\n    );\r\n  };\r\n\r\n  const menu = (row) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item key=\"0\">\r\n          <a\r\n            href={\r\n              isNil(row.phoneNumber) === false\r\n                ? `https://api.whatsapp.com/send?phone=52${row.phoneNumber}`\r\n                : \"#\"\r\n            }\r\n            target=\"_blank\"\r\n          >\r\n            Whatsapp\r\n          </a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"1\">\r\n          <a>Notificación</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\">\r\n          <a>Mensaje app</a>\r\n        </Menu.Item>\r\n        <Menu.Item key=\"3\">\r\n          <a>Correo</a>\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Drawer\r\n      width={500}\r\n      placement=\"right\"\r\n      closable={false}\r\n      onClose={onClose}\r\n      visible={isDrawerVisible}\r\n    >\r\n      <Modal\r\n        visible={isModalVisible}\r\n        closable={false}\r\n        footer={false}\r\n        style={{ top: 20 }}\r\n        width={600}\r\n      >\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setDataForm(initialDataForm);\r\n                setIsModalVisible(false);\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Información de Referencia {dataForm.index}</h1>\r\n          </div>\r\n          <div\r\n            className=\"main-form-information\"\r\n            style={{ fontFamily: \"Poppins\" }}\r\n          >\r\n            <Row>\r\n              <Col span={10} xs={{ span: 24 }} md={{ span: 10 }}>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title=\"Tipo de referencia\"\r\n                      content={dataForm.referenceType}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title=\"Nombre de la referencia\"\r\n                      content={dataForm.fullName}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title=\"Correo\"\r\n                      content={dataForm.emailAddress}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title=\"Teléfono\"\r\n                      content={\r\n                        isNil(dataForm.phoneNumber) === false ? (\r\n                          <a\r\n                            href={\r\n                              isNil(dataForm.phoneNumber) === false\r\n                                ? `https://api.whatsapp.com/send?phone=52${dataForm.phoneNumber}`\r\n                                : \"#\"\r\n                            }\r\n                            target=\"_blank\"\r\n                          >\r\n                            {dataForm.phoneNumber}\r\n                          </a>\r\n                        ) : (\r\n                          \"N/A\"\r\n                        )\r\n                      }\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <DescriptionItem\r\n                      title={dataForm.detailTenant}\r\n                      content={dataForm.detailReference}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              </Col>\r\n              <Col span={14} xs={{ span: 24 }} md={{ span: 14 }}>\r\n                <p style={{ textAlign: \"center\" }}>Historial de cambios</p>\r\n                <div style={{ height: 260, overflowY: \"scroll\" }}>\r\n                  {isEmpty(dataHistory) === false ? (\r\n                    <Timeline>\r\n                      {dataHistory.map((row) => {\r\n                        return (\r\n                          <Timeline.Item>\r\n                            <div>\r\n                              <p style={{ margin: \"0px\" }}>\r\n                                <strong>{row.createdByUser}</strong> |{\" \"}\r\n                                <strong>{row.createdAt} hrs</strong>\r\n                              </p>\r\n                              <div>\r\n                                <div\r\n                                  style={{ color: \"black !important\" }}\r\n                                  dangerouslySetInnerHTML={{\r\n                                    __html:\r\n                                      isNil(row.description) === false\r\n                                        ? row.description\r\n                                        : \"\",\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                            </div>\r\n                          </Timeline.Item>\r\n                        );\r\n                      })}\r\n                    </Timeline>\r\n                  ) : (\r\n                    <strong\r\n                      style={{ display: \"flex\", justifyContent: \"center\" }}\r\n                    >\r\n                      Aún no hay un historial\r\n                    </strong>\r\n                  )}\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <p>Ingresa la información de la referencia</p>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <Select\r\n                  placeholder=\"Parentesco\"\r\n                  showSearch\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idRelationshipType: value,\r\n                      idRelationshipTypeText: option.children,\r\n                    });\r\n                  }}\r\n                  value={dataForm.idRelationshipType}\r\n                >\r\n                  {isEmpty(dataRelatioshipTypes) === false &&\r\n                    dataRelatioshipTypes.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idRelationshipType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={9} xs={{ span: 24 }} md={{ span: 9 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={\r\n                    isNil(dataForm.currentTime) === false\r\n                      ? dataForm.currentTime\r\n                      : \"\"\r\n                  }\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Tiempo de conocerlo\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      currentTime: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n              <Col span={5} xs={{ span: 24 }} md={{ span: 5 }}>\r\n                <Select\r\n                  placeholder=\"Periodo\"\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      currentTimeRange: value,\r\n                      currentTimeRangeText: option.children,\r\n                    });\r\n                  }}\r\n                  value={dataForm.currentTimeRange}\r\n                >\r\n                  <Option value={\"M\"} onClick={() => {}}>\r\n                    Meses\r\n                  </Option>\r\n                  <Option value={\"Y\"} onClick={() => {}}>\r\n                    Años\r\n                  </Option>\r\n                </Select>\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <div className=\"option-select-radio\">\r\n                  <span\r\n                    style={{\r\n                      color: \"var(--color-primary)\",\r\n                      fontWeight: \"bold\",\r\n                    }}\r\n                  >\r\n                    ¿Lo recomendaría?\r\n                  </span>\r\n                  <Radio.Group\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        isRecommended: e.target.value,\r\n                      });\r\n                    }}\r\n                    value={\r\n                      dataForm.isRecommended === 1 ||\r\n                      dataForm.isRecommended === true\r\n                        ? 1\r\n                        : isNil(dataForm.isRecommended) === false\r\n                        ? 0\r\n                        : null\r\n                    }\r\n                  >\r\n                    <Radio value={1}>Si</Radio>\r\n                    <Radio value={0}>No</Radio>\r\n                  </Radio.Group>\r\n                </div>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                <Select\r\n                  placeholder=\"Estatus\"\r\n                  onChange={(value, option) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idPersonalReferenceStatus: value,\r\n                    });\r\n                  }}\r\n                  value={dataForm.idPersonalReferenceStatus}\r\n                >\r\n                  {isEmpty(dataReferenceStatus) === false &&\r\n                    dataReferenceStatus.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idPersonalReferenceStatus}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n              <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n                <NumberFormat\r\n                  id={null}\r\n                  customInput={Input}\r\n                  thousandSeparator=\",\"\r\n                  decimalSeparator=\".\"\r\n                  decimalPrecision={2}\r\n                  allowNegative={false}\r\n                  prefix=\"\"\r\n                  suffix=\"\"\r\n                  value={\r\n                    isNil(dataForm.ratingNumber) === false ? dataForm.ratingNumber : \"\"\r\n                  }\r\n                  className=\"inputLogin\"\r\n                  floatingLabelText=\"\"\r\n                  isVisible\r\n                  toBlock={false}\r\n                  disable={false}\r\n                  placeholder=\"Score 0-5\"\r\n                  onValueChange={(values) => {\r\n                    const { formattedValue, value, floatValue } = values;\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      ratingNumber: floatValue,\r\n                    });\r\n                  }}\r\n                  onClick={(event) => {}}\r\n                  onFocus={(event) => {}}\r\n                  onBlur={(event) => {}}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                <textarea\r\n                  className=\"textarea-form-modal ant-input\"\r\n                  placeholder=\"Observaciones\"\r\n                  value={\r\n                    isNil(dataForm.observations) === false\r\n                      ? dataForm.observations\r\n                      : \"\"\r\n                  }\r\n                  maxlength=\"1000\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      observations: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={async () => {\r\n                try {\r\n                  await onSaveDataScore(\r\n                    dataForm,\r\n                    dataDetailCustomerTenant[0].idContract\r\n                  );\r\n                  setIsModalVisible(false);\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <span>Guardar</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Modal>\r\n      <div className=\"content-infomation-drawer\">\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n                setIsModalVisible(false);\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Detalle de Inquilino</h1>\r\n          </div>\r\n        </div>\r\n        <Collapse defaultActiveKey={[\"1\"]} ghost>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Información general</h3>}\r\n            key=\"1\"\r\n          >\r\n            {dataDetailCustomerTenant.length === 2 && (\r\n              <Row>\r\n                <Col span={20} xs={{ span: 24 }} md={{ span: 20 }}>\r\n                  <strong>Cambiar Roles Inquilino-Obligado Solidario</strong>\r\n                </Col>\r\n                <Col span={4} xs={{ span: 24 }} md={{ span: 4 }}>\r\n                  <Button\r\n                    type=\"primary\"\r\n                    shape=\"round\"\r\n                    icon={<SyncOutlined />}\r\n                    onClick={() => {\r\n                      changeRolesCustomers(\r\n                        dataDetailCustomerTenant[0].idContract\r\n                      );\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n            )}\r\n            <div\r\n              className=\"ant-divider ant-divider-horizontal\"\r\n              role=\"separator\"\r\n            />\r\n\r\n            {isEmpty(dataDetailCustomerTenant) === false &&\r\n              dataDetailCustomerTenant.map((row) => {\r\n                const catalogProperties =\r\n                  isNil(row.typeFormProperties) === false\r\n                    ? JSON.parse(row.typeFormProperties)\r\n                    : [];\r\n                return (\r\n                  <>\r\n                    <h3>\r\n                      {row.isMain === true ? \"Inquilino\" : \"Obligado Solidario\"}\r\n                    </h3>\r\n                    <Row>\r\n                      <Col span={13} xs={{ span: 24 }} md={{ span: 13 }}>\r\n                        <strong>Resultado de investigación</strong>\r\n                        <Popover\r\n                          content={\r\n                            <>\r\n                              <Row>\r\n                                <Col span={24}>\r\n                                  <NumberFormat\r\n                                    id={null}\r\n                                    customInput={Input}\r\n                                    thousandSeparator=\",\"\r\n                                    decimalSeparator=\".\"\r\n                                    decimalPrecision={2}\r\n                                    allowNegative={false}\r\n                                    prefix=\"\"\r\n                                    suffix=\"\"\r\n                                    value={\r\n                                      isNil(\r\n                                        valueCalification[row.idCustomerTenant]\r\n                                      ) === false\r\n                                        ? valueCalification[\r\n                                            row.idCustomerTenant\r\n                                          ]\r\n                                        : row.ratingNumber\r\n                                    }\r\n                                    className=\"inputLogin\"\r\n                                    floatingLabelText=\"\"\r\n                                    isVisible\r\n                                    toBlock={false}\r\n                                    disable={false}\r\n                                    placeholder=\"Calificación\"\r\n                                    onValueChange={(values) => {\r\n                                      const {\r\n                                        formattedValue,\r\n                                        value,\r\n                                        floatValue,\r\n                                      } = values;\r\n                                      setValueCalification({\r\n                                        ...valueCalification,\r\n                                        [row.idCustomerTenant]: floatValue,\r\n                                      });\r\n                                    }}\r\n                                    onClick={(event) => {}}\r\n                                    onFocus={(event) => {}}\r\n                                    onBlur={(event) => {}}\r\n                                  />\r\n                                </Col>\r\n                              </Row>\r\n                              <div\r\n                                className=\"ant-divider ant-divider-horizontal\"\r\n                                role=\"separator\"\r\n                              />\r\n                              <Row>\r\n                                <Col span={11}>\r\n                                  <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    icon={<CloseOutlined />}\r\n                                    size=\"small\"\r\n                                    danger\r\n                                    onClick={() => {\r\n                                      onSendRatingUser({\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: null,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        idPolicyStatus: null,\r\n                                        rating:\r\n                                          isNil(\r\n                                            valueCalification[\r\n                                              row.idCustomerTenant\r\n                                            ]\r\n                                          ) === false\r\n                                            ? valueCalification[\r\n                                                row.idCustomerTenant\r\n                                              ]\r\n                                            : row.ratingNumber,\r\n                                        isApproved: false,\r\n                                      });\r\n                                      setOpenPopover({\r\n                                        [row.idCustomerTenant]:\r\n                                          isNil(\r\n                                            openPopover[row.idCustomerTenant]\r\n                                          ) === false\r\n                                            ? !openPopover[row.idCustomerTenant]\r\n                                            : false,\r\n                                      });\r\n                                    }}\r\n                                  >\r\n                                    Rechazada\r\n                                  </Button>\r\n                                </Col>\r\n                                <Col span={2} />\r\n                                <Col span={11}>\r\n                                  <Button\r\n                                    type=\"primary\"\r\n                                    shape=\"round\"\r\n                                    icon={<CheckOutlined />}\r\n                                    size=\"small\"\r\n                                    className=\"color-green\"\r\n                                    onClick={() => {\r\n                                      onSendRatingUser({\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: null,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        idPolicyStatus: null,\r\n                                        rating:\r\n                                          isNil(\r\n                                            valueCalification[\r\n                                              row.idCustomerTenant\r\n                                            ]\r\n                                          ) === false\r\n                                            ? valueCalification[\r\n                                                row.idCustomerTenant\r\n                                              ]\r\n                                            : row.ratingNumber,\r\n                                        isApproved: true,\r\n                                      });\r\n                                      setOpenPopover({\r\n                                        [row.idCustomerTenant]:\r\n                                          isNil(\r\n                                            openPopover[row.idCustomerTenant]\r\n                                          ) === false\r\n                                            ? !openPopover[row.idCustomerTenant]\r\n                                            : false,\r\n                                      });\r\n                                    }}\r\n                                  >\r\n                                    Aprobada\r\n                                  </Button>\r\n                                </Col>\r\n                              </Row>\r\n                            </>\r\n                          }\r\n                          title={\r\n                            <div>\r\n                              <span>Resultado definitivo</span>\r\n                              <button\r\n                                type=\"button\"\r\n                                onClick={() => {\r\n                                  setOpenPopover({\r\n                                    [row.idCustomerTenant]:\r\n                                      isNil(\r\n                                        openPopover[row.idCustomerTenant]\r\n                                      ) === false\r\n                                        ? !openPopover[row.idCustomerTenant]\r\n                                        : false,\r\n                                  });\r\n                                }}\r\n                                style={{\r\n                                  marginLeft: 5,\r\n                                  background: \"transparent\",\r\n                                  border: \"none\",\r\n                                }}\r\n                              >\r\n                                <i className=\"fa fa-times\" />\r\n                              </button>\r\n                            </div>\r\n                          }\r\n                          trigger=\"click\"\r\n                          visible={\r\n                            isNil(openPopover[row.idCustomerTenant]) === false\r\n                              ? openPopover[row.idCustomerTenant]\r\n                              : false\r\n                          }\r\n                        >\r\n                          <Button\r\n                            type=\"primary\"\r\n                            shape=\"round\"\r\n                            icon={<EditOutlined />}\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                              setOpenPopover({\r\n                                [row.idCustomerTenant]:\r\n                                  isNil(openPopover[row.idCustomerTenant]) ===\r\n                                  false\r\n                                    ? !openPopover[row.idCustomerTenant]\r\n                                    : true,\r\n                              });\r\n                            }}\r\n                          >\r\n                            Asignar\r\n                          </Button>\r\n                        </Popover>\r\n                      </Col>\r\n                      <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                        <DescriptionItem\r\n                          title=\"Calificación 0-5\"\r\n                          content={\r\n                            isNil(row.rating) === false ? row.rating : \"N/A\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Nombre completo\"\r\n                          content={\r\n                            isNil(row.fullName) === false ? row.fullName : \"N/A\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={24}>\r\n                        <DescriptionItem\r\n                          title=\"Correo\"\r\n                          content={\r\n                            isNil(row.emailAddress) === false\r\n                              ? row.emailAddress\r\n                              : \"N/A\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Teléfono\"\r\n                          content={\r\n                            isNil(row.phoneNumber) === false\r\n                              ? row.phoneNumber\r\n                              : \"N/A\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Tipo de cliente\"\r\n                          content={\r\n                            isNil(row.customerType) === false\r\n                              ? row.customerType\r\n                              : \"N/A\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Ocupación\"\r\n                          content={\r\n                            isNil(row.occupationActivity) === false\r\n                              ? row.occupationActivity\r\n                              : \"N/A\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Salario mensual\"\r\n                          content={\r\n                            isNil(row.currentSalary) === false\r\n                              ? row.currentSalary\r\n                              : \"N/A\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"RFC\"\r\n                          content={isNil(row.taxId) === false ? row.taxId : \"N/A\"}\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"CURP\"\r\n                          content={\r\n                            isNil(row.citizenId) === false ? row.citizenId : \"N/A\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={24}>\r\n                        <DescriptionItem\r\n                          title=\"Dirección\"\r\n                          content={\r\n                            isNil(row.fullAddress) === false\r\n                              ? replaceUrl(row.fullAddress)\r\n                              : \"N/A\"\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Enviar mensaje\"\r\n                          content={\r\n                            <Dropdown overlay={menu(row)} trigger={[\"click\"]}>\r\n                              <a>Enviar</a>\r\n                            </Dropdown>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"TypeForm\"\r\n                          content={\r\n                            <Dropdown\r\n                              overlay={\r\n                                <Menu\r\n                                  onClick={(value) => {\r\n                                    onRedirectTo(\r\n                                      value.key,\r\n                                      row.idCustomer,\r\n                                      row.idContract,\r\n                                      row.idCustomerTenant\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  {isEmpty(catalogProperties) === false &&\r\n                                    catalogProperties.map((rowMap) => {\r\n                                      return (\r\n                                        <Menu.Item\r\n                                          key={`${rowMap.idStepIn}`}\r\n                                          style={{\r\n                                            display: \"flex\",\r\n                                            alignItems: \"center\",\r\n                                            justifyContent: \"space-between\",\r\n                                          }}\r\n                                        >\r\n                                          <a style={{ marginRight: 2 }}>\r\n                                            {rowMap.stepIn}\r\n                                          </a>\r\n                                          {rowMap.isCompleted === true ? (\r\n                                            <CheckCircleFilled\r\n                                              style={{ color: \"green\" }}\r\n                                            />\r\n                                          ) : (\r\n                                            <CloseCircleFilled\r\n                                              style={{ color: \"red\" }}\r\n                                            />\r\n                                          )}\r\n                                        </Menu.Item>\r\n                                      );\r\n                                    })}\r\n                                </Menu>\r\n                              }\r\n                              trigger={[\"click\"]}\r\n                            >\r\n                              <a>Ver</a>\r\n                            </Dropdown>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                    {isNil(row.hasEndorsement) === false &&\r\n                      row.hasEndorsement === true &&\r\n                      row.isMain === true && (\r\n                        <>\r\n                          <h3>Fiador</h3>\r\n                          <Row>\r\n                            <Col span={15} xs={{ span: 24 }} md={{ span: 15 }}>\r\n                              <DescriptionItem\r\n                                title=\"Nombre completo\"\r\n                                content={row.endorsementFullName}\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                              <DescriptionItem\r\n                                title=\"Correo\"\r\n                                content={row.endorsementEmailAddress}\r\n                              />\r\n                            </Col>\r\n                            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                              <DescriptionItem\r\n                                title=\"Teléfono\"\r\n                                content={\r\n                                  <a\r\n                                    href={\r\n                                      isNil(row.endorsementPhoneNumber) ===\r\n                                      false\r\n                                        ? `https://api.whatsapp.com/send?phone=52${row.endorsementPhoneNumber}`\r\n                                        : \"#\"\r\n                                    }\r\n                                    target=\"_blank\"\r\n                                  >\r\n                                    {row.endorsementPhoneNumber}\r\n                                  </a>\r\n                                }\r\n                              />\r\n                            </Col>\r\n                          </Row>\r\n                        </>\r\n                      )}\r\n                  </>\r\n                );\r\n              })}\r\n          </Panel>\r\n          <Panel header={<h3 role=\"title-section\">Referencias</h3>} key=\"2\">\r\n            {isEmpty(dataDetailReferences) === false &&\r\n              dataDetailReferences.map((row, index) => {\r\n                return (\r\n                  <>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Nombre\"\r\n                          content={`${row.fullName} ${row.detailTenant}`}\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Tipo de referencia\"\r\n                          content={row.referenceType}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Correo\"\r\n                          content={row.emailAddress}\r\n                        />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Teléfono\"\r\n                          content={\r\n                            <a\r\n                              href={\r\n                                isNil(row.phoneNumber) === false\r\n                                  ? `https://api.whatsapp.com/send?phone=52${row.phoneNumber}`\r\n                                  : \"#\"\r\n                              }\r\n                              target=\"_blank\"\r\n                            >\r\n                              {row.phoneNumber}\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem title=\"Score\" content={row.rating} />\r\n                      </Col>\r\n                      <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                        <DescriptionItem\r\n                          title=\"Formulario\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                if (row.canBeEvaluated === true) {\r\n                                  onCallHistoryData(row);\r\n                                  setDataForm({ ...row, index: index + 1 });\r\n                                  setIsModalVisible(true);\r\n                                }\r\n                              }}\r\n                            >\r\n                              {row.canBeEvaluated === true\r\n                                ? \"Asignar un score\"\r\n                                : \"No puede ser evaluado\"}\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n          </Panel>\r\n          <Panel\r\n            header={<h3 role=\"title-section\">Documentos personales</h3>}\r\n            key=\"3\"\r\n          >\r\n            {isEmpty(dataDetailCustomerTenant) === false &&\r\n              dataDetailCustomerTenant.map((row) => {\r\n                return (\r\n                  <>\r\n                    <h3>\r\n                      {row.isMain === true ? \"Inquilino\" : \"Obligado Solidario\"}\r\n                    </h3>\r\n                    <Row>\r\n                      <Col span={8}>\r\n                        <DescriptionItem\r\n                          title=\"Selfie\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 5,\r\n                                  },\r\n                                  `Selfie_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      {row.hasINECustomerTenant === 1 ||\r\n                      row.hasINECustomerTenant === true ? (\r\n                        <>\r\n                          <Col span={8}>\r\n                            <DescriptionItem\r\n                              title=\"Ine frontal\"\r\n                              content={\r\n                                <a\r\n                                  onClick={() => {\r\n                                    onDownloadDocumentById(\r\n                                      {\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: row.idCustomer,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        type: 6,\r\n                                      },\r\n                                      `Identificacion1_${row.idContract}`\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  Descargar\r\n                                </a>\r\n                              }\r\n                            />\r\n                          </Col>\r\n                          <Col span={8}>\r\n                            <DescriptionItem\r\n                              title=\"Ine vuelta\"\r\n                              content={\r\n                                <a\r\n                                  onClick={() => {\r\n                                    onDownloadDocumentById(\r\n                                      {\r\n                                        idContract: row.idContract,\r\n                                        idCustomer: row.idCustomer,\r\n                                        idCustomerTenant: row.idCustomerTenant,\r\n                                        type: 7,\r\n                                      },\r\n                                      `Identificacion2_${row.idContract}`\r\n                                    );\r\n                                  }}\r\n                                >\r\n                                  Descargar\r\n                                </a>\r\n                              }\r\n                            />\r\n                          </Col>\r\n                        </>\r\n                      ) : (\r\n                        <Col span={16}>\r\n                          <DescriptionItem\r\n                            title=\"Identificación oficial\"\r\n                            content={\r\n                              <a\r\n                                onClick={() => {\r\n                                  onDownloadDocumentById(\r\n                                    {\r\n                                      idContract: row.idContract,\r\n                                      idCustomer: row.idCustomer,\r\n                                      idCustomerTenant: row.idCustomerTenant,\r\n                                      type: 6,\r\n                                    },\r\n                                    `Identificacion1_${row.idContract}`\r\n                                  );\r\n                                }}\r\n                              >\r\n                                Descargar\r\n                              </a>\r\n                            }\r\n                          />\r\n                        </Col>\r\n                      )}\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={8}>\r\n                        <DescriptionItem\r\n                          title=\"Carta laboral\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 8,\r\n                                  },\r\n                                  `Carta_Laboral_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12}>\r\n                        <DescriptionItem\r\n                          title=\"Comprobante de ingreso 1\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 9,\r\n                                  },\r\n                                  `Comprobante_1_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col span={12}>\r\n                        <DescriptionItem\r\n                          title=\"Comprobante de ingreso 2\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 10,\r\n                                  },\r\n                                  `Comprobante_2_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                      <Col span={12}>\r\n                        <DescriptionItem\r\n                          title=\"Comprobante de ingreso 3\"\r\n                          content={\r\n                            <a\r\n                              onClick={() => {\r\n                                onDownloadDocumentById(\r\n                                  {\r\n                                    idContract: row.idContract,\r\n                                    idCustomer: row.idCustomer,\r\n                                    idCustomerTenant: row.idCustomerTenant,\r\n                                    type: 11,\r\n                                  },\r\n                                  `Comprobante_3_${row.idContract}`\r\n                                );\r\n                              }}\r\n                            >\r\n                              Descargar\r\n                            </a>\r\n                          }\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n\r\n                    {isNil(row.hasEndorsement) === false &&\r\n                      row.hasEndorsement === true &&\r\n                      row.isMain === true && (\r\n                        <>\r\n                          <div\r\n                            className=\"ant-divider ant-divider-horizontal\"\r\n                            role=\"separator\"\r\n                          />\r\n                          <h3>Fiador</h3>\r\n                          <Row>\r\n                            <Col span={8}>\r\n                              <DescriptionItem\r\n                                title=\"Escrituras\"\r\n                                content={\r\n                                  <a\r\n                                    onClick={() => {\r\n                                      onDownloadDocumentById(\r\n                                        {\r\n                                          idContract: row.idContract,\r\n                                          idCustomer: row.idCustomer,\r\n                                          idCustomerTenant:\r\n                                            row.idCustomerTenant,\r\n                                          type: 12,\r\n                                        },\r\n                                        `Escrituras_${row.idContract}`\r\n                                      );\r\n                                    }}\r\n                                  >\r\n                                    Descargar\r\n                                  </a>\r\n                                }\r\n                              />\r\n                            </Col>\r\n                            {row.hasINEEndorsement === 1 ||\r\n                            row.hasINEEndorsement === true ? (\r\n                              <>\r\n                                <Col span={8}>\r\n                                  <DescriptionItem\r\n                                    title=\"Ine frontal\"\r\n                                    content={\r\n                                      <a\r\n                                        onClick={() => {\r\n                                          onDownloadDocumentById(\r\n                                            {\r\n                                              idContract: row.idContract,\r\n                                              idCustomer: row.idCustomer,\r\n                                              idCustomerTenant:\r\n                                                row.idCustomerTenant,\r\n                                              type: 13,\r\n                                            },\r\n                                            `Identificacion1_${row.idContract}`\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        Descargar\r\n                                      </a>\r\n                                    }\r\n                                  />\r\n                                </Col>\r\n                                <Col span={8}>\r\n                                  <DescriptionItem\r\n                                    title=\"Ine vuelta\"\r\n                                    content={\r\n                                      <a\r\n                                        onClick={() => {\r\n                                          onDownloadDocumentById(\r\n                                            {\r\n                                              idContract: row.idContract,\r\n                                              idCustomer: row.idCustomer,\r\n                                              idCustomerTenant:\r\n                                                row.idCustomerTenant,\r\n                                              type: 14,\r\n                                            },\r\n                                            `Identificacion1_${row.idContract}`\r\n                                          );\r\n                                        }}\r\n                                      >\r\n                                        Descargar\r\n                                      </a>\r\n                                    }\r\n                                  />\r\n                                </Col>\r\n                              </>\r\n                            ) : (\r\n                              <Col span={16}>\r\n                                <DescriptionItem\r\n                                  title=\"Identificación oficial\"\r\n                                  content={\r\n                                    <a\r\n                                      onClick={() => {\r\n                                        onDownloadDocumentById(\r\n                                          {\r\n                                            idContract: row.idContract,\r\n                                            idCustomer: row.idCustomer,\r\n                                            idCustomerTenant:\r\n                                              row.idCustomerTenant,\r\n                                            type: 13,\r\n                                          },\r\n                                          `Identificacion1_${row.idContract}`\r\n                                        );\r\n                                      }}\r\n                                    >\r\n                                      Descargar\r\n                                    </a>\r\n                                  }\r\n                                />\r\n                              </Col>\r\n                            )}\r\n                          </Row>\r\n                        </>\r\n                      )}\r\n                    <div\r\n                      className=\"ant-divider ant-divider-horizontal\"\r\n                      role=\"separator\"\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n          </Panel>\r\n        </Collapse>\r\n      </div>\r\n    </Drawer>\r\n  );\r\n};\r\n\r\nexport default SectionDetailUserTenant;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomViewDocument.jsx",["646","647"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviromentSocket.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Providers\\providers.jsx",["648","649","650","651","652","653","654"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Table, Tag, Menu, Dropdown, Button, message } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetAllProvidersCoincidences,\r\n  callGetAllCollaborators,\r\n  callGetAllProviderTypes,\r\n  callGetAllCollaboratorTypes,\r\n  callGetAllProviderPaymentForm,\r\n  callGetPolicies,\r\n  callSetProvider,\r\n  callGetProviderById,\r\n} from \"../../utils/actions/actions\";\r\nimport SectionAddProvider from \"./sections/sectionAddProvider\";\r\nimport SectionDetailProvider from \"./sections/sectionDetailProvider\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Providers = (props) => {\r\n  const {\r\n    callGetAllProvidersCoincidences,\r\n    callGetAllCollaborators,\r\n    callGetAllProviderTypes,\r\n    callGetAllCollaboratorTypes,\r\n    callGetAllProviderPaymentForm,\r\n    callSetProvider,\r\n    callGetPolicies,\r\n    callGetProviderById,\r\n    dataProfile,\r\n  } = props;\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [expandedRowKey, setExpandedRowKey] = useState([]);\r\n  const [dataProviderType, setDataProviderType] = useState([]);\r\n  const [dataProviderById, setDataProviderById] = useState({});\r\n  const [dataPaymentForm, setDataPaymentForm] = useState([]);\r\n  const [dataCollaboratorType, setDataCollaboratorType] = useState([]);\r\n  const [dataPolicies, setDataPolicies] = useState([]);\r\n  const [\r\n    dataCoincidencesCollaborator,\r\n    setDataCoincidencesCollaborator,\r\n  ] = useState([]);\r\n  const [openAddProvider, setOpenAddProvider] = useState(false);\r\n  const [openDetailProvider, setOpenDetailProvider] = useState(false);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetProviderById = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetProviderById({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idProvider: id,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataProviderById(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllProvidersCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllProvidersCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCollaborators = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCollaborators({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idProvider: data.idProvider,\r\n        idCollaboratorType: null,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidencesCollaborator(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllProviderTypes = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllProviderTypes({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataProviderType(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllProviderPaymentForm = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllProviderPaymentForm({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPaymentForm(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCollaboratorTypes = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCollaboratorTypes({\r\n        idProvider: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCollaboratorType(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetPolicies = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPolicies({\r\n        idCustomer: null,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 4,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataPolicies(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallSetProvider = async (data) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callSetProvider(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        data.idProvider\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu solicitud se procesó exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllProvidersCoincidences();\r\n    handlerCallGetAllProviderTypes();\r\n    handlerCallGetAllProviderPaymentForm();\r\n    handlerCallGetPolicies();\r\n  }, []);\r\n\r\n  const columnsCollaborator = [\r\n    {\r\n      title: \"Colaborador\",\r\n      dataIndex: \"collaboratorType\",\r\n      key: \"collaboratorType\",\r\n    },\r\n    { title: \"Nombre\", dataIndex: \"fullName\", key: \"fullName\" },\r\n    { title: \"Teléfono\", dataIndex: \"phoneNumber\", key: \"phoneNumber\" },\r\n    { title: \"Correo\", dataIndex: \"emailAddress\", key: \"emailAddress\" },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Tipo de proveedor\",\r\n      dataIndex: \"providerType\",\r\n      key: \"providerType\",\r\n      render: (text, record) => (\r\n        <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <a\r\n            onClick={() => {\r\n              handlerCallGetProviderById(record.idProvider);\r\n              handlerCallGetAllCollaboratorTypes(record.idProvider);\r\n              setOpenDetailProvider(!openDetailProvider);\r\n            }}\r\n            style={{ marginRight: \"5px\" }}\r\n          >\r\n            {text}\r\n          </a>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Proveedor\",\r\n      dataIndex: \"provider\",\r\n      key: \"provider\",\r\n      width: 300,\r\n    },\r\n    {\r\n      title: \"Teléfono\",\r\n      dataIndex: \"phoneNumber\",\r\n      key: \"phoneNumber\",\r\n    },\r\n    {\r\n      title: \"Correo\",\r\n      dataIndex: \"emailAddress\",\r\n      key: \"emailAddress\",\r\n    },\r\n    {\r\n      title: \"Forma de pago\",\r\n      dataIndex: \"providerPaymentForm\",\r\n      key: \"providerPaymentForm\",\r\n    },\r\n    {\r\n      title: \"RFC\",\r\n      dataIndex: \"taxId\",\r\n      key: \"taxId\",\r\n    },\r\n    {\r\n      title: \"Último servicio programado\",\r\n      dataIndex: \"lastAssignment\",\r\n      key: \"lastAssignment\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Content>\r\n      <SectionDetailProvider\r\n        isModalVisible={openDetailProvider}\r\n        dataProviderById={dataProviderById}\r\n        onSelectProvider={(id) => {\r\n          handlerCallGetAllCollaboratorTypes(id);\r\n        }}\r\n        onSaveProvider={async (data) => {\r\n          try {\r\n            await handlerCallSetProvider(data);\r\n            handlerCallGetAllProvidersCoincidences();\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        dataPolicies={dataPolicies}\r\n        dataProviderType={dataProviderType}\r\n        dataPaymentForm={dataPaymentForm}\r\n        dataCollaboratorType={dataCollaboratorType}\r\n        onClose={() => {\r\n          setOpenDetailProvider(!openDetailProvider);\r\n        }}\r\n      />\r\n      <SectionAddProvider\r\n        isModalVisible={openAddProvider}\r\n        onSelectProvider={(id) => {\r\n          handlerCallGetAllCollaboratorTypes(id);\r\n        }}\r\n        onSaveProvider={async (data) => {\r\n          try {\r\n            await handlerCallSetProvider(data);\r\n            handlerCallGetAllProvidersCoincidences();\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        dataPolicies={dataPolicies}\r\n        dataProviderType={dataProviderType}\r\n        dataPaymentForm={dataPaymentForm}\r\n        dataCollaboratorType={dataCollaboratorType}\r\n        onClose={() => {\r\n          setOpenAddProvider(!openAddProvider);\r\n        }}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"main-information-user-admin\">\r\n          <div className=\"renter-card-information total-width\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Proveedores</span>\r\n              <div className=\"button_init_primary\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    setOpenAddProvider(true);\r\n                  }}\r\n                >\r\n                  <span>Agregar</span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n            <div className=\"section-information-renters\">\r\n              <Table\r\n                columns={columns}\r\n                dataSource={dataCoincidences}\r\n                className=\"table-users-hfy\"\r\n                size=\"small\"\r\n                bordered\r\n                expandable={{\r\n                  expandedRowRender: () => {\r\n                    return (\r\n                      <Table\r\n                        columns={columnsCollaborator}\r\n                        dataSource={dataCoincidencesCollaborator}\r\n                        pagination={false}\r\n                      />\r\n                    );\r\n                  },\r\n                }}\r\n                scroll={{ x: 1500 }}\r\n                expandedRowKeys={expandedRowKey}\r\n                onExpand={(expanded, row) => {\r\n                  const keys = [];\r\n                  if (expanded === true) {\r\n                    keys.push(row.key);\r\n                    handlerCallGetAllCollaborators({ ...row });\r\n                  }\r\n                  setExpandedRowKey(keys);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetPolicies: (data) => dispatch(callGetPolicies(data)),\r\n  callGetAllProviderTypes: (data) => dispatch(callGetAllProviderTypes(data)),\r\n  callGetAllCollaboratorTypes: (data) =>\r\n    dispatch(callGetAllCollaboratorTypes(data)),\r\n  callGetAllProviderPaymentForm: (data) =>\r\n    dispatch(callGetAllProviderPaymentForm(data)),\r\n  callGetAllCollaborators: (data) => dispatch(callGetAllCollaborators(data)),\r\n  callGetAllProvidersCoincidences: (data) =>\r\n    dispatch(callGetAllProvidersCoincidences(data)),\r\n  callGetProviderById: (data) => dispatch(callGetProviderById(data)),\r\n  callSetProvider: (data, id) => dispatch(callSetProvider(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Providers);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\RequestServices\\requestServices.jsx",["655","656","657","658","659","660","661","662","663","664","665","666","667","668"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Table, Tag, Menu, Dropdown, Button, message } from \"antd\";\r\nimport { EyeTwoTone, EyeInvisibleOutlined } from \"@ant-design/icons\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport GLOBAL_CONSTANTS from \"../../utils/constants/globalConstants\";\r\nimport {\r\n  callGetAllRequestProvidersCoincidences,\r\n  callGetAllCollaborators,\r\n  callGetAllRequestProviderStatus,\r\n  callGetAllCollaboratorTypes,\r\n  callGetAllProviderPaymentForm,\r\n  callGetPolicies,\r\n  callUpdateRequestProvider,\r\n  callGetAllProviders,\r\n  callGetRequestProviderById,\r\n} from \"../../utils/actions/actions\";\r\nimport SectionDetailRequest from \"./sections/sectionDetailRequest\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst RequestServices = (props) => {\r\n  const {\r\n    callGetAllRequestProvidersCoincidences,\r\n    callGetAllCollaborators,\r\n    callGetAllRequestProviderStatus,\r\n    callGetAllCollaboratorTypes,\r\n    callGetAllProviderPaymentForm,\r\n    callUpdateRequestProvider,\r\n    callGetPolicies,\r\n    callGetRequestProviderById,\r\n    callGetAllProviders,\r\n    dataProfile,\r\n  } = props;\r\n  const [dataCoincidences, setDataCoincidences] = useState([]);\r\n  const [dataRequestStatus, setDataRequestStatus] = useState([]);\r\n  const [dataProviderById, setDataProviderById] = useState({});\r\n  const [dataPaymentForm, setDataPaymentForm] = useState([]);\r\n  const [dataProviders, setDataProviders] = useState([]);\r\n  const [dataCollaboratorType, setDataCollaboratorType] = useState([]);\r\n  const [dataPolicies, setDataPolicies] = useState([]);\r\n  const [dataCollaborator, setDataCollaborator] = useState([]);\r\n  const [openAddProvider, setOpenAddProvider] = useState(false);\r\n  const [openDetailRequest, setOpenDetailRequest] = useState(false);\r\n\r\n  const showMessageStatusApi = (text, status) => {\r\n    switch (status) {\r\n      case \"SUCCESS\":\r\n        message.success(text);\r\n        break;\r\n      case \"ERROR\":\r\n        message.error(text);\r\n        break;\r\n      case \"WARNING\":\r\n        message.warning(text);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const handlerCallGetProviderById = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetRequestProviderById({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idRequestForProvider: id,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataProviderById(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllRequestProvidersCoincidences = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllRequestProvidersCoincidences({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: 0,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCoincidences(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCollaborators = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCollaborators({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idProvider: id,\r\n        idCollaboratorType: null,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCollaborator(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllRequestProviderStatus = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllRequestProviderStatus({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataRequestStatus(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllProviderPaymentForm = async () => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllProviderPaymentForm({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPaymentForm(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllCollaboratorTypes = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCollaboratorTypes({\r\n        idProvider: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataCollaboratorType(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallGetAllProviders = async (id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllProviders({\r\n        idContract: id,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataProviders(responseResult);\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n    }\r\n  };\r\n\r\n  const handlerCallUpdateRequestProvider = async (data, id) => {\r\n    const { idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callUpdateRequestProvider(\r\n        {\r\n          ...data,\r\n          idSystemUser,\r\n          idLoginHistory,\r\n        },\r\n        id\r\n      );\r\n      showMessageStatusApi(\r\n        \"Tu solicitud se procesó exitosamente\",\r\n        GLOBAL_CONSTANTS.STATUS_API.SUCCESS\r\n      );\r\n    } catch (error) {\r\n      showMessageStatusApi(\r\n        isNil(error) === false\r\n          ? error\r\n          : \"Error en el sistema, no se pudo ejecutar la petición\",\r\n        GLOBAL_CONSTANTS.STATUS_API.ERROR\r\n      );\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllRequestProvidersCoincidences();\r\n    handlerCallGetAllProviderPaymentForm();\r\n    handlerCallGetAllRequestProviderStatus();\r\n  }, []);\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Contrato\",\r\n      dataIndex: \"hfInvoice\",\r\n      key: \"hfInvoice\",\r\n    },\r\n    {\r\n      title: \"Tipo de proveedor\",\r\n      dataIndex: \"provider\",\r\n      key: \"provider\",\r\n      width: 300,\r\n    },\r\n\r\n    {\r\n      title: \"Fecha de Solicitud\",\r\n      dataIndex: \"requestedAt\",\r\n      key: \"requestedAt\",\r\n    },\r\n    {\r\n      title: \"Estatus\",\r\n      dataIndex: \"requestForProviderStatus\",\r\n      key: \"requestForProviderStatus\",\r\n    },\r\n    {\r\n      title: \"Detalle\",\r\n      dataIndex: \"canEdit\",\r\n      key: \"canEdit\",\r\n      render: (text, record) => (\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            cursor: text === true ? \"pointer\" : \"none\",\r\n          }}\r\n          onClick={() => {\r\n            if (text === true) {\r\n              handlerCallGetProviderById(record.idRequestForProvider);\r\n              handlerCallGetAllProviders(record.idContract);\r\n              handlerCallGetAllCollaborators(record.idProvider);\r\n              setOpenDetailRequest(!openDetailRequest);\r\n            }\r\n          }}\r\n        >\r\n          {text === true ? <EyeTwoTone /> : <EyeInvisibleOutlined />}\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Content>\r\n      <SectionDetailRequest\r\n        isModalVisible={openDetailRequest}\r\n        dataProviders={dataProviders}\r\n        dataProviderById={dataProviderById}\r\n        dataCollaborator={dataCollaborator}\r\n        dataRequestStatus={dataRequestStatus}\r\n        onSaveRequestProvider={async (data, id) => {\r\n          try {\r\n            await handlerCallUpdateRequestProvider(data, id);\r\n            handlerCallGetAllRequestProvidersCoincidences();\r\n          } catch (error) {\r\n            throw error;\r\n          }\r\n        }}\r\n        onClose={() => {\r\n          setOpenDetailRequest(false);\r\n        }}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"main-information-user-admin\">\r\n          <div className=\"renter-card-information total-width\">\r\n            <div className=\"title-cards flex-title-card\">\r\n              <span>Solicitudes</span>\r\n            </div>\r\n            <div className=\"section-information-renters\">\r\n              <Table\r\n                columns={columns}\r\n                dataSource={dataCoincidences}\r\n                className=\"table-users-hfy\"\r\n                size=\"small\"\r\n                bordered\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetPolicies: (data) => dispatch(callGetPolicies(data)),\r\n  callGetAllProviders: (data) => dispatch(callGetAllProviders(data)),\r\n  callGetAllRequestProviderStatus: (data) =>\r\n    dispatch(callGetAllRequestProviderStatus(data)),\r\n  callGetAllCollaboratorTypes: (data) =>\r\n    dispatch(callGetAllCollaboratorTypes(data)),\r\n  callGetAllProviderPaymentForm: (data) =>\r\n    dispatch(callGetAllProviderPaymentForm(data)),\r\n  callGetAllCollaborators: (data) => dispatch(callGetAllCollaborators(data)),\r\n  callGetAllRequestProvidersCoincidences: (data) =>\r\n    dispatch(callGetAllRequestProvidersCoincidences(data)),\r\n  callGetRequestProviderById: (data) =>\r\n    dispatch(callGetRequestProviderById(data)),\r\n  callUpdateRequestProvider: (data, id) =>\r\n    dispatch(callUpdateRequestProvider(data, id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(RequestServices);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionIncidenceReport.jsx",["669"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { Row, Col, Select, Input } from \"antd\";\r\nimport PicturesWall from \"../sectionDocuments/customUploadFile\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionIncidenceReport = (props) => {\r\n  const { dataIncidence } = props;\r\n  const [fileList, setFileList] = useState([]);\r\n  const [fileList1, setFileList1] = useState([]);\r\n  const [fileList2, setFileList2] = useState([]);\r\n  const [isVisibleAddReport, setIsVisibleAddReport] = useState(false);\r\n\r\n  const handleChange = ({ fileList }) => {\r\n    setFileList(fileList);\r\n  };\r\n\r\n  const handleChange1 = ({ fileList }) => {\r\n    setFileList1(fileList);\r\n  };\r\n  const handleChange2 = ({ fileList }) => {\r\n    setFileList2(fileList);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setIsVisibleAddReport(false);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"main-content-tabs\">\r\n      {isVisibleAddReport === false && (\r\n        <Row>\r\n          <div className=\"two-action-buttons-banner\" style={{ marginTop: 25 }}>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setIsVisibleAddReport(true);\r\n              }}\r\n            >\r\n              <span>Reportar Incidencia</span>\r\n            </button>\r\n          </div>\r\n        </Row>\r\n      )}\r\n      {isVisibleAddReport === true && (\r\n        <>\r\n          <Row style={{ marginBottom: 25 }}>\r\n            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n              <div style={{ padding: \"0px 25px\", marginBottom: 20 }}>\r\n                <Select\r\n                  placeholder=\"Tipo de incidencia\"\r\n                  style={{ width: \"100%\" }}\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                  }}\r\n                >\r\n                  {isEmpty(dataIncidence) === false &&\r\n                    dataIncidence.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idPaymentType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.paymentType}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </div>\r\n            </Col>\r\n            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n              <div style={{ padding: \"0px 25px\" }}>\r\n                <Input\r\n                  style={{ borderRadius: \"8px\" }}\r\n                  value={\"\"}\r\n                  placeholder={\"Otro tipo de incidencia\"}\r\n                  onChange={(e) => {}}\r\n                />\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n              <div\r\n                className=\"section-type-messages-fixed\"\r\n                style={{\r\n                  minHeight: 170,\r\n                  padding: \"0px 25px\",\r\n                  marginBottom: 20,\r\n                }}\r\n              >\r\n                <div\r\n                  className=\"section-type-messages\"\r\n                  style={{ minHeight: 160 }}\r\n                >\r\n                  <div className=\"text-header\">Descripción</div>\r\n                  <textarea\r\n                    style={{\r\n                      outline: \"none\",\r\n                      border: \"none\",\r\n                      width: \"100%\",\r\n                      minHeight: 160,\r\n                    }}\r\n                    value={\"\"}\r\n                    maxlength=\"200\"\r\n                    onChange={(e) => {}}\r\n                  />\r\n                </div>\r\n              </div>\r\n            </Col>\r\n            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n              <div style={{ padding: \"0px 25px\" }}>\r\n                <div\r\n                  className=\"section-type-messages\"\r\n                  style={{ width: \"100%\" }}\r\n                >\r\n                  <div className=\"text-header\">Evidencia</div>\r\n                  <div className=\"section-upload-files\">\r\n                    <div className=\"section-upload-file\">\r\n                      <PicturesWall\r\n                        fileList={fileList}\r\n                        handleChange={handleChange}\r\n                      />\r\n                    </div>\r\n                    <div className=\"section-upload-file\">\r\n                      <PicturesWall\r\n                        handleChange={handleChange1}\r\n                        fileList={fileList1}\r\n                      />\r\n                    </div>\r\n                    <div className=\"section-upload-file\">\r\n                      <PicturesWall\r\n                        handleChange={handleChange2}\r\n                        fileList={fileList2}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <div\r\n              className=\"two-action-buttons-banner\"\r\n              style={{ marginTop: 25 }}\r\n            >\r\n              <button type=\"button\" onClick={() => {}}>\r\n                <span>Reportar Incidencia</span>\r\n              </button>\r\n            </div>\r\n          </Row>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default SectionIncidenceReport;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomDialog.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionRequestService.jsx",["670","671","672","673","674","675"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n  Button,\r\n  DatePicker,\r\n} from \"antd\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionRequestService = (props) => {\r\n  const {\r\n    isVisibleModal,\r\n    onClose,\r\n    dataProviders,\r\n    frontFunctions,\r\n    onSaveRequestService,\r\n  } = props;\r\n  const initialState = {\r\n    idProvider: null,\r\n    scheduleDate: null,\r\n    budgeAmount: null,\r\n  };\r\n\r\n  const [dataForm, setDataForm] = useState(initialState);\r\n  const [dataTC, setDataTC] = useState(\"\");\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isVisibleModal}\r\n      closable={false}\r\n      footer={false}\r\n    >\r\n      <div className=\"form-modal\">\r\n        <div className=\"title-head-modal\">\r\n          <button\r\n            className=\"arrow-back-to\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onClose();\r\n              setDataTC(\"\");\r\n            }}\r\n          >\r\n            <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n          <h1>Solicitar Mudanza</h1>\r\n        </div>\r\n        <div className=\"main-form-information\">\r\n          <p>Selecciona un Proveedor</p>\r\n          <Row>\r\n            <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n              <Select\r\n                placeholder=\"Proveedor\"\r\n                value={dataForm.idProvider}\r\n                onChange={(value, option) => {\r\n                  const onClickValue = option.onClick();\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    idProvider: value,\r\n                    budgeAmount: onClickValue.budgeAmount,\r\n                  });\r\n                  setDataTC(onClickValue.tc);\r\n                }}\r\n              >\r\n                {isEmpty(dataProviders) === false &&\r\n                  dataProviders.map((row) => {\r\n                    return (\r\n                      <Option\r\n                        value={row.idProvider}\r\n                        onClick={() => {\r\n                          return row;\r\n                        }}\r\n                      >\r\n                        {row.text}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          <p>Ingresa la fecha y hora de la mudanza o servicio</p>\r\n          <Row>\r\n            <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n              <DatePicker\r\n                value={\r\n                  isNil(dataForm.scheduleDate) === false\r\n                    ? moment(dataForm.scheduleDate, \"YYYY-MM-DDTHH:mm:ss\")\r\n                    : null\r\n                }\r\n                placeholder=\"Programado para\"\r\n                onChange={(momentFormat, date) => {\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    scheduleDate: moment(momentFormat).format(\r\n                      \"YYYY-MM-DDTHH:mm:ss\"\r\n                    ),\r\n                  });\r\n                }}\r\n                showTime={{\r\n                  defaultValue: moment(\"00:00:00\", \"HH:mm:ss\"),\r\n                }}\r\n                format=\"DD MMMM YYYY HH:mm\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <p>Costo del Servicio</p>\r\n          <div\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"flex-end\",\r\n              justifyContent: \"center\",\r\n              marginBottom: 20,\r\n            }}\r\n          >\r\n            <h1 style={{ margin: 0 }}>\r\n              {isNil(dataForm.budgeAmount) === false\r\n                ? frontFunctions.parseFormatCurrency(dataForm.budgeAmount, 2)\r\n                : \"$0.00\"}\r\n            </h1>\r\n            <strong style={{ marginBottom: 5, marginLeft: 5 }}>MXN</strong>\r\n          </div>\r\n          {isEmpty(dataTC) === false && (\r\n            <div\r\n              style={{\r\n                margin: \"20px 0px\",\r\n                maxHeight: \"250px\",\r\n                overflowY: \"scroll\",\r\n                fontSize: 12,\r\n                fontFamily: \"Poppins\",\r\n              }}\r\n              dangerouslySetInnerHTML={{\r\n                __html: dataTC,\r\n              }}\r\n            />\r\n          )}\r\n\r\n          <div className=\"two-action-buttons\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n                setDataTC(\"\");\r\n                setDataForm(initialState);\r\n              }}\r\n            >\r\n              <span>Cancelar</span>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={async () => {\r\n                try {\r\n                  await onSaveRequestService(dataForm);\r\n                  onClose();\r\n                  setDataTC(\"\");\r\n                  setDataForm(initialState);\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <span>Solicitar</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionRequestService;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\components\\CustomContentActions.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Providers\\sections\\sectionAddProvider.jsx",["676","677","678","679","680","681","682","683","684"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Modal, Input, Row, Col, Select, Spin, Tooltip, Radio } from \"antd\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAddProvider = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    dataProviderType,\r\n    dataPaymentForm,\r\n    dataPolicies,\r\n    dataCollaboratorType,\r\n    onSelectProvider,\r\n    onSaveProvider,\r\n  } = props;\r\n  const initialDataForm = {\r\n    idProvider: null,\r\n    idProviderType: null,\r\n    idProviderPaymentForm: null,\r\n    provider: null,\r\n    taxId: null,\r\n    phoneNumber: null,\r\n    emailAddress: null,\r\n    budgeAmount: null,\r\n    providerBudgeInPolicy: [],\r\n    collaborator: [],\r\n    isActive: null,\r\n  };\r\n\r\n  const initialDataFormCollaborator = {\r\n    idProvider: null,\r\n    idCollaborator: null,\r\n    idCollaboratorType: null,\r\n    collaboratorType: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    emailAddress: null,\r\n    isActive: null,\r\n  };\r\n\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [dataFormPolicy, setDataFormPolicy] = useState({});\r\n  const [dataFormCollaborator, setDataFormCollaborator] = useState(\r\n    initialDataFormCollaborator\r\n  );\r\n  const [isCollaboratorType, setIsCollaboratorType] = useState(false);\r\n  const [isRequiresPolicy, setIsRequiresPolicy] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataPolicies) === false) {\r\n      const newObjectArray = {};\r\n      dataPolicies.forEach((element) => {\r\n        newObjectArray[element.idPolicy] = {\r\n          idPolicy: element.idPolicy,\r\n          budgeAmount: null,\r\n          idProvider: null,\r\n          isActive: null,\r\n        };\r\n      });\r\n      setDataFormPolicy(newObjectArray);\r\n    }\r\n  }, [dataPolicies]);\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n    >\r\n      <div className=\"form-modal\">\r\n        <div className=\"title-head-modal\">\r\n          <button\r\n            className=\"arrow-back-to\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setDataForm(initialDataForm);\r\n              setDataFormCollaborator(initialDataFormCollaborator);\r\n              setIsCollaboratorType(false);\r\n              setIsRequiresPolicy(false);\r\n              onClose();\r\n            }}\r\n          >\r\n            <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n          <h1>\r\n            {isCollaboratorType === false\r\n              ? \"Agregar proveedor\"\r\n              : \"Agregar colaborador\"}\r\n          </h1>\r\n        </div>\r\n        <div className=\"main-form-information\">\r\n          {isCollaboratorType === false && (\r\n            <>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Select\r\n                    placeholder=\"Tipo de proveedor\"\r\n                    value={dataForm.idProviderType}\r\n                    onChange={(value, option) => {\r\n                      setDataForm({ ...dataForm, idProviderType: value });\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataProviderType) === false &&\r\n                      dataProviderType.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idProviderType}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.text}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Select\r\n                    placeholder=\"Forma de pago\"\r\n                    value={dataForm.idProviderPaymentForm}\r\n                    onChange={(value, option) => {\r\n                      const optionClick = option.onClick();\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        idProviderPaymentForm: value,\r\n                      });\r\n                      setIsRequiresPolicy(optionClick.requiresPolicy);\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataPaymentForm) === false &&\r\n                      dataPaymentForm.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idProviderPaymentForm}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.text}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.provider}\r\n                    placeholder={\"Nombre de proveedor\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, provider: e.target.value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.taxId}\r\n                    placeholder={\"RFC\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, taxId: e.target.value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.phoneNumber}\r\n                    placeholder={\"Teléfono\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, phoneNumber: e.target.value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.emailAddress}\r\n                    placeholder={\"Correo\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        emailAddress: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <p>Costos</p>\r\n              {isRequiresPolicy === false && (\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <NumberFormat\r\n                      id={null}\r\n                      customInput={Input}\r\n                      thousandSeparator=\",\"\r\n                      decimalSeparator=\".\"\r\n                      decimalPrecision={2}\r\n                      allowNegative={false}\r\n                      prefix=\"$\"\r\n                      suffix=\"\"\r\n                      value={dataForm.budgeAmount}\r\n                      className=\"inputLogin\"\r\n                      floatingLabelText=\"\"\r\n                      isVisible\r\n                      toBlock={false}\r\n                      disable={false}\r\n                      placeholder=\"Costo del servicio\"\r\n                      onValueChange={(values) => {\r\n                        const { formattedValue, value, floatValue } = values;\r\n                        setDataForm({ ...dataForm, budgeAmount: floatValue });\r\n                      }}\r\n                      onClick={(event) => {}}\r\n                      onFocus={(event) => {}}\r\n                      onBlur={(event) => {}}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n              {isRequiresPolicy === true && (\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <table className=\"table-add-provider\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Póliza</th>\r\n                          <th>Monto</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {isEmpty(dataPolicies) === false &&\r\n                          dataPolicies.map((row, index) => {\r\n                            return (\r\n                              <tr>\r\n                                <td>{row.text}</td>\r\n                                <td>\r\n                                  <NumberFormat\r\n                                    id={null}\r\n                                    customInput={Input}\r\n                                    thousandSeparator=\",\"\r\n                                    decimalSeparator=\".\"\r\n                                    decimalPrecision={2}\r\n                                    allowNegative={false}\r\n                                    prefix=\"$\"\r\n                                    suffix=\"\"\r\n                                    value={\r\n                                      dataFormPolicy[row.idPolicy].budgeAmount\r\n                                    }\r\n                                    className=\"inputLogin\"\r\n                                    floatingLabelText=\"\"\r\n                                    isVisible\r\n                                    toBlock={false}\r\n                                    disable={false}\r\n                                    placeholder=\"Costo del servicio\"\r\n                                    onValueChange={(values) => {\r\n                                      const {\r\n                                        formattedValue,\r\n                                        value,\r\n                                        floatValue,\r\n                                      } = values;\r\n                                      setDataFormPolicy({\r\n                                        ...dataFormPolicy,\r\n                                        [row.idPolicy]: {\r\n                                          ...dataFormPolicy[row.idPolicy],\r\n                                          budgeAmount: floatValue,\r\n                                        },\r\n                                      });\r\n                                    }}\r\n                                    onClick={(event) => {}}\r\n                                    onFocus={(event) => {}}\r\n                                    onBlur={(event) => {}}\r\n                                  />\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                      </tbody>\r\n                    </table>\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n            </>\r\n          )}\r\n          {isCollaboratorType === true && (\r\n            <>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.collaboratorType}\r\n                    placeholder={\"Tipo de colaborador\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        collaboratorType: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                  {/* <Select\r\n                    placeholder=\"Tipo de colaborador\"\r\n                    value={dataForm.idProviderType}\r\n                    onChange={(value, option) => {}}\r\n                  >\r\n                    {isEmpty(dataCollaboratorType) === false &&\r\n                      dataCollaboratorType.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idProviderType}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.idProviderType}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select> */}\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.givenName}\r\n                    placeholder={\"Nombre\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        givenName: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.lastName}\r\n                    placeholder={\"Apellido Paterno\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        lastName: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.mothersMaidenName}\r\n                    placeholder={\"Apellido Materno\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        mothersMaidenName: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.phoneNumber}\r\n                    placeholder={\"Teléfono\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        phoneNumber: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.emailAddress}\r\n                    placeholder={\"Correo\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        emailAddress: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <div className=\"two-action-buttons\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    const newArray = dataForm.collaborator;\r\n                    newArray.push(dataFormCollaborator);\r\n                    setDataForm({ ...dataForm, collaborator: newArray });\r\n                    setDataFormCollaborator(initialDataFormCollaborator);\r\n                  }}\r\n                >\r\n                  <span>Agregar</span>\r\n                </button>\r\n              </div>\r\n              <p>Colaboradores</p>\r\n              <Row>\r\n                <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                  <table className=\"table-add-provider\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Nombre</th>\r\n                        <th>Teléfono</th>\r\n                        <th>Correo</th>\r\n                        <th></th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {isEmpty(dataForm.collaborator) === false &&\r\n                        dataForm.collaborator.map((row, index) => {\r\n                          return (\r\n                            <tr>\r\n                              <td>{`${row.givenName} ${row.lastName} ${row.mothersMaidenName}`}</td>\r\n                              <td>{row.phoneNumber}</td>\r\n                              <td>{row.emailAddress}</td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                    </tbody>\r\n                  </table>\r\n                </Col>\r\n              </Row>\r\n            </>\r\n          )}\r\n          {isCollaboratorType === true && (\r\n            <div className=\"two-action-buttons\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setIsCollaboratorType(!isCollaboratorType);\r\n                }}\r\n              >\r\n                <span>Regresar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  try {\r\n                    await onSaveProvider(dataForm);\r\n                    setDataForm(initialDataForm);\r\n                    setDataFormCollaborator(initialDataFormCollaborator);\r\n                    setIsCollaboratorType(false);\r\n                    setIsRequiresPolicy(false);\r\n                    onClose();\r\n                  } catch (error) {}\r\n                }}\r\n              >\r\n                <span>Guardar Proveedor</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n          {isCollaboratorType === false && (\r\n            <div className=\"two-action-buttons\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  const arrayPolicy = [];\r\n                  const statesPolicy = dataFormPolicy;\r\n                  for (const key in statesPolicy) {\r\n                    arrayPolicy.push(statesPolicy[key]);\r\n                  }\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    providerBudgeInPolicy:\r\n                      isRequiresPolicy === true ? arrayPolicy : [],\r\n                  });\r\n                  setIsCollaboratorType(!isCollaboratorType);\r\n                }}\r\n              >\r\n                <span>Colaboradores</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAddProvider;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Providers\\sections\\sectionDetailProvider.jsx",["685","686","687","688","689","690","691","692","693"],"import React, { useState, useEffect } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Modal, Input, Row, Col, Select, Spin, Tooltip, Radio } from \"antd\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionDetailProvider = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    dataProviderType,\r\n    dataPaymentForm,\r\n    dataPolicies,\r\n    dataProviderById,\r\n    dataCollaboratorType,\r\n    onSelectProvider,\r\n    onSaveProvider,\r\n  } = props;\r\n  const initialDataForm = {\r\n    idProvider: null,\r\n    idProviderType: null,\r\n    idProviderPaymentForm: null,\r\n    provider: null,\r\n    taxId: null,\r\n    phoneNumber: null,\r\n    emailAddress: null,\r\n    budgeAmount: null,\r\n    providerBudgeInPolicy: [],\r\n    collaborator: [],\r\n    isActive: null,\r\n  };\r\n\r\n  const initialDataFormCollaborator = {\r\n    idProvider: null,\r\n    idCollaborator: null,\r\n    idCollaboratorType: null,\r\n    collaboratorType: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    emailAddress: null,\r\n    isActive: null,\r\n  };\r\n\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [dataFormPolicy, setDataFormPolicy] = useState({});\r\n  const [dataFormCollaborator, setDataFormCollaborator] = useState(\r\n    initialDataFormCollaborator\r\n  );\r\n  const [isCollaboratorType, setIsCollaboratorType] = useState(false);\r\n  const [isRequiresPolicy, setIsRequiresPolicy] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isEmpty(dataProviderById) === false &&\r\n      isNil(dataProviderById.result3) === false &&\r\n      isEmpty(dataProviderById.result3) === false\r\n    ) {\r\n      const newObjectArray = {};\r\n      dataProviderById.result3.forEach((element) => {\r\n        newObjectArray[element.idPolicy] = {\r\n          idPolicy: element.idPolicy,\r\n          budgeAmount: element.budgeAmount,\r\n          idProvider: element.idProvider,\r\n          isActive: null,\r\n        };\r\n      });\r\n      setDataFormPolicy(newObjectArray);\r\n    }\r\n  }, [dataProviderById]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isEmpty(dataProviderById) === false &&\r\n      isNil(dataProviderById.result1) === false &&\r\n      isEmpty(dataProviderById.result1) === false\r\n    ) {\r\n      const selectDefaultPayment = dataPaymentForm.find((row) => {\r\n        return (\r\n          row.idProviderPaymentForm ===\r\n          dataProviderById.result1.idProviderPaymentForm\r\n        );\r\n      });\r\n      if (\r\n        isNil(selectDefaultPayment) === false &&\r\n        isEmpty(selectDefaultPayment) === false\r\n      ) {\r\n        setIsRequiresPolicy(selectDefaultPayment.requiresPolicy);\r\n      }\r\n      setDataForm({\r\n        ...dataForm,\r\n        collaborator: dataProviderById.result2,\r\n        ...dataProviderById.result1,\r\n      });\r\n    }\r\n  }, [dataProviderById]);\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n    >\r\n      <div className=\"form-modal\">\r\n        <div className=\"title-head-modal\">\r\n          <button\r\n            className=\"arrow-back-to\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setDataForm(initialDataForm);\r\n              setDataFormCollaborator(initialDataFormCollaborator);\r\n              setIsCollaboratorType(false);\r\n              setIsRequiresPolicy(false);\r\n              onClose();\r\n            }}\r\n          >\r\n            <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n          <h1>\r\n            {isCollaboratorType === false\r\n              ? \"Detalle de proveedor\"\r\n              : \"Detalle de colaborador\"}\r\n          </h1>\r\n        </div>\r\n        <div className=\"main-form-information\">\r\n          {isCollaboratorType === false && (\r\n            <>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Select\r\n                    placeholder=\"Tipo de proveedor\"\r\n                    value={dataForm.idProviderType}\r\n                    onChange={(value, option) => {\r\n                      setDataForm({ ...dataForm, idProviderType: value });\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataProviderType) === false &&\r\n                      dataProviderType.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idProviderType}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.text}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Select\r\n                    placeholder=\"Forma de pago\"\r\n                    value={dataForm.idProviderPaymentForm}\r\n                    onChange={(value, option) => {\r\n                      const optionClick = option.onClick();\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        idProviderPaymentForm: value,\r\n                      });\r\n                      setIsRequiresPolicy(optionClick.requiresPolicy);\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataPaymentForm) === false &&\r\n                      dataPaymentForm.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idProviderPaymentForm}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.text}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.provider}\r\n                    placeholder={\"Nombre de proveedor\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, provider: e.target.value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.taxId}\r\n                    placeholder={\"RFC\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, taxId: e.target.value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.phoneNumber}\r\n                    placeholder={\"Teléfono\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({ ...dataForm, phoneNumber: e.target.value });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataForm.emailAddress}\r\n                    placeholder={\"Correo\"}\r\n                    onChange={(e) => {\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        emailAddress: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <p>Costos</p>\r\n              {isRequiresPolicy === false && (\r\n                <Row>\r\n                  <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                    <NumberFormat\r\n                      id={null}\r\n                      customInput={Input}\r\n                      thousandSeparator=\",\"\r\n                      decimalSeparator=\".\"\r\n                      decimalPrecision={2}\r\n                      allowNegative={false}\r\n                      prefix=\"$\"\r\n                      suffix=\"\"\r\n                      value={dataForm.budgeAmount}\r\n                      className=\"inputLogin\"\r\n                      floatingLabelText=\"\"\r\n                      isVisible\r\n                      toBlock={false}\r\n                      disable={false}\r\n                      placeholder=\"Costo del servicio\"\r\n                      onValueChange={(values) => {\r\n                        const { formattedValue, value, floatValue } = values;\r\n                        setDataForm({ ...dataForm, budgeAmount: floatValue });\r\n                      }}\r\n                      onClick={(event) => {}}\r\n                      onFocus={(event) => {}}\r\n                      onBlur={(event) => {}}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n              {isRequiresPolicy === true && (\r\n                <Row>\r\n                  <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                    <table className=\"table-add-provider\">\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Póliza</th>\r\n                          <th>Monto</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        {isEmpty(dataPolicies) === false &&\r\n                          dataPolicies.map((row, index) => {\r\n                            return (\r\n                              <tr>\r\n                                <td>{row.text}</td>\r\n                                <td>\r\n                                  <NumberFormat\r\n                                    id={null}\r\n                                    customInput={Input}\r\n                                    thousandSeparator=\",\"\r\n                                    decimalSeparator=\".\"\r\n                                    decimalPrecision={2}\r\n                                    allowNegative={false}\r\n                                    prefix=\"$\"\r\n                                    suffix=\"\"\r\n                                    value={\r\n                                      isEmpty(dataFormPolicy) === false &&\r\n                                      isNil(dataFormPolicy[row.idPolicy]) ===\r\n                                        false &&\r\n                                      isNil(\r\n                                        dataFormPolicy[row.idPolicy].budgeAmount\r\n                                      ) === false\r\n                                        ? dataFormPolicy[row.idPolicy]\r\n                                            .budgeAmount\r\n                                        : null\r\n                                    }\r\n                                    className=\"inputLogin\"\r\n                                    floatingLabelText=\"\"\r\n                                    isVisible\r\n                                    toBlock={false}\r\n                                    disable={false}\r\n                                    placeholder=\"Costo del servicio\"\r\n                                    onValueChange={(values) => {\r\n                                      const {\r\n                                        formattedValue,\r\n                                        value,\r\n                                        floatValue,\r\n                                      } = values;\r\n                                      setDataFormPolicy({\r\n                                        ...dataFormPolicy,\r\n                                        [row.idPolicy]: {\r\n                                          ...dataFormPolicy[row.idPolicy],\r\n                                          budgeAmount: floatValue,\r\n                                        },\r\n                                      });\r\n                                    }}\r\n                                    onClick={(event) => {}}\r\n                                    onFocus={(event) => {}}\r\n                                    onBlur={(event) => {}}\r\n                                  />\r\n                                </td>\r\n                              </tr>\r\n                            );\r\n                          })}\r\n                      </tbody>\r\n                    </table>\r\n                  </Col>\r\n                </Row>\r\n              )}\r\n            </>\r\n          )}\r\n          {isCollaboratorType === true && (\r\n            <>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  {/* <Input\r\n                    value={dataFormCollaborator.collaboratorType}\r\n                    placeholder={\"Tipo de colaborador\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        collaboratorType: e.target.value,\r\n                      });\r\n                    }}\r\n                  /> */}\r\n                  <Select\r\n                    placeholder=\"Tipo de colaborador\"\r\n                    value={dataFormCollaborator.idCollaboratorType}\r\n                    onChange={(value, option) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        idCollaboratorType: value,\r\n                      });\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataCollaboratorType) === false &&\r\n                      dataCollaboratorType.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.idCollaboratorType}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.text}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Col>\r\n                <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n                <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.collaboratorType}\r\n                    placeholder={\"Otro tipo de colaborador\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        collaboratorType: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.givenName}\r\n                    placeholder={\"Nombre\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        givenName: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.lastName}\r\n                    placeholder={\"Apellido Paterno\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        lastName: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.mothersMaidenName}\r\n                    placeholder={\"Apellido Materno\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        mothersMaidenName: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.phoneNumber}\r\n                    placeholder={\"Teléfono\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        phoneNumber: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n                <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n                <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                  <Input\r\n                    value={dataFormCollaborator.emailAddress}\r\n                    placeholder={\"Correo\"}\r\n                    onChange={(e) => {\r\n                      setDataFormCollaborator({\r\n                        ...dataFormCollaborator,\r\n                        emailAddress: e.target.value,\r\n                      });\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <div className=\"two-action-buttons\">\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    const newArray = dataForm.collaborator;\r\n                    newArray.push(dataFormCollaborator);\r\n                    setDataForm({ ...dataForm, collaborator: newArray });\r\n                    setDataFormCollaborator(initialDataFormCollaborator);\r\n                  }}\r\n                >\r\n                  <span>Agregar</span>\r\n                </button>\r\n              </div>\r\n              <p>Colaboradores</p>\r\n              <Row>\r\n                <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n                  <table className=\"table-add-provider\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Nombre</th>\r\n                        <th>Teléfono</th>\r\n                        <th>Correo</th>\r\n                        <th></th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {isEmpty(dataForm.collaborator) === false &&\r\n                        dataForm.collaborator.map((row, index) => {\r\n                          return (\r\n                            <tr>\r\n                              <td>\r\n                                {row.givenName} {row.lastName}{\" \"}\r\n                                {row.mothersMaidenName}\r\n                              </td>\r\n                              <td>{row.phoneNumber}</td>\r\n                              <td>{row.emailAddress}</td>\r\n                            </tr>\r\n                          );\r\n                        })}\r\n                    </tbody>\r\n                  </table>\r\n                </Col>\r\n              </Row>\r\n            </>\r\n          )}\r\n          {isCollaboratorType === true && (\r\n            <div className=\"two-action-buttons\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setIsCollaboratorType(!isCollaboratorType);\r\n                }}\r\n              >\r\n                <span>Regresar</span>\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  try {\r\n                    await onSaveProvider(dataForm);\r\n                    setDataForm(initialDataForm);\r\n                    setDataFormCollaborator(initialDataFormCollaborator);\r\n                    setIsCollaboratorType(false);\r\n                    setIsRequiresPolicy(false);\r\n                    onClose();\r\n                  } catch (error) {}\r\n                }}\r\n              >\r\n                <span>Guardar Proveedor</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n          {isCollaboratorType === false && (\r\n            <div className=\"two-action-buttons\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  const arrayPolicy = [];\r\n                  const statesPolicy = dataFormPolicy;\r\n                  for (const key in statesPolicy) {\r\n                    arrayPolicy.push(statesPolicy[key]);\r\n                  }\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    providerBudgeInPolicy:\r\n                      isRequiresPolicy === true ? arrayPolicy : [],\r\n                  });\r\n                  setIsCollaboratorType(!isCollaboratorType);\r\n                }}\r\n              >\r\n                <span>Colaboradores</span>\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionDetailProvider;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\RequestServices\\sections\\sectionDetailRequest.jsx",["694","695","696","697","698","699","700","701"],"import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n  Button,\r\n  DatePicker,\r\n} from \"antd\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionDetailRequest = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    dataProviderById,\r\n    dataProviders,\r\n    dataRequestStatus,\r\n    dataCollaborator,\r\n    onSaveRequestProvider,\r\n  } = props;\r\n\r\n  const initialState = {\r\n    idProvider: null,\r\n    idRequestForProviderStatus: null,\r\n    scheduleDate: null,\r\n    referenceId: null,\r\n    budgeAmount: null,\r\n    collaborator: [],\r\n    idCollaborator: null,\r\n  };\r\n\r\n  const [dataForm, setDataForm] = useState(initialState);\r\n  const [dataCollaboratorState, setDataCollaboratorState] = useState([]);\r\n  const [rowCollaborator, setRowCollaborator] = useState({});\r\n\r\n  const isDisabledFunction = (id, array) => {\r\n    let disabled = false;\r\n    let findArray = null;\r\n\r\n    if (isEmpty(array) === false) {\r\n      findArray = array.find((row) => {\r\n        return id === row.idCollaborator;\r\n      });\r\n    }\r\n\r\n    if (isNil(findArray) === false && isEmpty(findArray) === false) {\r\n      disabled = true;\r\n    }\r\n\r\n    return disabled;\r\n  };\r\n\r\n  const DescriptionItem = ({ title, content }) => (\r\n    <div className=\"site-description-item-profile-wrapper\">\r\n      <strong className=\"site-description-item-profile-p-label\">\r\n        {title}:\r\n      </strong>\r\n      <br />\r\n      {isNil(content) === false ? content : \"N/A\"}\r\n    </div>\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      isEmpty(dataProviderById) === false &&\r\n      isNil(dataProviderById.result1) === false &&\r\n      isEmpty(dataProviderById.result1) === false\r\n    ) {\r\n      setDataForm({\r\n        ...dataForm,\r\n        ...dataProviderById.result1,\r\n      });\r\n    }\r\n    if (\r\n      isEmpty(dataProviderById) === false &&\r\n      isNil(dataProviderById.result2) === false &&\r\n      isEmpty(dataProviderById.result2) === false\r\n    ) {\r\n      setDataCollaboratorState(dataProviderById.result2);\r\n    }\r\n  }, [dataProviderById, dataCollaborator]);\r\n\r\n  return (\r\n    <Modal\r\n      style={{ top: 20 }}\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n    >\r\n      <div className=\"form-modal\">\r\n        <div className=\"title-head-modal\">\r\n          <button\r\n            className=\"arrow-back-to\"\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onClose();\r\n              setDataForm(initialState);\r\n              setDataCollaboratorState([]);\r\n              setRowCollaborator({});\r\n            }}\r\n          >\r\n            <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n          </button>\r\n          <h1>Detalle de Solicitud</h1>\r\n        </div>\r\n        <div className=\"main-form-information\">\r\n          <Row>\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <DescriptionItem title=\"Estatus\" content={\" \"} />\r\n            </Col>\r\n            <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <Select\r\n                placeholder=\"Estatus\"\r\n                value={dataForm.idRequestForProviderStatus}\r\n                onChange={(value, option) => {\r\n                  const optionClick = option.onClick();\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    idRequestForProviderStatus: value,\r\n                  });\r\n                }}\r\n              >\r\n                {isEmpty(dataRequestStatus) === false &&\r\n                  dataRequestStatus.map((row) => {\r\n                    return (\r\n                      <Option\r\n                        value={row.idRequestForProviderStatus}\r\n                        onClick={() => {\r\n                          return row;\r\n                        }}\r\n                      >\r\n                        {row.text}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          <p>Información de Inquilino</p>\r\n          <Row>\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <DescriptionItem\r\n                title=\"Nombre del inquilino\"\r\n                content={dataForm.customerTenantFullName}\r\n              />\r\n            </Col>\r\n            <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <DescriptionItem\r\n                title=\"Teléfono\"\r\n                content={dataForm.customerTenantPhoneNumber}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n              <DescriptionItem\r\n                title=\"Dirección de partida\"\r\n                content={dataForm.fullAddressTenantFrom}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n              <DescriptionItem\r\n                title=\"Dirección final\"\r\n                content={dataForm.fullAddressTenant}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <div style={{ textAlign: \"center\" }}>\r\n            <a\r\n              href={`https://www.google.com/maps/dir/${dataForm.fullAddressTenantFrom}/${dataForm.fullAddressTenant}`}\r\n              target=\"_blank\"\r\n            >\r\n              Ver Recorrido en Google Maps\r\n            </a>\r\n          </div>\r\n          <p>Proveedor</p>\r\n          <Row>\r\n            <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n              <Select\r\n                placeholder=\"Proveedor\"\r\n                value={dataForm.idProvider}\r\n                onChange={(value, option) => {\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    idProvider: value,\r\n                  });\r\n                }}\r\n              >\r\n                {isEmpty(dataProviders) === false &&\r\n                  dataProviders.map((row) => {\r\n                    return (\r\n                      <Option\r\n                        value={row.idProvider}\r\n                        onClick={() => {\r\n                          return row;\r\n                        }}\r\n                      >\r\n                        {row.text}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <Input\r\n                value={dataForm.referenceId}\r\n                placeholder={\"Referencia\"}\r\n                onChange={(e) => {\r\n                  setDataForm({ ...dataForm, referenceId: e.target.value });\r\n                }}\r\n              />\r\n            </Col>\r\n            <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <DatePicker\r\n                value={\r\n                  isNil(dataForm.scheduleDate) === false\r\n                    ? moment(dataForm.scheduleDate, \"YYYY-MM-DDTHH:mm:ss\")\r\n                    : null\r\n                }\r\n                placeholder=\"Programado para\"\r\n                onChange={(momentFormat, date) => {\r\n                  setDataForm({\r\n                    ...dataForm,\r\n                    scheduleDate: moment(momentFormat).format(\r\n                      \"YYYY-MM-DD HH:mm:ss\"\r\n                    ),\r\n                  });\r\n                }}\r\n                showTime={{\r\n                  defaultValue: moment(\"00:00:00\", \"HH:mm:ss\"),\r\n                }}\r\n                format=\"DD MMMM YYYY HH:mm\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <NumberFormat\r\n                id={null}\r\n                customInput={Input}\r\n                thousandSeparator=\",\"\r\n                decimalSeparator=\".\"\r\n                decimalPrecision={2}\r\n                allowNegative={false}\r\n                prefix=\"$\"\r\n                suffix=\"\"\r\n                value={dataForm.budgeAmount}\r\n                className=\"inputLogin\"\r\n                floatingLabelText=\"\"\r\n                isVisible\r\n                toBlock={false}\r\n                disable={false}\r\n                placeholder=\"Monto del servicio\"\r\n                onValueChange={(values) => {\r\n                  const { formattedValue, value, floatValue } = values;\r\n                  setDataForm({ ...dataForm, budgeAmount: floatValue });\r\n                }}\r\n                onClick={(event) => {}}\r\n                onFocus={(event) => {}}\r\n                onBlur={(event) => {}}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <p>Colaboradores</p>\r\n          <Row>\r\n            <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n              <Select\r\n                placeholder=\"Colaborador\"\r\n                value={dataForm.idCollaborator}\r\n                onChange={(value, option) => {\r\n                  const optionClick = option.onClick();\r\n                  setDataForm({ ...dataForm, idCollaborator: value });\r\n                  setRowCollaborator(optionClick);\r\n                }}\r\n              >\r\n                {isEmpty(dataCollaborator) === false &&\r\n                  dataCollaborator.map((row) => {\r\n                    return (\r\n                      <Option\r\n                        value={row.idCollaborator}\r\n                        onClick={() => {\r\n                          return row;\r\n                        }}\r\n                        disabled={isDisabledFunction(\r\n                          row.idCollaborator,\r\n                          dataCollaboratorState\r\n                        )}\r\n                      >\r\n                        {row.text}\r\n                      </Option>\r\n                    );\r\n                  })}\r\n              </Select>\r\n            </Col>\r\n            <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n            <Col span={6} xs={{ span: 24 }} md={{ span: 6 }}>\r\n              <Button\r\n                size=\"small\"\r\n                type=\"primary\"\r\n                disabled={isEmpty(rowCollaborator) === true}\r\n                onClick={() => {\r\n                  setDataCollaboratorState([\r\n                    ...dataCollaboratorState,\r\n                    rowCollaborator,\r\n                  ]);\r\n                  setDataForm({ ...dataForm, idCollaborator: null });\r\n                  setRowCollaborator({});\r\n                }}\r\n              >\r\n                Agregar\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n              <table className=\"table-add-provider\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Cargo</th>\r\n                    <th>Nombre</th>\r\n                    <th>Teléfono</th>\r\n                    <th>Eliminar</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {isEmpty(dataCollaboratorState) === false &&\r\n                    dataCollaboratorState.map((row, index) => {\r\n                      return (\r\n                        <tr>\r\n                          <td>{row.collaboratorType}</td>\r\n                          <td>{row.fullName}</td>\r\n                          <td>{row.phoneNumber}</td>\r\n                          <td style={{ textAlign: \"center\" }}>\r\n                            <Button\r\n                              type=\"primary\"\r\n                              icon={<DeleteOutlined />}\r\n                              onClick={() => {\r\n                                const filterDeleteRow = dataCollaboratorState.filter(\r\n                                  (rowMap) => {\r\n                                    return (\r\n                                      rowMap.idCollaborator !==\r\n                                      row.idCollaborator\r\n                                    );\r\n                                  }\r\n                                );\r\n                                setDataCollaboratorState(filterDeleteRow);\r\n                              }}\r\n                            />\r\n                          </td>\r\n                        </tr>\r\n                      );\r\n                    })}\r\n                </tbody>\r\n              </table>\r\n            </Col>\r\n          </Row>\r\n          <div className=\"two-action-buttons\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n                setDataForm(initialState);\r\n                setDataCollaboratorState([]);\r\n                setRowCollaborator({});\r\n              }}\r\n            >\r\n              <span>Salir</span>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={async () => {\r\n                const newArrayCollaborator = dataCollaboratorState.map(\r\n                  (row) => {\r\n                    return {\r\n                      idProvider: dataForm.idProvider,\r\n                      idCollaborator: row.idCollaborator,\r\n                      idCollaboratorType: null,\r\n                      collaboratorType: row.collaboratorType,\r\n                      givenName: row.givenName,\r\n                      lastName: row.lastName,\r\n                      mothersMaidenName: row.mothersMaidenName,\r\n                      phoneNumber: row.phoneNumber,\r\n                      emailAddress: row.emailAddress,\r\n                      isActive: null,\r\n                    };\r\n                  }\r\n                );\r\n                try {\r\n                  await onSaveRequestProvider(\r\n                    { ...dataForm, collaborator: newArrayCollaborator },\r\n                    dataForm.idRequestForProvider\r\n                  );\r\n                  onClose();\r\n                  setDataForm(initialState);\r\n                  setDataCollaboratorState([]);\r\n                  setRowCollaborator({});\r\n                } catch (error) {}\r\n              }}\r\n            >\r\n              <span>Guardar</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionDetailRequest;\r\n",{"ruleId":"702","severity":1,"message":"703","line":11,"column":8,"nodeType":"704","messageId":"705","endLine":11,"endColumn":20},{"ruleId":"702","severity":1,"message":"706","line":45,"column":20,"nodeType":"704","messageId":"705","endLine":45,"endColumn":25},{"ruleId":"707","replacedBy":"708"},{"ruleId":"709","replacedBy":"710"},{"ruleId":"702","severity":1,"message":"711","line":4,"column":8,"nodeType":"704","messageId":"705","endLine":4,"endColumn":15},{"ruleId":"702","severity":1,"message":"712","line":4,"column":40,"nodeType":"704","messageId":"705","endLine":4,"endColumn":45},{"ruleId":"713","severity":1,"message":"714","line":13,"column":1,"nodeType":"715","endLine":22,"endColumn":3},{"ruleId":"702","severity":1,"message":"716","line":9,"column":3,"nodeType":"704","messageId":"705","endLine":9,"endColumn":8},{"ruleId":"717","severity":1,"message":"718","line":149,"column":35,"nodeType":"719","messageId":"720","endLine":149,"endColumn":37},{"ruleId":"721","severity":1,"message":"722","line":1098,"column":6,"nodeType":"723","endLine":1098,"endColumn":8,"suggestions":"724"},{"ruleId":"721","severity":1,"message":"725","line":87,"column":6,"nodeType":"723","endLine":87,"endColumn":8,"suggestions":"726"},{"ruleId":"702","severity":1,"message":"727","line":1,"column":27,"nodeType":"704","messageId":"705","endLine":1,"endColumn":36},{"ruleId":"702","severity":1,"message":"728","line":6,"column":10,"nodeType":"704","messageId":"705","endLine":6,"endColumn":15},{"ruleId":"702","severity":1,"message":"729","line":6,"column":38,"nodeType":"704","messageId":"705","endLine":6,"endColumn":46},{"ruleId":"702","severity":1,"message":"730","line":8,"column":3,"nodeType":"704","messageId":"705","endLine":8,"endColumn":15},{"ruleId":"702","severity":1,"message":"731","line":9,"column":3,"nodeType":"704","messageId":"705","endLine":9,"endColumn":16},{"ruleId":"702","severity":1,"message":"732","line":23,"column":9,"nodeType":"704","messageId":"705","endLine":23,"endColumn":15},{"ruleId":"702","severity":1,"message":"733","line":35,"column":8,"nodeType":"704","messageId":"705","endLine":35,"endColumn":19},{"ruleId":"702","severity":1,"message":"734","line":146,"column":13,"nodeType":"704","messageId":"705","endLine":146,"endColumn":23},{"ruleId":"735","severity":1,"message":"736","line":162,"column":9,"nodeType":"737","endLine":168,"endColumn":10},{"ruleId":"738","severity":1,"message":"739","line":249,"column":9,"nodeType":"737","endLine":254,"endColumn":11},{"ruleId":"721","severity":1,"message":"740","line":398,"column":6,"nodeType":"723","endLine":398,"endColumn":8,"suggestions":"741"},{"ruleId":"738","severity":1,"message":"739","line":445,"column":23,"nodeType":"737","endLine":449,"endColumn":25},{"ruleId":"738","severity":1,"message":"739","line":501,"column":23,"nodeType":"737","endLine":505,"endColumn":25},{"ruleId":"738","severity":1,"message":"739","line":623,"column":21,"nodeType":"737","endLine":623,"endColumn":77},{"ruleId":"738","severity":1,"message":"739","line":636,"column":23,"nodeType":"737","endLine":636,"endColumn":74},{"ruleId":"702","severity":1,"message":"727","line":1,"column":27,"nodeType":"704","messageId":"705","endLine":1,"endColumn":36},{"ruleId":"702","severity":1,"message":"711","line":4,"column":8,"nodeType":"704","messageId":"705","endLine":4,"endColumn":15},{"ruleId":"702","severity":1,"message":"742","line":5,"column":8,"nodeType":"704","messageId":"705","endLine":5,"endColumn":20},{"ruleId":"702","severity":1,"message":"743","line":7,"column":3,"nodeType":"704","messageId":"705","endLine":7,"endColumn":9},{"ruleId":"702","severity":1,"message":"744","line":8,"column":3,"nodeType":"704","messageId":"705","endLine":8,"endColumn":7},{"ruleId":"702","severity":1,"message":"716","line":10,"column":3,"nodeType":"704","messageId":"705","endLine":10,"endColumn":8},{"ruleId":"702","severity":1,"message":"745","line":11,"column":3,"nodeType":"704","messageId":"705","endLine":11,"endColumn":6},{"ruleId":"702","severity":1,"message":"746","line":12,"column":3,"nodeType":"704","messageId":"705","endLine":12,"endColumn":6},{"ruleId":"702","severity":1,"message":"747","line":14,"column":3,"nodeType":"704","messageId":"705","endLine":14,"endColumn":7},{"ruleId":"702","severity":1,"message":"748","line":15,"column":3,"nodeType":"704","messageId":"705","endLine":15,"endColumn":10},{"ruleId":"702","severity":1,"message":"749","line":18,"column":3,"nodeType":"704","messageId":"705","endLine":18,"endColumn":21},{"ruleId":"702","severity":1,"message":"730","line":19,"column":3,"nodeType":"704","messageId":"705","endLine":19,"endColumn":15},{"ruleId":"702","severity":1,"message":"750","line":20,"column":3,"nodeType":"704","messageId":"705","endLine":20,"endColumn":15},{"ruleId":"702","severity":1,"message":"751","line":21,"column":3,"nodeType":"704","messageId":"705","endLine":21,"endColumn":16},{"ruleId":"702","severity":1,"message":"732","line":25,"column":9,"nodeType":"704","messageId":"705","endLine":25,"endColumn":15},{"ruleId":"721","severity":1,"message":"752","line":711,"column":6,"nodeType":"723","endLine":711,"endColumn":8,"suggestions":"753"},{"ruleId":"721","severity":1,"message":"754","line":717,"column":6,"nodeType":"723","endLine":717,"endColumn":25,"suggestions":"755"},{"ruleId":"702","severity":1,"message":"756","line":765,"column":24,"nodeType":"704","messageId":"705","endLine":765,"endColumn":39},{"ruleId":"702","severity":1,"message":"757","line":29,"column":25,"nodeType":"704","messageId":"705","endLine":29,"endColumn":31},{"ruleId":"702","severity":1,"message":"758","line":63,"column":5,"nodeType":"704","messageId":"705","endLine":63,"endColumn":27},{"ruleId":"702","severity":1,"message":"759","line":136,"column":9,"nodeType":"704","messageId":"705","endLine":136,"endColumn":15},{"ruleId":"702","severity":1,"message":"760","line":208,"column":13,"nodeType":"704","messageId":"705","endLine":208,"endColumn":27},{"ruleId":"702","severity":1,"message":"761","line":248,"column":7,"nodeType":"704","messageId":"705","endLine":248,"endColumn":23},{"ruleId":"721","severity":1,"message":"762","line":482,"column":6,"nodeType":"723","endLine":482,"endColumn":8,"suggestions":"763"},{"ruleId":"735","severity":1,"message":"736","line":704,"column":27,"nodeType":"737","endLine":717,"endColumn":28},{"ruleId":"735","severity":1,"message":"736","line":722,"column":27,"nodeType":"737","endLine":735,"endColumn":28},{"ruleId":"735","severity":1,"message":"736","line":740,"column":27,"nodeType":"737","endLine":753,"endColumn":28},{"ruleId":"702","severity":1,"message":"764","line":794,"column":27,"nodeType":"704","messageId":"705","endLine":794,"endColumn":39},{"ruleId":"702","severity":1,"message":"765","line":794,"column":41,"nodeType":"704","messageId":"705","endLine":794,"endColumn":59},{"ruleId":"702","severity":1,"message":"756","line":860,"column":24,"nodeType":"704","messageId":"705","endLine":860,"endColumn":39},{"ruleId":"721","severity":1,"message":"766","line":123,"column":6,"nodeType":"723","endLine":123,"endColumn":8,"suggestions":"767"},{"ruleId":"702","severity":1,"message":"756","line":178,"column":24,"nodeType":"704","messageId":"705","endLine":178,"endColumn":39},{"ruleId":"721","severity":1,"message":"752","line":536,"column":6,"nodeType":"723","endLine":536,"endColumn":8,"suggestions":"768"},{"ruleId":"721","severity":1,"message":"754","line":542,"column":6,"nodeType":"723","endLine":542,"endColumn":25,"suggestions":"769"},{"ruleId":"702","severity":1,"message":"756","line":589,"column":24,"nodeType":"704","messageId":"705","endLine":589,"endColumn":39},{"ruleId":"702","severity":1,"message":"770","line":61,"column":5,"nodeType":"704","messageId":"705","endLine":61,"endColumn":28},{"ruleId":"702","severity":1,"message":"771","line":224,"column":11,"nodeType":"704","messageId":"705","endLine":224,"endColumn":22},{"ruleId":"702","severity":1,"message":"772","line":396,"column":13,"nodeType":"704","messageId":"705","endLine":396,"endColumn":21},{"ruleId":"702","severity":1,"message":"772","line":504,"column":13,"nodeType":"704","messageId":"705","endLine":504,"endColumn":21},{"ruleId":"721","severity":1,"message":"766","line":623,"column":6,"nodeType":"723","endLine":623,"endColumn":8,"suggestions":"773"},{"ruleId":"702","severity":1,"message":"756","line":875,"column":24,"nodeType":"704","messageId":"705","endLine":875,"endColumn":39},{"ruleId":"702","severity":1,"message":"774","line":50,"column":9,"nodeType":"704","messageId":"705","endLine":50,"endColumn":18},{"ruleId":"702","severity":1,"message":"775","line":51,"column":9,"nodeType":"704","messageId":"705","endLine":51,"endColumn":21},{"ruleId":"702","severity":1,"message":"760","line":271,"column":13,"nodeType":"704","messageId":"705","endLine":271,"endColumn":27},{"ruleId":"721","severity":1,"message":"776","line":290,"column":6,"nodeType":"723","endLine":290,"endColumn":8,"suggestions":"777"},{"ruleId":"702","severity":1,"message":"756","line":361,"column":24,"nodeType":"704","messageId":"705","endLine":361,"endColumn":39},{"ruleId":"702","severity":1,"message":"757","line":32,"column":25,"nodeType":"704","messageId":"705","endLine":32,"endColumn":31},{"ruleId":"702","severity":1,"message":"758","line":64,"column":5,"nodeType":"704","messageId":"705","endLine":64,"endColumn":27},{"ruleId":"702","severity":1,"message":"760","line":280,"column":13,"nodeType":"704","messageId":"705","endLine":280,"endColumn":27},{"ruleId":"702","severity":1,"message":"760","line":306,"column":13,"nodeType":"704","messageId":"705","endLine":306,"endColumn":27},{"ruleId":"702","severity":1,"message":"760","line":380,"column":13,"nodeType":"704","messageId":"705","endLine":380,"endColumn":27},{"ruleId":"721","severity":1,"message":"778","line":617,"column":6,"nodeType":"723","endLine":617,"endColumn":8,"suggestions":"779"},{"ruleId":"702","severity":1,"message":"756","line":820,"column":24,"nodeType":"704","messageId":"705","endLine":820,"endColumn":39},{"ruleId":"702","severity":1,"message":"780","line":62,"column":9,"nodeType":"704","messageId":"705","endLine":62,"endColumn":20},{"ruleId":"721","severity":1,"message":"781","line":103,"column":6,"nodeType":"723","endLine":103,"endColumn":23,"suggestions":"782"},{"ruleId":"783","severity":1,"message":"784","line":136,"column":15,"nodeType":"737","endLine":139,"endColumn":16},{"ruleId":"702","severity":1,"message":"785","line":33,"column":10,"nodeType":"704","messageId":"705","endLine":33,"endColumn":18},{"ruleId":"702","severity":1,"message":"786","line":33,"column":20,"nodeType":"704","messageId":"705","endLine":33,"endColumn":31},{"ruleId":"702","severity":1,"message":"787","line":114,"column":31,"nodeType":"704","messageId":"705","endLine":114,"endColumn":45},{"ruleId":"702","severity":1,"message":"788","line":114,"column":47,"nodeType":"704","messageId":"705","endLine":114,"endColumn":52},{"ruleId":"702","severity":1,"message":"789","line":2,"column":34,"nodeType":"704","messageId":"705","endLine":2,"endColumn":40},{"ruleId":"735","severity":1,"message":"736","line":115,"column":33,"nodeType":"737","endLine":123,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":128,"column":33,"nodeType":"737","endLine":136,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":141,"column":33,"nodeType":"737","endLine":149,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":157,"column":27,"nodeType":"737","endLine":157,"endColumn":30},{"ruleId":"721","severity":1,"message":"790","line":50,"column":6,"nodeType":"723","endLine":50,"endColumn":25,"suggestions":"791"},{"ruleId":"702","severity":1,"message":"787","line":328,"column":31,"nodeType":"704","messageId":"705","endLine":328,"endColumn":45},{"ruleId":"702","severity":1,"message":"788","line":329,"column":31,"nodeType":"704","messageId":"705","endLine":329,"endColumn":36},{"ruleId":"702","severity":1,"message":"787","line":491,"column":31,"nodeType":"704","messageId":"705","endLine":491,"endColumn":45},{"ruleId":"702","severity":1,"message":"788","line":492,"column":31,"nodeType":"704","messageId":"705","endLine":492,"endColumn":36},{"ruleId":"702","severity":1,"message":"787","line":528,"column":31,"nodeType":"704","messageId":"705","endLine":528,"endColumn":45},{"ruleId":"702","severity":1,"message":"788","line":529,"column":31,"nodeType":"704","messageId":"705","endLine":529,"endColumn":36},{"ruleId":"702","severity":1,"message":"792","line":10,"column":9,"nodeType":"704","messageId":"705","endLine":10,"endColumn":17},{"ruleId":"702","severity":1,"message":"787","line":122,"column":31,"nodeType":"704","messageId":"705","endLine":122,"endColumn":45},{"ruleId":"702","severity":1,"message":"788","line":122,"column":47,"nodeType":"704","messageId":"705","endLine":122,"endColumn":52},{"ruleId":"702","severity":1,"message":"793","line":125,"column":27,"nodeType":"704","messageId":"705","endLine":125,"endColumn":42},{"ruleId":"735","severity":1,"message":"794","line":23,"column":11,"nodeType":"737","endLine":30,"endColumn":12},{"ruleId":"795","severity":1,"message":"796","line":29,"column":13,"nodeType":"797","endLine":29,"endColumn":28},{"ruleId":"735","severity":1,"message":"736","line":83,"column":19,"nodeType":"737","endLine":83,"endColumn":22},{"ruleId":"795","severity":1,"message":"796","line":64,"column":28,"nodeType":"797","endLine":64,"endColumn":43},{"ruleId":"735","severity":1,"message":"794","line":74,"column":11,"nodeType":"737","endLine":81,"endColumn":12},{"ruleId":"795","severity":1,"message":"796","line":80,"column":13,"nodeType":"797","endLine":80,"endColumn":28},{"ruleId":"798","severity":1,"message":"799","line":132,"column":25,"nodeType":"797","endLine":132,"endColumn":45},{"ruleId":"702","severity":1,"message":"787","line":204,"column":41,"nodeType":"704","messageId":"705","endLine":204,"endColumn":55},{"ruleId":"702","severity":1,"message":"788","line":205,"column":41,"nodeType":"704","messageId":"705","endLine":205,"endColumn":46},{"ruleId":"735","severity":1,"message":"736","line":464,"column":31,"nodeType":"737","endLine":464,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":496,"column":43,"nodeType":"737","endLine":496,"endColumn":73},{"ruleId":"735","severity":1,"message":"736","line":515,"column":31,"nodeType":"737","endLine":515,"endColumn":34},{"ruleId":"735","severity":1,"message":"794","line":549,"column":35,"nodeType":"737","endLine":557,"endColumn":36},{"ruleId":"795","severity":1,"message":"796","line":556,"column":37,"nodeType":"797","endLine":556,"endColumn":52},{"ruleId":"798","severity":1,"message":"799","line":570,"column":30,"nodeType":"797","endLine":570,"endColumn":50},{"ruleId":"735","severity":1,"message":"794","line":600,"column":29,"nodeType":"737","endLine":607,"endColumn":30},{"ruleId":"795","severity":1,"message":"796","line":606,"column":31,"nodeType":"797","endLine":606,"endColumn":46},{"ruleId":"798","severity":1,"message":"799","line":623,"column":25,"nodeType":"797","endLine":623,"endColumn":45},{"ruleId":"735","severity":1,"message":"736","line":659,"column":17,"nodeType":"737","endLine":673,"endColumn":18},{"ruleId":"735","severity":1,"message":"736","line":693,"column":17,"nodeType":"737","endLine":707,"endColumn":18},{"ruleId":"735","severity":1,"message":"736","line":721,"column":17,"nodeType":"737","endLine":735,"endColumn":18},{"ruleId":"798","severity":1,"message":"799","line":743,"column":25,"nodeType":"797","endLine":743,"endColumn":45},{"ruleId":"735","severity":1,"message":"736","line":758,"column":29,"nodeType":"737","endLine":770,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":783,"column":33,"nodeType":"737","endLine":795,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":805,"column":33,"nodeType":"737","endLine":817,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":829,"column":31,"nodeType":"737","endLine":841,"endColumn":32},{"ruleId":"735","severity":1,"message":"736","line":854,"column":29,"nodeType":"737","endLine":866,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":876,"column":29,"nodeType":"737","endLine":888,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":900,"column":29,"nodeType":"737","endLine":912,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":922,"column":29,"nodeType":"737","endLine":934,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":956,"column":35,"nodeType":"737","endLine":969,"endColumn":36},{"ruleId":"735","severity":1,"message":"736","line":982,"column":39,"nodeType":"737","endLine":995,"endColumn":40},{"ruleId":"735","severity":1,"message":"736","line":1005,"column":39,"nodeType":"737","endLine":1018,"endColumn":40},{"ruleId":"735","severity":1,"message":"736","line":1030,"column":37,"nodeType":"737","endLine":1043,"endColumn":38},{"ruleId":"798","severity":1,"message":"799","line":1062,"column":25,"nodeType":"797","endLine":1062,"endColumn":45},{"ruleId":"795","severity":1,"message":"796","line":62,"column":28,"nodeType":"797","endLine":62,"endColumn":43},{"ruleId":"735","severity":1,"message":"794","line":72,"column":11,"nodeType":"737","endLine":79,"endColumn":12},{"ruleId":"795","severity":1,"message":"796","line":78,"column":13,"nodeType":"797","endLine":78,"endColumn":28},{"ruleId":"798","severity":1,"message":"799","line":333,"column":25,"nodeType":"797","endLine":333,"endColumn":45},{"ruleId":"735","severity":1,"message":"736","line":397,"column":23,"nodeType":"737","endLine":397,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":428,"column":35,"nodeType":"737","endLine":428,"endColumn":65},{"ruleId":"735","severity":1,"message":"736","line":447,"column":23,"nodeType":"737","endLine":447,"endColumn":26},{"ruleId":"798","severity":1,"message":"799","line":454,"column":30,"nodeType":"797","endLine":454,"endColumn":50},{"ruleId":"735","severity":1,"message":"736","line":473,"column":28,"nodeType":"737","endLine":473,"endColumn":31},{"ruleId":"798","severity":1,"message":"799","line":479,"column":25,"nodeType":"797","endLine":479,"endColumn":45},{"ruleId":"735","severity":1,"message":"736","line":515,"column":17,"nodeType":"737","endLine":527,"endColumn":18},{"ruleId":"735","severity":1,"message":"736","line":555,"column":17,"nodeType":"737","endLine":567,"endColumn":18},{"ruleId":"798","severity":1,"message":"799","line":575,"column":25,"nodeType":"797","endLine":575,"endColumn":45},{"ruleId":"735","severity":1,"message":"736","line":586,"column":25,"nodeType":"737","endLine":598,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":608,"column":25,"nodeType":"737","endLine":620,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":632,"column":23,"nodeType":"737","endLine":644,"endColumn":24},{"ruleId":"798","severity":1,"message":"799","line":654,"column":25,"nodeType":"797","endLine":654,"endColumn":45},{"ruleId":"702","severity":1,"message":"742","line":4,"column":8,"nodeType":"704","messageId":"705","endLine":4,"endColumn":20},{"ruleId":"702","severity":1,"message":"743","line":6,"column":3,"nodeType":"704","messageId":"705","endLine":6,"endColumn":9},{"ruleId":"702","severity":1,"message":"800","line":7,"column":3,"nodeType":"704","messageId":"705","endLine":7,"endColumn":9},{"ruleId":"702","severity":1,"message":"744","line":8,"column":3,"nodeType":"704","messageId":"705","endLine":8,"endColumn":7},{"ruleId":"721","severity":1,"message":"790","line":76,"column":6,"nodeType":"723","endLine":76,"endColumn":23,"suggestions":"801"},{"ruleId":"721","severity":1,"message":"790","line":96,"column":6,"nodeType":"723","endLine":96,"endColumn":24,"suggestions":"802"},{"ruleId":"721","severity":1,"message":"790","line":116,"column":6,"nodeType":"723","endLine":116,"endColumn":24,"suggestions":"803"},{"ruleId":"721","severity":1,"message":"790","line":134,"column":6,"nodeType":"723","endLine":134,"endColumn":25,"suggestions":"804"},{"ruleId":"702","severity":1,"message":"805","line":45,"column":9,"nodeType":"704","messageId":"705","endLine":45,"endColumn":28},{"ruleId":"702","severity":1,"message":"806","line":47,"column":11,"nodeType":"704","messageId":"705","endLine":47,"endColumn":25},{"ruleId":"735","severity":1,"message":"736","line":203,"column":15,"nodeType":"737","endLine":208,"endColumn":16},{"ruleId":"735","severity":1,"message":"736","line":251,"column":15,"nodeType":"737","endLine":256,"endColumn":16},{"ruleId":"735","severity":1,"message":"736","line":295,"column":9,"nodeType":"737","endLine":302,"endColumn":10},{"ruleId":"702","severity":1,"message":"806","line":365,"column":15,"nodeType":"704","messageId":"705","endLine":365,"endColumn":29},{"ruleId":"702","severity":1,"message":"711","line":2,"column":8,"nodeType":"704","messageId":"705","endLine":2,"endColumn":15},{"ruleId":"807","severity":1,"message":"808","line":15,"column":5,"nodeType":"809","messageId":"810","endLine":34,"endColumn":6},{"ruleId":"807","severity":1,"message":"808","line":43,"column":5,"nodeType":"809","messageId":"810","endLine":84,"endColumn":6},{"ruleId":"807","severity":1,"message":"808","line":97,"column":5,"nodeType":"809","messageId":"810","endLine":117,"endColumn":6},{"ruleId":"717","severity":1,"message":"718","line":145,"column":18,"nodeType":"719","messageId":"720","endLine":145,"endColumn":20},{"ruleId":"717","severity":1,"message":"718","line":168,"column":29,"nodeType":"719","messageId":"720","endLine":168,"endColumn":31},{"ruleId":"717","severity":1,"message":"718","line":183,"column":22,"nodeType":"719","messageId":"720","endLine":183,"endColumn":24},{"ruleId":"717","severity":1,"message":"718","line":185,"column":22,"nodeType":"719","messageId":"720","endLine":185,"endColumn":24},{"ruleId":"702","severity":1,"message":"756","line":346,"column":24,"nodeType":"704","messageId":"705","endLine":346,"endColumn":39},{"ruleId":"721","severity":1,"message":"811","line":71,"column":6,"nodeType":"723","endLine":71,"endColumn":39,"suggestions":"812"},{"ruleId":"721","severity":1,"message":"790","line":81,"column":6,"nodeType":"723","endLine":81,"endColumn":25,"suggestions":"813"},{"ruleId":"702","severity":1,"message":"787","line":398,"column":29,"nodeType":"704","messageId":"705","endLine":398,"endColumn":43},{"ruleId":"702","severity":1,"message":"788","line":398,"column":45,"nodeType":"704","messageId":"705","endLine":398,"endColumn":50},{"ruleId":"702","severity":1,"message":"787","line":428,"column":29,"nodeType":"704","messageId":"705","endLine":428,"endColumn":43},{"ruleId":"702","severity":1,"message":"788","line":428,"column":45,"nodeType":"704","messageId":"705","endLine":428,"endColumn":50},{"ruleId":"702","severity":1,"message":"787","line":459,"column":29,"nodeType":"704","messageId":"705","endLine":459,"endColumn":43},{"ruleId":"702","severity":1,"message":"788","line":459,"column":45,"nodeType":"704","messageId":"705","endLine":459,"endColumn":50},{"ruleId":"721","severity":1,"message":"814","line":108,"column":6,"nodeType":"723","endLine":108,"endColumn":71,"suggestions":"815"},{"ruleId":"721","severity":1,"message":"790","line":118,"column":6,"nodeType":"723","endLine":118,"endColumn":25,"suggestions":"816"},{"ruleId":"721","severity":1,"message":"811","line":160,"column":6,"nodeType":"723","endLine":166,"endColumn":4,"suggestions":"817"},{"ruleId":"721","severity":1,"message":"790","line":176,"column":6,"nodeType":"723","endLine":176,"endColumn":25,"suggestions":"818"},{"ruleId":"721","severity":1,"message":"790","line":186,"column":6,"nodeType":"723","endLine":186,"endColumn":36,"suggestions":"819"},{"ruleId":"702","severity":1,"message":"787","line":1105,"column":35,"nodeType":"704","messageId":"705","endLine":1105,"endColumn":49},{"ruleId":"702","severity":1,"message":"788","line":1106,"column":35,"nodeType":"704","messageId":"705","endLine":1106,"endColumn":40},{"ruleId":"702","severity":1,"message":"820","line":27,"column":5,"nodeType":"704","messageId":"705","endLine":27,"endColumn":16},{"ruleId":"702","severity":1,"message":"821","line":32,"column":5,"nodeType":"704","messageId":"705","endLine":32,"endColumn":19},{"ruleId":"721","severity":1,"message":"822","line":75,"column":6,"nodeType":"723","endLine":75,"endColumn":37,"suggestions":"823"},{"ruleId":"702","severity":1,"message":"787","line":155,"column":29,"nodeType":"704","messageId":"705","endLine":155,"endColumn":43},{"ruleId":"702","severity":1,"message":"788","line":155,"column":45,"nodeType":"704","messageId":"705","endLine":155,"endColumn":50},{"ruleId":"702","severity":1,"message":"788","line":197,"column":45,"nodeType":"704","messageId":"705","endLine":197,"endColumn":50},{"ruleId":"702","severity":1,"message":"787","line":228,"column":29,"nodeType":"704","messageId":"705","endLine":228,"endColumn":43},{"ruleId":"702","severity":1,"message":"788","line":228,"column":45,"nodeType":"704","messageId":"705","endLine":228,"endColumn":50},{"ruleId":"702","severity":1,"message":"788","line":277,"column":45,"nodeType":"704","messageId":"705","endLine":277,"endColumn":50},{"ruleId":"721","severity":1,"message":"824","line":129,"column":6,"nodeType":"723","endLine":129,"endColumn":52,"suggestions":"825"},{"ruleId":"702","severity":1,"message":"826","line":687,"column":31,"nodeType":"704","messageId":"705","endLine":687,"endColumn":42},{"ruleId":"721","severity":1,"message":"811","line":64,"column":6,"nodeType":"723","endLine":64,"endColumn":20,"suggestions":"827"},{"ruleId":"721","severity":1,"message":"790","line":74,"column":6,"nodeType":"723","endLine":74,"endColumn":25,"suggestions":"828"},{"ruleId":"702","severity":1,"message":"787","line":307,"column":33,"nodeType":"704","messageId":"705","endLine":307,"endColumn":47},{"ruleId":"702","severity":1,"message":"788","line":307,"column":49,"nodeType":"704","messageId":"705","endLine":307,"endColumn":54},{"ruleId":"702","severity":1,"message":"734","line":90,"column":7,"nodeType":"704","messageId":"705","endLine":90,"endColumn":17},{"ruleId":"702","severity":1,"message":"756","line":349,"column":24,"nodeType":"704","messageId":"705","endLine":349,"endColumn":39},{"ruleId":"735","severity":1,"message":"736","line":249,"column":25,"nodeType":"737","endLine":249,"endColumn":28},{"ruleId":"721","severity":1,"message":"829","line":275,"column":6,"nodeType":"723","endLine":275,"endColumn":8,"suggestions":"830"},{"ruleId":"702","severity":1,"message":"756","line":353,"column":24,"nodeType":"704","messageId":"705","endLine":353,"endColumn":39},{"ruleId":"702","severity":1,"message":"831","line":5,"column":25,"nodeType":"704","messageId":"705","endLine":5,"endColumn":28},{"ruleId":"702","severity":1,"message":"832","line":5,"column":30,"nodeType":"704","messageId":"705","endLine":5,"endColumn":34},{"ruleId":"702","severity":1,"message":"833","line":5,"column":36,"nodeType":"704","messageId":"705","endLine":5,"endColumn":44},{"ruleId":"702","severity":1,"message":"789","line":5,"column":46,"nodeType":"704","messageId":"705","endLine":5,"endColumn":52},{"ruleId":"721","severity":1,"message":"834","line":119,"column":6,"nodeType":"723","endLine":119,"endColumn":8,"suggestions":"835"},{"ruleId":"702","severity":1,"message":"756","line":156,"column":24,"nodeType":"704","messageId":"705","endLine":156,"endColumn":39},{"ruleId":"702","severity":1,"message":"748","line":15,"column":3,"nodeType":"704","messageId":"705","endLine":15,"endColumn":10},{"ruleId":"702","severity":1,"message":"836","line":20,"column":3,"nodeType":"704","messageId":"705","endLine":20,"endColumn":19},{"ruleId":"702","severity":1,"message":"837","line":21,"column":3,"nodeType":"704","messageId":"705","endLine":21,"endColumn":21},{"ruleId":"702","severity":1,"message":"838","line":22,"column":3,"nodeType":"704","messageId":"705","endLine":22,"endColumn":14},{"ruleId":"702","severity":1,"message":"839","line":23,"column":3,"nodeType":"704","messageId":"705","endLine":23,"endColumn":25},{"ruleId":"735","severity":1,"message":"736","line":215,"column":23,"nodeType":"737","endLine":215,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":218,"column":23,"nodeType":"737","endLine":218,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":221,"column":23,"nodeType":"737","endLine":221,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":224,"column":23,"nodeType":"737","endLine":224,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":230,"column":17,"nodeType":"737","endLine":230,"endColumn":20},{"ruleId":"735","severity":1,"message":"736","line":256,"column":23,"nodeType":"737","endLine":256,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":259,"column":23,"nodeType":"737","endLine":259,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":262,"column":23,"nodeType":"737","endLine":262,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":265,"column":23,"nodeType":"737","endLine":265,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":268,"column":23,"nodeType":"737","endLine":268,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":271,"column":23,"nodeType":"737","endLine":271,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":277,"column":17,"nodeType":"737","endLine":277,"endColumn":20},{"ruleId":"702","severity":1,"message":"806","line":459,"column":19,"nodeType":"704","messageId":"705","endLine":459,"endColumn":33},{"ruleId":"721","severity":1,"message":"840","line":682,"column":6,"nodeType":"723","endLine":682,"endColumn":8,"suggestions":"841"},{"ruleId":"783","severity":1,"message":"784","line":713,"column":17,"nodeType":"737","endLine":716,"endColumn":19},{"ruleId":"702","severity":1,"message":"756","line":848,"column":24,"nodeType":"704","messageId":"705","endLine":848,"endColumn":39},{"ruleId":"702","severity":1,"message":"771","line":126,"column":11,"nodeType":"704","messageId":"705","endLine":126,"endColumn":22},{"ruleId":"702","severity":1,"message":"772","line":244,"column":13,"nodeType":"704","messageId":"705","endLine":244,"endColumn":21},{"ruleId":"721","severity":1,"message":"842","line":391,"column":6,"nodeType":"723","endLine":391,"endColumn":8,"suggestions":"843"},{"ruleId":"702","severity":1,"message":"756","line":525,"column":24,"nodeType":"704","messageId":"705","endLine":525,"endColumn":39},{"ruleId":"702","severity":1,"message":"844","line":24,"column":8,"nodeType":"704","messageId":"705","endLine":24,"endColumn":20},{"ruleId":"702","severity":1,"message":"845","line":25,"column":8,"nodeType":"704","messageId":"705","endLine":25,"endColumn":12},{"ruleId":"702","severity":1,"message":"846","line":38,"column":5,"nodeType":"704","messageId":"705","endLine":38,"endColumn":25},{"ruleId":"702","severity":1,"message":"805","line":44,"column":9,"nodeType":"704","messageId":"705","endLine":44,"endColumn":28},{"ruleId":"702","severity":1,"message":"806","line":46,"column":11,"nodeType":"704","messageId":"705","endLine":46,"endColumn":25},{"ruleId":"735","severity":1,"message":"736","line":187,"column":15,"nodeType":"737","endLine":192,"endColumn":16},{"ruleId":"795","severity":1,"message":"796","line":89,"column":28,"nodeType":"797","endLine":89,"endColumn":43},{"ruleId":"735","severity":1,"message":"794","line":99,"column":11,"nodeType":"737","endLine":106,"endColumn":12},{"ruleId":"795","severity":1,"message":"796","line":105,"column":13,"nodeType":"797","endLine":105,"endColumn":28},{"ruleId":"735","severity":1,"message":"736","line":111,"column":11,"nodeType":"737","endLine":111,"endColumn":14},{"ruleId":"735","severity":1,"message":"736","line":114,"column":11,"nodeType":"737","endLine":114,"endColumn":14},{"ruleId":"735","severity":1,"message":"736","line":117,"column":11,"nodeType":"737","endLine":117,"endColumn":14},{"ruleId":"735","severity":1,"message":"794","line":188,"column":27,"nodeType":"737","endLine":195,"endColumn":28},{"ruleId":"795","severity":1,"message":"796","line":194,"column":29,"nodeType":"797","endLine":194,"endColumn":44},{"ruleId":"702","severity":1,"message":"787","line":312,"column":29,"nodeType":"704","messageId":"705","endLine":312,"endColumn":43},{"ruleId":"702","severity":1,"message":"788","line":312,"column":45,"nodeType":"704","messageId":"705","endLine":312,"endColumn":50},{"ruleId":"702","severity":1,"message":"787","line":425,"column":29,"nodeType":"704","messageId":"705","endLine":425,"endColumn":43},{"ruleId":"702","severity":1,"message":"788","line":425,"column":45,"nodeType":"704","messageId":"705","endLine":425,"endColumn":50},{"ruleId":"798","severity":1,"message":"799","line":494,"column":25,"nodeType":"797","endLine":494,"endColumn":45},{"ruleId":"702","severity":1,"message":"787","line":566,"column":41,"nodeType":"704","messageId":"705","endLine":566,"endColumn":55},{"ruleId":"702","severity":1,"message":"788","line":567,"column":41,"nodeType":"704","messageId":"705","endLine":567,"endColumn":46},{"ruleId":"735","severity":1,"message":"736","line":826,"column":31,"nodeType":"737","endLine":826,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":858,"column":43,"nodeType":"737","endLine":858,"endColumn":73},{"ruleId":"735","severity":1,"message":"736","line":877,"column":31,"nodeType":"737","endLine":877,"endColumn":34},{"ruleId":"735","severity":1,"message":"794","line":911,"column":35,"nodeType":"737","endLine":919,"endColumn":36},{"ruleId":"795","severity":1,"message":"796","line":918,"column":37,"nodeType":"797","endLine":918,"endColumn":52},{"ruleId":"798","severity":1,"message":"799","line":932,"column":30,"nodeType":"797","endLine":932,"endColumn":50},{"ruleId":"735","severity":1,"message":"794","line":962,"column":29,"nodeType":"737","endLine":969,"endColumn":30},{"ruleId":"795","severity":1,"message":"796","line":968,"column":31,"nodeType":"797","endLine":968,"endColumn":46},{"ruleId":"735","severity":1,"message":"736","line":984,"column":29,"nodeType":"737","endLine":992,"endColumn":30},{"ruleId":"798","severity":1,"message":"799","line":1011,"column":25,"nodeType":"797","endLine":1011,"endColumn":45},{"ruleId":"735","severity":1,"message":"736","line":1026,"column":29,"nodeType":"737","endLine":1038,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":1051,"column":33,"nodeType":"737","endLine":1063,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":1073,"column":33,"nodeType":"737","endLine":1085,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":1097,"column":31,"nodeType":"737","endLine":1109,"endColumn":32},{"ruleId":"735","severity":1,"message":"736","line":1122,"column":29,"nodeType":"737","endLine":1134,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":1144,"column":29,"nodeType":"737","endLine":1156,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":1168,"column":29,"nodeType":"737","endLine":1180,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":1190,"column":29,"nodeType":"737","endLine":1202,"endColumn":30},{"ruleId":"735","severity":1,"message":"736","line":1224,"column":35,"nodeType":"737","endLine":1237,"endColumn":36},{"ruleId":"735","severity":1,"message":"736","line":1250,"column":39,"nodeType":"737","endLine":1263,"endColumn":40},{"ruleId":"735","severity":1,"message":"736","line":1273,"column":39,"nodeType":"737","endLine":1286,"endColumn":40},{"ruleId":"735","severity":1,"message":"736","line":1298,"column":37,"nodeType":"737","endLine":1311,"endColumn":38},{"ruleId":"702","severity":1,"message":"847","line":2,"column":8,"nodeType":"704","messageId":"705","endLine":2,"endColumn":13},{"ruleId":"783","severity":1,"message":"784","line":29,"column":13,"nodeType":"737","endLine":32,"endColumn":15},{"ruleId":"702","severity":1,"message":"831","line":3,"column":25,"nodeType":"704","messageId":"705","endLine":3,"endColumn":28},{"ruleId":"702","severity":1,"message":"832","line":3,"column":30,"nodeType":"704","messageId":"705","endLine":3,"endColumn":34},{"ruleId":"702","severity":1,"message":"833","line":3,"column":36,"nodeType":"704","messageId":"705","endLine":3,"endColumn":44},{"ruleId":"702","severity":1,"message":"789","line":3,"column":46,"nodeType":"704","messageId":"705","endLine":3,"endColumn":52},{"ruleId":"721","severity":1,"message":"848","line":248,"column":6,"nodeType":"723","endLine":248,"endColumn":8,"suggestions":"849"},{"ruleId":"735","severity":1,"message":"736","line":268,"column":11,"nodeType":"737","endLine":275,"endColumn":12},{"ruleId":"702","severity":1,"message":"756","line":413,"column":24,"nodeType":"704","messageId":"705","endLine":413,"endColumn":39},{"ruleId":"702","severity":1,"message":"831","line":3,"column":25,"nodeType":"704","messageId":"705","endLine":3,"endColumn":28},{"ruleId":"702","severity":1,"message":"832","line":3,"column":30,"nodeType":"704","messageId":"705","endLine":3,"endColumn":34},{"ruleId":"702","severity":1,"message":"833","line":3,"column":36,"nodeType":"704","messageId":"705","endLine":3,"endColumn":44},{"ruleId":"702","severity":1,"message":"789","line":3,"column":46,"nodeType":"704","messageId":"705","endLine":3,"endColumn":52},{"ruleId":"702","severity":1,"message":"850","line":31,"column":5,"nodeType":"704","messageId":"705","endLine":31,"endColumn":20},{"ruleId":"702","severity":1,"message":"851","line":39,"column":10,"nodeType":"704","messageId":"705","endLine":39,"endColumn":25},{"ruleId":"702","severity":1,"message":"852","line":41,"column":10,"nodeType":"704","messageId":"705","endLine":41,"endColumn":30},{"ruleId":"702","severity":1,"message":"853","line":42,"column":10,"nodeType":"704","messageId":"705","endLine":42,"endColumn":22},{"ruleId":"702","severity":1,"message":"854","line":42,"column":24,"nodeType":"704","messageId":"705","endLine":42,"endColumn":39},{"ruleId":"702","severity":1,"message":"855","line":44,"column":10,"nodeType":"704","messageId":"705","endLine":44,"endColumn":25},{"ruleId":"702","severity":1,"message":"856","line":44,"column":27,"nodeType":"704","messageId":"705","endLine":44,"endColumn":45},{"ruleId":"702","severity":1,"message":"857","line":170,"column":9,"nodeType":"704","messageId":"705","endLine":170,"endColumn":43},{"ruleId":"721","severity":1,"message":"858","line":246,"column":6,"nodeType":"723","endLine":246,"endColumn":8,"suggestions":"859"},{"ruleId":"702","severity":1,"message":"756","line":341,"column":24,"nodeType":"704","messageId":"705","endLine":341,"endColumn":39},{"ruleId":"702","severity":1,"message":"793","line":57,"column":27,"nodeType":"704","messageId":"705","endLine":57,"endColumn":42},{"ruleId":"702","severity":1,"message":"727","line":1,"column":27,"nodeType":"704","messageId":"705","endLine":1,"endColumn":36},{"ruleId":"702","severity":1,"message":"716","line":6,"column":3,"nodeType":"704","messageId":"705","endLine":6,"endColumn":8},{"ruleId":"702","severity":1,"message":"747","line":10,"column":3,"nodeType":"704","messageId":"705","endLine":10,"endColumn":7},{"ruleId":"702","severity":1,"message":"748","line":11,"column":3,"nodeType":"704","messageId":"705","endLine":11,"endColumn":10},{"ruleId":"702","severity":1,"message":"728","line":12,"column":3,"nodeType":"704","messageId":"705","endLine":12,"endColumn":8},{"ruleId":"702","severity":1,"message":"789","line":13,"column":3,"nodeType":"704","messageId":"705","endLine":13,"endColumn":9},{"ruleId":"702","severity":1,"message":"747","line":4,"column":42,"nodeType":"704","messageId":"705","endLine":4,"endColumn":46},{"ruleId":"702","severity":1,"message":"748","line":4,"column":48,"nodeType":"704","messageId":"705","endLine":4,"endColumn":55},{"ruleId":"702","severity":1,"message":"728","line":4,"column":57,"nodeType":"704","messageId":"705","endLine":4,"endColumn":62},{"ruleId":"702","severity":1,"message":"852","line":16,"column":5,"nodeType":"704","messageId":"705","endLine":16,"endColumn":25},{"ruleId":"702","severity":1,"message":"860","line":17,"column":5,"nodeType":"704","messageId":"705","endLine":17,"endColumn":21},{"ruleId":"702","severity":1,"message":"787","line":221,"column":33,"nodeType":"704","messageId":"705","endLine":221,"endColumn":47},{"ruleId":"702","severity":1,"message":"788","line":221,"column":49,"nodeType":"704","messageId":"705","endLine":221,"endColumn":54},{"ruleId":"702","severity":1,"message":"787","line":268,"column":41,"nodeType":"704","messageId":"705","endLine":268,"endColumn":55},{"ruleId":"702","severity":1,"message":"788","line":269,"column":41,"nodeType":"704","messageId":"705","endLine":269,"endColumn":46},{"ruleId":"702","severity":1,"message":"747","line":5,"column":42,"nodeType":"704","messageId":"705","endLine":5,"endColumn":46},{"ruleId":"702","severity":1,"message":"748","line":5,"column":48,"nodeType":"704","messageId":"705","endLine":5,"endColumn":55},{"ruleId":"702","severity":1,"message":"728","line":5,"column":57,"nodeType":"704","messageId":"705","endLine":5,"endColumn":62},{"ruleId":"702","severity":1,"message":"860","line":19,"column":5,"nodeType":"704","messageId":"705","endLine":19,"endColumn":21},{"ruleId":"721","severity":1,"message":"861","line":100,"column":6,"nodeType":"723","endLine":100,"endColumn":24,"suggestions":"862"},{"ruleId":"702","severity":1,"message":"787","line":253,"column":33,"nodeType":"704","messageId":"705","endLine":253,"endColumn":47},{"ruleId":"702","severity":1,"message":"788","line":253,"column":49,"nodeType":"704","messageId":"705","endLine":253,"endColumn":54},{"ruleId":"702","severity":1,"message":"787","line":308,"column":41,"nodeType":"704","messageId":"705","endLine":308,"endColumn":55},{"ruleId":"702","severity":1,"message":"788","line":309,"column":41,"nodeType":"704","messageId":"705","endLine":309,"endColumn":46},{"ruleId":"702","severity":1,"message":"747","line":13,"column":3,"nodeType":"704","messageId":"705","endLine":13,"endColumn":7},{"ruleId":"702","severity":1,"message":"748","line":14,"column":3,"nodeType":"704","messageId":"705","endLine":14,"endColumn":10},{"ruleId":"702","severity":1,"message":"728","line":15,"column":3,"nodeType":"704","messageId":"705","endLine":15,"endColumn":8},{"ruleId":"721","severity":1,"message":"790","line":94,"column":6,"nodeType":"723","endLine":94,"endColumn":42,"suggestions":"863"},{"ruleId":"702","severity":1,"message":"864","line":130,"column":25,"nodeType":"704","messageId":"705","endLine":130,"endColumn":36},{"ruleId":"795","severity":1,"message":"796","line":188,"column":15,"nodeType":"797","endLine":188,"endColumn":30},{"ruleId":"702","severity":1,"message":"787","line":275,"column":27,"nodeType":"704","messageId":"705","endLine":275,"endColumn":41},{"ruleId":"702","severity":1,"message":"788","line":275,"column":43,"nodeType":"704","messageId":"705","endLine":275,"endColumn":48},"no-unused-vars","'RecoveryPass' is defined but never used.","Identifier","unusedVar","'token' is assigned a value but never used.","no-native-reassign",["865"],"no-negated-in-lhs",["866"],"'isEmpty' is defined but never used.","'PURGE' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'Input' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handlerAsyncCallAppis', 'handlerCallGetInvitationUser', and 'props'. Either include them or remove the dependency array.","ArrayExpression",["867"],"React Hook useEffect has missing dependencies: 'handlerAsyncCallApiis' and 'handlerFinishSession'. Either include them or remove the dependency array.",["868"],"'useEffect' is defined but never used.","'Radio' is defined but never used.","'Skeleton' is defined but never used.","'UserOutlined' is defined but never used.","'PhoneOutlined' is defined but never used.","'Option' is assigned a value but never used.","'SD_ALERT_31' is defined but never used.","'idCustomer' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","React Hook useEffect has missing dependencies: 'arrayIconst', 'dataProfile', 'handlerCallGetNotifications', and 'history'. Either include them or remove the dependency array.",["869"],"'NumberFormat' is defined but never used.","'Layout' is defined but never used.","'Rate' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Spin' is defined but never used.","'Tooltip' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'SyncOutlined' is defined but never used.","'CloseOutlined' is defined but never used.","React Hook useEffect has missing dependencies: 'handlerCallAsyncApis' and 'match'. Either include them or remove the dependency array.",["870"],"React Hook useEffect has a missing dependency: 'hanlderCallGetTypeFormProperties'. Either include it or remove the dependency array.",["871"],"'dataProfileMenu' is assigned a value but never used.","'HEADER' is defined but never used.","'callGetContractComment' is assigned a value but never used.","'argsv2' is assigned a value but never used.","'responseResult' is assigned a value but never used.","'idCustomerTenant' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetAllCustomerTenantById'. Either include it or remove the dependency array.",["872"],"'idCustomerTF' is assigned a value but never used.","'idCustomerTenantTF' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'callAsynApis'. Either include it or remove the dependency array.",["873"],["874"],["875"],"'callAddDocumentContract' is assigned a value but never used.","'arrayResult' is assigned a value but never used.","'response' is assigned a value but never used.",["876"],"'dotChange' is assigned a value but never used.","'contentStyle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handlerCallGetAllCustomerTenantById' and 'handlerCallGetAllDocumentTypes'. Either include them or remove the dependency array.",["877"],"React Hook useEffect has a missing dependency: 'handlerCalllSyncApis'. Either include it or remove the dependency array.",["878"],"'LoadingSpin' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataProfile.idUserType' and 'openSection'. Either include them or remove the dependency array.",["879"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'property' is assigned a value but never used.","'setProperty' is assigned a value but never used.","'formattedValue' is assigned a value but never used.","'value' is assigned a value but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'dataForm'. Either include it or remove the dependency array. You can also do a functional update 'setDataForm(d => ...)' if you only need 'dataForm' in the 'setDataForm' call.",["880"],"'TextArea' is assigned a value but never used.","'configureOption' is assigned a value but never used.","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","jsx-a11y/aria-role","Elements with ARIA roles must use a valid, non-abstract ARIA role.","'Avatar' is defined but never used.",["881"],["882"],["883"],["884"],"'renderCardComponent' is assigned a value but never used.","'contractStatus' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'onChangeZipCode'. Either include it or remove the dependency array.",["885"],["886"],"React Hook useEffect has missing dependencies: 'dataForm.idCountryNationality', 'dataForm.idMaritalStatus', 'dataForm.idType', 'onChangeZipCode', and 'visibleComponents'. Either include them or remove the dependency array. You can also do a functional update 'setVisibleComponents(v => ...)' if you only need 'visibleComponents' in the 'setVisibleComponents' call.",["887"],["888"],["889"],["890"],["891"],"'onClickBack' is assigned a value but never used.","'dataProperties' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'frontFunctions'. Either include it or remove the dependency array.",["892"],"React Hook useEffect has missing dependencies: 'dataCommerceSociality', 'dataStates', and 'visibleComponents'. Either include them or remove the dependency array. You can also do a functional update 'setVisibleComponents(v => ...)' if you only need 'visibleComponents' in the 'setVisibleComponents' call.",["893"],"'valueSelect' is assigned a value but never used.",["894"],["895"],"React Hook useEffect has missing dependencies: 'handlerCallGetAllProspectStatus', 'handlerCallGetLandingProspectCoincidences', and 'handlerCallGetLandingProspectStats'. Either include them or remove the dependency array.",["896"],"'Tag' is defined but never used.","'Menu' is defined but never used.","'Dropdown' is defined but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetCustomerAgentCoincidences'. Either include it or remove the dependency array.",["897"],"'DownloadOutlined' is defined but never used.","'CheckCircleTwoTone' is defined but never used.","'EditTwoTone' is defined but never used.","'QuestionCircleOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'handlerCallGetLegalContractCoincidences'. Either include it or remove the dependency array.",["898"],"React Hook useEffect has missing dependencies: 'callAsynApis', 'handlerCallGetAllPersonalReferencesStatus', and 'handlerCallGetAllRelationshipTypes'. Either include them or remove the dependency array.",["899"],"'DocumentIcon' is defined but never used.","'Lock' is defined but never used.","'onOpenUploadDocument' is assigned a value but never used.","'isNil' is defined but never used.","React Hook useEffect has missing dependencies: 'handlerCallGetAllProviderPaymentForm', 'handlerCallGetAllProviderTypes', 'handlerCallGetAllProvidersCoincidences', and 'handlerCallGetPolicies'. Either include them or remove the dependency array.",["900"],"'callGetPolicies' is assigned a value but never used.","'dataPaymentForm' is assigned a value but never used.","'dataCollaboratorType' is assigned a value but never used.","'dataPolicies' is assigned a value but never used.","'setDataPolicies' is assigned a value but never used.","'openAddProvider' is assigned a value but never used.","'setOpenAddProvider' is assigned a value but never used.","'handlerCallGetAllCollaboratorTypes' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handlerCallGetAllProviderPaymentForm', 'handlerCallGetAllRequestProviderStatus', and 'handlerCallGetAllRequestProvidersCoincidences'. Either include them or remove the dependency array.",["901"],"'onSelectProvider' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataForm' and 'dataPaymentForm'. Either include them or remove the dependency array. You can also do a functional update 'setDataForm(d => ...)' if you only need 'dataForm' in the 'setDataForm' call.",["902"],["903"],"'optionClick' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"904","fix":"905"},{"desc":"906","fix":"907"},{"desc":"908","fix":"909"},{"desc":"910","fix":"911"},{"desc":"912","fix":"913"},{"desc":"914","fix":"915"},{"desc":"916","fix":"917"},{"desc":"910","fix":"918"},{"desc":"912","fix":"919"},{"desc":"916","fix":"920"},{"desc":"921","fix":"922"},{"desc":"923","fix":"924"},{"desc":"925","fix":"926"},{"desc":"927","fix":"928"},{"desc":"929","fix":"930"},{"desc":"931","fix":"932"},{"desc":"933","fix":"934"},{"desc":"935","fix":"936"},{"desc":"937","fix":"938"},{"desc":"927","fix":"939"},{"desc":"940","fix":"941"},{"desc":"927","fix":"942"},{"desc":"943","fix":"944"},{"desc":"927","fix":"945"},{"desc":"946","fix":"947"},{"desc":"948","fix":"949"},{"desc":"950","fix":"951"},{"desc":"952","fix":"953"},{"desc":"927","fix":"954"},{"desc":"955","fix":"956"},{"desc":"957","fix":"958"},{"desc":"959","fix":"960"},{"desc":"961","fix":"962"},{"desc":"963","fix":"964"},{"desc":"965","fix":"966"},{"desc":"967","fix":"968"},{"desc":"969","fix":"970"},"Update the dependencies array to be: [handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",{"range":"971","text":"972"},"Update the dependencies array to be: [handlerAsyncCallApiis, handlerFinishSession]",{"range":"973","text":"974"},"Update the dependencies array to be: [arrayIconst, dataProfile, handlerCallGetNotifications, history]",{"range":"975","text":"976"},"Update the dependencies array to be: [handlerCallAsyncApis, match]",{"range":"977","text":"978"},"Update the dependencies array to be: [current, dataForm, hanlderCallGetTypeFormProperties]",{"range":"979","text":"980"},"Update the dependencies array to be: [handlerCallGetAllCustomerTenantById]",{"range":"981","text":"982"},"Update the dependencies array to be: [callAsynApis]",{"range":"983","text":"984"},{"range":"985","text":"978"},{"range":"986","text":"980"},{"range":"987","text":"984"},"Update the dependencies array to be: [handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",{"range":"988","text":"989"},"Update the dependencies array to be: [handlerCalllSyncApis]",{"range":"990","text":"991"},"Update the dependencies array to be: [dataGetContract, dataProfile.idUserType, openSection]",{"range":"992","text":"993"},"Update the dependencies array to be: [dataForm, dataZipCodeAdress]",{"range":"994","text":"995"},"Update the dependencies array to be: [dataForm, dataOwnerSearch]",{"range":"996","text":"997"},"Update the dependencies array to be: [dataForm, dataTenantSearch]",{"range":"998","text":"999"},"Update the dependencies array to be: [dataForm, dataSecondTenant]",{"range":"1000","text":"1001"},"Update the dependencies array to be: [dataAdviserSearch, dataForm]",{"range":"1002","text":"1003"},"Update the dependencies array to be: [dataFormSave, dataPropertyTypes, onChangeZipCode]",{"range":"1004","text":"1005"},{"range":"1006","text":"995"},"Update the dependencies array to be: [dataFormSave, dataNationalities, dataIdTypes, dataMaritalStatus, visibleComponents, onChangeZipCode, dataForm.idCountryNationality, dataForm.idType, dataForm.idMaritalStatus]",{"range":"1007","text":"1008"},{"range":"1009","text":"995"},"Update the dependencies array to be: [dataNationalities, dataIdTypes, dataFormSave, dataMaritalStatus, dataMaritalRegime, onChangeZipCode]",{"range":"1010","text":"1011"},{"range":"1012","text":"995"},"Update the dependencies array to be: [dataForm, dataZipCodeAdressEndorsement]",{"range":"1013","text":"1014"},"Update the dependencies array to be: [dataFormSave, dataOccupations, frontFunctions]",{"range":"1015","text":"1016"},"Update the dependencies array to be: [dataNationalities, dataIdTypes, dataFormSave, visibleComponents, dataCommerceSociality, dataStates]",{"range":"1017","text":"1018"},"Update the dependencies array to be: [dataFormSave, onChangeZipCode]",{"range":"1019","text":"1020"},{"range":"1021","text":"995"},"Update the dependencies array to be: [handlerCallGetAllProspectStatus, handlerCallGetLandingProspectCoincidences, handlerCallGetLandingProspectStats]",{"range":"1022","text":"1023"},"Update the dependencies array to be: [handlerCallGetCustomerAgentCoincidences]",{"range":"1024","text":"1025"},"Update the dependencies array to be: [handlerCallGetLegalContractCoincidences]",{"range":"1026","text":"1027"},"Update the dependencies array to be: [callAsynApis, handlerCallGetAllPersonalReferencesStatus, handlerCallGetAllRelationshipTypes]",{"range":"1028","text":"1029"},"Update the dependencies array to be: [handlerCallGetAllProviderPaymentForm, handlerCallGetAllProviderTypes, handlerCallGetAllProvidersCoincidences, handlerCallGetPolicies]",{"range":"1030","text":"1031"},"Update the dependencies array to be: [handlerCallGetAllProviderPaymentForm, handlerCallGetAllRequestProviderStatus, handlerCallGetAllRequestProvidersCoincidences]",{"range":"1032","text":"1033"},"Update the dependencies array to be: [dataForm, dataPaymentForm, dataProviderById]",{"range":"1034","text":"1035"},"Update the dependencies array to be: [dataProviderById, dataCollaborator, dataForm]",{"range":"1036","text":"1037"},[38175,38177],"[handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",[2574,2576],"[handlerAsyncCallApiis, handlerFinishSession]",[12353,12355],"[arrayIconst, dataProfile, handlerCallGetNotifications, history]",[22437,22439],"[handlerCallAsyncApis, match]",[22589,22608],"[current, dataForm, hanlderCallGetTypeFormProperties]",[15258,15260],"[handlerCallGetAllCustomerTenantById]",[3791,3793],"[callAsynApis]",[16846,16848],[16998,17017],[19796,19798],[9118,9120],"[handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",[19466,19468],"[handlerCalllSyncApis]",[3461,3478],"[dataGetContract, dataProfile.idUserType, openSection]",[1433,1452],"[dataForm, dataZipCodeAdress]",[1836,1853],"[dataForm, dataOwnerSearch]",[2406,2424],"[dataForm, dataTenantSearch]",[2985,3003],"[dataForm, dataSecondTenant]",[3487,3506],"[dataAdviserSearch, dataForm]",[2048,2081],"[dataFormSave, dataPropertyTypes, onChangeZipCode]",[2311,2330],[3378,3443],"[dataFormSave, dataNationalities, dataIdTypes, dataMaritalStatus, visibleComponents, onChangeZipCode, dataForm.idCountryNationality, dataForm.idType, dataForm.idMaritalStatus]",[3673,3692],[5372,5487],"[dataNationalities, dataIdTypes, dataFormSave, dataMaritalStatus, dataMaritalRegime, onChangeZipCode]",[5753,5772],[6057,6087],"[dataForm, dataZipCodeAdressEndorsement]",[2239,2270],"[dataFormSave, dataOccupations, frontFunctions]",[4422,4468],"[dataNationalities, dataIdTypes, dataFormSave, visibleComponents, dataCommerceSociality, dataStates]",[1767,1781],"[dataFormSave, onChangeZipCode]",[2011,2030],[7746,7748],"[handlerCallGetAllProspectStatus, handlerCallGetLandingProspectCoincidences, handlerCallGetLandingProspectStats]",[3281,3283],"[handlerCallGetCustomerAgentCoincidences]",[22546,22548],"[handlerCallGetLegalContractCoincidences]",[12378,12380],"[callAsynApis, handlerCallGetAllPersonalReferencesStatus, handlerCallGetAllRelationshipTypes]",[7654,7656],"[handlerCallGetAllProviderPaymentForm, handlerCallGetAllProviderTypes, handlerCallGetAllProvidersCoincidences, handlerCallGetPolicies]",[7761,7763],"[handlerCallGetAllProviderPaymentForm, handlerCallGetAllRequestProviderStatus, handlerCallGetAllRequestProvidersCoincidences]",[2913,2931],"[dataForm, dataPaymentForm, dataProviderById]",[2350,2386],"[dataProviderById, dataCollaborator, dataForm]"]