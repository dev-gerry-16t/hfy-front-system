[{"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js":"1","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js":"2","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js":"3","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx":"4","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js":"5","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js":"6","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js":"7","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js":"8","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js":"9","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js":"10","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js":"11","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js":"12","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js":"13","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx":"14","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx":"15","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx":"16","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js":"17","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js":"18","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js":"19","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx":"20","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx":"21","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx":"22","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx":"23","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx":"24","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx":"25","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx":"26","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx":"27","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx":"28","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx":"29","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx":"30","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Signature\\signatureIndex.jsx":"31","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js":"32","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx":"33","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx":"34","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx":"35","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx":"36","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx":"37","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx":"38","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx":"39","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx":"40","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx":"41","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx":"42","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx":"43","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx":"44","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx":"45","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx":"46","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx":"47","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx":"48","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx":"49","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailable.jsx":"50"},{"size":1174,"mtime":1609949390941,"results":"51","hashOfConfig":"52"},{"size":2819,"mtime":1609946400006,"results":"53","hashOfConfig":"52"},{"size":362,"mtime":499162500000,"results":"54","hashOfConfig":"52"},{"size":6916,"mtime":1609297335336,"results":"55","hashOfConfig":"52"},{"size":34935,"mtime":1611010199535,"results":"56","hashOfConfig":"52"},{"size":2355,"mtime":1611010055654,"results":"57","hashOfConfig":"52"},{"size":1234,"mtime":1609949250693,"results":"58","hashOfConfig":"52"},{"size":1135,"mtime":1610649657427,"results":"59","hashOfConfig":"52"},{"size":163,"mtime":1611006948266,"results":"60","hashOfConfig":"52"},{"size":4811,"mtime":1608413936882,"results":"61","hashOfConfig":"52"},{"size":1673,"mtime":1608319107999,"results":"62","hashOfConfig":"52"},{"size":542,"mtime":1609270817549,"results":"63","hashOfConfig":"52"},{"size":106,"mtime":1608319107999,"results":"64","hashOfConfig":"52"},{"size":33060,"mtime":1609945276076,"results":"65","hashOfConfig":"52"},{"size":3193,"mtime":1609297436825,"results":"66","hashOfConfig":"52"},{"size":8670,"mtime":1611277256644,"results":"67","hashOfConfig":"52"},{"size":1304,"mtime":1611091168611,"results":"68","hashOfConfig":"52"},{"size":821,"mtime":1609272401521,"results":"69","hashOfConfig":"52"},{"size":261,"mtime":1609271260730,"results":"70","hashOfConfig":"52"},{"size":15754,"mtime":1610734088996,"results":"71","hashOfConfig":"52"},{"size":11455,"mtime":1611018050631,"results":"72","hashOfConfig":"52"},{"size":11318,"mtime":1611018045097,"results":"73","hashOfConfig":"52"},{"size":2841,"mtime":1610994108283,"results":"74","hashOfConfig":"52"},{"size":2232,"mtime":1611017794656,"results":"75","hashOfConfig":"52"},{"size":2820,"mtime":1611016123082,"results":"76","hashOfConfig":"52"},{"size":4382,"mtime":1610517515464,"results":"77","hashOfConfig":"52"},{"size":2124,"mtime":1609806628805,"results":"78","hashOfConfig":"52"},{"size":13671,"mtime":1611279250026,"results":"79","hashOfConfig":"52"},{"size":5068,"mtime":1610757156844,"results":"80","hashOfConfig":"52"},{"size":8735,"mtime":1610756511772,"results":"81","hashOfConfig":"52"},{"size":70329,"mtime":1610085836496,"results":"82","hashOfConfig":"52"},{"size":5725,"mtime":1610130966985,"results":"83","hashOfConfig":"52"},{"size":4643,"mtime":1610498620969,"results":"84","hashOfConfig":"52"},{"size":6492,"mtime":1611006351087,"results":"85","hashOfConfig":"52"},{"size":2267,"mtime":1611195928855,"results":"86","hashOfConfig":"52"},{"size":1462,"mtime":1610577374867,"results":"87","hashOfConfig":"52"},{"size":6788,"mtime":1611280139595,"results":"88","hashOfConfig":"52"},{"size":6577,"mtime":1611269332472,"results":"89","hashOfConfig":"52"},{"size":6111,"mtime":1611255669042,"results":"90","hashOfConfig":"52"},{"size":8071,"mtime":1611270838178,"results":"91","hashOfConfig":"52"},{"size":7360,"mtime":1611259008580,"results":"92","hashOfConfig":"52"},{"size":6138,"mtime":1611265682237,"results":"93","hashOfConfig":"52"},{"size":2484,"mtime":1611185531429,"results":"94","hashOfConfig":"52"},{"size":13767,"mtime":1611270901789,"results":"95","hashOfConfig":"52"},{"size":6211,"mtime":1611254053730,"results":"96","hashOfConfig":"52"},{"size":7427,"mtime":1611187835142,"results":"97","hashOfConfig":"52"},{"size":2401,"mtime":1611185670664,"results":"98","hashOfConfig":"52"},{"size":3065,"mtime":1611188028626,"results":"99","hashOfConfig":"52"},{"size":2942,"mtime":1611196124935,"results":"100","hashOfConfig":"52"},{"size":8058,"mtime":1611284538958,"results":"101","hashOfConfig":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"1vnvna8",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"104"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"104"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"104"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"104"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"104"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"104"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"104"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"104"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"104"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"104"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"104"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"104"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"104"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"104"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"104"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"104"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"104"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"194","messages":"195","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"196","messages":"197","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"198","messages":"199","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"200","messages":"201","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"206","usedDeprecatedRules":"104"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"209","messages":"210","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"104"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"104"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"104"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"104"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\index.js",[],["225","226"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\App.js",["227"],"import React from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport { connect } from \"react-redux\";\r\nimport { Router } from \"react-router\";\r\nimport Loadable from \"react-loadable\";\r\nimport { ConfigProvider } from \"antd\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport es_ES from \"antd/lib/locale-provider/es_ES\";\r\nimport \"./App.css\";\r\n\r\nconst loading = () => (\r\n  <div className=\"animated fadeIn pt-3 text-center\">\r\n    <div className=\"sk-spinner sk-spinner-pulse\" />\r\n  </div>\r\n);\r\n\r\nconst Login = Loadable({\r\n  loader: () => import(\"./containers/Login/login\"),\r\n  loading,\r\n});\r\n\r\nconst Registro = Loadable({\r\n  loader: () => import(\"./containers/Register/Register\"),\r\n  loading,\r\n});\r\n\r\nconst Auth = Loadable({\r\n  loader: () => import(\"./containers/Auth/auth\"),\r\n  loading,\r\n});\r\n\r\nconst DefaultLayout = Loadable({\r\n  loader: () => import(\"./containers/Layout/layout\"),\r\n  loading,\r\n});\r\n\r\nconst App = (props) => {\r\n  const { history, token, dataProfile } = props;\r\n  const accessDev = false//window.location.hostname === \"localhost\";\r\n  return (\r\n    <Router history={history}>\r\n      <ConfigProvider locale={es_ES}>\r\n        <Switch>\r\n          <Route exact path=\"/\" name=\"Login Page\" component={Login} />\r\n          <Route path=\"/login\" name=\"Login Page\" component={Login} />\r\n          <Route path=\"/index\" name=\"Login Page\" component={Login} />\r\n          <Route exact path=\"/registro\" name=\"Registro\" component={Registro} />\r\n          <Route\r\n            exact\r\n            path=\"/registro/:idInvitation/:idCustomerType\"\r\n            name=\"Registro\"\r\n            component={Registro}\r\n          />\r\n          <Route path=\"/auth\" name=\"Autorizacion\" component={Auth} />\r\n          <Route path=\"/logout\" name=\"Clean App and Close\" component={Auth} />\r\n          <Route\r\n            history={history}\r\n            path=\"/websystem/\"\r\n            name=\"Home\"\r\n            render={(props) => (\r\n              <DefaultLayout\r\n                {...props}\r\n                authenticate={\r\n                  isNil(dataProfile.idSystemUser) === false &&\r\n                  isEmpty(dataProfile.idSystemUser) === false\r\n                }\r\n                authenticated={\r\n                  (isNil(dataProfile.dataProfile) === false &&\r\n                    isNil(dataProfile.dataProfile.idSystemUser) === false &&\r\n                    isEmpty(dataProfile.dataProfile.idSystemUser) === false) ||\r\n                  accessDev\r\n                }\r\n              />\r\n            )}\r\n          />\r\n        </Switch>\r\n      </ConfigProvider>\r\n    </Router>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile } = state;\r\n  return { dataProfile };\r\n};\r\n\r\nconst mapDispatchToProps = null;\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\reportWebVitals.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Login\\login.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\actions.js",["228"],"import { API_CONSTANTS, HEADER } from \"../constants/apiConstants\";\r\nimport RequesterAxios from \"../requester/requester\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nconst callApiLogin = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.LOGIN,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomers = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllPersons = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PERSON_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllEndorsement = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_ENDORSEMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetInvitationUser = (paramId) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const endPoint = `${API_CONSTANTS.GET_ALL_CUSTOMER_INVITATION}${paramId}`;\r\n    const response = await RequesterAxios.get(endPoint, config);\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllRegisterUser = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllVerifyCode = (data) => async (dispatch, getState) => {\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.VERIFY_CODE_REGISTER,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllUserProfile = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_USER_PROFILE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllMenuProfile = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_MENU_PROFILE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerTenantById = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TENANT_BY_ID,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllCustomerCoincidences = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_CUSTOMER_TENANT_COINCIDENCES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetStatsChart = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_STATS_CHART,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetZipCodeAdress = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ZIP_CODE_ADRESS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllTenantsCatalog = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_TENANTS_CATALOG,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllBankCatalog = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_BANKS_CATALOG,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddProperty = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.CUSTOMER_ADD_PROPERTY,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetProperties = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PROPERTIES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetDepartments = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_DEPARTMENTS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPaymentTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PYMENT_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetAllDocumentTypes = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_DOCUMENT_TYPES,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPaymentContractDocument = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_PAYMENT_IN_CONTRACT_DOCUMENT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetPaymentContract = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_ALL_PYMENT_CONTRACT,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddTenant = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.SEND_TENANT_INVITATION,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddCustomerMessage = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.ADD_CUSTOMER_MESSAGE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callGetCustomerMessage = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.GET_CUSTOMER_MESSAGE,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callRequestAdvancement = (data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.REQUEST_ADVANCEMENT_RENTS,\r\n      data,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nconst callAddDocument = (file, data) => async (dispatch, getState) => {\r\n  const state = getState();\r\n  const { dataProfile } = state;\r\n  HEADER.Authorization = \"Bearer \" + dataProfile.dataProfile.token;\r\n  const formData = new FormData();\r\n  formData.append(\"file\", file);\r\n  formData.append(\"fileProperties\", JSON.stringify(data));\r\n  try {\r\n    const config = { headers: { ...HEADER } };\r\n    const response = await RequesterAxios.post(\r\n      API_CONSTANTS.ADD_DOCUMENT,\r\n      formData,\r\n      config\r\n    );\r\n    const responseResultStatus =\r\n      isNil(response) === false && isNil(response.status) === false\r\n        ? response.status\r\n        : null;\r\n    const responseResultMessage =\r\n      isNil(response) === false &&\r\n      isNil(response.data) === false &&\r\n      isNil(response.data.response) === false &&\r\n      isNil(response.data.response.message) === false\r\n        ? response.data.response.message\r\n        : null;\r\n    const responseResultData =\r\n      isNil(response) === false && isNil(response.data) === false\r\n        ? response.data\r\n        : null;\r\n    if (isNil(responseResultStatus) === false && responseResultStatus === 200) {\r\n      return responseResultData;\r\n    } else {\r\n      throw isNil(responseResultMessage) === false\r\n        ? responseResultMessage\r\n        : null;\r\n    }\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport {\r\n  callApiLogin,\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetInvitationUser,\r\n  callGetAllRegisterUser,\r\n  callGetAllVerifyCode,\r\n  callGetAllUserProfile,\r\n  callGetAllMenuProfile,\r\n  callGetAllCustomerById,\r\n  callGetAllCustomerCoincidences,\r\n  callGetStatsChart,\r\n  callAddProperty,\r\n  callGetProperties,\r\n  callGetDepartments,\r\n  callAddTenant,\r\n  callGetZipCodeAdress,\r\n  callGetAllTenantsCatalog,\r\n  callGetAllBankCatalog,\r\n  callRequestAdvancement,\r\n  callGetAllCustomerTenantById,\r\n  callGetPaymentTypes,\r\n  callGetPaymentContract,\r\n  callAddDocument,\r\n  callGetAllDocumentTypes,\r\n  callGetPaymentContractDocument,\r\n  callAddCustomerMessage,\r\n  callGetCustomerMessage,\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\apiConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\requester\\requester.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\enviroments.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\constants\\globalConstants.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\serviceWorker.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\configureStore.js",["229"],"import { applyMiddleware, compose, createStore } from 'redux';\r\nimport storageSession from 'redux-persist/lib/storage/session';\r\nimport thunk from 'redux-thunk';\r\nimport { persistStore, persistReducer, PURGE } from 'redux-persist';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { createBrowserHistory } from 'history';\r\nimport { routerMiddleware } from 'react-router-redux';\r\n// TO DO: import immutableTransform from 'redux-persist-transform-immutable';\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './RootSaga';\r\n\r\nexport const history = createBrowserHistory();\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nexport default function configureStore(preloadedState) {\r\n  /* eslint-disable no-underscore-dangle */\r\n  const composeEnhancers =\r\n    process.env.NODE_ENV !== 'production' &&\r\n    typeof window === 'object' &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n      : compose;\r\n  /* eslint-enable */\r\n\r\n  const persistConfig = {\r\n    // TO DO:\r\n    // transforms: [immutableTransform()],\r\n    key: 'root',\r\n    storage: storageSession,\r\n    blacklist: [],\r\n  };\r\n\r\n  const rootReducerMiddleware = (state, action) =>\r\n    rootReducer(state, action, persistConfig);\r\n\r\n  const persistedReducer = persistReducer(persistConfig, rootReducerMiddleware);\r\n\r\n  const store = createStore(\r\n    persistedReducer,\r\n    preloadedState,\r\n    composeEnhancers(\r\n      applyMiddleware(sagaMiddleware, routerMiddleware(history), thunk),\r\n    ),\r\n  );\r\n\r\n  store.runSaga = sagaMiddleware.run(rootSaga);\r\n\r\n  const persistor = persistStore(store, {});\r\n\r\n  return { store, persistor };\r\n}\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\reducers.js",["230"],"import { combineReducers } from \"redux\";\r\nimport { purgeStoredState } from \"redux-persist\";\r\nimport {\r\n  dataProfile,\r\n  dataProfileMenu,\r\n} from \"../utils/reducers/dataProfileReducer\";\r\n\r\nconst appReducers = combineReducers({\r\n  dataProfile,\r\n  dataProfileMenu,\r\n});\r\n\r\nexport default (state, action, persistConfig) => {\r\n  // Reset to initialState\r\n  if (action.type === \"PURGE\") {\r\n    purgeStoredState(persistConfig);\r\n    // Default or Current State\r\n    return appReducers({}, action);\r\n  }\r\n\r\n  return appReducers(state, action);\r\n};\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\Store\\RootSaga.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Register\\Register.jsx",["231","232"],"import React, { useState, useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Radio, Select, Input, Spin, Skeleton } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  PhoneOutlined,\r\n  MailOutlined,\r\n  LockOutlined,\r\n  SyncOutlined,\r\n} from \"@ant-design/icons\";\r\nimport {\r\n  callGetAllCustomers,\r\n  callGetAllPersons,\r\n  callGetAllEndorsement,\r\n  callGetAllRegisterUser,\r\n  callGetAllVerifyCode,\r\n  callGetInvitationUser,\r\n} from \"../../utils/actions/actions\";\r\nimport logo from \"../../assets/img/logo.png\";\r\nimport admiration from \"../../assets/icons/exclaim.svg\";\r\nimport Arrow from \"../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst Register = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllCustomers,\r\n    callGetAllPersons,\r\n    callGetAllEndorsement,\r\n    callGetAllRegisterUser,\r\n    callGetAllVerifyCode,\r\n    callGetInvitationUser,\r\n  } = props;\r\n  const [userType, setUserType] = useState(null);\r\n  const [userCustomer, setUserCustomer] = useState([]);\r\n  const [selectuserCustomer, setSelectUserCustomer] = useState(1);\r\n  const [userPerson, setUserPerson] = useState([]);\r\n  const [userEndorsement, setUserEndorsement] = useState([]);\r\n  const [configComponents, setConfigComponents] = useState({});\r\n  const [verifyPassword, setVerifyPassword] = useState(null);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n  const [dataForm, setDataForm] = useState({\r\n    idPersonType: null,\r\n    idEndorsement: null,\r\n    givenName: null,\r\n    lastName: null,\r\n    mothersMaidenName: null,\r\n    phoneNumber: null,\r\n    username: null,\r\n    password: null,\r\n    idInvitation: null,\r\n  });\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  const copyErrors = {\r\n    errorPass: {\r\n      error: false,\r\n      message: \"Las contraseñas no coinciden\",\r\n      errorEmpty: false,\r\n      messageEmpty: \"La contraseña es requerida\",\r\n    },\r\n    errorGivenName: {\r\n      error: false,\r\n      message: \"El Nombre o Razón social es requerido\",\r\n    },\r\n    errorUserName: {\r\n      error: false,\r\n      message: \"El correo electrónico es requerido\",\r\n      errorFormat: false,\r\n      messageFormatError: \"El correo electronico no es valido\",\r\n    },\r\n    errorPersonType: {\r\n      error: false,\r\n      message: \"El tipo de persona es requerido\",\r\n    },\r\n    errorCodeVerify: {\r\n      error: false,\r\n      message: \"El código de verificación ingresado es invalido\",\r\n    },\r\n  };\r\n  const [errorsRegister, setErrorsRegister] = useState(copyErrors);\r\n  const [errorFormulary, setErrorFormulary] = useState(false);\r\n  const [idRequestSignUp, setIdRequestSignUp] = useState(null);\r\n  const [codeVerify, setCodeVerify] = useState({\r\n    value1: \"\",\r\n    value2: \"\",\r\n    value3: \"\",\r\n    value4: \"\",\r\n    value5: \"\",\r\n    value6: \"\",\r\n  });\r\n  const errorCatchBase = {\r\n    error: false,\r\n    message: \"\",\r\n  };\r\n  const [errorBase, setErrorBase] = useState(errorCatchBase);\r\n\r\n  const handlerCallApiCustomer = async (data) => {\r\n    try {\r\n      const response = await callGetAllCustomers(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserCustomer(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiPersonTypes = async (data) => {\r\n    const { match } = props;\r\n    const params = isEmpty(match.params) === false ? match.params : {};\r\n    try {\r\n      const response = await callGetAllPersons(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      if (isEmpty(params) === false && isEmpty(responseResult) === false) {\r\n        const filterCondition = responseResult.find((row) => {\r\n          return row.idPersonType == params.idCustomerType;\r\n        });\r\n        const parseResult = JSON.parse(filterCondition.jsonProperties);\r\n        setConfigComponents(parseResult);\r\n      }\r\n      setUserPerson(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiEndorsement = async (data) => {\r\n    try {\r\n      const response = await callGetAllEndorsement(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setUserEndorsement(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetInvitationUser = async (id) => {\r\n    try {\r\n      const response = await callGetInvitationUser(id);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      await handlerCallApiPersonTypes({\r\n        idType: 1,\r\n        idCustomerType: responseResult.idCustomerType,\r\n      });\r\n      await handlerCallApiEndorsement({\r\n        idType: 1,\r\n      });\r\n      setSelectUserCustomer(responseResult.idCustomerType);\r\n      setDataForm({\r\n        ...dataForm,\r\n        idPersonType: responseResult.idPersonType,\r\n        givenName: responseResult.givenName,\r\n        username: responseResult.usernameRequested,\r\n        idInvitation: responseResult.idInvitation,\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallApiRegister = async (data) => {\r\n    try {\r\n      const response = await callGetAllRegisterUser(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : \"\";\r\n      setIdRequestSignUp(\r\n        isEmpty(responseResult) === false ? responseResult.idRequestSignUp : \"\"\r\n      );\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerCallVerifyCode = async (data) => {\r\n    try {\r\n      await callGetAllVerifyCode(data);\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handlerVerifyInformation = async (data) => {\r\n    const emailRegex = /^[-\\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\\.){1,125}[A-Z]{2,63}$/i;\r\n    let objectErrors = errorsRegister;\r\n    let validatePass = true;\r\n    let validateIdPerson = true;\r\n    let validateGivenName = true;\r\n    let validateUserName = true;\r\n    const validateTypeEmail =\r\n      isNil(data.username) === false ? emailRegex.test(data.username) : false;\r\n\r\n    if (\r\n      isEmpty(data.password) === false &&\r\n      isEmpty(data.verifyPassword) === false &&\r\n      data.password === data.verifyPassword\r\n    ) {\r\n      validatePass = true;\r\n    } else if (isEmpty(data.password) || isEmpty(data.verifyPassword)) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, errorEmpty: true },\r\n      };\r\n      validatePass = false;\r\n    } else if (data.password !== data.verifyPassword) {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPass: { ...objectErrors.errorPass, error: true },\r\n      };\r\n      validatePass = false;\r\n    }\r\n\r\n    if (isNil(data.idPersonType) === false) {\r\n      validateIdPerson = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorPersonType: { ...objectErrors.errorPersonType, error: true },\r\n      };\r\n      validateIdPerson = false;\r\n    }\r\n\r\n    if (isNil(data.givenName) === false && isEmpty(data.givenName) === false) {\r\n      validateGivenName = true;\r\n    } else {\r\n      objectErrors = {\r\n        ...objectErrors,\r\n        errorGivenName: { ...objectErrors.errorGivenName, error: true },\r\n      };\r\n      validateGivenName = false;\r\n    }\r\n\r\n    if (\r\n      isNil(data.username) === false &&\r\n      isEmpty(data.username) === false &&\r\n      validateTypeEmail === true\r\n    ) {\r\n      validateUserName = true;\r\n    } else {\r\n      if (isEmpty(data.username) || isEmpty(data.username)) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, error: true },\r\n        };\r\n      } else if (validateTypeEmail === false) {\r\n        objectErrors = {\r\n          ...objectErrors,\r\n          errorUserName: { ...objectErrors.errorUserName, errorFormat: true },\r\n        };\r\n      }\r\n      validateUserName = false;\r\n    }\r\n\r\n    setErrorsRegister(objectErrors);\r\n\r\n    return (\r\n      validatePass && validateIdPerson && validateGivenName && validateUserName\r\n    );\r\n  };\r\n\r\n  const selectPerson = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1>\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            ¿Qué te trae por aquí?{\" \"}\r\n          </h1>\r\n          <div className=\"login_inputs_form\">\r\n            <Skeleton loading={isEmpty(userCustomer) === true} active />\r\n            {isEmpty(userCustomer) === false && (\r\n              <Radio.Group\r\n                name=\"radiogroup\"\r\n                value={selectuserCustomer}\r\n                defaultValue={1}\r\n                onChange={(e) => {\r\n                  setSelectUserCustomer(e.target.value);\r\n                }}\r\n              >\r\n                {userCustomer.map((row) => {\r\n                  return (\r\n                    <p className=\"visible\" style={{ marginBottom: \"32px\" }}>\r\n                      <Radio value={row.id}> {row.text} </Radio>\r\n                    </p>\r\n                  );\r\n                })}\r\n              </Radio.Group>\r\n            )}\r\n\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  await handlerCallApiPersonTypes({\r\n                    idType: 1,\r\n                    idCustomerType: selectuserCustomer,\r\n                  });\r\n                  await handlerCallApiEndorsement({\r\n                    idType: 1,\r\n                  });\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <span>Continuar</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const selectForm = (\r\n    <div className=\"login_main\" style={{ height: \"100%\" }}>\r\n      <div className=\"login_card_form large\">\r\n        <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n          <div className=\"register_holder\">\r\n            <div className=\"login_top_form\">\r\n              <h1>\r\n                <button\r\n                  className=\"arrow-back-to\"\r\n                  type=\"button\"\r\n                  onClick={() => {\r\n                    const { match } = props;\r\n                    const params =\r\n                      isEmpty(match.params) === false ? match.params : {};\r\n                    if (isEmpty(params) === false) {\r\n                      history.push(\"/login\");\r\n                    } else {\r\n                      setUserType(1);\r\n                    }\r\n                  }}\r\n                >\r\n                  <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n                </button>\r\n                Completa tu perfil{\" \"}\r\n              </h1>\r\n              <div\r\n                className={`error_login_incorrect_data ${\r\n                  errorFormulary === false ? \"hide\" : \"visible\"\r\n                }`}\r\n                style={{ display: \"flex\", flexDirection: \"column\" }}\r\n              >\r\n                {errorBase.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorBase.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorGivenName.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorGivenName.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPass.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPass.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPass.errorEmpty && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPass.messageEmpty}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorPersonType.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorPersonType.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorUserName.error && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>{errorsRegister.errorUserName.message}</span>\r\n                  </div>\r\n                )}\r\n                {errorsRegister.errorUserName.errorFormat && (\r\n                  <div>\r\n                    <img src={admiration} alt=\"exclaim\" />\r\n                    <span>\r\n                      {errorsRegister.errorUserName.messageFormatError}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n              <label className=\"fieldset_title\">Información personal</label>\r\n              <div className=\"register_row half\">\r\n                <Select\r\n                  placeholder=\"Tipo de Persona\"\r\n                  value={dataForm.idPersonType}\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    setConfigComponents(configureOption);\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                    setDataForm({ ...dataForm, idPersonType: value });\r\n                  }}\r\n                >\r\n                  {isEmpty(userPerson) === false &&\r\n                    userPerson.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.id}\r\n                          onClick={() => {\r\n                            return isNil(row) === false &&\r\n                              isNil(row.jsonProperties) === false\r\n                              ? JSON.parse(row.jsonProperties)\r\n                              : {};\r\n                          }}\r\n                        >\r\n                          {row.text}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n                {isEmpty(configComponents) === false &&\r\n                  configComponents.idEndorsement && (\r\n                    <Select\r\n                      placeholder=\"Aval\"\r\n                      onChange={(value) => {\r\n                        setDataForm({ ...dataForm, idEndorsement: value });\r\n                      }}\r\n                    >\r\n                      {isEmpty(userEndorsement) === false &&\r\n                        userEndorsement.map((row) => {\r\n                          return <Option value={row.id}>{row.text}</Option>;\r\n                        })}\r\n                    </Select>\r\n                  )}\r\n              </div>\r\n              <div className=\"register_row\">\r\n                <Input\r\n                  value={dataForm.givenName}\r\n                  suffix={<UserOutlined />}\r\n                  placeholder={\r\n                    configComponents.lastName ? \"Nombre(s):\" : \"Razón Social\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    setDataForm({ ...dataForm, givenName: e.target.value });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"register_row half\">\r\n                {isEmpty(configComponents) === false &&\r\n                  configComponents.lastName && (\r\n                    <Input\r\n                      value={dataForm.lastName}\r\n                      suffix={<UserOutlined />}\r\n                      placeholder=\"Primer Apellido\"\r\n                      onChange={(e) => {\r\n                        setDataForm({ ...dataForm, lastName: e.target.value });\r\n                      }}\r\n                    />\r\n                  )}\r\n                {isEmpty(configComponents) === false &&\r\n                  configComponents.mothersMaidenName && (\r\n                    <Input\r\n                      value={dataForm.mothersMaidenName}\r\n                      suffix={<UserOutlined />}\r\n                      placeholder=\"Segundo Apellido\"\r\n                      onChange={(e) => {\r\n                        setDataForm({\r\n                          ...dataForm,\r\n                          mothersMaidenName: e.target.value,\r\n                        });\r\n                      }}\r\n                    />\r\n                  )}\r\n              </div>\r\n              <label className=\"fieldset_title\">\r\n                {\" \"}\r\n                Información de contacto{\" \"}\r\n              </label>\r\n              <div className=\"register_row half\">\r\n                <Input\r\n                  value={dataForm.phoneNumber}\r\n                  suffix={<PhoneOutlined />}\r\n                  placeholder=\"Teléfono celular\"\r\n                  onChange={(e) => {\r\n                    const regexp = /^([0-9])*$/;\r\n                    if (regexp.test(e.target.value) === true) {\r\n                      setDataForm({ ...dataForm, phoneNumber: e.target.value });\r\n                    }\r\n                  }}\r\n                />\r\n                <Input\r\n                  value={dataForm.username}\r\n                  suffix={<MailOutlined />}\r\n                  placeholder=\"Correo electrónico\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      username: e.target.value,\r\n                    });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <label className=\"fieldset_title\"> Contraseña </label>\r\n              <div className=\"register_row half\">\r\n                <Input\r\n                  value={dataForm.password}\r\n                  suffix={<LockOutlined />}\r\n                  placeholder=\"Contraseña\"\r\n                  type=\"password\"\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      password: e.target.value,\r\n                    });\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n                <Input\r\n                  value={verifyPassword}\r\n                  suffix={<LockOutlined />}\r\n                  placeholder=\"Confirmar Contraseña\"\r\n                  type=\"password\"\r\n                  onChange={(e) => {\r\n                    setVerifyPassword(e.target.value);\r\n                    setErrorsRegister(copyErrors);\r\n                    setErrorFormulary(false);\r\n                  }}\r\n                />\r\n              </div>\r\n              <div\r\n                className=\"button_init_primary\"\r\n                style={{ margin: \"16px 0 0\" }}\r\n              >\r\n                <button\r\n                  type=\"button\"\r\n                  onClick={async () => {\r\n                    try {\r\n                      const verifyData = await handlerVerifyInformation({\r\n                        ...dataForm,\r\n                        verifyPassword,\r\n                      });\r\n                      setErrorFormulary(!verifyData);\r\n                      if (verifyData === true) {\r\n                        setSpinVisible(true);\r\n                        await handlerCallApiRegister({\r\n                          ...dataForm,\r\n                          idCustomerType: selectuserCustomer,\r\n                          offset: \"-06:00\",\r\n                        });\r\n                        setUserType(3);\r\n                        setSpinVisible(false);\r\n                      }\r\n                    } catch (error) {\r\n                      setSpinVisible(false);\r\n                      setErrorFormulary(true);\r\n                      setErrorBase({\r\n                        ...errorBase,\r\n                        error: true,\r\n                        message: error,\r\n                      });\r\n                      setTimeout(() => {\r\n                        setErrorFormulary(false);\r\n                        setErrorBase(errorCatchBase);\r\n                      }, 3000);\r\n                    }\r\n                  }}\r\n                >\r\n                  <span> Registrarme </span>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const insterCodeCompoent = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n          <div className=\"login_top_form\">\r\n            <h1>\r\n              <button\r\n                className=\"arrow-back-to\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setUserType(2);\r\n                }}\r\n              >\r\n                <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n              </button>\r\n              Ingresa tu código{\" \"}\r\n            </h1>\r\n            <div\r\n              className={`error_login_incorrect_data ${\r\n                errorsRegister.errorCodeVerify.error === false\r\n                  ? \"hide\"\r\n                  : \"visible\"\r\n              }`}\r\n              style={{ display: \"flex\", flexDirection: \"column\" }}\r\n            >\r\n              {errorsRegister.errorCodeVerify.error && (\r\n                <div>\r\n                  <img src={admiration} alt=\"exclaim\" />\r\n                  <span>{errorsRegister.errorCodeVerify.message}</span>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <p className=\"recoverInstructions\">\r\n              Enviamos un código de confirmación al correo{\" \"}\r\n              <strong>{dataForm.username}</strong>\r\n            </p>\r\n            <div className=\"codeForm\">\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-0\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value1}\r\n                  maxLength={1}\r\n                  minLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-1\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value1: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-1\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value2}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-0\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-2\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value2: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-2\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value3}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-1\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-3\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value3: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-3\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value4}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-2\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-4\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value4: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-4\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value5}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-3\").focus();\r\n                    } else {\r\n                      document.getElementById(\"input-code-validate-5\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value5: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"codeFormItem\">\r\n                <Input\r\n                  id=\"input-code-validate-5\"\r\n                  type=\"number\"\r\n                  value={codeVerify.value6}\r\n                  maxLength={1}\r\n                  onChange={(event) => {\r\n                    setErrorsRegister(copyErrors);\r\n                    if (event.target.value === \"\") {\r\n                      document.getElementById(\"input-code-validate-4\").focus();\r\n                    } else {\r\n                      document.getElementById(\"button-send-code\").focus();\r\n                    }\r\n                    if (event.target.value.length <= 1) {\r\n                      setCodeVerify({\r\n                        ...codeVerify,\r\n                        value6: event.target.value,\r\n                      });\r\n                    }\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"button_init_primary\" style={{ margin: \"60px 0 0\" }}>\r\n              <button\r\n                type=\"button\"\r\n                id=\"button-send-code\"\r\n                onClick={async () => {\r\n                  setSpinVisible(true);\r\n                  try {\r\n                    let numberResult = \"\";\r\n                    for (const property in codeVerify) {\r\n                      numberResult += codeVerify[property];\r\n                    }\r\n                    await handlerCallVerifyCode({\r\n                      code: numberResult,\r\n                      idRequestSignUp,\r\n                      offset: \"-06:00\",\r\n                      idInvitation: dataForm.idInvitation,\r\n                    });\r\n                    setUserType(4);\r\n                  } catch (error) {\r\n                    const objectErrors = {\r\n                      ...errorsRegister,\r\n                      errorCodeVerify: {\r\n                        ...errorsRegister.errorCodeVerify,\r\n                        error: true,\r\n                        message: error,\r\n                      },\r\n                    };\r\n                    setErrorsRegister(objectErrors);\r\n                    setSpinVisible(false);\r\n                  }\r\n                }}\r\n              >\r\n                <span> Validar </span>\r\n              </button>\r\n            </div>\r\n            <div\r\n              className=\"login-recover-pass\"\r\n              style={{ marginTop: \"15px\", cursor: \"pointer\" }}\r\n            >\r\n              <p\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  setErrorsRegister(copyErrors);\r\n                  try {\r\n                    const verifyData = await handlerVerifyInformation({\r\n                      ...dataForm,\r\n                      verifyPassword,\r\n                    });\r\n                    setErrorFormulary(!verifyData);\r\n                    if (verifyData === true) {\r\n                      await handlerCallApiRegister({\r\n                        ...dataForm,\r\n                        idCustomerType: selectuserCustomer,\r\n                        offset: \"-06:00\",\r\n                      });\r\n                    }\r\n                  } catch (error) {\r\n                    setErrorFormulary(true);\r\n                    setErrorBase({ ...errorBase, error: true, message: error });\r\n                    setTimeout(() => {\r\n                      setErrorFormulary(false);\r\n                      setErrorBase(errorCatchBase);\r\n                    }, 3000);\r\n                  }\r\n                }}\r\n              >\r\n                Reenviar código\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </Spin>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const successRegister = (\r\n    <div className=\"login_main\">\r\n      <div className=\"login_card_form\">\r\n        <div className=\"login_top_form\">\r\n          <h1> Registro completo </h1>\r\n          <p className=\"recoverInstructions\">\r\n            Bienvenido(a) <strong>{dataForm.givenName}</strong>. Estamos muy\r\n            emocionados de tenerte a bordo. Ingresa a tu cuenta y que comience\r\n            la aventura.\r\n          </p>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                history.push(\"/login\");\r\n              }}\r\n            >\r\n              <span>Ir al Login</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const renderTypeComponent = (type) => {\r\n    let component = <div />;\r\n    switch (type) {\r\n      case 1:\r\n        component = selectPerson;\r\n        break;\r\n      case 2:\r\n        component = selectForm;\r\n        break;\r\n      case 3:\r\n        component = insterCodeCompoent;\r\n        break;\r\n      case 4:\r\n        component = successRegister;\r\n        break;\r\n      default:\r\n        component = <div />;\r\n        break;\r\n    }\r\n    return component;\r\n  };\r\n\r\n  const handlerAsyncCallAppis = async () => {\r\n    await handlerCallApiCustomer({ idType: 1 });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { match } = props;\r\n    const params = isEmpty(match.params) === false ? match.params : {};\r\n    if (isEmpty(params) === false) {\r\n      setUserType(2);\r\n      handlerCallGetInvitationUser(params.idInvitation, params);\r\n    } else {\r\n      setUserType(1);\r\n      handlerAsyncCallAppis();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"login_head_logo\">\r\n        <img src={logo} alt=\"Homify Logo\" className=\"login_logo\" />\r\n      </div>\r\n      {renderTypeComponent(userType)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomers: (data) => dispatch(callGetAllCustomers(data)),\r\n  callGetAllPersons: (data) => dispatch(callGetAllPersons(data)),\r\n  callGetAllEndorsement: (data) => dispatch(callGetAllEndorsement(data)),\r\n  callGetAllRegisterUser: (data) => dispatch(callGetAllRegisterUser(data)),\r\n  callGetAllVerifyCode: (data) => dispatch(callGetAllVerifyCode(data)),\r\n  callGetInvitationUser: (paramId) => dispatch(callGetInvitationUser(paramId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Auth\\auth.jsx",["233"],"import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport {\r\n  callGetAllUserProfile,\r\n  callGetAllMenuProfile,\r\n} from \"../../utils/actions/actions\";\r\nimport {\r\n  setDataUserProfile,\r\n  setDataUserMenu,\r\n} from \"../../utils/dispatchs/userProfileDispatch\";\r\n\r\nconst Auth = (props) => {\r\n  const {\r\n    history,\r\n    callGetAllUserProfile,\r\n    dataProfile,\r\n    setDataUserProfile,\r\n    setDataUserMenu,\r\n    callGetAllMenuProfile,\r\n    purgeStore,\r\n  } = props;\r\n\r\n  const handlerCallGetAllUserProfile = async () => {\r\n    try {\r\n      const response = await callGetAllUserProfile(dataProfile.dataProfile);\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isEmpty(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      const idSystemUser =\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.idSystemUser) === false\r\n          ? responseResult.idSystemUser\r\n          : null;\r\n      const idLoginHistory =\r\n        isEmpty(responseResult) === false &&\r\n        isNil(responseResult.idLoginHistory) === false\r\n          ? responseResult.idLoginHistory\r\n          : null;\r\n      const responseMenu = await callGetAllMenuProfile({\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResultMenu =\r\n        isNil(responseMenu) === false &&\r\n        isNil(responseMenu.response) === false &&\r\n        isEmpty(responseMenu.response) === false\r\n          ? responseMenu.response\r\n          : [];\r\n      window.fcWidget.user.setFirstName(responseResult.showName);\r\n      await setDataUserMenu(responseResultMenu);\r\n      await setDataUserProfile({\r\n        ...dataProfile.dataProfile,\r\n        ...responseResult,\r\n      });\r\n      history.push(\r\n        isEmpty(responseResult) === false &&\r\n          isNil(responseResult.path) === false\r\n          ? responseResult.path\r\n          : \"/websystem\"\r\n      );\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerAsyncCallApiis = async () => {\r\n    await handlerCallGetAllUserProfile();\r\n  };\r\n\r\n  const handlerFinishSession = async () => {\r\n    await purgeStore();\r\n    await sessionStorage.clear();\r\n    await localStorage.clear();\r\n    history.push(\"/login\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (window.location.pathname === \"/auth\") {\r\n      handlerAsyncCallApiis();\r\n    } else if (window.location.pathname === \"/logout\") {\r\n      handlerFinishSession();\r\n    }\r\n  }, []);\r\n\r\n  return <div className=\"loader-auth-spiner\" />;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile } = state;\r\n  return { dataProfile };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  setDataUserProfile: (data) => dispatch(setDataUserProfile(data)),\r\n  setDataUserMenu: (data) => dispatch(setDataUserMenu(data)),\r\n  callGetAllUserProfile: (data) => dispatch(callGetAllUserProfile(data)),\r\n  callGetAllMenuProfile: (data) => dispatch(callGetAllMenuProfile(data)),\r\n  purgeStore: () => dispatch({ type: \"PURGE\" }),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\containers\\Layout\\layout.jsx",["234","235","236","237","238","239"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\routes.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\reducers\\dataProfileReducer.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\dispatchs\\userProfileDispatch.js",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\owner.jsx",["240","241","242","243","244","245","246","247","248","249"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, Modal } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport IconOwner from \"../../assets/icons/iconHomeIndicator.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../assets/icons/activity.svg\";\r\nimport IconArroRight from \"../../assets/icons/arrowRight.svg\";\r\nimport {\r\n  callGetAllCustomerById,\r\n  callGetAllCustomerCoincidences,\r\n  callGetStatsChart,\r\n  callAddProperty,\r\n  callGetAllPersons,\r\n  callGetProperties,\r\n  callGetDepartments,\r\n  callAddTenant,\r\n  callGetZipCodeAdress,\r\n  callGetAllTenantsCatalog,\r\n  callGetAllBankCatalog,\r\n  callRequestAdvancement,\r\n} from \"../../utils/actions/actions\";\r\nimport SectionCardTenant from \"./sections/sectionCardTenants\";\r\nimport SectionStatsChart from \"./sections/sectionStatsChart\";\r\nimport SectionAddProperty from \"./sections/sectionAddProperty\";\r\nimport SectionAddTenant from \"./sections/sectionAddTenant\";\r\nimport SectionAdvancement from \"./sections/sectionAdvancement\";\r\n\r\nconst { Content } = Layout;\r\n\r\nconst Owner = (props) => {\r\n  const {\r\n    dataProfile,\r\n    callGetAllCustomerById,\r\n    history,\r\n    callGetTenantCoincidences,\r\n    callGetStatsChart,\r\n    callAddProperty,\r\n    callGetAllPersons,\r\n    callGetProperties,\r\n    callGetDepartments,\r\n    callAddTenant,\r\n    callGetZipCodeAdress,\r\n    callGetAllTenantsCatalog,\r\n    callGetAllBankCatalog,\r\n    callRequestAdvancement,\r\n  } = props;\r\n  const [dataCustomer, setDataCustomer] = useState({});\r\n  const [dataStatsChart, setDataStatsChart] = useState([]);\r\n  const [dataCatalogProperty, setDataCatalogProperty] = useState([]);\r\n  const [dataPersonType, setDataPersonType] = useState([]);\r\n  const [dataDepartment, setDataDepartment] = useState([]);\r\n  const [dataZipCodeAdress, setDataZipCodeAdress] = useState({});\r\n  const [dataZipCatalog, setDataZipCatalog] = useState([]);\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataBank, setDataBank] = useState([]);\r\n  const [tenantCoincidences, setTenantCoincidences] = useState([]);\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [isModalVisibleTenant, setIsModalVisibleTenant] = useState(false);\r\n  const [isModalVisibleAdvancement, setIsModalVisibleAdvancement] = useState(\r\n    false\r\n  );\r\n  const [finishCallApis, setFinishCallApis] = useState(false);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n\r\n  const handlerCallApiPersonTypes = async (data) => {\r\n    try {\r\n      const response = await callGetAllPersons(data);\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.result) === false\r\n          ? response.result\r\n          : [];\r\n      setDataPersonType(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetAllCustomerById = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataCustomer(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetTenantCoincidences = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetTenantCoincidences({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setTenantCoincidences(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetCallGetStatsChart = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetStatsChart({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        jsonConditions: [],\r\n      });\r\n\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataStatsChart(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const hanlderCallGetZipCodeAdress = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetZipCodeAdress({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult1 =\r\n        isNil(response) === false &&\r\n        isNil(response.response1) === false &&\r\n        isNil(response.response1[0]) === false\r\n          ? response.response1[0]\r\n          : {};\r\n      const responseResult2 =\r\n        isNil(response) === false && isNil(response.response2) === false\r\n          ? response.response2\r\n          : [];\r\n      setDataZipCodeAdress(responseResult1);\r\n      setDataZipCatalog(responseResult2);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n  const handlerCallAddProperty = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddProperty({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setSpinVisible(false);\r\n      setIsModalVisible(!isModalVisible);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const handlerCallRequestAdvancement = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callRequestAdvancement({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setSpinVisible(false);\r\n      setIsModalVisibleAdvancement(!isModalVisibleAdvancement);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const handlerCallGetProperties = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetProperties({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataCatalogProperty(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetDepartments = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetDepartments({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataDepartment(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallAddTenant = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddTenant({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setSpinVisible(false);\r\n      setIsModalVisibleTenant(!isModalVisibleTenant);\r\n      handlerCallGetTenantCoincidences();\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const handlerCallTenantCatalog = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllTenantsCatalog({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : {};\r\n      setDataTenant(responseResult);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const handlerCallBankCatalog = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllBankCatalog({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataBank(responseResult);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const handlerCalllSyncApis = async () => {\r\n    await handlerCallGetAllCustomerById();\r\n    await handlerCallGetTenantCoincidences();\r\n    await handlerCallGetCallGetStatsChart();\r\n    setFinishCallApis(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCalllSyncApis();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <SectionAddProperty\r\n        spinVisible={spinVisible}\r\n        isModalVisible={isModalVisible}\r\n        onClose={() => {\r\n          setIsModalVisible(!isModalVisible);\r\n        }}\r\n        onClickAddProperty={(data) => {\r\n          setSpinVisible(true);\r\n          handlerCallAddProperty(data);\r\n        }}\r\n        dataZipCodeAdress={dataZipCodeAdress}\r\n        dataZipCatalog={dataZipCatalog}\r\n        onChangeZipCode={(zipCode) => {\r\n          hanlderCallGetZipCodeAdress({ type: 1, zipCode });\r\n        }}\r\n      />\r\n      <SectionAddTenant\r\n        dataPersonType={dataPersonType}\r\n        dataCatalogProperty={dataCatalogProperty}\r\n        dataDepartment={dataDepartment}\r\n        spinVisible={spinVisible}\r\n        isModalVisible={isModalVisibleTenant}\r\n        onClose={() => {\r\n          setIsModalVisibleTenant(!isModalVisibleTenant);\r\n        }}\r\n        onClickAddProperty={(data) => {\r\n          setSpinVisible(true);\r\n          handlerCallAddTenant(data);\r\n        }}\r\n        onChangeSelectProperty={(value) => {\r\n          handlerCallGetDepartments({\r\n            idProperty: value,\r\n            type: 1,\r\n          });\r\n        }}\r\n      />\r\n      <SectionAdvancement\r\n        isModalVisible={isModalVisibleAdvancement}\r\n        onClose={() => {\r\n          setIsModalVisibleAdvancement(!isModalVisibleAdvancement);\r\n        }}\r\n        onClickAdvancement={(data) => {\r\n          setSpinVisible(true);\r\n          handlerCallRequestAdvancement(data);\r\n        }}\r\n        spinVisible={spinVisible}\r\n        dataTenant={dataTenant}\r\n        dataBank={dataBank}\r\n      />\r\n      <div className=\"margin-app-main\">\r\n        <div className=\"top-main-user\">\r\n          <div className=\"welcome-user-main\">\r\n            <h2>Buenos días, {dataCustomer.shortName}</h2>\r\n            <span>\r\n              Último inicio de sesión:{\" \"}\r\n              <strong>{dataCustomer.lastSessionStarted}</strong>\r\n            </span>\r\n          </div>\r\n          <div className=\"action-buttons-top\">\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setIsModalVisible(!isModalVisible);\r\n                }}\r\n              >\r\n                <span>Registrar Propiedad</span>\r\n              </button>\r\n            </div>\r\n            <div className=\"button_init_primary\">\r\n              <button\r\n                type=\"button\"\r\n                onClick={async () => {\r\n                  setIsModalVisibleAdvancement(!isModalVisibleAdvancement);\r\n                  await handlerCallTenantCatalog();\r\n                  await handlerCallBankCatalog();\r\n                }}\r\n              >\r\n                <span>Adelanto de renta</span>\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"indicators-amount-renter\">\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#ffe51c\" }}>\r\n              <img src={IconOwner} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataCustomer.totalCumulativeRentAmount}</h2>\r\n            <span>\r\n              Total Rentas Acumuladas ({dataCustomer.totalCumulativeRents})\r\n            </span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#1CE3FF\" }}>\r\n              <img src={IconWallet} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataCustomer.totalExpensiveAmount}</h2>\r\n            <span>Total Gastos Acumulados</span>\r\n          </div>\r\n          <div className=\"cards-amount-renter\">\r\n            <div className=\"elipse-icon\" style={{ backgroundColor: \"#BE0FFF\" }}>\r\n              <img src={IconActivity} alt=\"icon\" width=\"20px\"></img>\r\n            </div>\r\n            <h2>{dataCustomer.totalCumulativeBalance}</h2>\r\n            <span>Balance Acumulado</span>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-information-user\">\r\n          <SectionStatsChart\r\n            dataStatsChart={dataStatsChart}\r\n            finishCallApis={finishCallApis}\r\n          />\r\n          <SectionCardTenant\r\n            history={history}\r\n            tenantCoincidences={tenantCoincidences}\r\n            finishCallApis={finishCallApis}\r\n            onClickSendInvitation={async () => {\r\n              setIsModalVisibleTenant(!isModalVisibleTenant);\r\n              await handlerCallApiPersonTypes({\r\n                idType: 2,\r\n                idCustomerType: null,\r\n              });\r\n              await handlerCallGetProperties();\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomerById: (data) => dispatch(callGetAllCustomerById(data)),\r\n  callGetStatsChart: (data) => dispatch(callGetStatsChart(data)),\r\n  callGetTenantCoincidences: (data) =>\r\n    dispatch(callGetAllCustomerCoincidences(data)),\r\n  callAddProperty: (data) => dispatch(callAddProperty(data)),\r\n  callGetAllPersons: (data) => dispatch(callGetAllPersons(data)),\r\n  callGetProperties: (data) => dispatch(callGetProperties(data)),\r\n  callGetDepartments: (data) => dispatch(callGetDepartments(data)),\r\n  callAddTenant: (data) => dispatch(callAddTenant(data)),\r\n  callGetZipCodeAdress: (data) => dispatch(callGetZipCodeAdress(data)),\r\n  callGetAllTenantsCatalog: (data) => dispatch(callGetAllTenantsCatalog(data)),\r\n  callGetAllBankCatalog: (data) => dispatch(callGetAllBankCatalog(data)),\r\n  callRequestAdvancement: (data) => dispatch(callRequestAdvancement(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Owner);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenantFromOwner.jsx",["250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Tabs,\r\n  Pagination,\r\n  Carousel,\r\n  Select,\r\n} from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport IconOwner from \"../../assets/icons/iconHomeIndicator.svg\";\r\nimport IconWallet from \"../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../assets/icons/activity.svg\";\r\nimport IconArroRight from \"../../assets/icons/arrowRight.svg\";\r\nimport SectionDocuments from \"./sectionDocuments/sectionDocuments\";\r\nimport SectionInfoTenant from \"./sectionDocuments/sectionCardInformation\";\r\nimport SectionMessages from \"./sectionDocuments/sectionMessages\";\r\nimport SectionRegisterPayment from \"./sectionDocuments/sectionRegisterPayment\";\r\nimport {\r\n  callGetAllCustomerTenantById,\r\n  callGetPaymentTypes,\r\n  callGetPaymentContract,\r\n  callAddDocument,\r\n  callGetAllDocumentTypes,\r\n  callGetPaymentContractDocument,\r\n  callAddCustomerMessage,\r\n  callGetCustomerMessage,\r\n} from \"../../utils/actions/actions\";\r\n\r\nconst { Content } = Layout;\r\nconst { TabPane } = Tabs;\r\nconst { Option } = Select;\r\n\r\nconst TenantFromOwner = (props) => {\r\n  const {\r\n    dataProfile,\r\n    match,\r\n    callGetAllCustomerTenantById,\r\n    callGetPaymentTypes,\r\n    callGetPaymentContract,\r\n    callAddDocument,\r\n    callGetAllDocumentTypes,\r\n    callGetPaymentContractDocument,\r\n    callAddCustomerMessage,\r\n    callGetCustomerMessage,\r\n  } = props;\r\n  const { params } = match;\r\n  const idCustomerTenant = params.idCustomerTenant;\r\n  const [dataTenant, setDataTenant] = useState([]);\r\n  const [dataPayments, setDataPayments] = useState([]);\r\n  const [dataDocumentTypes, setDataDocumentTypes] = useState([]);\r\n  const [dataMessages, setDataMessages] = useState([]);\r\n  const [dataDocumentsRepository, setDataDocumentsRepository] = useState([]);\r\n  const [idContractData, setIdContractData] = useState(null);\r\n  const [idTopIndexMessage, setIdTopIndexMessage] = useState(-1);\r\n  const [idTopIndexDocuments, setIdTopIndexDocuments] = useState(-1);\r\n  const [spinVisible, setSpinVisible] = useState(false);\r\n\r\n  const dotChange = useRef(null);\r\n  const contentStyle = {\r\n    height: \"160px\",\r\n    color: \"#fff\",\r\n    lineHeight: \"160px\",\r\n    textAlign: \"center\",\r\n    background: \"#364d79\",\r\n  };\r\n\r\n  const handlerCallGetAllPaymentTypes = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataPayments(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetAllDocumentTypes = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllDocumentTypes({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        type: 1,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentTypes(responseResult);\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetPaymentContractDocument = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetPaymentContractDocument({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        topIndex: idTopIndexDocuments,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataDocumentsRepository(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexDocuments(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetAllCustomerTenantById = async () => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetAllCustomerTenantById({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response[0]) === false\r\n          ? response.response[0]\r\n          : {};\r\n      setDataTenant(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdContractData(responseResult.idContract);\r\n        handlerCallGetAllPaymentTypes({\r\n          type: 1,\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n        handlerCallGetCustomerMessage({\r\n          idContract: responseResult.idContract,\r\n          idCustomerTenant,\r\n        });\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallGetAllPaymentContract = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      await callGetPaymentContract({\r\n        ...data,\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n      });\r\n      handlerCallGetAllCustomerTenantById();\r\n      setSpinVisible(false);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const handlerAddDocument = async (data, type) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    const dataDocument = {\r\n      documentName: data.name,\r\n      extension: data.type,\r\n      preview: null,\r\n      thumbnail: null,\r\n      idDocumentType: type.idPaymentType,\r\n      idCustomer,\r\n      idSystemUser,\r\n      idLoginHistory,\r\n    };\r\n    try {\r\n      const response = await callAddDocument(data.originFileObj, dataDocument);\r\n      const documentId =\r\n        isNil(response) === false &&\r\n        isNil(response.response) === false &&\r\n        isNil(response.response.idDocument) === false\r\n          ? response.response.idDocument\r\n          : null;\r\n      return Promise.resolve(documentId);\r\n    } catch (error) {\r\n      setSpinVisible(false);\r\n    }\r\n  };\r\n\r\n  const handlerCallGetCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callGetCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        topIndex: idTopIndexMessage,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      setDataMessages(responseResult);\r\n      if (isEmpty(responseResult) === false) {\r\n        setIdTopIndexMessage(responseResult[0].topIndex);\r\n      }\r\n    } catch (error) {}\r\n  };\r\n\r\n  const handlerCallAddCustomerMessage = async (data) => {\r\n    const { idCustomer, idSystemUser, idLoginHistory } = dataProfile;\r\n    try {\r\n      const response = await callAddCustomerMessage({\r\n        idCustomer,\r\n        idSystemUser,\r\n        idLoginHistory,\r\n        idCustomerTenant,\r\n        idContract: idContractData,\r\n        ...data,\r\n      });\r\n      const responseResult =\r\n        isNil(response) === false && isNil(response.response) === false\r\n          ? response.response\r\n          : [];\r\n      handlerCallGetCustomerMessage({\r\n        idContract: idContractData,\r\n        idCustomerTenant,\r\n      });\r\n    } catch (error) {}\r\n  };\r\n\r\n  useEffect(() => {\r\n    handlerCallGetAllCustomerTenantById();\r\n    handlerCallGetAllDocumentTypes();\r\n  }, []);\r\n\r\n  return (\r\n    <Content>\r\n      <div className=\"margin-app-main\">\r\n        <SectionInfoTenant dataTenant={dataTenant} />\r\n        <div className=\"actions-information-tenant\">\r\n          <div className=\"tabs-tenant-information\">\r\n            <Tabs\r\n              defaultActiveKey=\"1\"\r\n              onChange={() => {}}\r\n              tabBarStyle={{ color: \"#A0A3BD\" }}\r\n              tabPosition=\"top\"\r\n            >\r\n              <TabPane tab=\"Registrar pago\" key=\"1\">\r\n                <SectionRegisterPayment\r\n                  dataPayments={dataPayments}\r\n                  spinVisible={spinVisible}\r\n                  onGetDocuments={async (arrayDocument, data) => {\r\n                    setSpinVisible(true);\r\n                    const dataDocuments = await Promise.all(\r\n                      arrayDocument.map((row) => {\r\n                        const item = handlerAddDocument(row, data);\r\n                        return item;\r\n                      })\r\n                    );\r\n                    const parseDocument = dataDocuments.join();\r\n                    const dataSend = {\r\n                      ...data,\r\n                      idCustomerTenant,\r\n                      idContract: idContractData,\r\n                      documents: parseDocument,\r\n                    };\r\n                    handlerCallGetAllPaymentContract(dataSend);\r\n                  }}\r\n                  onRegisterPayment={(data) => {}}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Documentos\" key=\"2\">\r\n                <SectionDocuments\r\n                  dataDocumentTypes={dataDocumentTypes}\r\n                  dataDocumentsRepository={dataDocumentsRepository}\r\n                  onSearchDocument={(data) => {\r\n                    handlerCallGetPaymentContractDocument(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Mensajes\" key=\"3\">\r\n                <SectionMessages\r\n                  dataMessages={dataMessages}\r\n                  getMoreCoincidences={() => {\r\n                    handlerCallGetCustomerMessage({\r\n                      idContract: idContractData,\r\n                      idCustomerTenant,\r\n                    });\r\n                  }}\r\n                  onSendMessages={(data) => {\r\n                    handlerCallAddCustomerMessage(data);\r\n                  }}\r\n                />\r\n              </TabPane>\r\n              <TabPane tab=\"Cotizar incidencia\" key=\"4\" />\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </Content>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { dataProfile, dataProfileMenu } = state;\r\n  return {\r\n    dataProfile: dataProfile.dataProfile,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  callGetAllCustomerTenantById: (data) =>\r\n    dispatch(callGetAllCustomerTenantById(data)),\r\n  callGetPaymentTypes: (data) => dispatch(callGetPaymentTypes(data)),\r\n  callGetPaymentContract: (data) => dispatch(callGetPaymentContract(data)),\r\n  callAddDocument: (file, data) => dispatch(callAddDocument(file, data)),\r\n  callGetAllDocumentTypes: (data) => dispatch(callGetAllDocumentTypes(data)),\r\n  callGetPaymentContractDocument: (data) =>\r\n    dispatch(callGetPaymentContractDocument(data)),\r\n  callAddCustomerMessage: (data) => dispatch(callAddCustomerMessage(data)),\r\n  callGetCustomerMessage: (data) => dispatch(callGetCustomerMessage(data)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TenantFromOwner);\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionDocuments.jsx",["267","268","269","270","271"],"import React, { useRef, useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport {\r\n  Pagination,\r\n  Carousel,\r\n  Select,\r\n  Row,\r\n  Col,\r\n  DatePicker,\r\n  Image,\r\n  Button,\r\n} from \"antd\";\r\nimport Search from \"../../../assets/icons/Search.svg\";\r\nimport ENVIROMENT from \"../../../utils/constants/enviroments\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionDocuments = (props) => {\r\n  const {\r\n    dataDocumentTypes,\r\n    onSearchDocument,\r\n    dataDocumentsRepository,\r\n  } = props;\r\n  const dotChange = useRef(null);\r\n  const [selectDateFilter, setSelectDateFilter] = useState(null);\r\n  const [selectDocumentType, setSelectDocumentType] = useState(null);\r\n  const [statesDates, setStatesDates] = useState({\r\n    now: `${moment().format(\"YYYY-MM-DD\")},${moment().format(\"YYYY-MM-DD\")}`,\r\n    month: `${moment().startOf(\"month\").format(\"YYYY-MM-DD\")},${moment()\r\n      .endOf(\"month\")\r\n      .format(\"YYYY-MM-DD\")}`,\r\n    startDate: moment().format(\"YYYY-MM-DD\"),\r\n    endDate: moment().format(\"YYYY-MM-DD\"),\r\n  });\r\n\r\n  const handlerToRenderPickerType = (type) => {\r\n    let component = null;\r\n    switch (type) {\r\n      case \"1\":\r\n        component = null;\r\n        break;\r\n      case \"2\":\r\n        component = (\r\n          <Col\r\n            span={4}\r\n            xs={{ span: 24 }}\r\n            md={{ span: 4 }}\r\n            style={{ marginBottom: \"10px\" }}\r\n          >\r\n            <DatePicker\r\n              placeholder=\"Seleccionar Mes\"\r\n              onChange={(momentFormat, date) => {\r\n                const initDay = moment(momentFormat)\r\n                  .startOf(\"month\")\r\n                  .format(\"YYYY-MM-DD\");\r\n                const endDate = moment(momentFormat)\r\n                  .endOf(\"month\")\r\n                  .format(\"YYYY-MM-DD\");\r\n                setStatesDates({\r\n                  ...statesDates,\r\n                  month: `${initDay},${endDate}`,\r\n                });\r\n              }}\r\n              picker=\"month\"\r\n              format=\"MMMM YYYY\"\r\n            />\r\n          </Col>\r\n        );\r\n        break;\r\n      case \"3\":\r\n        component = (\r\n          <>\r\n            <Col\r\n              span={4}\r\n              xs={{ span: 24 }}\r\n              md={{ span: 4 }}\r\n              style={{ marginBottom: \"10px\" }}\r\n            >\r\n              <DatePicker\r\n                placeholder=\"Fecha inicial\"\r\n                onChange={(momentFormat, date) => {\r\n                  setStatesDates({\r\n                    ...statesDates,\r\n                    startDate: moment(momentFormat).format(\"YYYY-MM-DD\"),\r\n                  });\r\n                }}\r\n                format=\"DD MMMM YYYY\"\r\n              />\r\n            </Col>\r\n            <Col span={1} />\r\n            <Col\r\n              span={4}\r\n              xs={{ span: 24 }}\r\n              md={{ span: 4 }}\r\n              style={{ marginBottom: \"10px\" }}\r\n            >\r\n              <DatePicker\r\n                placeholder=\"Fecha final\"\r\n                onChange={(momentFormat, date) => {\r\n                  setStatesDates({\r\n                    ...statesDates,\r\n                    endDate: moment(momentFormat).format(\"YYYY-MM-DD\"),\r\n                  });\r\n                }}\r\n                format=\"DD MMMM YYYY\"\r\n              />\r\n            </Col>\r\n          </>\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return component;\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-content-tabs\">\r\n      <div className=\"content-documents\">\r\n        <div className=\"content-history\">\r\n          <div className=\"select-file\">\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col\r\n                span={7}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 7 }}\r\n                style={{ marginBottom: \"10px\" }}\r\n              >\r\n                <Select\r\n                  placeholder=\"Tipo de documento\"\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    setSelectDocumentType(value);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataDocumentTypes) === false &&\r\n                    dataDocumentTypes.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idDocumentType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.documentType}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} />\r\n              <Col\r\n                span={4}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 4 }}\r\n                style={{ marginBottom: \"10px\" }}\r\n              >\r\n                <Select\r\n                  placeholder=\"Filtrar por\"\r\n                  onChange={(value, option) => {\r\n                    setSelectDateFilter(value);\r\n                    if (value === \"1\") {\r\n                      const toDay = moment().format(\"YYYY-MM-DD\");\r\n                      setStatesDates({\r\n                        ...statesDates,\r\n                        now: `${toDay},${toDay}`,\r\n                      });\r\n                    }\r\n                  }}\r\n                >\r\n                  <Option value=\"1\" onClick={() => {}}>\r\n                    Hoy\r\n                  </Option>\r\n                  <Option value=\"2\" onClick={() => {}}>\r\n                    Mes\r\n                  </Option>\r\n                  <Option value=\"3\" onClick={() => {}}>\r\n                    Rango de fecha\r\n                  </Option>\r\n                </Select>\r\n              </Col>\r\n              <Col span={1} />\r\n              {handlerToRenderPickerType(selectDateFilter)}\r\n              <Col span={1} />\r\n              <Col span={1} xs={{ span: 24 }} md={{ span: 1 }}>\r\n                <button\r\n                  type=\"button\"\r\n                  style={{ backgroundColor: \"transparent\", border: \"none\" }}\r\n                  onClick={() => {\r\n                    let sendDateFormat = \"\";\r\n                    if (selectDateFilter === \"1\") {\r\n                      sendDateFormat = statesDates.now;\r\n                    } else if (selectDateFilter === \"2\") {\r\n                      sendDateFormat = statesDates.month;\r\n                    } else if (selectDateFilter === \"3\") {\r\n                      sendDateFormat = `${statesDates.startDate},${statesDates.endDate}`;\r\n                    } else {\r\n                      sendDateFormat = `${moment().format(\r\n                        \"YYYY-MM-DD\"\r\n                      )},${moment().format(\"YYYY-MM-DD\")}`;\r\n                    }\r\n                    onSearchDocument({\r\n                      filterDate: sendDateFormat,\r\n                      idDocumentType: selectDocumentType,\r\n                    });\r\n                  }}\r\n                >\r\n                  <img src={Search} alt=\"search\" />\r\n                </button>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"content-files\">\r\n            {isEmpty(dataDocumentsRepository) === false &&\r\n              dataDocumentsRepository.map((row) => {\r\n                return (\r\n                  <div className=\"card-file-information\">\r\n                    <div className=\"box-preview\">\r\n                      <Image\r\n                        width={100}\r\n                        height={120}\r\n                        src={`${ENVIROMENT}/api/viewFile/${row.idDocument}/${row.bucketSoruce}`}\r\n                      />\r\n                    </div>\r\n                    <div className=\"box-information\">\r\n                      <strong>{row.documentType}</strong>\r\n                      <div className=\"data-image\">\r\n                        <div>\r\n                          <span>Subido por:</span>\r\n                          <span>Fecha de pago:</span>\r\n                        </div>\r\n                        <div>\r\n                          <strong>{row.uploadedByUser}</strong>\r\n                          <strong>{row.uploadedAt}</strong>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                );\r\n              })}{\" \"}\r\n          </div>\r\n        </div>\r\n        {/* <div className=\"content-upload\">\r\n          <div className=\"button_init_primary\">\r\n            <label type=\"button\" for=\"file-input\" onClick={() => {}}>\r\n              <span>Subir documentos</span>\r\n            </label>\r\n            <input\r\n              id=\"file-input\"\r\n              type=\"file\"\r\n              accept=\"image/png, image/jpeg, image/jpg , image/gif\"\r\n              onChange={(e) => {}}\r\n            />\r\n          </div>\r\n          <div className=\"section-container-action-up\">\r\n            <div className=\"container-carousel\">\r\n              <Carousel afterChange={() => {}} ref={dotChange} dots={false}>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n                <div className=\"main-carousel\">\r\n                  <img\r\n                    src=\"https://i.pinimg.com/originals/59/76/88/59768810ac199bb8ab85e21e5edb900c.jpg\"\r\n                    alt=\"imagen-beach\"\r\n                    width={208}\r\n                    height={202}\r\n                  />\r\n                </div>\r\n              </Carousel>\r\n            </div>\r\n            <Pagination\r\n              pageSize={1}\r\n              size=\"small\"\r\n              total={3}\r\n              onChange={(event) => {\r\n                dotChange.current.goTo(event - 1);\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n       */}\r\n      </div>\r\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n        <Button\r\n          type=\"link\"\r\n          onClick={() => {\r\n            let sendDateFormat = \"\";\r\n            if (selectDateFilter === \"1\") {\r\n              sendDateFormat = statesDates.now;\r\n            } else if (selectDateFilter === \"2\") {\r\n              sendDateFormat = statesDates.month;\r\n            } else if (selectDateFilter === \"3\") {\r\n              sendDateFormat = `${statesDates.startDate},${statesDates.endDate}`;\r\n            } else {\r\n              sendDateFormat = `${moment().format(\r\n                \"YYYY-MM-DD\"\r\n              )},${moment().format(\"YYYY-MM-DD\")}`;\r\n            }\r\n            onSearchDocument({\r\n              filterDate: sendDateFormat,\r\n              idDocumentType: selectDocumentType,\r\n            });\r\n          }}\r\n        >\r\n          Mostrar mas\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionDocuments;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardInformation.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionMessages.jsx",["272","273"],"import React, { useState } from \"react\";\r\nimport { Timeline, Input, Button } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport SectionCardItemMessage from \"./sectionCardItemMessage\";\r\n\r\nconst { TextArea } = Input;\r\n\r\nconst SectionMessages = (props) => {\r\n  const { dataMessages, onSendMessages, getMoreCoincidences } = props;\r\n  const [valueText, setValueText] = useState(null);\r\n\r\n  return (\r\n    <div className=\"main-content-tabs\">\r\n      <div className=\"content-messages-sections\">\r\n        <div className=\"section-history-messages\">\r\n          <Timeline>\r\n            {isEmpty(dataMessages) === false &&\r\n              dataMessages.map((row) => {\r\n                return (\r\n                  <SectionCardItemMessage\r\n                    dataInfo={row}\r\n                    sendResponseMessage={(data) => {\r\n                      onSendMessages(data);\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n          </Timeline>\r\n          <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n            <Button\r\n              type=\"link\"\r\n              onClick={() => {\r\n                getMoreCoincidences();\r\n              }}\r\n            >\r\n              Mostrar mas\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"section-type-messages-fixed\">\r\n          <div className=\"section-type-messages\">\r\n            <div className=\"text-header\">Redactar mensaje</div>\r\n            <textarea\r\n              value={valueText}\r\n              maxlength=\"200\"\r\n              onChange={(e) => {\r\n                setValueText(e.target.value);\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onSendMessages({\r\n                  visibilityRule: null,\r\n                  idCustomerMessages: null,\r\n                  customerMessages: valueText,\r\n                });\r\n              }}\r\n            >\r\n              <span>Enviar mensaje</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionMessages;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionCardItemMessage.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionCardTenants.jsx",["274","275","276","277","278","279","280","281","282","283"],"import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Layout, Avatar, Rate, Modal, Skeleton } from \"antd\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport IconOwner from \"../../../assets/icons/iconHomeIndicator.svg\";\r\nimport IconWallet from \"../../../assets/icons/wallet.svg\";\r\nimport IconActivity from \"../../../assets/icons/activity.svg\";\r\nimport IconArroRight from \"../../../assets/icons/arrowRight.svg\";\r\nimport EmptyTenant from \"../../../assets/icons/tenantEmpty.svg\";\r\n\r\nmoment.locale(\"es\");\r\n\r\nconst SectionCardTenant = (props) => {\r\n  const {\r\n    history,\r\n    tenantCoincidences,\r\n    finishCallApis,\r\n    onClickSendInvitation,\r\n  } = props;\r\n\r\n  const formatDate = (date) => {\r\n    let dateFormat = \"\";\r\n    if (date !== \"NA\") {\r\n      dateFormat = moment(date, \"DD/MM/YYYY\").format(\"DD MMMM YYYY\");\r\n    } else {\r\n      dateFormat = date;\r\n    }\r\n    return dateFormat;\r\n  };\r\n\r\n  return (\r\n    <div className=\"renter-card-information\">\r\n      <div className=\"title-cards flex-title-card\">\r\n        <span>Inquilinos</span>\r\n        <div className=\"button_init_primary\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              onClickSendInvitation();\r\n            }}\r\n          >\r\n            <span>Invitar Inquilino</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"section-information-renters\">\r\n        {isEmpty(tenantCoincidences) === false &&\r\n          finishCallApis === true &&\r\n          tenantCoincidences.map((row) => {\r\n            return (\r\n              <div className=\"data-renter-info\">\r\n                <div className=\"box-info-user\">\r\n                  <div className=\"avatar-user\">\r\n                    {isNil(row.profileThumbnail) === false ? (\r\n                      <Avatar size={50} src={row.profileThumbnail} />\r\n                    ) : (\r\n                      <Avatar size={50} icon={<UserOutlined />} />\r\n                    )}\r\n                  </div>\r\n                  <div className=\"info-user\">\r\n                    <strong>{row.shortName}</strong>\r\n                    <Rate\r\n                      style={{\r\n                        fontSize: \"15px\",\r\n                        position: \"relative\",\r\n                        bottom: \"5px\",\r\n                      }}\r\n                      tooltips={[]}\r\n                      onChange={() => {}}\r\n                      value={row.ratingRate}\r\n                    />\r\n                    <div className=\"status-payment\">\r\n                      <span>{row.customerStatus}</span>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"info-user-payment\">\r\n                    <div>\r\n                      Próximo Pago:{\" \"}\r\n                      <strong>{formatDate(row.nextPayment)}</strong>\r\n                    </div>\r\n                    <div>\r\n                      Monto de Renta: <strong>{row.rentAmount}</strong>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div className=\"button-collapse\">\r\n                  {isNil(row.canSeeTenantDetail) === false &&\r\n                    row.canSeeTenantDetail === true && (\r\n                      <button\r\n                        type=\"button\"\r\n                        onClick={() => {\r\n                          history.push(\r\n                            `/websystem/dashboard-owner/tenant/${row.idCustomerTenant}`\r\n                          );\r\n                        }}\r\n                      >\r\n                        <img src={IconArroRight} alt=\"arrow-right\" width=\"15\" />\r\n                      </button>\r\n                    )}\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        {finishCallApis === false && <Skeleton loading active />}\r\n      </div>\r\n      {isEmpty(tenantCoincidences) === true && finishCallApis === true && (\r\n        <div className=\"empty-tenants\">\r\n          <img src={EmptyTenant} alt=\"\" />\r\n          <span>Aun no tienes inquilinos registrados</span>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionCardTenant;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionStatsChart.jsx",["284","285","286","287","288"],"import React, { useEffect, useState } from \"react\";\r\nimport Highcharts from \"highcharts\";\r\nimport HighchartsReact from \"highcharts-react-official\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport { Layout, Avatar, Rate, Modal, Skeleton } from \"antd\";\r\n\r\nconst SectionStatsChart = (props) => {\r\n  const { dataStatsChart, finishCallApis } = props;\r\n  const [dataOptions, setDataOptions] = useState({});\r\n\r\n  const handlerConvertDataChart = (data) => {\r\n    let arrayMonths = [];\r\n    let arrayProfit = [];\r\n    let arrayExpenses = [];\r\n    let arrayBalance = [];\r\n\r\n    data.forEach((element) => {\r\n      arrayMonths.push(element.mes);\r\n      arrayProfit.push(element.ganancia);\r\n      arrayExpenses.push(element.gasto);\r\n      arrayBalance.push(element.balance);\r\n    });\r\n    const dataChart = {\r\n      chart: {\r\n        type: \"column\",\r\n      },\r\n      title: {\r\n        text: \"Estadistica Mensual\",\r\n      },\r\n      yAxis: {\r\n        title: {\r\n          text: \"Monto\",\r\n        },\r\n      },\r\n      xAxis: {\r\n        categories: arrayMonths,\r\n      },\r\n      credits: {\r\n        enabled: false,\r\n      },\r\n      series: [\r\n        {\r\n          name: \"Ganancias\",\r\n          data: arrayProfit,\r\n          color: \"#4E51D8\",\r\n        },\r\n        {\r\n          name: \"Gastos\",\r\n          data: arrayExpenses,\r\n          color: \"#EF280F\",\r\n        },\r\n        {\r\n          name: \"Balance\",\r\n          data: arrayBalance,\r\n          color: \"#32cd32\",\r\n        },\r\n      ],\r\n    };\r\n    setDataOptions(dataChart);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isEmpty(dataStatsChart) === false) {\r\n      handlerConvertDataChart(dataStatsChart);\r\n    }\r\n  }, [dataStatsChart]);\r\n\r\n  return (\r\n    <div className=\"card-chart-information\">\r\n      <div className=\"title-cards\">Ganancias</div>\r\n      <div>\r\n        {finishCallApis === true && isEmpty(dataOptions) === false && (\r\n          <HighchartsReact highcharts={Highcharts} options={dataOptions} />\r\n        )}\r\n        {finishCallApis === false && <Skeleton loading active />}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionStatsChart;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddProperty.jsx",["289","290","291","292","293","294","295","296","297"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAddTenant.jsx",["298","299","300","301","302"],"import React, { useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n} from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAddTenant = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onClickAddProperty,\r\n    spinVisible,\r\n    dataPersonType,\r\n    dataCatalogProperty,\r\n    onChangeSelectProperty,\r\n    dataDepartment,\r\n  } = props;\r\n  const initialDataForm = {\r\n    idApartment: null,\r\n    idPersonType: null,\r\n    givenName: null,\r\n    email: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [property, setProperty] = useState(null);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  return (\r\n    <Modal visible={isModalVisible} closable={false} footer={false}>\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Invitar inquilino</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>Enviaremos una solicitud al inquilino invitado</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Propiedad\"\r\n                  value={property}\r\n                  onChange={(value, option) => {\r\n                    setProperty(value);\r\n                    onChangeSelectProperty(value);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataCatalogProperty) === false &&\r\n                    dataCatalogProperty.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Select\r\n                  placeholder=\"Tipo de persona\"\r\n                  value={dataForm.idPersonType}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, idPersonType: value });\r\n                  }}\r\n                >\r\n                  {isEmpty(dataPersonType) === false &&\r\n                    dataPersonType.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n              <Col\r\n                span={2}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 2 }}\r\n                style={{ marginBottom: \"15px\" }}\r\n              />\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Select\r\n                  placeholder=\"Departamento\"\r\n                  value={dataForm.idApartment}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, idApartment: value });\r\n                  }}\r\n                >\r\n                  {isEmpty(dataDepartment) === false &&\r\n                    dataDepartment.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <p>Datos del inquilino</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.givenName}\r\n                  placeholder={\"Nombre del inquilino\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      givenName: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.email}\r\n                  placeholder={\"Correo electrónico del inquilino\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      email: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClickAddProperty(dataForm);\r\n                setDataForm(initialDataForm);\r\n              }}\r\n            >\r\n              <span>Invitar inquilino</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAddTenant;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\sectionAdvancement.jsx",["303","304","305","306","307","308","309","310","311"],"import React, { useEffect, useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n} from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport FrontFunctions from \"../../../utils/actions/frontFunctions\";\r\nimport SubSectionSummary from \"./subSectionSummary\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionAdvancement = (props) => {\r\n  const {\r\n    isModalVisible,\r\n    onClose,\r\n    onClickAdvancement,\r\n    spinVisible,\r\n    dataTenant,\r\n    dataBank,\r\n  } = props;\r\n  const frontFunctions = new FrontFunctions();\r\n  const initialDataForm = {\r\n    text: null,\r\n    currentRentFormat: \"\",\r\n    advanceRents: null,\r\n    accountHolder: null,\r\n    accountNumber: null,\r\n    clabeNumber: null,\r\n    idContract: null,\r\n    idBank: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [property, setProperty] = useState(null);\r\n  const [viewSummary, setViewSummary] = useState(false);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  return (\r\n    <Modal\r\n      visible={isModalVisible}\r\n      closable={false}\r\n      footer={false}\r\n      style={{ top: 20 }}\r\n      width={600}\r\n    >\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"form-modal\">\r\n          <div className=\"title-head-modal\">\r\n            <button\r\n              className=\"arrow-back-to\"\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClose();\r\n              }}\r\n            >\r\n              <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n            </button>\r\n            <h1>Adelanto de renta</h1>\r\n          </div>\r\n          <div className=\"main-form-information\">\r\n            <p>\r\n              Llena la siguiente información para solicitar un adelanto de renta\r\n            </p>\r\n            <Row>\r\n              <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n                <Row>\r\n                  <Select\r\n                    placeholder=\"Inquilino\"\r\n                    value={dataForm.text}\r\n                    onChange={(value, option) => {\r\n                      const dataSelect = option.onClick();\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        text: value,\r\n                        currentRentFormat: dataSelect.currentRentAmount,\r\n                        idContract: dataSelect.idContract,\r\n                      });\r\n                    }}\r\n                  >\r\n                    {isEmpty(dataTenant) === false &&\r\n                      dataTenant.map((row) => {\r\n                        return (\r\n                          <Option\r\n                            value={row.id}\r\n                            onClick={() => {\r\n                              return row;\r\n                            }}\r\n                          >\r\n                            {row.fullName}\r\n                          </Option>\r\n                        );\r\n                      })}\r\n                  </Select>\r\n                </Row>\r\n                <Row>\r\n                  <NumberFormat\r\n                    id={null}\r\n                    customInput={Input}\r\n                    thousandSeparator=\",\"\r\n                    decimalSeparator=\".\"\r\n                    decimalPrecision={2}\r\n                    allowNegative={false}\r\n                    prefix=\"$\"\r\n                    suffix=\"\"\r\n                    disabled\r\n                    value={dataForm.currentRentFormat}\r\n                    className=\"inputLogin\"\r\n                    floatingLabelText=\"\"\r\n                    isVisible\r\n                    toBlock={false}\r\n                    disable={false}\r\n                    placeholder=\"Monto de renta\"\r\n                    onValueChange={(values) => {\r\n                      const { formattedValue, value, floatValue } = values;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        currentRentFormat: floatValue,\r\n                      });\r\n                    }}\r\n                    onClick={(event) => {}}\r\n                    onFocus={(event) => {}}\r\n                    onBlur={(event) => {}}\r\n                  />\r\n                </Row>\r\n                <Row>\r\n                  <Select\r\n                    placeholder=\"Rentas adelantadas\"\r\n                    value={dataForm.advanceRents}\r\n                    onChange={(value, option) => {\r\n                      setDataForm({ ...dataForm, advanceRents: value });\r\n                    }}\r\n                  >\r\n                    <Option value={1}>1</Option>\r\n                    <Option value={2}>2</Option>\r\n                    <Option value={3}>3</Option>\r\n                  </Select>\r\n                </Row>\r\n              </Col>\r\n              <Col\r\n                span={13}\r\n                xs={{ span: 24 }}\r\n                md={{ span: 13 }}\r\n                className=\"total-advancement-amount\"\r\n              >\r\n                <SubSectionSummary\r\n                  viewSummary={viewSummary}\r\n                  onClickViewSummary={() => {\r\n                    setViewSummary(!viewSummary);\r\n                  }}\r\n                  dataForm={dataForm}\r\n                  frontFunctions={frontFunctions}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <p>Información bancaria</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Mis cuentas guardadas\"\r\n                  value={dataForm.accountSave}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, accountSave: value });\r\n                  }}\r\n                >\r\n                  <Option value={1}>cuenta 1</Option>\r\n                  <Option value={2}>cuenta 2</Option>\r\n                  <Option value={3}>cuenta 3</Option>\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <p>Nueva cuenta</p>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.accountHolder}\r\n                  placeholder={\"Nombre\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      accountHolder: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <Input\r\n                  value={dataForm.clabeNumber}\r\n                  placeholder={\"CLABE\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      clabeNumber: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={11}>\r\n                <Input\r\n                  value={dataForm.accountNumber}\r\n                  placeholder={\"Número de cuenta\"}\r\n                  onChange={(e) => {\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      accountNumber: e.target.value,\r\n                    });\r\n                  }}\r\n                />\r\n              </Col>\r\n              <Col span={2} />\r\n              <Col span={11}>\r\n                <Select\r\n                  placeholder=\"Banco\"\r\n                  showSearch\r\n                  value={dataForm.idBank}\r\n                  onChange={(value, option) => {\r\n                    setDataForm({ ...dataForm, idBank: value });\r\n                  }}\r\n                  filterOption={(input, option) =>\r\n                    option.children\r\n                      .toLowerCase()\r\n                      .indexOf(input.toLowerCase()) >= 0\r\n                  }\r\n                >\r\n                  {isEmpty(dataBank) === false &&\r\n                    dataBank.map((row) => {\r\n                      return <Option value={row.id}>{row.text}</Option>;\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"button_init_primary\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                onClickAdvancement(dataForm);\r\n                setDataForm(initialDataForm);\r\n              }}\r\n            >\r\n              <span>Solicitar adelanto</span>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </Spin>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default SectionAdvancement;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Signature\\signatureIndex.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\utils\\actions\\frontFunctions.js",["312","313","314","315","316","317","318","319"],"import isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nclass FrontFunctions {\r\n  constructor() {\r\n    this.currency = {\r\n      plural: \"PESOS\",\r\n      singular: \"PESO\",\r\n      centPlural: \"CENTAVOS\",\r\n      centSingular: \"CENTAVO\",\r\n    };\r\n  }\r\n\r\n  Unidades(num) {\r\n    switch (num) {\r\n      case 1:\r\n        return \"UN\";\r\n      case 2:\r\n        return \"DOS\";\r\n      case 3:\r\n        return \"TRES\";\r\n      case 4:\r\n        return \"CUATRO\";\r\n      case 5:\r\n        return \"CINCO\";\r\n      case 6:\r\n        return \"SEIS\";\r\n      case 7:\r\n        return \"SIETE\";\r\n      case 8:\r\n        return \"OCHO\";\r\n      case 9:\r\n        return \"NUEVE\";\r\n    }\r\n\r\n    return \"\";\r\n  }\r\n\r\n  Decenas(num) {\r\n    let decena = Math.floor(num / 10);\r\n    let unidad = num - decena * 10;\r\n\r\n    switch (decena) {\r\n      case 1:\r\n        switch (unidad) {\r\n          case 0:\r\n            return \"DIEZ\";\r\n          case 1:\r\n            return \"ONCE\";\r\n          case 2:\r\n            return \"DOCE\";\r\n          case 3:\r\n            return \"TRECE\";\r\n          case 4:\r\n            return \"CATORCE\";\r\n          case 5:\r\n            return \"QUINCE\";\r\n          default:\r\n            return \"DIECI\" + this.Unidades(unidad);\r\n        }\r\n      case 2:\r\n        switch (unidad) {\r\n          case 0:\r\n            return \"VEINTE\";\r\n          default:\r\n            return \"VEINTI\" + this.Unidades(unidad);\r\n        }\r\n      case 3:\r\n        return this.DecenasY(\"TREINTA\", unidad);\r\n      case 4:\r\n        return this.DecenasY(\"CUARENTA\", unidad);\r\n      case 5:\r\n        return this.DecenasY(\"CINCUENTA\", unidad);\r\n      case 6:\r\n        return this.DecenasY(\"SESENTA\", unidad);\r\n      case 7:\r\n        return this.DecenasY(\"SETENTA\", unidad);\r\n      case 8:\r\n        return this.DecenasY(\"OCHENTA\", unidad);\r\n      case 9:\r\n        return this.DecenasY(\"NOVENTA\", unidad);\r\n      case 0:\r\n        return this.Unidades(unidad);\r\n    }\r\n  }\r\n\r\n  DecenasY(strSin, numUnidades) {\r\n    if (numUnidades > 0) return strSin + \" Y \" + this.Unidades(numUnidades);\r\n\r\n    return strSin;\r\n  }\r\n\r\n  Centenas(num) {\r\n    let centenas = Math.floor(num / 100);\r\n    let decenas = num - centenas * 100;\r\n\r\n    switch (centenas) {\r\n      case 1:\r\n        if (decenas > 0) return \"CIENTO \" + this.Decenas(decenas);\r\n        return \"CIEN\";\r\n      case 2:\r\n        return \"DOSCIENTOS \" + this.Decenas(decenas);\r\n      case 3:\r\n        return \"TRESCIENTOS \" + this.Decenas(decenas);\r\n      case 4:\r\n        return \"CUATROCIENTOS \" + this.Decenas(decenas);\r\n      case 5:\r\n        return \"QUINIENTOS \" + this.Decenas(decenas);\r\n      case 6:\r\n        return \"SEISCIENTOS \" + this.Decenas(decenas);\r\n      case 7:\r\n        return \"SETECIENTOS \" + this.Decenas(decenas);\r\n      case 8:\r\n        return \"OCHOCIENTOS \" + this.Decenas(decenas);\r\n      case 9:\r\n        return \"NOVECIENTOS \" + this.Decenas(decenas);\r\n    }\r\n\r\n    return this.Decenas(decenas);\r\n  }\r\n\r\n  Seccion(num, divisor, strSingular, strPlural) {\r\n    let cientos = Math.floor(num / divisor);\r\n    let resto = num - cientos * divisor;\r\n\r\n    let letras = \"\";\r\n\r\n    if (cientos > 0)\r\n      if (cientos > 1) letras = this.Centenas(cientos) + \" \" + strPlural;\r\n      else letras = strSingular;\r\n\r\n    if (resto > 0) letras += \"\";\r\n\r\n    return letras;\r\n  }\r\n\r\n  Miles(num) {\r\n    let divisor = 1000;\r\n    let cientos = Math.floor(num / divisor);\r\n    let resto = num - cientos * divisor;\r\n\r\n    let strMiles = this.Seccion(num, divisor, \"UN MIL\", \"MIL\");\r\n    let strCentenas = this.Centenas(resto);\r\n\r\n    if (strMiles == \"\") return strCentenas;\r\n\r\n    return strMiles + \" \" + strCentenas;\r\n  }\r\n\r\n  parseNumberToLetter(num) {\r\n    const currency = this.currency || {};\r\n    let data = {\r\n      numero: num,\r\n      enteros: Math.floor(num),\r\n      centavos: Math.round(num * 100) - Math.floor(num) * 100,\r\n      letrasCentavos: \"\",\r\n      letrasMonedaPlural: currency.plural || \"PESOS CHILENOS\", //'PESOS', 'Dólares', 'Bolívares', 'etcs'\r\n      letrasMonedaSingular: currency.singular || \"PESO CHILENO\", //'PESO', 'Dólar', 'Bolivar', 'etc'\r\n      letrasMonedaCentavoPlural: currency.centPlural || \"CHIQUI PESOS CHILENOS\",\r\n      letrasMonedaCentavoSingular:\r\n        currency.centSingular || \"CHIQUI PESO CHILENO\",\r\n    };\r\n\r\n    if (data.centavos > 0) {\r\n      data.letrasCentavos =\r\n        \"CON \" +\r\n        (function () {\r\n          if (data.centavos == 1)\r\n            return (\r\n              this.Millones(data.centavos) +\r\n              \" \" +\r\n              data.letrasMonedaCentavoSingular\r\n            );\r\n          else\r\n            return (\r\n              this.Millones(data.centavos) +\r\n              \" \" +\r\n              data.letrasMonedaCentavoPlural\r\n            );\r\n        })();\r\n    }\r\n\r\n    if (data.enteros == 0)\r\n      return \"CERO \" + data.letrasMonedaPlural + \" \" + data.letrasCentavos;\r\n    if (data.enteros == 1)\r\n      return (\r\n        this.Millones(data.enteros) +\r\n        \" \" +\r\n        data.letrasMonedaSingular +\r\n        \" \" +\r\n        data.letrasCentavos\r\n      );\r\n    else\r\n      return (\r\n        this.Millones(data.enteros) +\r\n        \" \" +\r\n        data.letrasMonedaPlural +\r\n        \" \" +\r\n        data.letrasCentavos\r\n      );\r\n  }\r\n\r\n  parseFormatCurrency = (money, fraction) => {\r\n    let resultNumber = \"\";\r\n    if (isNil(money) === false) {\r\n      const formatMoneyJson = {\r\n        style: \"currency\",\r\n        currency: \"USD\",\r\n        minimumFractionDigits: fraction,\r\n        maximumFractionDigits: 20,\r\n      };\r\n      const locale = \"en-US\";\r\n      const moneyFormat = new Intl.NumberFormat(locale, formatMoneyJson);\r\n      resultNumber = moneyFormat.format(money);\r\n    }\r\n    return resultNumber;\r\n  };\r\n}\r\n\r\nexport default FrontFunctions;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Owner\\sections\\subSectionSummary.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\sectionRegisterPayment.jsx",["320","321","322","323","324","325","326"],"import React, { useState } from \"react\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport isNil from \"lodash/isNil\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { Timeline, Input, Row, Col, Select, Upload, Spin } from \"antd\";\r\nimport { SyncOutlined } from \"@ant-design/icons\";\r\nimport Delete from \"../../../assets/icons/Delete.svg\";\r\nimport PicturesWall from \"./customUploadFile\";\r\nimport SubSectionSummary from \"./subSectionSummary\";\r\n\r\nconst { TextArea } = Input;\r\nconst { Option } = Select;\r\n\r\nconst SectionRegisterPayment = (props) => {\r\n  const {\r\n    dataPayments,\r\n    onRegisterPayment,\r\n    spinVisible,\r\n    onGetDocuments,\r\n  } = props;\r\n  const initialDataForm = {\r\n    idIncidence: null,\r\n    idPaymentType: null,\r\n    paymentDate: null,\r\n    amount: \"\",\r\n    advancingRents: null,\r\n    documents: null,\r\n  };\r\n  const [dataForm, setDataForm] = useState(initialDataForm);\r\n  const [dataSummary, setDataSummary] = useState({});\r\n  const [fileList, setFileList] = useState([]);\r\n  const [fileList1, setFileList1] = useState([]);\r\n\r\n  const LoadingSpin = <SyncOutlined spin />;\r\n\r\n  const handlerSelectAmont = (data) => {\r\n    const { isForAdavancingRent, isForCurrentRent, currentRent, amount } = data;\r\n    let amoutData = \"\";\r\n    if (isForAdavancingRent === false && isForCurrentRent === false) {\r\n      amoutData = \"\";\r\n    } else if (isForAdavancingRent === false && isForCurrentRent === true) {\r\n      amoutData = amount;\r\n    } else if (isForAdavancingRent === true && isForCurrentRent === false) {\r\n      amoutData = currentRent;\r\n    }\r\n    return amoutData;\r\n  };\r\n\r\n  const handleChange = ({ fileList }) => {\r\n    setFileList(fileList);\r\n  };\r\n\r\n  const handleChange1 = ({ fileList }) => {\r\n    setFileList1(fileList);\r\n  };\r\n\r\n  return (\r\n    <div className=\"main-content-tabs button-middle\">\r\n      <Spin indicator={LoadingSpin} spinning={spinVisible} delay={200}>\r\n        <div className=\"content-messages-sections\">\r\n          <div className=\"section-history-messages\">\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col span={24}>\r\n                <Select\r\n                  placeholder=\"Tipo de pago\"\r\n                  style={{ width: \"100%\" }}\r\n                  onChange={(value, option) => {\r\n                    const configureOption = option.onClick();\r\n                    const informationSummary =\r\n                      isNil(configureOption.interestArrearsDescription) ===\r\n                      false\r\n                        ? JSON.parse(\r\n                            configureOption.interestArrearsDescription\r\n                          )[0]\r\n                        : {};\r\n                    const amountPayable = handlerSelectAmont(configureOption);\r\n                    setDataForm({\r\n                      ...dataForm,\r\n                      idPaymentType: value,\r\n                      amount: amountPayable,\r\n                    });\r\n                    setDataSummary(informationSummary);\r\n                  }}\r\n                >\r\n                  {isEmpty(dataPayments) === false &&\r\n                    dataPayments.map((row) => {\r\n                      return (\r\n                        <Option\r\n                          value={row.idPaymentType}\r\n                          onClick={() => {\r\n                            return row;\r\n                          }}\r\n                        >\r\n                          {row.paymentType}\r\n                        </Option>\r\n                      );\r\n                    })}\r\n                </Select>\r\n              </Col>\r\n            </Row>\r\n            <Row style={{ marginBottom: \"20px\" }}>\r\n              <Col span={24}>\r\n                {isEmpty(dataSummary) === false ? (\r\n                  <div className=\"total-advancement-amount\">\r\n                    <p>Monto</p>\r\n                    <div>\r\n                      <h2>{dataSummary.totalAmountFormat}</h2>\r\n                    </div>\r\n                  </div>\r\n                ) : (\r\n                  <NumberFormat\r\n                    id={null}\r\n                    style={{ borderRadius: \"8px\" }}\r\n                    customInput={Input}\r\n                    thousandSeparator=\",\"\r\n                    decimalSeparator=\".\"\r\n                    decimalPrecision={2}\r\n                    allowNegative={false}\r\n                    prefix=\"$\"\r\n                    suffix=\"\"\r\n                    value={dataForm.amount}\r\n                    className=\"inputLogin\"\r\n                    floatingLabelText=\"\"\r\n                    isVisible\r\n                    toBlock={false}\r\n                    placeholder=\"Monto\"\r\n                    onValueChange={(values) => {\r\n                      const { formattedValue, value, floatValue } = values;\r\n                      setDataForm({\r\n                        ...dataForm,\r\n                        amount: floatValue,\r\n                      });\r\n                    }}\r\n                    onClick={(event) => {}}\r\n                    onFocus={(event) => {}}\r\n                    onBlur={(event) => {}}\r\n                  />\r\n                )}\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col span={24}>\r\n                <SubSectionSummary dataSummary={dataSummary} />\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n          <div className=\"section-type-messages\" style={{ width: \"50%\" }}>\r\n            <div className=\"text-header\">Evidencia</div>\r\n            <div className=\"section-upload-files\">\r\n              <div className=\"section-upload-file\">\r\n                <PicturesWall fileList={fileList} handleChange={handleChange} />\r\n              </div>\r\n              <div className=\"section-upload-file\">\r\n                <PicturesWall\r\n                  handleChange={handleChange1}\r\n                  fileList={fileList1}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"button-action-payment\">\r\n          <button\r\n            type=\"button\"\r\n            onClick={() => {\r\n              const documents = [...fileList, ...fileList1];\r\n              onGetDocuments(documents, dataForm);\r\n              setDataForm(initialDataForm);\r\n              setFileList([]);\r\n              setFileList1([]);\r\n              // onRegisterPayment(dataForm);\r\n            }}\r\n          >\r\n            <span>Registrar pago</span>\r\n          </button>\r\n        </div>\r\n      </Spin>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionRegisterPayment;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\customUploadFile.jsx",[],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sectionDocuments\\subSectionSummary.jsx",["327"],"import React from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nconst SubSectionSummary = (props) => {\r\n  const { dataSummary } = props;\r\n  let component = <div />;\r\n  if (isEmpty(dataSummary) === false) {\r\n    component = (\r\n      <div\r\n        style={{\r\n          width: \"100%\",\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          padding: \"0px 15px\",\r\n        }}\r\n      >\r\n        <p>Resumen</p>\r\n        <table\r\n          style={{\r\n            width: \"100%\",\r\n            fontFamily: \"Poppins\",\r\n            fontSize: \"11px\",\r\n          }}\r\n        >\r\n          <tr>\r\n            <td>Monto de renta</td>\r\n            <td>{dataSummary.currentRentFormat}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Mes correspondiente</td>\r\n            <td>{dataSummary.dateDescription}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Interes</td>\r\n            <td>{dataSummary.interestArrears}</td>\r\n          </tr>\r\n          <tr>\r\n            <td>Monto de interes</td>\r\n            <td>{dataSummary.amountInterestFormat}</td>\r\n          </tr>\r\n          <tr\r\n            style={{\r\n              background: \"#faebd7\",\r\n              fontWeight: 600,\r\n            }}\r\n          >\r\n            <td>Monto total</td>\r\n            <td>{dataSummary.totalAmountFormat}</td>\r\n          </tr>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n  return component;\r\n};\r\n\r\nexport default SubSectionSummary;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\tenant.jsx",["328","329","330","331"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\typeFormUser.jsx",["332","333","334","335","336","337","338","339","340","341","342","343"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoUser.jsx",["344","345","346","347","348","349","350","351"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddress.jsx",["352","353","354","355","356","357","358","359","360"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionCurrentWork.jsx",["361","362","363","364","365","366","367","368","369","370","371","372","373","374","375"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoReferences.jsx",["376","377","378","379","380","381","382","383","384","385"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionDocumentation.jsx",["386","387","388","389","390","391","392","393","394","395","396","397"],"import React from \"react\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Upload,\r\n  Radio,\r\n} from \"antd\";\r\nimport CustomFileUpload from \"./customFileUpload\";\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst SectionDocumentation = (props) => {\r\n  const { onClickBack, onClickNext } = props;\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>Documentación</h3>\r\n      <div className=\"section-top-documentation\">\r\n        <div className=\"section-card-documentation\">\r\n          <div className=\"section-title-card-doc\">\r\n            <strong>Selfie</strong>\r\n            <span style={{ visibility: \"hidden\" }}>N/A</span>\r\n          </div>\r\n          <div className=\"section-content-card-doc\">\r\n            <CustomFileUpload />\r\n          </div>\r\n        </div>\r\n        <div className=\"section-card-documentation\">\r\n          <div className=\"section-title-card-doc\">\r\n            <strong>INE</strong>\r\n            <span>Frente y vuelta</span>\r\n          </div>\r\n          <div className=\"section-content-card-doc\">\r\n            <CustomFileUpload />\r\n            <CustomFileUpload />\r\n          </div>\r\n        </div>\r\n        <div className=\"section-card-documentation\">\r\n          <div className=\"section-title-card-doc\">\r\n            <strong>Carta laboral</strong>\r\n            <span>Membretada y firmada</span>\r\n          </div>\r\n          <div className=\"section-content-card-doc\">\r\n            <CustomFileUpload />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"section-bottom-documentation\">\r\n        <div className=\"section-card-documentation\">\r\n          <div className=\"section-title-card-doc\">\r\n            <strong>últimos 3 comprobantes de ingreso</strong>\r\n            <span style={{ visibility: \"hidden\" }}>N/A</span>\r\n          </div>\r\n          <div className=\"section-content-card-doc\">\r\n            <CustomFileUpload />\r\n            <CustomFileUpload />\r\n            <CustomFileUpload />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"button_actions\">\r\n        <button\r\n          type=\"button\"\r\n          onClick={onClickBack}\r\n          className=\"button_secondary\"\r\n        >\r\n          <span>Regresar</span>\r\n        </button>\r\n        <button type=\"button\" onClick={onClickNext} className=\"button_primary\">\r\n          <span>Continuar</span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionDocumentation;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoAval.jsx",["398","399","400","401","402","403","404"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionInfoOwner.jsx",["405","406","407","408","409","410"],"C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\currentAddresRenter.jsx",["411","412","413","414","415","416","417","418","419","420","421","422","423","424","425","426"],"import React, { useState } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n} from \"antd\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst CurrentAddressRenter = (props) => {\r\n  const { onClickBack, onClickNext } = props;\r\n  const [furnished, setFurnished] = useState(true);\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>Datos del Inmueble a Rentar</h3>\r\n      <Row>\r\n        <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n          <Row>\r\n            <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n              <Input placeholder={\"Calle\"} onChange={(e) => {}} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n              <Input placeholder={\"Numero interior\"} onChange={(e) => {}} />\r\n            </Col>\r\n            <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n            <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n              <Input placeholder={\"Numero exterior\"} onChange={(e) => {}} />\r\n            </Col>\r\n            <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n            <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n              <Input placeholder={\"Código postal\"} onChange={(e) => {}} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <Input placeholder={\"Estado\"} onChange={(e) => {}} />\r\n            </Col>\r\n            <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <Input\r\n                placeholder={\"Municipio/Delegación\"}\r\n                onChange={(e) => {}}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <Select placeholder=\"Colonia\" onChange={(value, option) => {}}>\r\n                <Option value={1} onClick={() => {}}>\r\n                  Granjas\r\n                </Option>\r\n                <Option value={2} onClick={() => {}}>\r\n                  Americas\r\n                </Option>\r\n              </Select>\r\n            </Col>\r\n            <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <Select\r\n                placeholder=\"Tipo de inmueble\"\r\n                onChange={(value, option) => {}}\r\n              >\r\n                <Option value={1} onClick={() => {}}>\r\n                  Casa\r\n                </Option>\r\n                <Option value={2} onClick={() => {}}>\r\n                  Departamento\r\n                </Option>\r\n                <Option value={3} onClick={() => {}}>\r\n                  Oficina\r\n                </Option>\r\n                <Option value={4} onClick={() => {}}>\r\n                  Local Comercial\r\n                </Option>\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n              <div className=\"option-select-radio\">\r\n                <span style={{ color: \"#ff0282\", fontWeight: \"bold\" }}>\r\n                  ¿El inmueble está amueblado?\r\n                </span>\r\n                <Radio.Group\r\n                  onChange={(e) => {\r\n                    setFurnished(e.target.value);\r\n                  }}\r\n                  value={furnished}\r\n                >\r\n                  <Radio value={true}>Si</Radio>\r\n                  <Radio value={false}>No</Radio>\r\n                </Radio.Group>\r\n              </div>\r\n            </Col>\r\n            <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n            <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n              <NumberFormat\r\n                id={null}\r\n                customInput={Input}\r\n                thousandSeparator=\",\"\r\n                decimalSeparator=\".\"\r\n                decimalPrecision={2}\r\n                allowNegative={false}\r\n                prefix=\"$\"\r\n                suffix=\"\"\r\n                value={\"\"}\r\n                className=\"inputLogin\"\r\n                floatingLabelText=\"\"\r\n                isVisible\r\n                toBlock={false}\r\n                disable={false}\r\n                placeholder=\"Monto de renta\"\r\n                onValueChange={(values) => {\r\n                  const { formattedValue, value, floatValue } = values;\r\n                }}\r\n                onClick={(event) => {}}\r\n                onFocus={(event) => {}}\r\n                onBlur={(event) => {}}\r\n              />\r\n            </Col>\r\n            <Col span={1} xs={{ span: 24 }} md={{ span: 1 }} />\r\n            <Col span={7} xs={{ span: 24 }} md={{ span: 7 }}>\r\n              <NumberFormat\r\n                id={null}\r\n                customInput={Input}\r\n                thousandSeparator=\",\"\r\n                decimalSeparator=\".\"\r\n                decimalPrecision={2}\r\n                allowNegative={false}\r\n                prefix=\"$\"\r\n                suffix=\"\"\r\n                value={\"\"}\r\n                className=\"inputLogin\"\r\n                floatingLabelText=\"\"\r\n                isVisible\r\n                toBlock={false}\r\n                disable={false}\r\n                placeholder={\"Monto de mandetimiento\"}\r\n                onValueChange={(values) => {\r\n                  const { formattedValue, value, floatValue } = values;\r\n                }}\r\n                onClick={(event) => {}}\r\n                onFocus={(event) => {}}\r\n                onBlur={(event) => {}}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <NumberFormat\r\n                id={null}\r\n                customInput={Input}\r\n                thousandSeparator=\",\"\r\n                decimalSeparator=\".\"\r\n                decimalPrecision={2}\r\n                allowNegative={false}\r\n                prefix=\"\"\r\n                suffix=\"\"\r\n                value={\"\"}\r\n                className=\"inputLogin\"\r\n                floatingLabelText=\"\"\r\n                isVisible\r\n                toBlock={false}\r\n                disable={false}\r\n                placeholder={\"Lugares de estacionamiento\"}\r\n                onValueChange={(values) => {\r\n                  const { formattedValue, value, floatValue } = values;\r\n                }}\r\n                onClick={(event) => {}}\r\n                onFocus={(event) => {}}\r\n                onBlur={(event) => {}}\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"button_actions\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClickBack}\r\n              className=\"button_secondary\"\r\n            >\r\n              <span>Regresar</span>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClickNext}\r\n              className=\"button_primary\"\r\n            >\r\n              <span>Continuar</span>\r\n            </button>\r\n          </div>\r\n        </Col>\r\n        <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CurrentAddressRenter;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\TypePolicy.jsx",["427","428","429","430","431","432","433","434","435"],"import React from \"react\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n} from \"antd\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\nimport CustomFileUpload from \"./customFileUpload\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst TypePolicy = (props) => {\r\n  const { onClickBack, onClickNext } = props;\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>Poliza y Documentos</h3>\r\n      <Row>\r\n        <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n          <p>Poliza</p>\r\n          <Row>\r\n            <Col span={12} xs={{ span: 24 }} md={{ span: 12 }}>\r\n              <Select\r\n                placeholder=\"¿Que póliza contratas?\"\r\n                onChange={(value, option) => {}}\r\n              >\r\n                <Option value={1} onClick={() => {}}>\r\n                  Homify Básica\r\n                </Option>\r\n                <Option value={2} onClick={() => {}}>\r\n                  Homify Pro\r\n                </Option>\r\n                <Option value={3} onClick={() => {}}>\r\n                  Homify Renta Segura\r\n                </Option>\r\n              </Select>\r\n            </Col>\r\n          </Row>\r\n          <p>Documentos</p>\r\n          <div className=\"section-top-documentation\">\r\n            <div className=\"section-card-documentation\">\r\n              <div className=\"section-title-card-doc\">\r\n                <strong>INE</strong>\r\n                <span>Frente y vuelta</span>\r\n              </div>\r\n              <div className=\"section-content-card-doc\">\r\n                <CustomFileUpload />\r\n                <CustomFileUpload />\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"button_actions\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClickBack}\r\n              className=\"button_secondary\"\r\n            >\r\n              <span>Regresar</span>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClickNext}\r\n              className=\"button_primary\"\r\n            >\r\n              <span>Continuar</span>\r\n            </button>\r\n          </div>\r\n        </Col>\r\n        <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TypePolicy;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\sectionBankInfo.jsx",["436","437","438","439","440","441","442","443"],"import React from \"react\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Radio,\r\n  DatePicker,\r\n} from \"antd\";\r\nimport IconProfile from \"../../../assets/icons/Profile.svg\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst SectionBankInfo = (props) => {\r\n  const { onClickBack, onClickFinish } = props;\r\n  return (\r\n    <div className=\"content-typeform-formulary\">\r\n      <h3>Información Bancaria</h3>\r\n      <Row>\r\n        <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n        <Col span={16} xs={{ span: 24 }} md={{ span: 16 }}>\r\n          <Row>\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <Select\r\n                showSearch\r\n                filterOption={(input, option) =>\r\n                  option.children.toLowerCase().indexOf(input.toLowerCase()) >=\r\n                  0\r\n                }\r\n                placeholder=\"Banco\"\r\n                onChange={(value, option) => {}}\r\n              >\r\n                <Option value={1} onClick={() => {}}>\r\n                  Bancomer\r\n                </Option>\r\n                <Option value={2} onClick={() => {}}>\r\n                  HSBC\r\n                </Option>\r\n              </Select>\r\n            </Col>\r\n            <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <Input placeholder={\"Sucursal\"} onChange={(e) => {}} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={24} xs={{ span: 24 }} md={{ span: 24 }}>\r\n              <Input placeholder={\"A nombre de\"} onChange={(e) => {}} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={8} xs={{ span: 24 }} md={{ span: 8 }}>\r\n              <Input placeholder={\"Numero de cuenta\"} onChange={(e) => {}} />\r\n            </Col>\r\n            <Col span={2} xs={{ span: 24 }} md={{ span: 2 }} />\r\n            <Col span={14} xs={{ span: 24 }} md={{ span: 14 }}>\r\n              <Input placeholder={\"Clave interbancaria\"} onChange={(e) => {}} />\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col span={11} xs={{ span: 24 }} md={{ span: 11 }}>\r\n              <DatePicker\r\n                placeholder=\"Fecha de firma de contrato\"\r\n                onChange={(momentFormat, date) => {}}\r\n                format=\"DD MMMM YYYY\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <div className=\"button_actions\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClickBack}\r\n              className=\"button_secondary\"\r\n            >\r\n              <span>Regresar</span>\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={onClickFinish}\r\n              className=\"button_primary\"\r\n            >\r\n              <span>Finalizar</span>\r\n            </button>\r\n          </div>\r\n        </Col>\r\n        <Col span={4} xs={{ span: 24 }} md={{ span: 4 }} />\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SectionBankInfo;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\TypeForm\\sections\\customFileUpload.jsx",["444","445","446","447","448","449","450","451","452","453","454"],"import React, { useState } from \"react\";\r\nimport isNil from \"lodash/isNil\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\nimport Magnifier from \"react-magnifier\";\r\nimport {\r\n  Layout,\r\n  Avatar,\r\n  Rate,\r\n  Modal,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Select,\r\n  Spin,\r\n  Tooltip,\r\n  Upload,\r\n  Radio,\r\n} from \"antd\";\r\nimport Arrow from \"../../../assets/icons/Arrow.svg\";\r\nimport Show from \"../../../assets/icons/Show.svg\";\r\nimport Delete from \"../../../assets/icons/Delete.svg\";\r\n\r\nconst { Dragger } = Upload;\r\n\r\nconst CustomFileUpload = () => {\r\n  const [fileList, setFileList] = useState([]);\r\n  const [preview, setPreview] = useState(null);\r\n  const [fileName, setFileName] = useState(null);\r\n  const [previewVisible, setPreviewVisible] = useState(false);\r\n  return (\r\n    <div\r\n      className={`section-drop-document ${\r\n        isNil(preview) === false && \"border-dashed-none\"\r\n      }`}\r\n    >\r\n      {isNil(preview) === true ? (\r\n        <Dragger\r\n          action=\"/\"\r\n          onChange={({ file }) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file.originFileObj);\r\n            reader.onload = (event) => {\r\n              setPreview(event.target.result);\r\n            };\r\n            setFileList(fileList);\r\n            setFileName(file.name);\r\n          }}\r\n          method=\"get\"\r\n        >\r\n          <span>\r\n            Arrastra tu documento\r\n            <br /> aqui o haz Clic\r\n          </span>\r\n        </Dragger>\r\n      ) : (\r\n        <div className=\"content-preview-document\">\r\n          <div className=\"screen-hover-action\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setPreviewVisible(!previewVisible);\r\n              }}\r\n            >\r\n              <img src={Show} alt=\"preview\" />\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setFileList([]);\r\n                setPreview(null);\r\n                setFileName(null);\r\n              }}\r\n            >\r\n              <img src={Delete} alt=\"eliminar\"/>\r\n            </button>\r\n          </div>\r\n          <img src={preview} alt=\"Preview\"/>\r\n        </div>\r\n      )}\r\n      <Modal\r\n        visible={previewVisible}\r\n        title={\r\n          <div className=\"form-modal\">\r\n            <div className=\"title-head-modal\">\r\n              <button\r\n                className=\"arrow-back-to\"\r\n                type=\"button\"\r\n                onClick={() => {\r\n                  setPreviewVisible(!previewVisible);\r\n                }}\r\n              >\r\n                <img src={Arrow} alt=\"backTo\" width=\"30\" />\r\n              </button>\r\n              <h1>{fileName}</h1>\r\n            </div>\r\n          </div>\r\n        }\r\n        closable={false}\r\n        footer={null}\r\n        style={{ top: \"20px\" }}\r\n      >\r\n        <Magnifier src={preview} />\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomFileUpload;\r\n","C:\\Users\\xxx\\Documents\\hfy-front-system\\src\\views\\Tenant\\sections\\sectionContractAvailable.jsx",["455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472"],{"ruleId":"473","replacedBy":"474"},{"ruleId":"475","replacedBy":"476"},{"ruleId":"477","severity":1,"message":"478","line":39,"column":20,"nodeType":"479","messageId":"480","endLine":39,"endColumn":25},{"ruleId":"477","severity":1,"message":"481","line":4,"column":8,"nodeType":"479","messageId":"480","endLine":4,"endColumn":15},{"ruleId":"477","severity":1,"message":"482","line":4,"column":40,"nodeType":"479","messageId":"480","endLine":4,"endColumn":45},{"ruleId":"483","severity":1,"message":"484","line":13,"column":1,"nodeType":"485","endLine":22,"endColumn":3},{"ruleId":"486","severity":1,"message":"487","line":125,"column":35,"nodeType":"488","messageId":"489","endLine":125,"endColumn":37},{"ruleId":"490","severity":1,"message":"491","line":906,"column":6,"nodeType":"492","endLine":906,"endColumn":8,"suggestions":"493"},{"ruleId":"490","severity":1,"message":"494","line":86,"column":6,"nodeType":"492","endLine":86,"endColumn":8,"suggestions":"495"},{"ruleId":"477","severity":1,"message":"496","line":52,"column":11,"nodeType":"479","messageId":"480","endLine":52,"endColumn":15},{"ruleId":"490","severity":1,"message":"497","line":86,"column":6,"nodeType":"492","endLine":86,"endColumn":8,"suggestions":"498"},{"ruleId":"499","severity":1,"message":"500","line":122,"column":23,"nodeType":"501","endLine":126,"endColumn":25},{"ruleId":"499","severity":1,"message":"500","line":156,"column":23,"nodeType":"501","endLine":160,"endColumn":25},{"ruleId":"499","severity":1,"message":"500","line":188,"column":19,"nodeType":"501","endLine":188,"endColumn":49},{"ruleId":"499","severity":1,"message":"500","line":191,"column":19,"nodeType":"501","endLine":191,"endColumn":44},{"ruleId":"477","severity":1,"message":"502","line":3,"column":18,"nodeType":"479","messageId":"480","endLine":3,"endColumn":24},{"ruleId":"477","severity":1,"message":"503","line":3,"column":26,"nodeType":"479","messageId":"480","endLine":3,"endColumn":30},{"ruleId":"477","severity":1,"message":"504","line":3,"column":32,"nodeType":"479","messageId":"480","endLine":3,"endColumn":37},{"ruleId":"477","severity":1,"message":"481","line":4,"column":8,"nodeType":"479","messageId":"480","endLine":4,"endColumn":15},{"ruleId":"477","severity":1,"message":"505","line":9,"column":8,"nodeType":"479","messageId":"480","endLine":9,"endColumn":21},{"ruleId":"477","severity":1,"message":"506","line":168,"column":13,"nodeType":"479","messageId":"480","endLine":168,"endColumn":27},{"ruleId":"477","severity":1,"message":"506","line":190,"column":13,"nodeType":"479","messageId":"480","endLine":190,"endColumn":27},{"ruleId":"477","severity":1,"message":"506","line":250,"column":13,"nodeType":"479","messageId":"480","endLine":250,"endColumn":27},{"ruleId":"490","severity":1,"message":"507","line":311,"column":6,"nodeType":"492","endLine":311,"endColumn":8,"suggestions":"508"},{"ruleId":"477","severity":1,"message":"509","line":448,"column":24,"nodeType":"479","messageId":"480","endLine":448,"endColumn":39},{"ruleId":"477","severity":1,"message":"502","line":5,"column":3,"nodeType":"479","messageId":"480","endLine":5,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":8},{"ruleId":"477","severity":1,"message":"510","line":9,"column":3,"nodeType":"479","messageId":"480","endLine":9,"endColumn":13},{"ruleId":"477","severity":1,"message":"511","line":10,"column":3,"nodeType":"479","messageId":"480","endLine":10,"endColumn":11},{"ruleId":"477","severity":1,"message":"512","line":15,"column":8,"nodeType":"479","messageId":"480","endLine":15,"endColumn":18},{"ruleId":"477","severity":1,"message":"513","line":16,"column":8,"nodeType":"479","messageId":"480","endLine":16,"endColumn":23},{"ruleId":"477","severity":1,"message":"514","line":17,"column":8,"nodeType":"479","messageId":"480","endLine":17,"endColumn":17},{"ruleId":"477","severity":1,"message":"515","line":18,"column":8,"nodeType":"479","messageId":"480","endLine":18,"endColumn":18},{"ruleId":"477","severity":1,"message":"516","line":19,"column":8,"nodeType":"479","messageId":"480","endLine":19,"endColumn":20},{"ruleId":"477","severity":1,"message":"505","line":20,"column":8,"nodeType":"479","messageId":"480","endLine":20,"endColumn":21},{"ruleId":"477","severity":1,"message":"517","line":38,"column":9,"nodeType":"479","messageId":"480","endLine":38,"endColumn":15},{"ruleId":"477","severity":1,"message":"518","line":65,"column":9,"nodeType":"479","messageId":"480","endLine":65,"endColumn":18},{"ruleId":"477","severity":1,"message":"519","line":66,"column":9,"nodeType":"479","messageId":"480","endLine":66,"endColumn":21},{"ruleId":"477","severity":1,"message":"506","line":237,"column":13,"nodeType":"479","messageId":"480","endLine":237,"endColumn":27},{"ruleId":"490","severity":1,"message":"520","line":251,"column":6,"nodeType":"492","endLine":251,"endColumn":8,"suggestions":"521"},{"ruleId":"477","severity":1,"message":"509","line":322,"column":24,"nodeType":"479","messageId":"480","endLine":322,"endColumn":39},{"ruleId":"477","severity":1,"message":"522","line":3,"column":8,"nodeType":"479","messageId":"480","endLine":3,"endColumn":13},{"ruleId":"477","severity":1,"message":"510","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":13},{"ruleId":"477","severity":1,"message":"511","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":11},{"ruleId":"477","severity":1,"message":"518","line":26,"column":9,"nodeType":"479","messageId":"480","endLine":26,"endColumn":18},{"ruleId":"477","severity":1,"message":"523","line":135,"column":27,"nodeType":"479","messageId":"480","endLine":135,"endColumn":42},{"ruleId":"477","severity":1,"message":"522","line":4,"column":8,"nodeType":"479","messageId":"480","endLine":4,"endColumn":13},{"ruleId":"477","severity":1,"message":"524","line":7,"column":9,"nodeType":"479","messageId":"480","endLine":7,"endColumn":17},{"ruleId":"477","severity":1,"message":"525","line":1,"column":17,"nodeType":"479","messageId":"480","endLine":1,"endColumn":26},{"ruleId":"477","severity":1,"message":"526","line":1,"column":28,"nodeType":"479","messageId":"480","endLine":1,"endColumn":36},{"ruleId":"477","severity":1,"message":"527","line":2,"column":10,"nodeType":"479","messageId":"480","endLine":2,"endColumn":17},{"ruleId":"477","severity":1,"message":"528","line":3,"column":10,"nodeType":"479","messageId":"480","endLine":3,"endColumn":16},{"ruleId":"477","severity":1,"message":"504","line":3,"column":32,"nodeType":"479","messageId":"480","endLine":3,"endColumn":37},{"ruleId":"477","severity":1,"message":"512","line":9,"column":8,"nodeType":"479","messageId":"480","endLine":9,"endColumn":18},{"ruleId":"477","severity":1,"message":"513","line":10,"column":8,"nodeType":"479","messageId":"480","endLine":10,"endColumn":23},{"ruleId":"477","severity":1,"message":"514","line":11,"column":8,"nodeType":"479","messageId":"480","endLine":11,"endColumn":17},{"ruleId":"477","severity":1,"message":"515","line":12,"column":8,"nodeType":"479","messageId":"480","endLine":12,"endColumn":18},{"ruleId":"477","severity":1,"message":"516","line":13,"column":8,"nodeType":"479","messageId":"480","endLine":13,"endColumn":20},{"ruleId":"477","severity":1,"message":"522","line":5,"column":8,"nodeType":"479","messageId":"480","endLine":5,"endColumn":13},{"ruleId":"477","severity":1,"message":"528","line":6,"column":10,"nodeType":"479","messageId":"480","endLine":6,"endColumn":16},{"ruleId":"477","severity":1,"message":"502","line":6,"column":18,"nodeType":"479","messageId":"480","endLine":6,"endColumn":24},{"ruleId":"477","severity":1,"message":"503","line":6,"column":26,"nodeType":"479","messageId":"480","endLine":6,"endColumn":30},{"ruleId":"477","severity":1,"message":"504","line":6,"column":32,"nodeType":"479","messageId":"480","endLine":6,"endColumn":37},{"ruleId":"477","severity":1,"message":"522","line":2,"column":8,"nodeType":"479","messageId":"480","endLine":2,"endColumn":13},{"ruleId":"477","severity":1,"message":"528","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":7},{"ruleId":"477","severity":1,"message":"529","line":18,"column":3,"nodeType":"479","messageId":"480","endLine":18,"endColumn":21},{"ruleId":"477","severity":1,"message":"530","line":19,"column":3,"nodeType":"479","messageId":"480","endLine":19,"endColumn":15},{"ruleId":"490","severity":1,"message":"531","line":66,"column":6,"nodeType":"492","endLine":66,"endColumn":25,"suggestions":"532"},{"ruleId":"477","severity":1,"message":"533","line":341,"column":35,"nodeType":"479","messageId":"480","endLine":341,"endColumn":49},{"ruleId":"477","severity":1,"message":"534","line":341,"column":51,"nodeType":"479","messageId":"480","endLine":341,"endColumn":56},{"ruleId":"477","severity":1,"message":"522","line":2,"column":8,"nodeType":"479","messageId":"480","endLine":2,"endColumn":13},{"ruleId":"477","severity":1,"message":"535","line":4,"column":8,"nodeType":"479","messageId":"480","endLine":4,"endColumn":20},{"ruleId":"477","severity":1,"message":"528","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":7},{"ruleId":"477","severity":1,"message":"525","line":1,"column":17,"nodeType":"479","messageId":"480","endLine":1,"endColumn":26},{"ruleId":"477","severity":1,"message":"522","line":2,"column":8,"nodeType":"479","messageId":"480","endLine":2,"endColumn":13},{"ruleId":"477","severity":1,"message":"528","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":7},{"ruleId":"477","severity":1,"message":"536","line":44,"column":10,"nodeType":"479","messageId":"480","endLine":44,"endColumn":18},{"ruleId":"477","severity":1,"message":"537","line":44,"column":20,"nodeType":"479","messageId":"480","endLine":44,"endColumn":31},{"ruleId":"477","severity":1,"message":"533","line":125,"column":31,"nodeType":"479","messageId":"480","endLine":125,"endColumn":45},{"ruleId":"477","severity":1,"message":"534","line":125,"column":47,"nodeType":"479","messageId":"480","endLine":125,"endColumn":52},{"ruleId":"477","severity":1,"message":"481","line":2,"column":8,"nodeType":"479","messageId":"480","endLine":2,"endColumn":15},{"ruleId":"538","severity":1,"message":"539","line":15,"column":5,"nodeType":"540","messageId":"541","endLine":34,"endColumn":6},{"ruleId":"538","severity":1,"message":"539","line":43,"column":5,"nodeType":"540","messageId":"541","endLine":84,"endColumn":6},{"ruleId":"538","severity":1,"message":"539","line":97,"column":5,"nodeType":"540","messageId":"541","endLine":117,"endColumn":6},{"ruleId":"486","severity":1,"message":"487","line":145,"column":18,"nodeType":"488","messageId":"489","endLine":145,"endColumn":20},{"ruleId":"486","severity":1,"message":"487","line":168,"column":29,"nodeType":"488","messageId":"489","endLine":168,"endColumn":31},{"ruleId":"486","severity":1,"message":"487","line":183,"column":22,"nodeType":"488","messageId":"489","endLine":183,"endColumn":24},{"ruleId":"486","severity":1,"message":"487","line":185,"column":22,"nodeType":"488","messageId":"489","endLine":185,"endColumn":24},{"ruleId":"477","severity":1,"message":"542","line":5,"column":10,"nodeType":"479","messageId":"480","endLine":5,"endColumn":18},{"ruleId":"477","severity":1,"message":"543","line":5,"column":45,"nodeType":"479","messageId":"480","endLine":5,"endColumn":51},{"ruleId":"477","severity":1,"message":"544","line":7,"column":8,"nodeType":"479","messageId":"480","endLine":7,"endColumn":14},{"ruleId":"477","severity":1,"message":"524","line":11,"column":9,"nodeType":"479","messageId":"480","endLine":11,"endColumn":17},{"ruleId":"477","severity":1,"message":"545","line":17,"column":5,"nodeType":"479","messageId":"480","endLine":17,"endColumn":22},{"ruleId":"477","severity":1,"message":"533","line":128,"column":31,"nodeType":"479","messageId":"480","endLine":128,"endColumn":45},{"ruleId":"477","severity":1,"message":"534","line":128,"column":47,"nodeType":"479","messageId":"480","endLine":128,"endColumn":52},{"ruleId":"477","severity":1,"message":"522","line":2,"column":8,"nodeType":"479","messageId":"480","endLine":2,"endColumn":13},{"ruleId":"477","severity":1,"message":"525","line":1,"column":17,"nodeType":"479","messageId":"480","endLine":1,"endColumn":26},{"ruleId":"477","severity":1,"message":"546","line":1,"column":38,"nodeType":"479","messageId":"480","endLine":1,"endColumn":44},{"ruleId":"477","severity":1,"message":"504","line":3,"column":32,"nodeType":"479","messageId":"480","endLine":3,"endColumn":37},{"ruleId":"477","severity":1,"message":"509","line":173,"column":24,"nodeType":"479","messageId":"480","endLine":173,"endColumn":39},{"ruleId":"477","severity":1,"message":"525","line":1,"column":17,"nodeType":"479","messageId":"480","endLine":1,"endColumn":26},{"ruleId":"477","severity":1,"message":"546","line":1,"column":38,"nodeType":"479","messageId":"480","endLine":1,"endColumn":44},{"ruleId":"477","severity":1,"message":"502","line":3,"column":18,"nodeType":"479","messageId":"480","endLine":3,"endColumn":24},{"ruleId":"477","severity":1,"message":"503","line":3,"column":26,"nodeType":"479","messageId":"480","endLine":3,"endColumn":30},{"ruleId":"477","severity":1,"message":"504","line":3,"column":32,"nodeType":"479","messageId":"480","endLine":3,"endColumn":37},{"ruleId":"477","severity":1,"message":"547","line":3,"column":46,"nodeType":"479","messageId":"480","endLine":3,"endColumn":52},{"ruleId":"477","severity":1,"message":"548","line":3,"column":54,"nodeType":"479","messageId":"480","endLine":3,"endColumn":61},{"ruleId":"477","severity":1,"message":"530","line":4,"column":10,"nodeType":"479","messageId":"480","endLine":4,"endColumn":22},{"ruleId":"477","severity":1,"message":"549","line":5,"column":8,"nodeType":"479","messageId":"480","endLine":5,"endColumn":20},{"ruleId":"477","severity":1,"message":"550","line":31,"column":9,"nodeType":"479","messageId":"480","endLine":31,"endColumn":13},{"ruleId":"477","severity":1,"message":"551","line":127,"column":9,"nodeType":"479","messageId":"480","endLine":127,"endColumn":19},{"ruleId":"477","severity":1,"message":"509","line":205,"column":24,"nodeType":"479","messageId":"480","endLine":205,"endColumn":39},{"ruleId":"477","severity":1,"message":"522","line":3,"column":8,"nodeType":"479","messageId":"480","endLine":3,"endColumn":13},{"ruleId":"477","severity":1,"message":"528","line":5,"column":3,"nodeType":"479","messageId":"480","endLine":5,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":8},{"ruleId":"477","severity":1,"message":"552","line":12,"column":3,"nodeType":"479","messageId":"480","endLine":12,"endColumn":9},{"ruleId":"477","severity":1,"message":"553","line":13,"column":3,"nodeType":"479","messageId":"480","endLine":13,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":14,"column":3,"nodeType":"479","messageId":"480","endLine":14,"endColumn":10},{"ruleId":"477","severity":1,"message":"528","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":9,"column":3,"nodeType":"479","messageId":"480","endLine":9,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":10,"column":3,"nodeType":"479","messageId":"480","endLine":10,"endColumn":8},{"ruleId":"477","severity":1,"message":"553","line":15,"column":3,"nodeType":"479","messageId":"480","endLine":15,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":16,"column":3,"nodeType":"479","messageId":"480","endLine":16,"endColumn":10},{"ruleId":"477","severity":1,"message":"555","line":20,"column":8,"nodeType":"479","messageId":"480","endLine":20,"endColumn":19},{"ruleId":"477","severity":1,"message":"533","line":162,"column":31,"nodeType":"479","messageId":"480","endLine":162,"endColumn":45},{"ruleId":"477","severity":1,"message":"534","line":162,"column":47,"nodeType":"479","messageId":"480","endLine":162,"endColumn":52},{"ruleId":"477","severity":1,"message":"522","line":4,"column":8,"nodeType":"479","messageId":"480","endLine":4,"endColumn":13},{"ruleId":"477","severity":1,"message":"528","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":9,"column":3,"nodeType":"479","messageId":"480","endLine":9,"endColumn":8},{"ruleId":"477","severity":1,"message":"553","line":14,"column":3,"nodeType":"479","messageId":"480","endLine":14,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":15,"column":3,"nodeType":"479","messageId":"480","endLine":15,"endColumn":10},{"ruleId":"477","severity":1,"message":"556","line":16,"column":3,"nodeType":"479","messageId":"480","endLine":16,"endColumn":8},{"ruleId":"477","severity":1,"message":"555","line":18,"column":8,"nodeType":"479","messageId":"480","endLine":18,"endColumn":19},{"ruleId":"477","severity":1,"message":"533","line":77,"column":27,"nodeType":"479","messageId":"480","endLine":77,"endColumn":41},{"ruleId":"477","severity":1,"message":"534","line":77,"column":43,"nodeType":"479","messageId":"480","endLine":77,"endColumn":48},{"ruleId":"477","severity":1,"message":"533","line":116,"column":27,"nodeType":"479","messageId":"480","endLine":116,"endColumn":41},{"ruleId":"477","severity":1,"message":"534","line":116,"column":43,"nodeType":"479","messageId":"480","endLine":116,"endColumn":48},{"ruleId":"477","severity":1,"message":"533","line":143,"column":27,"nodeType":"479","messageId":"480","endLine":143,"endColumn":41},{"ruleId":"477","severity":1,"message":"534","line":143,"column":43,"nodeType":"479","messageId":"480","endLine":143,"endColumn":48},{"ruleId":"477","severity":1,"message":"522","line":3,"column":8,"nodeType":"479","messageId":"480","endLine":3,"endColumn":13},{"ruleId":"477","severity":1,"message":"528","line":5,"column":3,"nodeType":"479","messageId":"480","endLine":5,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":8},{"ruleId":"477","severity":1,"message":"553","line":13,"column":3,"nodeType":"479","messageId":"480","endLine":13,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":14,"column":3,"nodeType":"479","messageId":"480","endLine":14,"endColumn":10},{"ruleId":"477","severity":1,"message":"556","line":15,"column":3,"nodeType":"479","messageId":"480","endLine":15,"endColumn":8},{"ruleId":"477","severity":1,"message":"517","line":19,"column":9,"nodeType":"479","messageId":"480","endLine":19,"endColumn":15},{"ruleId":"477","severity":1,"message":"557","line":33,"column":10,"nodeType":"479","messageId":"480","endLine":33,"endColumn":18},{"ruleId":"477","severity":1,"message":"528","line":3,"column":3,"nodeType":"479","messageId":"480","endLine":3,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":4,"column":3,"nodeType":"479","messageId":"480","endLine":4,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":5,"column":3,"nodeType":"479","messageId":"480","endLine":5,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":8},{"ruleId":"477","severity":1,"message":"558","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":8},{"ruleId":"477","severity":1,"message":"559","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":6},{"ruleId":"477","severity":1,"message":"560","line":9,"column":3,"nodeType":"479","messageId":"480","endLine":9,"endColumn":6},{"ruleId":"477","severity":1,"message":"552","line":10,"column":3,"nodeType":"479","messageId":"480","endLine":10,"endColumn":9},{"ruleId":"477","severity":1,"message":"553","line":11,"column":3,"nodeType":"479","messageId":"480","endLine":11,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":12,"column":3,"nodeType":"479","messageId":"480","endLine":12,"endColumn":10},{"ruleId":"477","severity":1,"message":"556","line":14,"column":3,"nodeType":"479","messageId":"480","endLine":14,"endColumn":8},{"ruleId":"477","severity":1,"message":"561","line":18,"column":9,"nodeType":"479","messageId":"480","endLine":18,"endColumn":16},{"ruleId":"477","severity":1,"message":"535","line":5,"column":8,"nodeType":"479","messageId":"480","endLine":5,"endColumn":20},{"ruleId":"477","severity":1,"message":"528","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":9,"column":3,"nodeType":"479","messageId":"480","endLine":9,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":10,"column":3,"nodeType":"479","messageId":"480","endLine":10,"endColumn":8},{"ruleId":"477","severity":1,"message":"553","line":15,"column":3,"nodeType":"479","messageId":"480","endLine":15,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":16,"column":3,"nodeType":"479","messageId":"480","endLine":16,"endColumn":10},{"ruleId":"477","severity":1,"message":"528","line":3,"column":3,"nodeType":"479","messageId":"480","endLine":3,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":4,"column":3,"nodeType":"479","messageId":"480","endLine":4,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":5,"column":3,"nodeType":"479","messageId":"480","endLine":5,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":8},{"ruleId":"477","severity":1,"message":"553","line":11,"column":3,"nodeType":"479","messageId":"480","endLine":11,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":12,"column":3,"nodeType":"479","messageId":"480","endLine":12,"endColumn":10},{"ruleId":"477","severity":1,"message":"528","line":4,"column":3,"nodeType":"479","messageId":"480","endLine":4,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":5,"column":3,"nodeType":"479","messageId":"480","endLine":5,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":8},{"ruleId":"477","severity":1,"message":"553","line":12,"column":3,"nodeType":"479","messageId":"480","endLine":12,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":13,"column":3,"nodeType":"479","messageId":"480","endLine":13,"endColumn":10},{"ruleId":"477","severity":1,"message":"555","line":16,"column":8,"nodeType":"479","messageId":"480","endLine":16,"endColumn":19},{"ruleId":"477","severity":1,"message":"533","line":127,"column":27,"nodeType":"479","messageId":"480","endLine":127,"endColumn":41},{"ruleId":"477","severity":1,"message":"534","line":127,"column":43,"nodeType":"479","messageId":"480","endLine":127,"endColumn":48},{"ruleId":"477","severity":1,"message":"562","line":127,"column":50,"nodeType":"479","messageId":"480","endLine":127,"endColumn":60},{"ruleId":"477","severity":1,"message":"533","line":153,"column":27,"nodeType":"479","messageId":"480","endLine":153,"endColumn":41},{"ruleId":"477","severity":1,"message":"534","line":153,"column":43,"nodeType":"479","messageId":"480","endLine":153,"endColumn":48},{"ruleId":"477","severity":1,"message":"562","line":153,"column":50,"nodeType":"479","messageId":"480","endLine":153,"endColumn":60},{"ruleId":"477","severity":1,"message":"533","line":180,"column":27,"nodeType":"479","messageId":"480","endLine":180,"endColumn":41},{"ruleId":"477","severity":1,"message":"534","line":180,"column":43,"nodeType":"479","messageId":"480","endLine":180,"endColumn":48},{"ruleId":"477","severity":1,"message":"562","line":180,"column":50,"nodeType":"479","messageId":"480","endLine":180,"endColumn":60},{"ruleId":"477","severity":1,"message":"528","line":3,"column":3,"nodeType":"479","messageId":"480","endLine":3,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":4,"column":3,"nodeType":"479","messageId":"480","endLine":4,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":5,"column":3,"nodeType":"479","messageId":"480","endLine":5,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":8},{"ruleId":"477","severity":1,"message":"558","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":8},{"ruleId":"477","severity":1,"message":"553","line":11,"column":3,"nodeType":"479","messageId":"480","endLine":11,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":12,"column":3,"nodeType":"479","messageId":"480","endLine":12,"endColumn":10},{"ruleId":"477","severity":1,"message":"556","line":13,"column":3,"nodeType":"479","messageId":"480","endLine":13,"endColumn":8},{"ruleId":"477","severity":1,"message":"555","line":15,"column":8,"nodeType":"479","messageId":"480","endLine":15,"endColumn":19},{"ruleId":"477","severity":1,"message":"528","line":3,"column":3,"nodeType":"479","messageId":"480","endLine":3,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":4,"column":3,"nodeType":"479","messageId":"480","endLine":4,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":5,"column":3,"nodeType":"479","messageId":"480","endLine":5,"endColumn":7},{"ruleId":"477","severity":1,"message":"504","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":8},{"ruleId":"477","severity":1,"message":"553","line":11,"column":3,"nodeType":"479","messageId":"480","endLine":11,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":12,"column":3,"nodeType":"479","messageId":"480","endLine":12,"endColumn":10},{"ruleId":"477","severity":1,"message":"556","line":13,"column":3,"nodeType":"479","messageId":"480","endLine":13,"endColumn":8},{"ruleId":"477","severity":1,"message":"555","line":16,"column":8,"nodeType":"479","messageId":"480","endLine":16,"endColumn":19},{"ruleId":"477","severity":1,"message":"481","line":3,"column":8,"nodeType":"479","messageId":"480","endLine":3,"endColumn":15},{"ruleId":"477","severity":1,"message":"528","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":7},{"ruleId":"477","severity":1,"message":"558","line":10,"column":3,"nodeType":"479","messageId":"480","endLine":10,"endColumn":8},{"ruleId":"477","severity":1,"message":"559","line":11,"column":3,"nodeType":"479","messageId":"480","endLine":11,"endColumn":6},{"ruleId":"477","severity":1,"message":"560","line":12,"column":3,"nodeType":"479","messageId":"480","endLine":12,"endColumn":6},{"ruleId":"477","severity":1,"message":"552","line":13,"column":3,"nodeType":"479","messageId":"480","endLine":13,"endColumn":9},{"ruleId":"477","severity":1,"message":"553","line":14,"column":3,"nodeType":"479","messageId":"480","endLine":14,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":15,"column":3,"nodeType":"479","messageId":"480","endLine":15,"endColumn":10},{"ruleId":"477","severity":1,"message":"556","line":17,"column":3,"nodeType":"479","messageId":"480","endLine":17,"endColumn":8},{"ruleId":"477","severity":1,"message":"525","line":1,"column":27,"nodeType":"479","messageId":"480","endLine":1,"endColumn":36},{"ruleId":"477","severity":1,"message":"522","line":2,"column":8,"nodeType":"479","messageId":"480","endLine":2,"endColumn":13},{"ruleId":"477","severity":1,"message":"481","line":3,"column":8,"nodeType":"479","messageId":"480","endLine":3,"endColumn":15},{"ruleId":"477","severity":1,"message":"535","line":4,"column":8,"nodeType":"479","messageId":"480","endLine":4,"endColumn":20},{"ruleId":"477","severity":1,"message":"528","line":6,"column":3,"nodeType":"479","messageId":"480","endLine":6,"endColumn":9},{"ruleId":"477","severity":1,"message":"502","line":7,"column":3,"nodeType":"479","messageId":"480","endLine":7,"endColumn":9},{"ruleId":"477","severity":1,"message":"503","line":8,"column":3,"nodeType":"479","messageId":"480","endLine":8,"endColumn":7},{"ruleId":"477","severity":1,"message":"558","line":10,"column":3,"nodeType":"479","messageId":"480","endLine":10,"endColumn":8},{"ruleId":"477","severity":1,"message":"559","line":11,"column":3,"nodeType":"479","messageId":"480","endLine":11,"endColumn":6},{"ruleId":"477","severity":1,"message":"560","line":12,"column":3,"nodeType":"479","messageId":"480","endLine":12,"endColumn":6},{"ruleId":"477","severity":1,"message":"553","line":14,"column":3,"nodeType":"479","messageId":"480","endLine":14,"endColumn":7},{"ruleId":"477","severity":1,"message":"554","line":15,"column":3,"nodeType":"479","messageId":"480","endLine":15,"endColumn":10},{"ruleId":"477","severity":1,"message":"529","line":20,"column":3,"nodeType":"479","messageId":"480","endLine":20,"endColumn":21},{"ruleId":"477","severity":1,"message":"530","line":21,"column":3,"nodeType":"479","messageId":"480","endLine":21,"endColumn":15},{"ruleId":"477","severity":1,"message":"563","line":23,"column":3,"nodeType":"479","messageId":"480","endLine":23,"endColumn":16},{"ruleId":"477","severity":1,"message":"517","line":28,"column":9,"nodeType":"479","messageId":"480","endLine":28,"endColumn":15},{"ruleId":"477","severity":1,"message":"564","line":32,"column":10,"nodeType":"479","messageId":"480","endLine":32,"endColumn":19},{"ruleId":"477","severity":1,"message":"565","line":36,"column":9,"nodeType":"479","messageId":"480","endLine":36,"endColumn":20},"no-native-reassign",["566"],"no-negated-in-lhs",["567"],"no-unused-vars","'token' is assigned a value but never used.","Identifier","unusedVar","'isEmpty' is defined but never used.","'PURGE' is defined but never used.","import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handlerAsyncCallAppis', 'handlerCallGetInvitationUser', and 'props'. Either include them or remove the dependency array.","ArrayExpression",["568"],"React Hook useEffect has missing dependencies: 'handlerAsyncCallApiis' and 'handlerFinishSession'. Either include them or remove the dependency array.",["569"],"'args' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dataProfile' and 'history'. Either include them or remove the dependency array.",["570"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Avatar' is defined but never used.","'Rate' is defined but never used.","'Modal' is defined but never used.","'IconArroRight' is defined but never used.","'responseResult' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'handlerCalllSyncApis'. Either include it or remove the dependency array.",["571"],"'dataProfileMenu' is assigned a value but never used.","'Pagination' is defined but never used.","'Carousel' is defined but never used.","'Highcharts' is defined but never used.","'HighchartsReact' is defined but never used.","'IconOwner' is defined but never used.","'IconWallet' is defined but never used.","'IconActivity' is defined but never used.","'Option' is assigned a value but never used.","'dotChange' is assigned a value but never used.","'contentStyle' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'handlerCallGetAllCustomerTenantById' and 'handlerCallGetAllDocumentTypes'. Either include them or remove the dependency array.",["572"],"'isNil' is defined but never used.","'configureOption' is assigned a value but never used.","'TextArea' is assigned a value but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'connect' is defined but never used.","'Layout' is defined but never used.","'InfoCircleOutlined' is defined but never used.","'UserOutlined' is defined but never used.","React Hook useEffect has a missing dependency: 'dataForm'. Either include it or remove the dependency array. You can also do a functional update 'setDataForm(d => ...)' if you only need 'dataForm' in the 'setDataForm' call.",["573"],"'formattedValue' is assigned a value but never used.","'value' is assigned a value but never used.","'NumberFormat' is defined but never used.","'property' is assigned a value but never used.","'setProperty' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'Timeline' is defined but never used.","'Upload' is defined but never used.","'Delete' is defined but never used.","'onRegisterPayment' is assigned a value but never used.","'useRef' is defined but never used.","'Button' is defined but never used.","'message' is defined but never used.","'IconCalendar' is defined but never used.","'Step' is assigned a value but never used.","'stepsOwner' is assigned a value but never used.","'Select' is defined but never used.","'Spin' is defined but never used.","'Tooltip' is defined but never used.","'IconProfile' is defined but never used.","'Radio' is defined but never used.","'dataForm' is assigned a value but never used.","'Input' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Dragger' is assigned a value but never used.","'floatValue' is assigned a value but never used.","'CloseOutlined' is defined but never used.","'signature' is assigned a value but never used.","'LoadingSpin' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"574","fix":"575"},{"desc":"576","fix":"577"},{"desc":"578","fix":"579"},{"desc":"580","fix":"581"},{"desc":"582","fix":"583"},{"desc":"584","fix":"585"},"Update the dependencies array to be: [handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",{"range":"586","text":"587"},"Update the dependencies array to be: [handlerAsyncCallApiis, handlerFinishSession]",{"range":"588","text":"589"},"Update the dependencies array to be: [dataProfile, history]",{"range":"590","text":"591"},"Update the dependencies array to be: [handlerCalllSyncApis]",{"range":"592","text":"593"},"Update the dependencies array to be: [handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",{"range":"594","text":"595"},"Update the dependencies array to be: [dataForm, dataZipCodeAdress]",{"range":"596","text":"597"},[32193,32195],"[handlerAsyncCallAppis, handlerCallGetInvitationUser, props]",[2572,2574],"[handlerAsyncCallApiis, handlerFinishSession]",[3024,3026],"[dataProfile, history]",[9855,9857],"[handlerCalllSyncApis]",[7945,7947],"[handlerCallGetAllCustomerTenantById, handlerCallGetAllDocumentTypes]",[1539,1558],"[dataForm, dataZipCodeAdress]"]